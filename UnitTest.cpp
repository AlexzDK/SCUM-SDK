#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UBP_MountTypeWeaponHolsterRifle_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponHolsterRifle__BP_MountTypeWeaponHolsterRifle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponHolsterRifle_C, 0x0028);
		}

		// class UABP_Prisoner_WheelBarrow_C : public UPrisonerAnimInstance_WheelBarrow
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner_WheelBarrow__ABP_Prisoner_WheelBarrow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, UnknownData_SFYU, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_Fabrik_2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_LocalToComponentSpace_2, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_Fabrik, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendSpacePlayer_3, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendListByBool_5, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendListByBool_4, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendSpacePlayer_2, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_LayeredBoneBlend, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SequencePlayer_3, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_ModifyBone_2, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_ModifyBone, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_Root, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendSpacePlayer, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SaveCachedPose, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_UseCachedPose_2, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_UseCachedPose, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendListByBool_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SpringBone_2, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_LocalToComponentSpace, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_ComponentToLocalSpace, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_LegIK, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SpringBone, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendListByBool_2, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_BlendListByBool, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SequencePlayer_2, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_WheelBarrow_C, AnimGraphNode_SequencePlayer, 0x1618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_WheelBarrow_C, 0x1698);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_50V7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class APrisoner_Head_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Head__Prisoner_Head_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Head_C, 0x0770);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class ADcxVehicle : public APawn
		TEST_METHOD(Class__DcxVehicle__DcxVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADcxVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADcxVehicle, VehicleWheels, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADcxVehicle, 0x0290);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_IMSQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_V3KB, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_RTVI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_DQ8E, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_6OHP, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_3EIK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_LMYD, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_NIAC, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_71KN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_DEZI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_7KVY, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_GSAG, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_SMDH, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_3FJK, 0x04B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04C0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_GV6R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_KF2G, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_K1R1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_5NKY, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_8MEH, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_G39A, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_AA4H, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_4PIN, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_Q3RN, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_YCYI, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_WYTV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_AH61, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_PDHX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_MTL9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class ADcxVehicle4W : public ADcxVehicle
		TEST_METHOD(Class__DcxVehicle__DcxVehicle4W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADcxVehicle4W, 0x0290);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDcxVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__DcxVehicle__DcxVehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleAnimInstance, UnknownData_ANCS, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleAnimInstance, UnknownData_TROK, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleAnimInstance, VehicleWheels, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleAnimInstance, UnknownData_NGBW, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleAnimInstance, 0x0A3C);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_5VFL, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDcxVehicleWheelsComponent : public UPawnMovementComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleWheelsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, UnknownData_SBKN, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, ChassisMass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, InertiaTensorScale, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, WheelConfigurations, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, TireLoadFilter, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, bUseAvoidance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, UnknownData_BSK3, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceWeight, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceUID, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceGroup, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, GroupsToAvoid, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, GroupsToIgnore, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, ThresholdLongitudinalSpeed, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, LowForwardSpeedSubStepCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, HighForwardSpeedSubStepCount, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, DragCoefficient, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, DragArea, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, ThrottleRate, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, BrakeRate, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, HandbrakeRate, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, SteerRate, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceRadius, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceHeight, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceConsiderationRadius, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceThrottleStep, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceBrakeStep, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceSteerStep, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, bRecreateRequired, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, UnknownData_8RLA, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, RawInput, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, SmoothAnalogControls, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, ReplicatedState, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, bWasAvoidanceUpdated, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, UnknownData_W013, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceLockVelocity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, AvoidanceLockTimer, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsComponent, UnknownData_PZUY, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleWheelsComponent, 0x0240);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_SRU8, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_C48A, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_NLES, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UAddPatchToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolBuilder, UnknownData_8BU1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolBuilder, 0x0030);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_XF6S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_V397, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UAddPatchToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Width, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Rotation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Subdivisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Shift, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolProperties, 0x0070);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_AIWT, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_KR16, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_ZWM5, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UAddPatchTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPatchTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_HWX5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_ELUG, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchTool, 0x0100);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UAddPrimitiveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveToolBuilder, UnknownData_OQE4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveToolBuilder, 0x0038);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_LKIG, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_VKA2, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_A2XL, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_9EIE, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UProceduralShapeToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ProceduralShapeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bInstanceIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PolygroupMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PlaceMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bSnapToGrid, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PivotLocation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_ZTWX, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Rotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bAlignShapeToPlacementSurface, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_T0WC, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralShapeToolProperties, 0x0070);
		}

		// class UDcxVehicleDriveComponent : public UDcxVehicleWheelsComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, EngineData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, GearboxData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, ClutchData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, bAutoReverse, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, UnknownData_0JGN, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, WrongDirectionThreshold, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, bAutoBrake, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, UnknownData_M7WY, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, StopThreshold, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent, SteerCurve, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveComponent, 0x03B8);
		}

		// class UProceduralRectangleToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Width, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Depth, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, WidthSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, DepthSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRectangleToolProperties, 0x0080);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UProceduralBoxToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, HeightSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralBoxToolProperties, 0x0088);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_QNN0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_31PU, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_9QBX, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UProceduralRoundedRectangleToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRoundedRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerSlices, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRoundedRectangleToolProperties, 0x0088);
		}

		// class UProceduralDiscToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, UnknownData_7Q0A, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralDiscToolProperties, 0x0080);
		}

		// class UDcxVehicleDriveComponent4W : public UDcxVehicleDriveComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent4W, DifferentialData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponent4W, AckermannGeometryAccuracy, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveComponent4W, 0x03D8);
		}

		// class UProceduralPuncturedDiscToolProperties : public UProceduralDiscToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralPuncturedDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, HoleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, UnknownData_WT2M, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralPuncturedDiscToolProperties, 0x0088);
		}

		// class UDcxVehicleDriveComponentNW : public UDcxVehicleDriveComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveComponentNW)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveComponentNW, 0x03B8);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_3TTZ, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UProceduralTorusToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralTorusToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MajorRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MinorRadius, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, TubeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, CrossSectionSlices, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralTorusToolProperties, 0x0080);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_5C2S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_8GIE, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_FO5Q, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDcxVehicleDriveComponentTank : public UDcxVehicleDriveComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveComponentTank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponentTank, DriveModel, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveComponentTank, UnknownData_AGS3, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveComponentTank, 0x03C0);
		}

		// class UProceduralCylinderToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralCylinderToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralCylinderToolProperties, 0x0080);
		}

		// class UDcxVehicleWheelsRawInput : public UObject
		TEST_METHOD(Class__DcxVehicle__DcxVehicleWheelsRawInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsRawInput, ThrottleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsRawInput, UnknownData_YWM9, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleWheelsRawInput, RawAnalogControls, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleWheelsRawInput, 0x0040);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UProceduralConeToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralConeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralConeToolProperties, 0x0080);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_41HI, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_5ORE, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_61JI, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_Y8MB, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_JV84, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class UDcxVehicleDriveRawInput : public UDcxVehicleWheelsRawInput
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveRawInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveRawInput, ClutchIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveRawInput, bGearUp, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveRawInput, bGearDown, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveRawInput, UnknownData_9E84, 0x0046);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveRawInput, 0x0048);
		}

		// class UProceduralArrowToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralArrowToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, RadialSlices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, TotalSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralArrowToolProperties, 0x0088);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_9ITF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UProceduralSphereToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphereToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LatitudeSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LongitudeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, UnknownData_870K, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphereToolProperties, 0x0080);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_C5UM, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDcxVehicleDriveRawInput4W : public UDcxVehicleDriveRawInput
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveRawInput4W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveRawInput4W, 0x0048);
		}

		// class UProceduralSphericalBoxToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphericalBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Subdivisions, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphericalBoxToolProperties, 0x0078);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_SNOD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class UDcxVehicleDriveRawInputNW : public UDcxVehicleDriveRawInput4W
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveRawInputNW)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveRawInputNW, 0x0048);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class ULastActorInfo : public UObject
		TEST_METHOD(Class__MeshModelingTools__LastActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, UnknownData_ZKI6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, Actor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, ShapeSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, MaterialProperties, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULastActorInfo, 0x0058);
		}

		// class UDcxVehicleDriveRawInputTank : public UDcxVehicleDriveRawInput
		TEST_METHOD(Class__DcxVehicle__DcxVehicleDriveRawInputTank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleDriveRawInputTank, UnknownData_3T63, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleDriveRawInputTank, 0x0050);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_TNKC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, bVisible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_HGYL, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_BXXJ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// class UAddPrimitiveTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_J5N1, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, LastGenerated, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, AssetName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_5O61, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveTool, 0x00F0);
		}

		// class ADcxVehicleNoDrive : public ADcxVehicle
		TEST_METHOD(Class__DcxVehicle__DcxVehicleNoDrive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADcxVehicleNoDrive, 0x0290);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDcxVehicleNoDriveComponent : public UDcxVehicleWheelsComponent
		TEST_METHOD(Class__DcxVehicle__DcxVehicleNoDriveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleNoDriveComponent, bUseRawInput, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleNoDriveComponent, UnknownData_FD2S, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleNoDriveComponent, MaxDriveTorque, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleNoDriveComponent, 0x0248);
		}

		// class UAddBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddBoxPrimitiveTool, 0x00F0);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UAddCylinderPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddCylinderPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddCylinderPrimitiveTool, 0x00F0);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UAddConePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddConePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddConePrimitiveTool, 0x00F0);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_HDNX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDcxVehicleNoDriveRawInput : public UDcxVehicleWheelsRawInput
		TEST_METHOD(Class__DcxVehicle__DcxVehicleNoDriveRawInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleNoDriveRawInput, 0x0040);
		}

		// class UAddRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRectanglePrimitiveTool, 0x00F0);
		}

		// class UAddRoundedRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRoundedRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRoundedRectanglePrimitiveTool, 0x00F0);
		}

		// class ADcxVehicleNW : public ADcxVehicle
		TEST_METHOD(Class__DcxVehicle__DcxVehicleNW)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADcxVehicleNW, 0x0290);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UAddDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddDiscPrimitiveTool, 0x00F0);
		}

		// class ADcxVehicleTank : public ADcxVehicle
		TEST_METHOD(Class__DcxVehicle__DcxVehicleTank)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADcxVehicleTank, 0x0290);
		}

		// class UAddPuncturedDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddPuncturedDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPuncturedDiscPrimitiveTool, 0x00F0);
		}

		// class UDcxVehicleTire : public UDataAsset
		TEST_METHOD(Class__DcxVehicle__DcxVehicleTire)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, UnknownData_GEC2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, LateralStiffnessX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, LateralStiffnessY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, LongitudinalStiffnessPerUnitGravity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, CamberStiffnessPerUnitGravity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, UnknownData_YPQE, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, FrictionVsSlipGraph, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDcxVehicleTire, DrivableSurfaceToTireFrictionPairs, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDcxVehicleTire, 0x00E0);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_TUCX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class UAddTorusPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddTorusPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddTorusPrimitiveTool, 0x00F0);
		}

		// class UDatasmithDecalComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithDecalComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, sortOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, DecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, Material, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDecalComponentTemplate, 0x0048);
		}

		// class UAddArrowPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddArrowPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddArrowPrimitiveTool, 0x00F0);
		}

		// class UAddSpherePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSpherePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSpherePrimitiveTool, 0x00F0);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UAddSphericalBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSphericalBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSphericalBoxPrimitiveTool, 0x00F0);
		}

		// class UAlignObjectsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolBuilder, 0x0028);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_2WRM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UAlignObjectsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_LN1T, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_SF5G, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, BoxPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_EZVI, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignX, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignY, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignZ, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_3YNL, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolProperties, 0x0070);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UAlignObjectsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_XAG4, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, AlignProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_JUGI, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsTool, 0x0140);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UBakeMeshAttributeMapsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolBuilder, UnknownData_HEJQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolBuilder, 0x0030);
		}

		// class UBakeMeshAttributeMapsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, MapType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_9VWY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Resolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_4JZ0, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayerNamesList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, bUseWorldSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_OA38, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Result, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolProperties, 0x0098);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class UBakedNormalMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedNormalMapToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedNormalMapToolProperties, 0x0060);
		}

		// class UBakedOcclusionMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, OcclusionRays, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, MaxDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, bGaussianBlur, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_GMLO, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BlurRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BiasAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_5WWX, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapToolProperties, 0x0078);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_A4QA, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UBakedOcclusionMapVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, BaseGrayLevel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, OcclusionMultiplier, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapVisualizationProperties, 0x0068);
		}

		// class UBakedCurvatureMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedCurvatureMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, CurvatureType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_VGUM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, ColorMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_C8KT, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, RangeMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, MinRangeMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, Clamping, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_QVWU, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, bGaussianBlur, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_OSGG, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, BlurRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_1DJ7, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedCurvatureMapToolProperties, 0x0080);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_00W6, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// class UBakedTexture2DImageProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedTexture2DImageProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, SourceTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UnknownData_5ZHH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedTexture2DImageProperties, 0x0070);
		}

		// class UBakeMeshAttributeMapsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, NormalMapProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, OcclusionMapProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CurvatureMapProps, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Texture2DProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, VisualizationProps, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_XMQM, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, PreviewMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_SCQ6, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedNormalMap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_4O2N, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedOcclusionMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_5MZ2, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedCurvatureMap, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_W76W, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedMeshPropertyMap, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_EQ2M, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedTexture2DImageMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyNormalMap, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapBlack, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapWhite, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsTool, 0x04D0);
		}

		// class UBakeTransformToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolBuilder, UnknownData_1V98, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolBuilder, 0x0030);
		}

		// class UBakeTransformToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bBakeRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, BakeScale, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bRecenterPivot, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, UnknownData_IRCW, 0x0063);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolProperties, 0x0068);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_EHRK, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UBakeTransformTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeTransformTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, UnknownData_9NPO, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformTool, 0x00B8);
		}

		// class UPhysicsObjectToolPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PhysicsObjectToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, ObjectName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, CollisionType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_DD8W, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_BBNQ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Spheres, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Boxes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, capsules, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Convexes, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsObjectToolPropertySet, 0x00B8);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_0U32, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_SIZN, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_NWZJ, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// class UCollisionGeometryVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CollisionGeometryVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, LineThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, bShowHidden, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_DHGR, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, Color, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_E9O6, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionGeometryVisualizationProperties, 0x0070);
		}

		// class UCombineMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolBuilder, UnknownData_B2GN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolBuilder, 0x0038);
		}

		// class UCombineMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, bIsDuplicateMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_GKH1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, WriteOutputTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_3Z9M, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolProperties, 0x0088);
		}

		// class UCombineMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, HandleSourceProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, UnknownData_7LGZ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesTool, 0x00B8);
		}

		// class UConvertToPolygonsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolBuilder, 0x0028);
		}

		// class UConvertToPolygonsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, ConversionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_YJ5H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bCalculateNormals, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bShowGroupColors, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_G7SD, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolProperties, 0x0070);
		}

		// class UConvertToPolygonsTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, PreviewMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, UnknownData_TK3U, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsTool, 0x03E0);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class UCSGMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bAttemptFixHoles, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, UnknownData_0WXG, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolProperties, 0x0068);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UCSGMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, CSGProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_MJ8Z, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, DrawnLineSet, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_89LA, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesTool, 0x0120);
		}

		// class UCSGMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolBuilder, 0x0030);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_UQD5, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_7J79, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_X7E5, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UDeformMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsToolBuilder, 0x0030);
		}

		// class UDeformMeshPolygonsTransformProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTransformProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, DeformationStrategy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, TransformMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectFaces, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSnapToWorldGrid, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bShowWireframe, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_QIKF, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, SelectedWeightScheme, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_BN8Y, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_UEQK, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, HandleWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bPostFixHandles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_HMJQ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTransformProperties, 0x0080);
		}

		// class UDeformMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_A9HK, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, DynamicMeshComponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, TransformProps, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_KR4V, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTool, 0x12F0);
		}

		// class UDisplaceMeshCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplacementType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_8TNZ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplaceIntensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, randomSeed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, Subdivisions, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMapsList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bInvertWeightMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bDisableSizeWarning, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_VQCP, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshCommonProperties, 0x0090);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UDisplaceMeshTextureMapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTextureMapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTextureMapProperties, DisplacementMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTextureMapProperties, 0x0068);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_SRXE, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UDisplaceMeshDirectionalFilterProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshDirectionalFilterProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, bEnableFilter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_7ILF, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterDirection, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_N5KZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshDirectionalFilterProperties, 0x0078);
		}

		// class UDisplaceMeshPerlinNoiseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshPerlinNoiseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshPerlinNoiseProperties, PerlinLayerProperties, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshPerlinNoiseProperties, 0x0070);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UDisplaceMeshSineWaveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshSineWaveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveFrequency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWavePhaseShift, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveDirection, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, UnknownData_B61C, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshSineWaveProperties, 0x0078);
		}

		// class UDisplaceMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshToolBuilder, 0x0028);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UDisplaceMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, CommonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DirectionalFilterProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, TextureMapProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, NoiseProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, SineWaveProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, UnknownData_5SW6, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTool, 0x03F0);
		}

		// class UDrawAndRevolveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveToolBuilder, UnknownData_YR3X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveToolBuilder, 0x0030);
		}

		// class URevolveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RevolveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegreesOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, Steps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bReverseRevolutionDirection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipMesh, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bProfileIsCrossSectionOfSide, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, PolygroupMode, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, QuadSplitMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_H2GM, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, DiagonalProportionTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, CapFillMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldFullRevolution, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldVertsOnAxis, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_ZU1J, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, AxisWeldTolerance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bSharpNormals, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_X60U, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, SharpNormalAngleTolerance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipVs, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bUVsSkipFullyWeldedEdges, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_CS3L, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveProperties, 0x00B0);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_HLKD, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_6V6D, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_8X1B, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_MJJS, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class URevolveToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bConnectOpenProfileToAxis, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bSnapToWorldGrid, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_IBX5, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bEnableSnapping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bAllowedToEditDrawPlane, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_PPFE, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveToolProperties, 0x00D0);
		}

		// class URevolveOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, UnknownData_7PE3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, RevolveTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveOperatorFactory, 0x0038);
		}

		// class UDrawAndRevolveTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, UnknownData_1VXW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, ControlPointsMechanic, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, PlaneMechanic, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Settings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, MaterialProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Preview, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveTool, 0x0120);
		}

		// class UDrawPolygonToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolBuilder, UnknownData_586V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolBuilder, 0x0030);
		}

		// class UDrawPolygonToolStandardProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolStandardProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, PolygonType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, OutputMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_DVEK, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, FeatureSizeRatio, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, ExtrudeHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, Steps, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bAllowSelfIntersections, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bShowGizmo, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_UL5R, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolStandardProperties, 0x0078);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_XFIG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UDrawPolygonToolSnapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolSnapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bEnableSnapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToAngles, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToLengths, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_Q85J, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, SegmentLength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bHitSceneObjects, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_Z3E7, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, HitNormalOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_BQ8K, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolSnapProperties, 0x0078);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_M1QL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UDrawPolygonTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_OLTK, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PolygonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, SnapProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_KMHM, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PreviewMesh, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_WKA6, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, HeightMechanic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_E65R, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonTool, 0x0570);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_4HG6, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_HTMP, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UDrawPolyPathToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathToolBuilder, UnknownData_ZU3N, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathToolBuilder, 0x0038);
		}

		// class UDrawPolyPathProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, OutputType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_9YI3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, WidthMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_CNLJ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Width, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, HeightMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_8YUX, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Height, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, RampStartRatio, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, bSnapToWorldGrid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_H2KL, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathProperties, 0x0080);
		}

		// class UDrawPolyPathExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_8V1F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_3HO8, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathExtrudeProperties, 0x0068);
		}

		// class UDrawPolyPathTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_4FG7, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, TransformProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, MaterialProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_M0H0, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, PlaneMechanic, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_N50N, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, EditPreview, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeHeightMechanic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, CurveDistMechanic, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, SurfacePathMechanic, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_2HS6, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathTool, 0x0210);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_ZCOZ, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UDynamicMeshSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptToolBuilder, UnknownData_307D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptToolBuilder, 0x0038);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_WPSV, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bIsRemeshingEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_OATH, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushSpeed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bFreezeTarget, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_LCCT, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, SmoothBrushSpeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bDetailPreservingSmooth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_DSBQ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushSculptProperties, 0x0078);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_K07S, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_0JEX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UMeshConstraintProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshConstraintProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreserveSharpEdges, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MeshBoundaryConstraint, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, GroupBoundaryConstraint, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MaterialBoundaryConstraint, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreventNormalFlips, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, UnknownData_QHL2, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshConstraintProperties, 0x0068);
		}

		// class URemeshProperties : public UMeshConstraintProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, SmoothingStrength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bFlips, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bSplits, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bCollapses, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, UnknownData_CJJZ, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshProperties, 0x0070);
		}

		// class UBrushRemeshProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__BrushRemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, bEnableRemeshing, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_FBFG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, TriangleSize, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, PreserveDetail, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_SCJJ, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushRemeshProperties, 0x0080);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_2DQM, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_BMI8, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_BO4Q, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_337E, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_J4WY, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_JVXQ, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UFixedPlaneBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, UnknownData_S6I7, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushProperties, 0x0080);
		}

		// class UDynamicMeshSculptTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptMaxBrushProperties, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, KelvinBrushProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, RemeshProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, GizmoProperties, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ViewProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_MTYG, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicator, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMaterial, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, DynamicMeshComponent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ActiveOverrideMaterial, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_SJYZ, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformGizmo, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformProxy, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_JLH9, 0x0C60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptTool, 0x0C70);
		}

		// class UEdgeLoopInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionToolBuilder, UnknownData_3CNN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionToolBuilder, 0x0030);
		}

		// class UEdgeLoopInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, PositionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_IR42, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, InsertionMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_R0TD, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_CRDI, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, ProportionOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, DistanceOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bInteractive, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bFlipOffsetDirection, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bWireframe, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_ILTE, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, VertexTolerance, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionProperties, 0x0090);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_BEE8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_XROU, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_0DIN, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UEdgeLoopInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, UnknownData_CA8M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionOperatorFactory, 0x0038);
		}

		// class UEdgeLoopInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_L3ZH, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_YC4G, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Preview, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_5DPC, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionTool, 0x0500);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_P8QT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UEditMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolBuilder, UnknownData_PEOI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolBuilder, 0x0038);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_J6DC, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UPolyEditCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSelectEdgeLoops, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_KOED, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, LocalFrameMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_X4J2, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bLockRotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSnapToWorldGrid, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_S5SA, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCommonProperties, 0x0070);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_QXCG, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_8ZL2, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_RSOB, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_JMTX, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// class UEditMeshPolygonsToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolActionPropertySet, UnknownData_B6RF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActionPropertySet, 0x0068);
		}

		// class UEditMeshPolygonsToolActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions, 0x0068);
		}

		// class UEditMeshPolygonsToolActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions_Triangles, 0x0068);
		}

		// class UEditMeshPolygonsToolUVActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolUVActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolUVActions, 0x0068);
		}

		// class UEditMeshPolygonsToolEdgeActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions, 0x0068);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_H5XO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_43DD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UEditMeshPolygonsToolEdgeActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions_Triangles, 0x0068);
		}

		// class UPolyEditExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_7Y0A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, bShellsToSolids, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_BVBW, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditExtrudeProperties, 0x0068);
		}

		// class UPolyEditOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, bUseFaceNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, UnknownData_4H5K, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOffsetProperties, 0x0068);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_BDZ2, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_D1NG, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_UGDH, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_KFHD, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// class UPolyEditInsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditInsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bReproject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_0YZH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, Softness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bBoundaryOnly, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_XMAV, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, AreaScale, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditInsetProperties, 0x0070);
		}

		// class UPolyEditOutsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOutsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, Softness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, bBoundaryOnly, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_P56X, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, AreaScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_OLOD, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOutsetProperties, 0x0070);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// class UPolyEditCutProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCutProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, Orientation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_LWXB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, bSnapToVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_YH60, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCutProperties, 0x0068);
		}

		// class UPolyEditSetUVProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditSetUVProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, bShowMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, UnknownData_DP4O, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditSetUVProperties, 0x0068);
		}

		// class UEditMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_5K09, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, DynamicMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CommonProps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions_Triangles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions_Triangles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditUVActions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeProperties, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OffsetProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, InsetProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OutsetProperties, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CutProperties, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SetUVProperties, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_SL7H, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, MultiTransformer, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_G7TM, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditPreview, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_ZH4O, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeHeightMechanic, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CurveDistMechanic, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SurfacePathMechanic, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_BK9O, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsTool, 0x07D0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_4Q1O, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_RC3N, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_S0JN, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditNormalsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolBuilder, UnknownData_T6KS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolBuilder, 0x0030);
		}

		// class UEditNormalsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bRecomputeNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, NormalCalculationMethod, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bFixInconsistentNormals, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bInvertNormals, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SplitNormalMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_HFMH, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SharpEdgeAngleThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bAllowSharpVertices, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_6H1O, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolProperties, 0x0070);
		}

		// class UEditNormalsAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsAdvancedProperties, 0x0060);
		}

		// class UEditNormalsOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EditNormalsOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_QZN4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_UHXS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsOperatorFactory, 0x0040);
		}

		// class UEditNormalsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditNormalsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, UnknownData_GT18, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsTool, 0x0100);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_QTL8, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_3C20, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_QIT9, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UEditPivotToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolBuilder, 0x0028);
		}

		// class UEditPivotToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, bEnableSnapDragging, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, RotationMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, UnknownData_S4ZG, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolProperties, 0x0068);
		}

		// class UEditPivotToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_TTSU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, bUseWorldBox, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_V56X, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolActionPropertySet, 0x0070);
		}

		// class UEditPivotTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditPivotTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_G3SQ, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, EditPivotActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_543Y, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, ActiveGizmos, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_04Y8, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotTool, 0x0200);
		}

		// class UEditUVIslandsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsToolBuilder, 0x0030);
		}

		// class UEditUVIslandsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_GZ10, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MaterialSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, CheckerMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, DynamicMeshComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, SelectionMechanic, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_I80K, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MultiTransformer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_L5PQ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsTool, 0x0370);
		}

		// class UExtractCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryToolBuilder, UnknownData_12PA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryToolBuilder, 0x0030);
		}

		// class UExtractCollisionGeometryTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, VizSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, ObjectProps, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewElements, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, UnknownData_LGJR, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryTool, 0x0330);
		}

		// class UGroupEdgeInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionToolBuilder, UnknownData_I5T9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionToolBuilder, 0x0030);
		}

		// class UGroupEdgeInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, InsertionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_WYNS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, bWireframe, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_BJOL, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, VertexTolerance, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionProperties, 0x0070);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_1VSL, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_9TXL, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_NQLJ, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UMeshSculptToolBase : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSculptToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, GizmoProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_5TSD, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushOpPropSets, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_EPKL, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, SecondaryBrushOpPropSets, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_S6EZ, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ViewProperties, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ActiveOverrideMaterial, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicator, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMaterial, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMesh, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformGizmo, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformProxy, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_UZAB, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptToolBase, 0x09D8);
		}

		// class UMeshVertexSculptTool : public UMeshSculptToolBase
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, SculptProperties, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, DynamicMeshComponent, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, UnknownData_CRG6, 0x09E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptTool, 0x1230);
		}

		// class UMirrorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MirrorToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolBuilder, UnknownData_OKWZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolBuilder, 0x0030);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UMirrorToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, OperationMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bCropAlongMirrorPlaneFirst, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bWeldVerticesOnMirrorPlane, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bAllowBowtieVertexCreation, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bSnapToWorldGrid, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, CtrlClickBehavior, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bButtonsOnlyChangeOrientation, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bShowPreview, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, SaveMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, UnknownData_HDA9, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolProperties, 0x0070);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_5JMC, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UMirrorOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__MirrorOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_MGL8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, MirrorTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_1ZEC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorOperatorFactory, 0x0040);
		}

		// class UMirrorToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolActionPropertySet, UnknownData_N4IZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolActionPropertySet, 0x0068);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_17ST, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_B4JX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UMirrorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MirrorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_Z0PI, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, ToolActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, MeshesToMirror, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Previews, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_A9SQ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, PlaneMechanic, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_QUCT, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorTool, 0x0138);
		}

		// class UOffsetMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, OffsetType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_HYW2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, Distance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, bCreateShell, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_ETRQ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolProperties, 0x0070);
		}

		// class UOffsetWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__OffsetWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, MinDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, UnknownData_7808, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetWeightMapSetProperties, 0x0088);
		}

		// class UIterativeOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, Steps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bOffsetBoundaries, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_4LVD, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, SmoothingPerStep, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bReprojectSmooth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_UVQK, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeOffsetProperties, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_YFUS, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UImplicitOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, Smoothness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, bPreserveUVs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, UnknownData_KTM6, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitOffsetProperties, 0x0068);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_OXNE, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_3OJH, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UOffsetMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, OffsetProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, ImplicitProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, WeightMapProperties, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshTool, 0x0420);
		}

		// class UOffsetMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolBuilder, 0x0028);
		}

		// class UPhysicsInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorToolBuilder, 0x0028);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_NKBI, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_VKWX, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UPhysicsInspectorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, VizSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, ObjectData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, PreviewElements, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, UnknownData_UWD7, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorTool, 0x00D8);
		}

		// class UPlaneCutToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolBuilder, UnknownData_4RYT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolBuilder, 0x0030);
		}

		// class UAcceptOutputProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AcceptOutputProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, bExportSeparatedPiecesAsNewMeshAssets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, UnknownData_LG9E, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptOutputProperties, 0x0068);
		}

		// class UPlaneCutToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bSnapToWorldGrid, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bKeepBothHalves, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_QIW4, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, SpacingBetweenHalves, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillCutHole, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bShowPreview, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillSpans, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_4JEU, 0x006B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolProperties, 0x0070);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_0PCF, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_9W4Q, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UPlaneCutOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__PlaneCutOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_KR2C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, CutTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_EM4T, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutOperatorFactory, 0x0040);
		}

		// class UPlaneCutTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PlaneCutTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_S1E7, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, AcceptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrigin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_CLYL, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, Previews, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, MeshesToCut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_T7B8, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_Q5DA, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutTool, 0x0170);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UPositionPlaneGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmoBuilder, 0x0028);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_Q1N6, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UPositionPlaneGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_BUI0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_Q1YT, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmo, 0x0520);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UPositionPlaneOnSceneInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneOnSceneInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneOnSceneInputBehavior, UnknownData_I0E3, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneOnSceneInputBehavior, 0x00B0);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UProjectToTargetToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetToolBuilder, UnknownData_57YT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolBuilder, 0x0030);
		}

		// class URemeshMeshToolProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetTriangleCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, SmoothingType, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bDiscardAttributes, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowWireframe, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowGroupColors, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_CQI5, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshIterations, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bUseTargetEdgeLength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_7EDF, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetEdgeLength, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bReproject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_HYFX, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolProperties, 0x0090);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UProjectToTargetToolProperties : public URemeshMeshToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolProperties, 0x0090);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class URemeshMeshTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_3TMR, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, MeshStatisticsProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_OETG, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshTool, 0x00E8);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_1O39, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_9BCX, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UProjectToTargetTool : public URemeshMeshTool
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetTool, UnknownData_WCOH, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetTool, 0x00F8);
		}

		// class URemeshMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolBuilder, UnknownData_RXSW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolBuilder, UnknownData_9PF6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, OcclusionTestMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, TriangleSampling, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_QV1F, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, WindingIsoValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddRandomRays, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddTriangleSamples, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, bOnlySelfOcclude, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_LET8, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolProperties, 0x0080);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// class URemoveOccludedTrianglesAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesAdvancedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesAdvancedProperties, UnknownData_T4NO, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesAdvancedProperties, 0x0068);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_7ZMB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_QQMJ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class URemoveOccludedTrianglesOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_HD8I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_LATW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesOperatorFactory, 0x0040);
		}

		// class URemoveOccludedTrianglesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, PreviewCopies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, UnknownData_JQE6, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesTool, 0x0150);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// class URevolveBoundaryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolBuilder, UnknownData_TO38, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolBuilder, 0x0030);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class URevolveBoundaryOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, UnknownData_45XN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, RevolveBoundaryTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryOperatorFactory, 0x0038);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_B9OO, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// class URevolveBoundaryToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bDisplayOriginalMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_9QLD, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisYaw, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisPitch, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bSnapToWorldGrid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_014O, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolProperties, 0x00D0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_IMFM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_5714, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_C093, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_RAZM, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMeshBoundaryToolBase : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshBoundaryToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_BEHM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, LoopSelectClickBehavior, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_GXZC, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshBoundaryToolBase, 0x0150);
		}

		// class URevolveBoundaryTool : public UMeshBoundaryToolBase
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_CX92, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Settings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, MaterialProperties, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, PlaneMechanic, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Preview, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_4P7O, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryTool, 0x01B0);
		}

		// class USeamSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolBuilder, 0x0030);
		}

		// class USeamSculptToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bHitBackFaces, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, UnknownData_DZE3, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolProperties, 0x0068);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_S0DC, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_Z814, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// class UDynamicMeshBrushTool : public UBaseBrushTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, PreviewMesh, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, UnknownData_9N1A, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshBrushTool, 0x0200);
		}

		// class USeamSculptTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__SeamSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, PreviewGeom, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, UnknownData_N9WL, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptTool, 0x02E0);
		}

		// class USelfUnionMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bAttemptFixHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bTrimFlaps, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_MSN9, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, WindingNumberThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_EJKL, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolProperties, 0x0078);
		}

		// class USelfUnionMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, Properties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, DrawnLineSet, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, UnknownData_2EXY, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesTool, 0x0120);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_E086, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class USelfUnionMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolBuilder, 0x0030);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class USetCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolBuilder, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_I09H, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class USetCollisionGeometryToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, GeometryType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_1GP5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, InputMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_E7SU, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bUseWorldSpace, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bRemoveContained, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bEnableMaxCount, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_KNS2, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MaxCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MinThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectBoxes, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectSpheres, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectCapsules, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyHulls, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTargetFaceCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyPolygons, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_D25K, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SweepAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_7H9C, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bAppendToExisting, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_Q1N3, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SetCollisionType, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_HG5S, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolProperties, 0x0090);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_HDX7, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_W1ZB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_B9TJ, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_3ZB7, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_O89D, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class USetCollisionGeometryTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, VizSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, CollisionProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, PreviewGeom, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, UnknownData_EB6M, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryTool, 0x01C0);
		}

		// class USmoothMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, SmoothingType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, UnknownData_4AYN, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolProperties, 0x0068);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_PSWM, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_XIKQ, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_U52U, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class UIterativeSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, bSmoothBoundary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, UnknownData_DZFG, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeSmoothProperties, 0x0070);
		}

		// class UDiffusionSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DiffusionSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, UnknownData_JXPW, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiffusionSmoothProperties, 0x0070);
		}

		// class UImplicitSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, SmoothSpeed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, Smoothness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, UnknownData_LD4P, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, VolumeCorrection, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitSmoothProperties, 0x0070);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USmoothWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__SmoothWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, MinSmoothMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, UnknownData_3OC0, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothWeightMapSetProperties, 0x0088);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_YZ9O, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USmoothMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, DiffusionProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, ImplicitProperties, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, WeightMapProperties, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_XYQ3, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshTool, 0x0430);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_PHFF, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_N8FR, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class USmoothMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolBuilder, 0x0028);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_69Q2, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_8TN3, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UTransformMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolBuilder, 0x0028);
		}

		// class UTransformMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bSetPivot, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bEnableSnapDragging, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, SnapDragSource, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, RotationMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, UnknownData_PB0G, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolProperties, 0x0068);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_7DBH, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UTransformMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_QY31, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_1B3J, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, ActiveGizmos, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_48YE, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesTool, 0x0140);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_ZITR, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_QHNP, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UUVProjectionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolBuilder, UnknownData_CYVB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolBuilder, 0x0030);
		}

		// class UUVProjectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVProjectionMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_Q8UQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, ProjectionPrimitiveScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, CylinderProjectToTopOrBottomAngleThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, bWorldSpaceUVScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_DZ1X, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolProperties, 0x0088);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_9ZRB, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_RBIS, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_4TGZ, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_S4KZ, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UUVProjectionAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionAdvancedProperties, 0x0060);
		}

		// class UUVProjectionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__UVProjectionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_WH1Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_9840, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionOperatorFactory, 0x0040);
		}

		// class UGroupEdgeInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, UnknownData_16M4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionOperatorFactory, 0x0038);
		}

		// class UGroupEdgeInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_GEFX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Preview, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_JXDQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionTool, 0x0550);
		}

		// class UHoleFillToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolBuilder, 0x0028);
		}

		// class USmoothHoleFillProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothHoleFillProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bConstrainToHoleInterior, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_RBPO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, RemeshingExteriorRegionWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingExteriorRegionWidth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingInteriorRegionWidth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, InteriorSmoothness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_G3GT, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, FillDensityScalar, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bProjectDuringRemesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_O1YU, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothHoleFillProperties, 0x0088);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_VGK5, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class UHoleFillToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, FillType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, bRemoveIsolatedTriangles, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, UnknownData_SCHM, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolProperties, 0x0068);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_NEOI, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_XE00, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class UHoleFillToolActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolActions, UnknownData_N2F5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolActions, 0x0068);
		}

		// class UHoleFillStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, InitialHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SelectedHoles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SuccessfulFills, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, FailedFills, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, RemainingHoles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillStatisticsProperties, 0x00B0);
		}

		// class UHoleFillOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__HoleFillOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, UnknownData_0HPY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, FillTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillOperatorFactory, 0x0038);
		}

		// class UHoleFillTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__HoleFillTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_6D96, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SmoothHoleFillProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Properties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Actions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Statistics, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Preview, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SelectionMechanic, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_C051, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillTool, 0x01E0);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_BE8B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_BY03, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class UMeshSculptBrushOpProps : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSculptBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptBrushOpProps, 0x0060);
		}

		// class UBaseKelvinletBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Stiffness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Incompressiblity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, BrushSteps, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, UnknownData_93UG, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKelvinletBrushOpProps, 0x0070);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class UScaleKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ScaleKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleKelvinletBrushOpProps, 0x0078);
		}

		// class UPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPullKelvinletBrushOpProps, 0x0078);
		}

		// class USharpPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SharpPullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpPullKelvinletBrushOpProps, 0x0078);
		}

		// class UTwistKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__TwistKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwistKelvinletBrushOpProps, 0x0078);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class UMeshAnalysisProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAnalysisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, SurfaceArea, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, Volume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAnalysisProperties, 0x0080);
		}

		// class UMeshAttributePaintToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolBuilder, UnknownData_3443, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolBuilder, 0x0080);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_7HVM, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class UMeshAttributePaintToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, Attributes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, SelectedAttribute, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, UnknownData_QEQS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, AttributeName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolProperties, 0x0088);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_TR2N, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_BM9N, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_R784, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_VHVY, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class UMeshAttributePaintEditActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintEditActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintEditActions, UnknownData_WXBK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintEditActions, 0x0068);
		}

		// class UMeshAttributePaintTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, AttribProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, UnknownData_Y1C9, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintTool, 0x0630);
		}

		// class UInflateBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__InflateBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInflateBrushOpProps, 0x0068);
		}

		// class UMeshInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorToolBuilder, 0x0028);
		}

		// class UMeshInspectorProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBowtieVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bPolygonBorders, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVSeams, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVBowties, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalSeams, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalVectors, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bTangentVectors, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_J9GZ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, NormalLength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, TangentLength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_94KV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorProperties, 0x0078);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_OIKA, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class UMeshInspectorTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, MaterialSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_PBD2, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DrawnLineSet, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DefaultMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_MD1N, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorTool, 0x0128);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_95DM, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_6EEQ, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_C04G, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_EYLX, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_7JKE, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_VTIU, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_TVUK, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// class UNewMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__NewMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, Material, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UVScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWorldSpaceUVScale, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWireframe, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bShowExtendedOptions, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UnknownData_SARG, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMeshMaterialProperties, 0x0070);
		}

		// class UExistingMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ExistingMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, MaterialMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, UnknownData_XO4O, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerDensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, OverrideMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerMaterial, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExistingMeshMaterialProperties, 0x0078);
		}

		// class UMeshEditingViewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshEditingViewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_H5KS, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, MaterialMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_QBCY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bFlatShading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_NTA1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Color, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_ILTS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Image, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshEditingViewProperties, 0x0088);
		}

		// class UMoveBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__MoveBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, UnknownData_80YQ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveBrushOpProps, 0x0070);
		}

		// class UPinchBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PinchBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, bPerpDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, UnknownData_X33S, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPinchBrushOpProps, 0x0070);
		}

		// class UBasePlaneBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BasePlaneBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePlaneBrushOpProps, 0x0060);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_NF9N, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, UnknownData_4TQ9, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneBrushOpProps, 0x0070);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_TDUS, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_S3FT, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UViewAlignedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, UnknownData_903X, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedPlaneBrushOpProps, 0x0070);
		}

		// class UFixedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, UnknownData_P4OC, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushOpProps, 0x0070);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_2EVD, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_JF47, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_ZPG3, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UStandardSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__StandardSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStandardSculptBrushOpProps, 0x0068);
		}

		// class UViewAlignedSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedSculptBrushOpProps, 0x0068);
		}

		// class USculptMaxBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, MaxHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, bUseFixedHeight, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_WJCL, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, FixedHeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_3PVV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushOpProps, 0x0078);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_B87H, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_KZNP, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_6RGM, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_D3H9, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class USculptBrushProperties : public UBrushBaseProperties
		TEST_METHOD(Class__MeshModelingTools__SculptBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Depth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bHitBackFaces, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_178I, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Lazyness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bShowPerBrushProps, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_J7O2, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptBrushProperties, 0x0088);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_I1PU, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_JS2F, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_P2NI, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_0K3B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_24VZ, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_N8CV, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// class UKelvinBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__KelvinBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, FalloffDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Stiffness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Incompressiblity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, BrushSteps, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKelvinBrushProperties, 0x0070);
		}

		// class UWorkPlaneProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__WorkPlaneProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, UnknownData_01QF, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorkPlaneProperties, 0x0080);
		}

		// class USculptMaxBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, MaxHeight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, bFreezeCurrentHeight, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, UnknownData_PGZN, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushProperties, 0x0068);
		}

		// class UMeshSelectionToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolBuilder, UnknownData_A258, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolBuilder, 0x0038);
		}

		// class UUMGSequenceTickManager : public UObject
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_3I5J, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// class UMeshSelectionToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolActionPropertySet, UnknownData_9DVQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolActionPropertySet, 0x0068);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_NDWG, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UMeshSelectionEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionEditActions, 0x0068);
		}

		// class UMeshSelectionMeshEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionMeshEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionMeshEditActions, 0x0068);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_0WMR, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_5PPZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UMeshSelectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, SelectionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_HOA4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bHitBackFaces, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bShowWireframe, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_WSJ2, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, FaceColorMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_JC3L, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolProperties, 0x0070);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_N9DJ, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UMeshSelectionTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionActions, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, EditActions, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, Selection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SpawnedActors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, UnknownData_WP44, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionTool, 0x04A0);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_X4WK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_F966, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UBaseSmoothBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseSmoothBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSmoothBrushOpProps, 0x0060);
		}

		// class USmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, UnknownData_F7LH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothBrushOpProps, 0x0070);
		}

		// class USecondarySmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SecondarySmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, UnknownData_0FCU, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecondarySmoothBrushOpProps, 0x0070);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_80PN, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class USmoothFillBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothFillBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, UnknownData_UGBI, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothFillBrushOpProps, 0x0070);
		}

		// class UFlattenBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FlattenBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, UnknownData_YTB6, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlattenBrushOpProps, 0x0070);
		}

		// class UEraseBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__EraseBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEraseBrushOpProps, 0x0068);
		}

		// class UMeshSpaceDeformerToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerToolBuilder, 0x0030);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class USpaceDeformerOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__SpaceDeformerOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, UnknownData_O0EB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, SpaceDeformerTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceDeformerOperatorFactory, 0x0038);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_KGFV, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// class UMeshSpaceDeformerTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, SelectedOperationType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_4OKI, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpperBoundsInterval, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, LowerBoundsInterval, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ModifierPercent, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, bSnapToWorldGrid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_YIAW, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, StateTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_G0AM, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, Preview, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_82FP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoCenter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_TESR, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoOrientation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, IntervalGizmo, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformGizmo, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformProxy, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpIntervalSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, DownIntervalSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ForwardIntervalSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_J4QH, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerTool, 0x01C0);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_9IOR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UMeshStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Mesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, UV, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Attributes, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshStatisticsProperties, 0x0090);
		}

		// class UMeshVertexSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptToolBuilder, 0x0030);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UVertexBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VertexBrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryBrushType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryFalloffType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bFreezeTarget, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bSmoothErases, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, UnknownData_P9YK, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVertexBrushSculptProperties, 0x0068);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_5Q59, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// class UUVProjectionTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__UVProjectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, MaterialSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, Previews, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, CheckerMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformProxies, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, UnknownData_7OAQ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionTool, 0x0220);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UVoxelBlendMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendPower, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendFalloff, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, UnknownData_JRWT, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolProperties, 0x0080);
		}

		// class UVoxelBlendMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesTool, BlendProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesTool, 0x0110);
		}

		// class UVoxelBlendMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolBuilder, 0x0030);
		}

		// class UVoxelMorphologyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_SGOT, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Distance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_YVM5, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolProperties, 0x0080);
		}

		// class UVoxelMorphologyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesTool, MorphologyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesTool, 0x0110);
		}

		// class UVoxelMorphologyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolBuilder, 0x0030);
		}

		// class UVoxelSolidifyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, WindingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, ExtendBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, SurfaceSearchSteps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bSolidAtBoundaries, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bMakeOffsetSurfaces, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, UnknownData_TVGZ, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, OffsetThickness, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolProperties, 0x0080);
		}

		// class UVoxelSolidifyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesTool, SolidifyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesTool, 0x0110);
		}

		// class UVoxelSolidifyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolBuilder, 0x0030);
		}

		// class UWeldMeshEdgesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesToolBuilder, 0x0028);
		}

		// class UWeldMeshEdgesTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, Tolerance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, bOnlyUnique, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, UnknownData_MEYZ, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesTool, 0x0300);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_NC1H, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_F40F, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_296T, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_D0K5, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_HW3W, 0x04D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_8KGU, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_53IR, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_ROLP, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_LJWW, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0590);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PYJF, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_D02B, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_XHR3, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_JE0W, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_DU1W, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_JL5S, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_1L4F, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_6SLZ, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_BR3Z, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_DNVO, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_A0JG, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_DWW8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_AH0W, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class APrisoner_Head_No_Teeth_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Head_No_Teeth__Prisoner_Head_No_Teeth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Head_No_Teeth_C, 0x0770);
		}

		// class UAnimSequenceLevelSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_OKVQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_JKOA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_OJSS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_MRYL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_KI6L, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_8086, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_L7S3, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_PPBA, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_0CR8, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// class ULevelSequenceAnimSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_C0NI, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_TMLM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_EE33, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_2T4G, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_JYDR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_DRQM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_27PE, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_6FR8, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_30H4, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_RMYF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_DOK9, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_ZRKT, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_668X, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Dependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_0NA9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0080);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_S24M, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0028);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_BILL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_PZNQ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0140);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_I2K1, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E00);
		}

		// class USynthComponentToneGenerator : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentToneGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Frequency, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Volume, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, UnknownData_ZKE4, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentToneGenerator, 0x06E0);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_1VVP, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x07F0);
		}

		// class USynthesisUtilitiesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__SynthesisUtilitiesBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthesisUtilitiesBlueprintFunctionLibrary, 0x0028);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_M7ID, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_RP1G, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_O3MT, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_40KD, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D80);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_H49F, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x00F0);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_R9F8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0180);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_9C6Q, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00E0);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_02RA, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_L10N, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x00A8);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_WXKO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x00B0);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_L1TG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x00D0);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_WLZN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x00A8);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_5EGO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x00A0);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_DSGZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x00A0);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_ZVJF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x00B0);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_CEB3, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x00D0);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_FEKB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00C0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_RD70, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x00D8);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_KFG1, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x00A0);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, bTrueStereo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_C8TI, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_7ZDP, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00F0);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_60VK, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_TERJ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x00B8);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_WD6L, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x00A8);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_IWXF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x00B0);
		}

		// class USubmixEffectMultibandCompressorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectMultibandCompressorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, UnknownData_684Q, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectMultibandCompressorPreset, 0x00D0);
		}

		// class USubmixEffectStereoDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, UnknownData_Y987, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectStereoDelayPreset, 0x00D8);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_5AIR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_TEDD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00D8);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_0IBY, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_9KP1, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_HGC8, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_S11C, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A80);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0028);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0028);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0028);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0028);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0028);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Role, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, FrameRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, bRebroadcastSubject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, UnknownData_CQ86, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0068);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_T5WQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_U8WJ, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00D8);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0028);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0028);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0028);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0028);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_02OF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, ConnectionString, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x00A0);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00F0);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0028);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0028);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_5GRE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_MVZQ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_F70H, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class ABP_WeaponBullet_762x54FMJ_C : public AProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponBullet_762x54FMJ__BP_WeaponBullet_762x54FMJ_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WeaponBullet_762x54FMJ_C, UberGraphFrame, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WeaponBullet_762x54FMJ_C, 0x0410);
		}

		// class UBP_MountTypeWeaponHolsterSledge_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponHolsterSledge__BP_MountTypeWeaponHolsterSledge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponHolsterSledge_C, 0x0028);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertyTrack, UnknownData_MM0H, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x00B0);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_5US1, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_1M2F, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, Name, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, AxisOrientation, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_4M5V, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_4Z4W, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0270);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_3VVQ, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, UnknownData_4V6E, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0090);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_QLMK, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_KYCV, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0028);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, randomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_35UI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_SF0S, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_O7Z9, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_GLMF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_1HX9, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YS4Y, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_G1W3, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_67XT, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VIQJ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_588P, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_A7SR, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_13B7, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QFY8, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_7G1I, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_IYLW, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FKOS, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DO0H, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_X5QP, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_K5L8, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LYYL, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OU08, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LRH5, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DBGZ, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_M7IO, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_2JDA, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_TZ4I, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_DT1Y, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_5G7B, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_ZBAH, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_YDZN, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_4QUZ, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_R8PG, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_A48I, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_3SKO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class UQuartzClockHandle : public UObject
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_W7T5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_DU91, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_OUI1, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_ZKPZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// class UQuartzSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_CEMP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_G3NS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_IVEV, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsSettingsCore : public UDeveloperSettings
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_LDL0, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_CR11, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_DUC3, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// class UBodySetupCore : public UObject
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_NKAJ, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_0Q1J, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_2OSD, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_OQ8O, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_IKFI, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_OFV3, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class APrisoner_Right_Foot_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Right_Foot__Prisoner_Right_Foot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Right_Foot_C, 0x0770);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_9423, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_AGGU, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_QDG2, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_GM5X, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_NUHB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_FGDV, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_OD3B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_SQ5S, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_1LRK, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_MA0A, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_JAU0, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_0XNI, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_17HD, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_2Z37, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_5NA7, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_OFZZ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_1AS3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_WRBC, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_0BIK, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_O31H, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_WB07, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_D6YS, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_BBCV, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_K9RL, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_2K5Z, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_I7C5, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KE52, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9WO5, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_PEIB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_5X67, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KVYD, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_0Y2P, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QI5T, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_H8AY, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_2G6L, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_1QVF, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XQDL, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_EZLB, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_YLLZ, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_P1BL, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_38OH, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_IY3A, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SU2Y, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_1UF4, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UGameResourceType_SoftDrink_C : public UGameResourceType_SoftDrink
		TEST_METHOD(BlueprintGeneratedClass__GameResourceType_SoftDrink__GameResourceType_SoftDrink_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType_SoftDrink_C, 0x0058);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeLODStreamingProxy : public UStreamableRenderAsset
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_LY44, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_8JHN, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_W5ZM, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_EQUL, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_2X95, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_8FLA, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0660);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_ZUIV, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0440);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_WC3U, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_7WKD, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_52KT, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_TN4E, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_T1LR, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0520);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_J71P, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_908H, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_DYQA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_KPG0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_FM83, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_3I8L, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_UR0K, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_4YTD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0470);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_9SIU, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_G00H, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_3POF, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_KI94, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_60LE, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_TX9F, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_0ZZ2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_3PZP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_H4XY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_1K2H, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_2OSJ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_VCC7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_6PKD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapePhysicalMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class USoundModulatorBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class APrisoner_Left_Foot_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Left_Foot__Prisoner_Left_Foot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Left_Foot_C, 0x0770);
		}

		// class UABP_Prisoner_Female_C : public UABP_Prisoner_C
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner_Female__ABP_Prisoner_Female_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_Female_C, 0x74058);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_DZ0C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_YBWZ, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_I5JX, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_C5UV, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_9609, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_3TXE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_07XC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_8WTQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_3L7Y, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_FF6I, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_91TQ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_22A4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_2417, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_I2GI, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_CN2H, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_MXBV, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_GXH2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_3YCG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_4T5E, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_50ZM, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class ABP_PlaceableActorFortifications_C : public APlaceableActorFortifications
		TEST_METHOD(BlueprintGeneratedClass__BP_PlaceableActorFortifications__BP_PlaceableActorFortifications_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlaceableActorFortifications_C, 0x04C8);
		}

		// class UGenlockedTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_A4H1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_Z0J4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UGenlockedCustomTimeStep : public UFixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_PDOE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_JCL70SH8HF, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_PVDUD3D61K, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_L94W, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_3XII, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_AMUR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_JZ71, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_EX5X, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_UPGN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_SYL1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_RWOT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_LJ1H, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_N9PG, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_EX2D, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_99I4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_SQJ2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_KNC7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_1E58, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_SO0R, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_78EZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_AFOL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_B8JQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_4MWH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_2OS4, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_V0AB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_SIQE, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_ZLRD, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_2H2B, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_WC8N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_7B44, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_N9FR, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_QUAT, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0780);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_S5VE, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0028);
		}

		// class UMagicLeapRaycastComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_IX2E, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0118);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0028);
		}

		// class UInAppPurchaseComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_V7VW, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0128);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0190);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_K8YM, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D0);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0028);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_O3B3, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_ASBZ, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_194F, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_DTAL, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_UVQT, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_A2NW, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_QIUT, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x0290);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_WZ9T, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0030);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_3N4L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_YDR5, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_PGV7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_OCK1, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_8JHM, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_6WNR, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_MRRQ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_50T8, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_G4QY, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_SZF3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_GWKE, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_0866, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_L5C5, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_CVE0, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_9H99, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_EDO8, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_FS9I, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0FQ7, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_BPBE, 0x058B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_YIBS, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_OF99, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// class UNiagaraComponentRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_VS4P, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_WMQB, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_0OYC, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// class UNiagaraComponentSettings : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface2DArrayTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceArray : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_AP1O, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_J0LN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// class UNiagaraDataInterfaceArrayFloat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat2 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat3 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat4 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayColor : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayQuat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceArrayInt32 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayBool : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioPlayer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_NIX5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_I2RE, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_R4DL, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_PYLN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_W00D, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_3Y97, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_B7TD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_VLE9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_AIKL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_HMGP, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_WEX5, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_M72J, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_8F6G, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_L1ET, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_NUXC, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_V1E9, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_65HY, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// class UNiagaraScript : public UNiagaraScriptBase
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_Y5VE, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_GTG1, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_49FU, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_K4R5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_DIYV, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_NZKQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_8WK9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_UUBY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_Y6Z4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_ZU0A, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_GQS6, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_PU1R, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_TID2, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_V6WX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_VTEP, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_GQ7W, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_P0IZ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_YF8F, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_5I4H, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_UUSM, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_VIRD, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_G35R, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_3M1O, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_YCO7, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceGBuffer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_19ZX, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_92HN, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_PBKU, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// class AChocolateCandy_01_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__ChocolateCandy_01__ChocolateCandy_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChocolateCandy_01_C, 0x0898);
		}

		// class UNiagaraDataInterfaceGrid2DCollectionReader : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_JLSL, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// class APrisoner_Right_Leg_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Right_Leg__Prisoner_Right_Leg_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Right_Leg_C, 0x0770);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_HV5A, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_D4AS, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceGrid3DCollection : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_HF9S, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_R41V, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// class UNiagaraDataInterfaceLandscape : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_46JN, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// class UNiagaraDataInterfacePlatformSet : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// class UNiagaraDataInterfaceRenderTarget2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_K86X, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTarget2DArray : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_RNSH, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTargetVolume : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_Z98Q, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_ZA2U, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_B5AA, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_SDYU, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_X8G1, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_XBMU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_D46I, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_4KQV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_L9F4, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraSignificanceHandler : public UObject
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// class UNiagaraSignificanceHandlerDistance : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// class UNiagaraSignificanceHandlerAge : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_8I55, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_BTLD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_3Y6I, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_ZL4S, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, randomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_1AIA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_0IQQ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_WSYM, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_KP7T, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_RHAL, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MRAF, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// class UBP_M9_Limiter_Driver_C : public UWeaponActionReloadSequence
		TEST_METHOD(BlueprintGeneratedClass__BP_M9_Limiter_Driver__BP_M9_Limiter_Driver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_M9_Limiter_Driver_C, 0x0090);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_GSWC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_EIXE, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_NWJA, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_V8VR, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_ZTPH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_OMWN, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_OU9P, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_KEFQ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_C4OT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_JMPX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_HRVI, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_O4UR, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_E6UC, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_PWO2, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// class UNiagaraMessageDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_UPLX, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// class APrisoner_Torso_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Torso__Prisoner_Torso_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Torso_C, 0x0770);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0028);
		}

		// class UMIDIDeviceController : public UObject
		TEST_METHOD(Class__MIDIDevice__MIDIDeviceController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceController, OnMidiEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceController, DeviceID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceController, UnknownData_ZDKQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceController, DeviceName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceController, UnknownData_6IC1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMIDIDeviceController, 0x0060);
		}

		// class UMIDIDeviceInputController : public UObject
		TEST_METHOD(Class__MIDIDevice__MIDIDeviceInputController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDINoteOn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDINoteOff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDIPitchBend, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDIAftertouch, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDIControlChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDIProgramChange, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, OnMIDIChannelAftertouch, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, DeviceID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, UnknownData_SSIP, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, DeviceName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceInputController, UnknownData_FCJW, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMIDIDeviceInputController, 0x00C0);
		}

		// class UNiagaraScriptBase : public UObject
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// class UMIDIDeviceManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MIDIDevice__MIDIDeviceManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMIDIDeviceManager, 0x0028);
		}

		// class UMIDIDeviceOutputController : public UObject
		TEST_METHOD(Class__MIDIDevice__MIDIDeviceOutputController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceOutputController, DeviceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceOutputController, UnknownData_RLNF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceOutputController, DeviceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMIDIDeviceOutputController, UnknownData_CXU9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMIDIDeviceOutputController, 0x0048);
		}

		// class ABP_Magazine_AKS_74U_C : public AWeaponAttachmentMagazine
		TEST_METHOD(BlueprintGeneratedClass__BP_Magazine_AKS_74U__BP_Magazine_AKS_74U_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Magazine_AKS_74U_C, 0x07D8);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class AImprovised_Lockpick_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Improvised_Lockpick__Improvised_Lockpick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AImprovised_Lockpick_C, 0x0770);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UBP_WeaponScopeWidget_C : public UWeaponScopeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_WeaponScopeWidget__BP_WeaponScopeWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, FadeOut, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, FadeIn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, BlackBG, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, BorderLeft, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, BorderRight, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, Reticle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, ScaleBox_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, SizeBox_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, GeometrySize, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, GeometrySizeHalf, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, FadeInSpeed, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, FadeOutSpeed, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, OnShowDelay, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WeaponScopeWidget_C, ShouldBeHidden, 0x02FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WeaponScopeWidget_C, 0x02FD);
		}

		// class UBP_ImprovisedPistol_OpenInsertBullet_C : public UInsertCartridge
		TEST_METHOD(BlueprintGeneratedClass__BP_ImprovisedPistol_OpenInsertBullet__BP_ImprovisedPistol_OpenInsertBullet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ImprovisedPistol_OpenInsertBullet_C, 0x00A0);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_PKVD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0058);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_AJD6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_3DXJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_THTG, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_1WCD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_GQMR, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TetherMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_WCLX, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_DBZ6, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, SelfCollisionThickness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseLegacyBackstop, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_YG1N, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUsePointBasedWindModel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_VZWE, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LiftCoefficient, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGravityOverride, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_BG4J, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, GravityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Gravity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_KJOW, 0x00AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x00B0);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_0JQJ, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bUseSubstepping, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotVisible, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotOwnerRecentlyRendered, 0x04BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_7YRI, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_8I1L, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0500);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class APrisoner_Left_Leg_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Left_Leg__Prisoner_Left_Leg_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Left_Leg_C, 0x0770);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_B9XH, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_TYTG, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_VI1C, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_X0EB, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UBP_MountTypeWeaponHolsterChainsaw_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponHolsterChainsaw__BP_MountTypeWeaponHolsterChainsaw_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponHolsterChainsaw_C, 0x0028);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UPropertyAccess : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// class UPropertyEventBroadcaster : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// class UPropertyEventSubscriber : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// class UBP_MountTypeHandgunHolster_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeHandgunHolster__BP_MountTypeHandgunHolster_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeHandgunHolster_C, 0x0028);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceFieldSystem : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceFieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, BlueprintSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, FieldDimensions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MinBounds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MaxBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, UnknownData_9NY5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceFieldSystem, 0x0090);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_BMPS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_HM4F, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_UJA1, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_7LA0, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_H4KA, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_EX24, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TTP2, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_GB12, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_2COV, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_S48Z, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_QYKC, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_1K7D, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// class AChocolateCandy_11_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__ChocolateCandy_12__ChocolateCandy_11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChocolateCandy_11_C, 0x0898);
		}

		// class ABP_Magazine_M9_C : public AWeaponAttachmentMagazine
		TEST_METHOD(BlueprintGeneratedClass__BP_Magazine_M9__BP_Magazine_M9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Magazine_M9_C, 0x07D8);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_VUNC, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_8Q3J, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_TMAK, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_GE6V, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_7KWH, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_6SYB, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_RHV6, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_31OF, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_CSHD, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_4VK5, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_4360, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SNY5, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_ITXY, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_HGRT, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OQFB, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_V7SE, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SZXK, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08F0);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_FPLA, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_SBJI, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_TIRN, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_FDVS, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_C6RU, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_U6OC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_JCYD, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_DMB4, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_PMH6, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_CIDN, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_JXHI, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_RR57, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_OI7I, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_QZ1H, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_TDVI, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_B0QL, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_UWE3, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_BO8E, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_K4OY, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_JQ0Q, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_B75W, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_9YU8, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_XYIA, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_R301, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_DP7G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_IJ9P, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_SAUX, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaTimeStampInfo : public UObject
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_8BV0, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_ZXI2, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_MR5P, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_DFEU, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_JAXL, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMagicLeapLightingTrackingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_DZFK, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C0);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0028);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_ZEF9, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_I164, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_SFML, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_XXZ3, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_PJR3, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_M8PW, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_TRDD, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0028);
		}

		// class ABP_Wristwatch_C : public AWristwatch
		TEST_METHOD(BlueprintGeneratedClass__BP_Wristwatch__BP_Wristwatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wristwatch_C, UberGraphFrame, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Wristwatch_C, 0x0258);
		}

		// class ABP_Weapon_Improvised_Handgun_C : public AWeapon
		TEST_METHOD(BlueprintGeneratedClass__BP_Weapon_Improvised_Handgun__BP_Weapon_Improvised_Handgun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Weapon_Improvised_Handgun_C, UnknownData_818F, 0x2D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Weapon_Improvised_Handgun_C, UberGraphFrame, 0x2D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Weapon_Improvised_Handgun_C, ItemObstructionTestCapsule, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Weapon_Improvised_Handgun_C, MeleeAttackCollisionCapsule, 0x2D60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Weapon_Improvised_Handgun_C, 0x2D68);
		}

		// class ABP_Magazine_SVD_Dragunov_C : public AWeaponAttachmentMagazine
		TEST_METHOD(BlueprintGeneratedClass__BP_Magazine_SVD_Dragunov__BP_Magazine_SVD_Dragunov_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Magazine_SVD_Dragunov_C, 0x07D8);
		}

		// class ULayersBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0440);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_B0CJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_MZMD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_CA08, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_2N0T, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_OYA5, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_5VAE, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_7JGG, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_QTZZ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_LGD9, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_TE47, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0440);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_0MKS, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_BP3G, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0450);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_9TG4, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_08SM, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, bMaskFillCollisionUnderneathForNavmesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_FJJF, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_0EA2, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_9VA6, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_XVRM, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_5N5W, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, dataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_78Z6, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_07ZN, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0428);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_SWU3, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_8PNK, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_5H56, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_DG5P, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_K4HL, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04D8);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0428);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_1PTU, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_O3HH, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_F6L6, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0428);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, NavigationDataToUpdate, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00C0);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_37UJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_YNMC, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_HXQH, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreaWarningSizeThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_UYYA, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_6ZXJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_RJA1, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_KJPH, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x15FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_VQ65, 0x1600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x1620);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_4FN4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_14YD, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_P2JM, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_M5RU, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_0BXL, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_1YY0, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_IZ4M, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_VY98, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_VJ9P, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_IYLD, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_NJKY, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0460);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UBP_MountTypeWeaponHolsterMelee_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponHolsterMelee__BP_MountTypeWeaponHolsterMelee_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponHolsterMelee_C, 0x0028);
		}

		// class USequenceCameraShakeCameraStandIn : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeCameraStandIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_B3HV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, FieldOfView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_9CHX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeCameraStandIn, 0x0070);
		}

		// class USequenceCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Sequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, PlayRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Scale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendInTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendOutTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, RandomSegmentDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, bRandomSegment, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_S3ZU, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Player, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, CameraStandIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_IWLY, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShake, 0x00D0);
		}

		// class USequenceCameraShakeSequencePlayer : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_0SJ9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, BoundObjectOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, Sequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, RootTemplateInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_IC41, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeSequencePlayer, 0x05D8);
		}

		// class UTemplateSequenceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSystem, UnknownData_B67G, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSystem, 0x00B0);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0088);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0108);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0108);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_K2TB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_2V5G, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_UKDK, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_KQC7, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0688);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSection, UnknownData_LB5V, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0168);
		}

		// class AScrewdriver_C : public AItem
		TEST_METHOD(BlueprintGeneratedClass__Screwdriver__Screwdriver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScrewdriver_C, 0x0758);
		}

		// class ABP_Magazine_AK47_C : public AWeaponAttachmentMagazine
		TEST_METHOD(BlueprintGeneratedClass__BP_Magazine_AK47__BP_Magazine_AK47_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Magazine_AK47_C, 0x07D8);
		}

		// class UBP_MountTypeWeaponHolsterBow_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponHolsterBow__BP_MountTypeWeaponHolsterBow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponHolsterBow_C, 0x0028);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class ALighter_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Lighter__Lighter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALighter_C, 0x0770);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_NQSC, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_0XA2, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_8AUL, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_5UAQ, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_KIU6, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_PLYB, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_T075, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_0SP3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_Q3US, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_RB4T, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_ZMUM, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_JV54, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class ABP_Prisoner_C : public APrisoner
		TEST_METHOD(BlueprintGeneratedClass__BP_Prisoner__BP_Prisoner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UberGraphFrame, 0x2560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Waist, 0x2568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_MountedLeaningStanceAimingDownTheSights, 0x2570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_MountedDefaultStanceAimingDownTheSights, 0x2578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_MountedLeaningStanceAiming, 0x2580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_MountedDefaultStanceAiming, 0x2588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPViewsMouintedAiming, 0x2590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Throwing, 0x2598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_Lying, 0x25A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_Mounted, 0x25A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FacialHairMesh, 0x25B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Swimming, 0x25B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, HairMesh, 0x25C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, RightBreastCensor, 0x25C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LeftBreastCensor, 0x25D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, DangerDetectionSphere, 0x25D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, PenisCensor, 0x25E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, GenitalsCensor, 0x25E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Neck, 0x25F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Penis, 0x25F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, VoiceAudio, 0x2600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, VoiceChat, 0x2608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleFoot_R, 0x2610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleFoot_L, 0x2618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleHead, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleLeg_R, 0x2628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleLeg_L, 0x2630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleHand_R, 0x2638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MeleeAttackCollisionCapsuleHand_L, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, BulletFlyBySoundCollision, 0x2648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, VisionEffectsComponent, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LeavesComponent, 0x2658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Eyewear, 0x2660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UpperHead, 0x2668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LowerHead, 0x2670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Chip, 0x2678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LowerMouth, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UpperMouth, 0x2688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, REye, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LEye, 0x2698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UpperHeadSkeletal, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, BodyArmor, 0x26A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Backpack, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Feet, 0x26B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Legs, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, head, 0x26C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Hands, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Arms, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, Torso, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Defecating, 0x26E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_ClimbingWindow, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_ClimbingWindow, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Diving, 0x2700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPViews, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_NarrowLadder, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Ragdoll, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, NameWidget, 0x2720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_StandingMelee, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_StandingMelee, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_ProneAimingDownTheSights, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_CrouchingAimingDownTheSights, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_StandingAimingDownTheSights, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_ProneAiming, 0x2750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_CrouchingAiming, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_StandingAiming, 0x2760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPViewsAiming, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_ProneAiming, 0x2770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_CrouchingAiming, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_StandingAiming, 0x2780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_Prone, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_Crouching, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPV_Standing, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FPViews, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Standing, 0x27A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Prone, 0x27B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TPV_Crouching, 0x27B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FirstPersonView, 0x27C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, ThirdPersonView, 0x27C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, ShortHairCurve, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IKoffsetLeftFootToRemove, 0x27D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IKoffsetRightFootToRemove, 0x27DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IKInterpSpeedToRemove, 0x27E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LeftFootSocket, 0x27E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, RightFootSocket, 0x27EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UnknownData_ZJW8, 0x27F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, FootstepTracker, 0x27F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IsHoldingObject, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UnknownData_AYJV, 0x2801);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, BodyToMove, 0x2808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TargetDistance, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, TargetDistanceStep, 0x2814);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MaxVoiceDistance, 0x2818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IsVoiceActive, 0x281C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, IgnorePenisPhysics, 0x281D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, UnknownData_PHN3, 0x281E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumHairCurve, 0x2820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumHairCurvePDO, 0x2828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumHairCurveTopOpacity, 0x2830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongHairCurve, 0x2838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongHairCurvePDO, 0x2840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongHairCurveTopOpacity, 0x2848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, ShortFacialHairCurve, 0x2850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumFacialHairCurve, 0x2858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumFacialHairCurvePDO, 0x2860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, MediumFacialHairCurveTopOpacity, 0x2868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongFacialHairCurve, 0x2870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongFacialHairCurvePDO, 0x2878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, LongFacialHairCurveTopOpacity, 0x2880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Prisoner_C, AfroMediumHairCurve, 0x2888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Prisoner_C, 0x2890);
		}

		// class ACannedSpaghetti_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__CannedSpaghetti__CannedSpaghetti_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACannedSpaghetti_C, 0x0898);
		}

		// class ABP_Compass_Basic_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__BP_Compass_Basic__BP_Compass_Basic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Compass_Basic_C, 0x0770);
		}

		// class AUndershirt_01_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Undershirt_01__Undershirt_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUndershirt_01_C, 0x0818);
		}

		// class ALockpick_Advanced_Item_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Lockpick_Advanced_Item__Lockpick_Advanced_Item_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALockpick_Advanced_Item_C, 0x0770);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_V81U, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x00A0);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x04D0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_V9JN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_UA96, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0228);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_QTXH, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x04B0);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0228);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_1E9G, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x04A0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_JXYM, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_LMNN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_WQ8J, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_6JEN, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00A8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0228);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_EBTE, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x0490);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0238);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_TEZZ, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, randomSeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_ZCMA, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_3UZF, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_8CBJ, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x04A0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_JCK8, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0550);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_QH54, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_8VL3, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_J504, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_IYNX, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_JUSQ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0228);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_ABO6, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_ALX8, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_V4BN, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x04C0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0028);
		}

		// class AHalloween_Mask_Hockey_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Halloween_Mask_Hockey__Halloween_Mask_Hockey_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHalloween_Mask_Hockey_C, 0x0818);
		}

		// class APineapple_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Pineapple__Pineapple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APineapple_C, 0x0898);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_WOWP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, bShouldPinActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_YCBB, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00B0);
		}

		// class UMagicLeapARPinContentBindings : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinContentBindings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinContentBindings, AllContentBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinContentBindings, 0x0078);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_P8Y1, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchPinTypes, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchVolume, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPinDataLoadAttemptCompleted, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_TK0Y, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x03B0);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0028);
		}

		// class AMagicLeapARPinInfoActorBase : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinInfoActorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, PinId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, bVisibilityOverride, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, UnknownData_Z1XA, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActorBase, 0x0238);
		}

		// class AMagicLeapARPinRenderer : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinRenderer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, bInfoActorsVisibilityOverride, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_210P, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, AllInfoActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_981N, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, ClassToSpawn, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinRenderer, 0x0288);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0040);
		}

		// class AThread_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Thread__Thread_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AThread_C, 0x0770);
		}

		// class AUnderpants_01_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Underpants_01__Underpants_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUnderpants_01_C, 0x0818);
		}

		// class UMagicLeapHandMeshingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B0);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0028);
		}

		// class ASocks_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Socks__Socks_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASocks_C, 0x0818);
		}

		// class APreviewGeometryActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewGeometryActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewGeometryActor, 0x0220);
		}

		// class UPreviewGeometry : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, ParentActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, LineSets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewGeometry, 0x0080);
		}

		// class APreviewMeshActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewMeshActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewMeshActor, 0x0220);
		}

		// class UBaseDynamicMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__BaseDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_9XHN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_C4E4, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseDynamicMeshComponent, 0x04B0);
		}

		// class USimpleDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__SimpleDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, TangentsType, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bInvalidateProxyOnChange, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_P6LE, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bExplicitShowWireframe, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_FY5A, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bDrawOnTop, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_8AUL, 0x0531);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleDynamicMeshComponent, 0x0600);
		}

		// class USpaceCurveDeformationMechanicPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanicPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_I0VY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformOrigin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_5WRV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, Softness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, SoftFalloff, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_HJ1J, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanicPropertySet, 0x0070);
		}

		// class USpaceCurveDeformationMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_E7TX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_009G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, TransformProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_OEOC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PreviewGeometryActor, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderSegments, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_2MOT, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformProxy, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformGizmo, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_VOU7, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanic, 0x02B0);
		}

		// class USpatialCurveDistanceMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpatialCurveDistanceMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpatialCurveDistanceMechanic, UnknownData_65HF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatialCurveDistanceMechanic, 0x03F0);
		}

		// class UTriangleSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__TriangleSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, Bounds, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, bBoundsDirty, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, UnknownData_TAEV, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriangleSetComponent, 0x0550);
		}

		// class UUVLayoutPreviewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreviewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bVisible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_KFXC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, ScaleFactor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, WhichSide, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_0IDY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bShowWireframe, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_NTB2, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, Shift, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreviewProperties, 0x0078);
		}

		// class UMeshVertexCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshVertexCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexCommandChangeTarget, 0x0028);
		}

		// class UMultiTransformer : public UObject
		TEST_METHOD(Class__ModelingComponents__MultiTransformer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_R7E6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, GizmoManager, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_952Q, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformGizmo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformProxy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_PNB7, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiTransformer, 0x0140);
		}

		// class UOctreeDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__OctreeDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_LZB2, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, bExplicitShowWireframe, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_SO8B, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOctreeDynamicMeshComponent, 0x05C0);
		}

		// class UPlaneDistanceFromHitMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PlaneDistanceFromHitMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneDistanceFromHitMechanic, UnknownData_AVEI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneDistanceFromHitMechanic, 0x04B0);
		}

		// class UPointSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__PointSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, PointMaterial, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, Bounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, bBoundsDirty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, UnknownData_SQF9, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointSetComponent, 0x04D0);
		}

		// class UPreviewMesh : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_80A8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bBuildSpatialDataStructure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bDrawOnTop, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_U3JO, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, DynamicMeshComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_LZYD, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMesh, 0x00E0);
		}

		// class UPolyEditPreviewMesh : public UPreviewMesh
		TEST_METHOD(Class__ModelingComponents__PolyEditPreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditPreviewMesh, UnknownData_HQ3V, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditPreviewMesh, 0x04D0);
		}

		// class UPolygonSelectionMechanicProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanicProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectFaces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bPreferProjectedElement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectDownRay, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bIgnoreOcclusion, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, UnknownData_XIDV, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanicProperties, 0x0068);
		}

		// class UPolygonSelectionMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_TIJX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, Properties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_73TA, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, PreviewGeometryActor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, DrawnTriangleSetComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_NIO6, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, HighlightedFaceMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_UH8F, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanic, 0x0670);
		}

		// class UUVLayoutPreview : public UObject
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, PreviewMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, TriangleComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, bShowBackingRectangle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_3UV4, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, BackingRectangleMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_BNS1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreview, 0x0140);
		}

		// class UVoxelProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__VoxelProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, VoxelCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bAutoSimplify, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bRemoveInternalSurfaces, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, UnknownData_MCQJ, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, SimplifyMaxErrorFactor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, CubeRootMinComponentVolume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelProperties, 0x0078);
		}

		// class UWeightMapSetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__WeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMapsList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, bInvertWeightMap, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, UnknownData_LIOX, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightMapSetProperties, 0x0080);
		}

		// class UBaseCreateFromSelectedTool : public UMultiSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_F901, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, HandleSourcesProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProxies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformInitialScales, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_WD9M, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedTool, 0x00F0);
		}

		// class UBaseVoxelTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__ModelingComponents__BaseVoxelTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, VoxProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, UnknownData_VTSZ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseVoxelTool, 0x0108);
		}

		// class UCollectSurfacePathMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CollectSurfacePathMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectSurfacePathMechanic, UnknownData_OQPD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectSurfacePathMechanic, 0x0550);
		}

		// class UConstructionPlaneMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__ConstructionPlaneMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_413D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformGizmo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformProxy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_KTVF, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, ClickToSetPlaneBehavior, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstructionPlaneMechanic, 0x00F0);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_5P0N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UCurveControlPointsMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CurveControlPointsMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_0B6S, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_7PB8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewGeometryActor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlPoints, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlSegments, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewPoint, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewSegment, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_L4SE, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformProxy, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformGizmo, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_2OZ0, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveControlPointsMechanic, 0x0650);
		}

		// class UDynamicMeshReplacementChangeTarget : public UObject
		TEST_METHOD(Class__ModelingComponents__DynamicMeshReplacementChangeTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshReplacementChangeTarget, UnknownData_BK6R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshReplacementChangeTarget, 0x0058);
		}

		// class ULineSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__LineSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, LineMaterial, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, Bounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, bBoundsDirty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, UnknownData_2K9M, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineSetComponent, 0x04D0);
		}

		// class UMeshCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshCommandChangeTarget, 0x0028);
		}

		// class UMeshOpPreviewWithBackgroundCompute : public UObject
		TEST_METHOD(Class__ModelingComponents__MeshOpPreviewWithBackgroundCompute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_BDLU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, PreviewMesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, StandardMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, OverrideMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, WorkingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_4OWZ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshOpPreviewWithBackgroundCompute, 0x0090);
		}

		// class UMeshReplacementCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshReplacementCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReplacementCommandChangeTarget, 0x0028);
		}

		// class UBaseCreateFromSelectedToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedToolBuilder, UnknownData_6MTV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedToolBuilder, 0x0030);
		}

		// class UOnAcceptHandleSourcesProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__OnAcceptHandleSourcesProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, OnToolAccept, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, UnknownData_RUHD, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnAcceptHandleSourcesProperties, 0x0068);
		}

		// class UBaseCreateFromSelectedHandleSourceProperties : public UOnAcceptHandleSourcesProperties
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedHandleSourceProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, WriteOutputTo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_JTTA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_ZSMC, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedHandleSourceProperties, 0x0090);
		}

		// class UTransformInputsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__TransformInputsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bShowTransformUI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, UnknownData_9CK7, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformInputsToolProperties, 0x0068);
		}

		// class UBaseMeshProcessingToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingToolBuilder, 0x0028);
		}

		// class UBaseMeshProcessingTool : public USingleSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_9UHD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, Preview, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_ILI9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingTool, 0x0400);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_FU1Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_PLE9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_S380, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UBP_MountTypePrisonerHandLeft_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypePrisonerHandLeft__BP_MountTypePrisonerHandLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypePrisonerHandLeft_C, 0x0028);
		}

		// class ABP_PlaceableActorBaseUpgrade_C : public APlaceableActorBaseUpgrade
		TEST_METHOD(BlueprintGeneratedClass__BP_PlaceableActorBaseUpgrade__BP_PlaceableActorBaseUpgrade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlaceableActorBaseUpgrade_C, 0x04E0);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_GBI8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0038);
		}

		// class AF_Underpants_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__F_Underpants__F_Underpants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AF_Underpants_C, 0x0818);
		}

		// class ABP_Magazine_MP5_C : public AWeaponAttachmentMagazine
		TEST_METHOD(BlueprintGeneratedClass__BP_Magazine_MP5__BP_Magazine_MP5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Magazine_MP5_C, 0x07D8);
		}

		// class AScum_Shirt_Supporter_Pack_Black_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Scum_Shirt_Supporter_Pack_Black__Scum_Shirt_Supporter_Pack_Black_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScum_Shirt_Supporter_Pack_Black_C, 0x0818);
		}

		// class APrisoner_Left_Arm_C : public AWeaponItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Left_Arm__Prisoner_Left_Arm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner_Left_Arm_C, MeleeAttackCollisionCapsule, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Left_Arm_C, 0x07A8);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_TGOE, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_XHAR, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_8PC4, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_BP4E, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_NDK3, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// class AHighTop_Shoes_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__HighTop_Shoes__HighTop_Shoes_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHighTop_Shoes_C, 0x0818);
		}

		// class APenisWarmer_01_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__PenisWarmer_01__PenisWarmer_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APenisWarmer_01_C, 0x0818);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class UBP_TakeInHandsMelee1H_C : public UTakeInHandsAssetData
		TEST_METHOD(BlueprintGeneratedClass__BP_TakeInHandsMelee1H__BP_TakeInHandsMelee1H_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TakeInHandsMelee1H_C, 0x00F8);
		}

		// class AChocolateCandy_10_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__ChocolateCandy_11__ChocolateCandy_10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChocolateCandy_10_C, 0x0898);
		}

		// class AScissors_01_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Scissors_01__Scissors_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScissors_01_C, 0x0770);
		}

		// class AInmate_shirt_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Inmate_shirt__Inmate_shirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInmate_shirt_C, 0x0818);
		}

		// class UBP_TakenDamageCameraShake_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__BP_TakenDamageCameraShake__BP_TakenDamageCameraShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TakenDamageCameraShake_C, 0x0180);
		}

		// class ABP_FootstepTracker_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_FootstepTracker__BP_FootstepTracker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, FoliagePositionMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, FoliageOffsetMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, LastPos, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, GrassInfluenceDrawSize, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, UnknownData_AI9Z, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, FootstepsPositionMaterial, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, FootstepsOffsetMaterial, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, Character, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, footstepTimeout, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, UnknownData_BF7E, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, FoliageInfluenceMaterial, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FootstepTracker_C, LastDirection, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FootstepTracker_C, 0x028C);
		}

		// class APainkillers_01_C : public AMedicationItem
		TEST_METHOD(BlueprintGeneratedClass__Painkillers_01__Painkillers_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainkillers_01_C, 0x0778);
		}

		// class UCutting_Tool_C : public UChoppingToolItemTag
		TEST_METHOD(BlueprintGeneratedClass__Cutting_Tool__Cutting_Tool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCutting_Tool_C, 0x0038);
		}

		// class ACan01_C : public ADrinkItem
		TEST_METHOD(BlueprintGeneratedClass__Can01__Can01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACan01_C, 0x08A8);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_HSBE, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_BF10, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class ACal_7_62x54mmR_C : public AAmmunitionItem
		TEST_METHOD(BlueprintGeneratedClass__Cal_7_62x54mmR__Cal_7_62x54mmR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACal_7_62x54mmR_C, 0x07A0);
		}

		// class UBP_AK47_CheckAmmo_C : public UWeaponActionCheckAmmoSequence
		TEST_METHOD(BlueprintGeneratedClass__BP_AK47_CheckAmmo__BP_AK47_CheckAmmo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AK47_CheckAmmo_C, 0x0050);
		}

		// class AImprovised_Bag_Small_01_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Improvised_Bag_Small_01__Improvised_Bag_Small_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AImprovised_Bag_Small_01_C, 0x0818);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_RMNH, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_8JFO, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_NU58, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_L3VI, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x0770);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0238);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, randomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_BDOY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_YVI7, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_68IV, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_M505, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0438);
		}

		// class UBP_TakeInHandsHandgun_C : public UTakeInHandsAssetData
		TEST_METHOD(BlueprintGeneratedClass__BP_TakeInHandsHandgun__BP_TakeInHandsHandgun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TakeInHandsHandgun_C, 0x00F8);
		}

		// class AApple_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Apple__Apple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AApple_C, 0x0898);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_Z7QR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_SL5H, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_QW8Q, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_3QWK, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class ABP_PrisonerCorpse_C : public APrisonerCorpse
		TEST_METHOD(BlueprintGeneratedClass__BP_PrisonerCorpse__BP_PrisonerCorpse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, UberGraphFrame, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, ShortHairCurve, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumHairCurve, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumHairCurvePDO, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumHairCurveTopOpacity, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongHairCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongHairCurvePDO, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongHairCurveTopOpacity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, ShortFacialHairCurve, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumFacialHairCurve, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumFacialHairCurvePDO, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, MediumFacialHairCurveTopOpacity, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongFacialHairCurve, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongFacialHairCurvePDO, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, LongFacialHairCurveTopOpacity, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PrisonerCorpse_C, AfroMediumHairCurve, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PrisonerCorpse_C, 0x0680);
		}

		// class A1H_Dildo_C : public AWeaponItem
		TEST_METHOD(BlueprintGeneratedClass__1H_Dildo__1H_Dildo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A1H_Dildo_C, MeleeAttackCollisionCapsule, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A1H_Dildo_C, 0x07A8);
		}

		// class AApple_2_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Apple_3__Apple_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AApple_2_C, 0x0898);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_4YQR, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_C00L, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0480);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_QTS1, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_ZS3U, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_NSR0, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_I9W4, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_UW49, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_I3PC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class UABP_Prisoner_FirstPersonAimRotation_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner_FirstPersonAimRotation__ABP_Prisoner_FirstPersonAimRotation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, UnknownData_UKXZ, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_LinkedInputPose, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_LocalToComponentSpace_2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_9, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_8, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_BlendListByBool, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_7, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_6, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_LocalToComponentSpace, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ComponentToLocalSpace, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_SaveCachedPose, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_UseCachedPose_2, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_UseCachedPose, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_5, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_4, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_3, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone_2, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, AnimGraphNode_ModifyBone, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, FirstPersonAimPitch, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, FirstPersonAimYawDelta, 0x1024);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, ShouldApplyArmsPitchCorrection, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_FirstPersonAimRotation_C, Stance, 0x1029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_FirstPersonAimRotation_C, 0x102A);
		}

		// class AHuman_Skin_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Human_Skin__Human_Skin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHuman_Skin_C, 0x0770);
		}

		// class AF_Undershirt_Bra_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__F_Undershirt_Bra__F_Undershirt_Bra_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AF_Undershirt_Bra_C, 0x0818);
		}

		// class AInmate_pants_C : public AClothesItem
		TEST_METHOD(BlueprintGeneratedClass__Inmate_pants__Inmate_pants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInmate_pants_C, 0x0818);
		}

		// class AAnimal_Bone_Big_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Animal_Bone_Big__Animal_Bone_Big_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal_Bone_Big_C, MeleeAttackCollisionCapsule, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimal_Bone_Big_C, 0x0778);
		}

		// class ACal_7_62x39mm_C : public AAmmunitionItem
		TEST_METHOD(BlueprintGeneratedClass__Cal_7_62x39mm__Cal_7_62x39mm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACal_7_62x39mm_C, 0x07A0);
		}

		// class ABP_WeaponBullet_9mmParabellumFMJ_C : public AProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponBullet_9mmParabellumFMJ__BP_WeaponBullet_9mmParabellumFMJ_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WeaponBullet_9mmParabellumFMJ_C, 0x0408);
		}

		// class ABanana_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Banana__Banana_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABanana_C, 0x0898);
		}

		// class ACal_5_45x39mm_C : public AAmmunitionItem
		TEST_METHOD(BlueprintGeneratedClass__Cal_5_45x39mm__Cal_5_45x39mm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACal_5_45x39mm_C, 0x07A0);
		}

		// class ACan02_C : public ADrinkItem
		TEST_METHOD(BlueprintGeneratedClass__Can02__Can02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACan02_C, 0x08A8);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_E82W, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_U1SH, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_1BON, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_CJ70, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ZJTR, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_9J70, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_X0XP, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_K2QE, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_RM3N, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_1F7H, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_7ODL, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CXC5, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_Y2MJ, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_VUSD, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_HXCM, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_W2EJ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_0F2B, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_ARER, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_W67B, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_UOEA, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0A50);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_8R1A, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_VSGV, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_HQ5X, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04D0);
		}

		// class AHuman_Teeth_C : public AItem
		TEST_METHOD(BlueprintGeneratedClass__Human_Teeth__Human_Teeth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHuman_Teeth_C, 0x0758);
		}

		// class UABP_Prisoner_SpineLeaning_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner_SpineLeaning__ABP_Prisoner_SpineLeaning_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, UnknownData_IXVX, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_LinkedInputPose, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ModifyBone_5, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ModifyBone_4, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ModifyBone_3, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ModifyBone_2, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ModifyBone, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_ComponentToLocalSpace, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, AnimGraphNode_LocalToComponentSpace, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, LeanAmount, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, Spine1LeanAngle, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, Spine2LeanAngle, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, Spine3LeanAngle, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_SpineLeaning_C, RibcageLeanAngle, 0x0988);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_SpineLeaning_C, 0x098C);
		}

		// class USlicing_Tool_C : public UChoppingToolItemTag
		TEST_METHOD(BlueprintGeneratedClass__Slicing_Tool__Slicing_Tool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlicing_Tool_C, 0x0038);
		}

		// class ABP_WeaponBullet_545x39FMJ1_C : public AProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponBullet_545x39FMJ1__BP_WeaponBullet_545x39FMJ1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WeaponBullet_545x39FMJ1_C, 0x0408);
		}

		// class UUI_CharacterNameWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_CharacterNameWidget__UI_CharacterNameWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CharacterNameWidget_C, MainText, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_CharacterNameWidget_C, 0x0268);
		}

		// class ABP_PlaceableActorBaseBuilding_C : public APlaceableActorBaseBuilding
		TEST_METHOD(BlueprintGeneratedClass__BP_PlaceableActorBaseBuilding__BP_PlaceableActorBaseBuilding_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlaceableActorBaseBuilding_C, 0x0588);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class AHuman_Ears_C : public AItem
		TEST_METHOD(BlueprintGeneratedClass__Human_Ears__Human_Ears_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHuman_Ears_C, 0x0758);
		}

		// class ACal_50_AE_C : public AAmmunitionItem
		TEST_METHOD(BlueprintGeneratedClass__Cal_50_AE__Cal_50_AE_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACal_50_AE_C, 0x07A0);
		}

		// class UAnimBP_ImprovisedPistol50cal_C : public UWeaponAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AnimBP_ImprovisedPistol50cal__AnimBP_ImprovisedPistol50cal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_Root, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_Slot_4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_Slot_3, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_Slot_2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_Slot, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_BlendListByEnum, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_UseCachedPose_3, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_UseCachedPose_2, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_UseCachedPose, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_SaveCachedPose, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBP_ImprovisedPistol50cal_C, AnimGraphNode_SequencePlayer, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBP_ImprovisedPistol50cal_C, 0x0748);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_0VPD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_7ABU, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_O6U6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_6SUR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_GIKU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_U54R, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_QUL7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_7SEU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_S8XE, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_91PA, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_TRFM, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_KMF8, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_N0E6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_8U29, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_TYTC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_V180, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_65MI, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_7Y0C, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_TGUS, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_LD1W, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_TKOV, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_9NIU, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_LA02, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_VZ4S, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_DFOZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_FN0C, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_52LH, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_GW1C, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_0P98, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_9D6N, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_5244, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_5106, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_ZNHB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_HOVC, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_CUO6, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_6GAI, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_G9SC, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_JIYD, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_CR3P, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_6T97, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class AHuman_Steak_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Human_Steak__Human_Steak_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHuman_Steak_C, 0x0898);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_QDDA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_FNDH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_EVSH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_CFUG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_YAYM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_6VYG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_ZHGG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_ZNMC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_YZ8H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_M7DO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_OK0P, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_MFKH, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_KJMG, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_S1ZA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_VTFI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_ZESW, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_WTAV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_WIXN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_F6OC, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_WSO6, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_8OX4, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_JQTV, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_19TS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_ZIY3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UBTTask_FlyTo : public UBTTaskNode
		TEST_METHOD(Class__DonAINavigation__BTTask_FlyTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, FlightLocationKey, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, FlightResultKey, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, KeyToFlipFlopWhenTaskExits, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, MinimumProximityRequired, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, UnknownData_W2OE, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, RecalculatePathTolerance, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, UnknownData_UN2Y, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, QueryParams, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, DebugParams, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, NavigationManager, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, bTeleportToDestinationUponFailure, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, UnknownData_J265, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, MaxTimeBeforeTeleport, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FlyTo, UnknownData_QAFA, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FlyTo, 0x0188);
		}

		// class UDonEnvQueryTest_Navigation : public UEnvQueryTest
		TEST_METHOD(Class__DonAINavigation__DonEnvQueryTest_Navigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDonEnvQueryTest_Navigation, UnknownData_JXYA, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDonEnvQueryTest_Navigation, RandomLocationMaxAttempts, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDonEnvQueryTest_Navigation, RandomLocationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDonEnvQueryTest_Navigation, UnknownData_8RAS, 0x0204);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDonEnvQueryTest_Navigation, 0x0208);
		}

		// class UDonNavigationHelper : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DonAINavigation__DonNavigationHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDonNavigationHelper, 0x0028);
		}

		// class ADonNavigationManager : public AActor
		TEST_METHOD(Class__DonAINavigation__DonNavigationManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_ZTBY, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, bIsUnbound, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_H2WT, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, SceneComponent, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, Billboard, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_L4F0, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, VoxelSize, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, XGridSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, YGridSize, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, ZGridSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, ObstacleQueryChannels, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, ActorsToIgnoreForCollision, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, AutoCorrectionGuessList, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnrealPhyxPenetrationDepth, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, PerformCollisionChecksOnStartup, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, bMultiThreadingEnabled, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_ABB2, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxPathSolverIterationsPerTick, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxCollisionSolverIterationsPerTick, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxPathSolverIterationsOnThread, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxCollisionSolverIterationsOnThread, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxPathSolverIterationsPerTick_Unbound, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxCollisionSolverIterationsPerTick_Unbound, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxPathSolverIterationsOnThread_Unbound, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, MaxCollisionSolverIterationsOnThread_Unbound, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, WorldBoundaryVisualizer, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, bDisplayWorldBoundary, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, bDisplayWorldBoundaryInGame, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_UP36, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, DebugVoxelsLineThickness, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, bRunDebugValidationsForDynamicCollisions, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_M14R, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, ActiveNavigationTaskOwners, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, ActiveCollisionTaskOwners, 0x6A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADonNavigationManager, UnknownData_W9SR, 0x6A90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADonNavigationManager, 0x6B70);
		}

		// class ADonNavigationManagerUnbound : public ADonNavigationManager
		TEST_METHOD(Class__DonAINavigation__DonNavigationManagerUnbound)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADonNavigationManagerUnbound, 0x6B70);
		}

		// class UDonNavigator : public UInterface
		TEST_METHOD(Class__DonAINavigation__DonNavigator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDonNavigator, 0x0028);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_DNO3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_5VRQ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_TJ9V, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_1VL1, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_WE0A, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_F5RE, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_0S72, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class ACooked_Vegetables_01_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Cooked_Vegetables_01__Cooked_Vegetables_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACooked_Vegetables_01_C, 0x0898);
		}

		// class APrisoner_Right_Arm_C : public AEquipmentItem
		TEST_METHOD(BlueprintGeneratedClass__Prisoner_Right_Arm__Prisoner_Right_Arm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner_Right_Arm_C, 0x0770);
		}

		// class UABP_Prisoner_C : public UPrisonerAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner__ABP_Prisoner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UberGraphFrame, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_199, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_50, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_49, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_198, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_225, 0x15D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_197, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_48, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_111, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_196, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_224, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_401, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_400, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_195, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_47, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_110, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyAdditive_2, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_134, 0x1DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_399, 0x1E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_194, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_193, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_192, 0x1F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_191, 0x1F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_231, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_398, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_46, 0x20E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_109, 0x2238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_230, 0x22E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_229, 0x23D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_190, 0x24B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyMeshSpaceAdditive_5, 0x24E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_397, 0x25B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_108, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_27, 0x2700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_26, 0x2890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_396, 0x2A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_189, 0x2AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_188, 0x2AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_45, 0x2B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_757, 0x2C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_395, 0x2CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose_6, 0x2D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_756, 0x2DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_394, 0x2E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose_5, 0x2EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_755, 0x2ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_393, 0x2F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose_4, 0x2FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_107, 0x3010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_247, 0x30C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_246, 0x30E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_245, 0x3110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_244, 0x3138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_243, 0x3160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_242, 0x3188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_241, 0x31B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_240, 0x31D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_239, 0x3200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_238, 0x3228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_237, 0x3250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_236, 0x3278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_235, 0x32A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_234, 0x32C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_233, 0x32F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_232, 0x3318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_231, 0x3340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_230, 0x3368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_229, 0x3390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_228, 0x33B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_227, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_226, 0x3408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_225, 0x3430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_224, 0x3458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_223, 0x3480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_222, 0x34A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_221, 0x34D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_220, 0x34F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_219, 0x3520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_218, 0x3548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_217, 0x3570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_216, 0x3598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_215, 0x35C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_214, 0x35E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_213, 0x3610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_212, 0x3638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_211, 0x3660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_210, 0x3688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_209, 0x36B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_208, 0x36D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_207, 0x3700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_206, 0x3728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_205, 0x3750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_204, 0x3778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_203, 0x37A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_202, 0x37C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_201, 0x37F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_200, 0x3818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_199, 0x3840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_198, 0x3868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_197, 0x3890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_196, 0x38B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_195, 0x38E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_194, 0x3908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_193, 0x3930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_192, 0x3958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_191, 0x3980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_190, 0x39A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_189, 0x39D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_188, 0x39F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_187, 0x3A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_186, 0x3A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_185, 0x3A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_184, 0x3A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_183, 0x3AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_182, 0x3AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_181, 0x3B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_180, 0x3B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_179, 0x3B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_178, 0x3B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_177, 0x3BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_176, 0x3BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_175, 0x3C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_174, 0x3C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_173, 0x3C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_172, 0x3C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_171, 0x3CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_170, 0x3CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_169, 0x3CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_168, 0x3D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_167, 0x3D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_166, 0x3D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_165, 0x3D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_164, 0x3DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_163, 0x3DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_162, 0x3E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_161, 0x3E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_160, 0x3E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_159, 0x3E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_158, 0x3EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_157, 0x3ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_156, 0x3EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_155, 0x3F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_154, 0x3F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_153, 0x3F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_152, 0x3F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_151, 0x3FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_150, 0x3FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_149, 0x4010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_148, 0x4038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_147, 0x4060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_146, 0x4088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_145, 0x40B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_144, 0x40D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_143, 0x4100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_142, 0x4128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_141, 0x4150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_140, 0x4178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_139, 0x41A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_138, 0x41C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_137, 0x41F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_136, 0x4218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_135, 0x4240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_134, 0x4268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_133, 0x4290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_132, 0x42B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_131, 0x42E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_130, 0x4308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_129, 0x4330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_128, 0x4358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_127, 0x4380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_126, 0x43A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_125, 0x43D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_124, 0x43F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_123, 0x4420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_122, 0x4448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_121, 0x4470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_120, 0x4498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_119, 0x44C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_118, 0x44E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_117, 0x4510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_116, 0x4538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_115, 0x4560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_114, 0x4588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_113, 0x45B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_112, 0x45D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_111, 0x4600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_110, 0x4628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_109, 0x4650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_108, 0x4678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_107, 0x46A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_106, 0x46C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_105, 0x46F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_104, 0x4718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_103, 0x4740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_102, 0x4768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_101, 0x4790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_100, 0x47B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_99, 0x47E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_98, 0x4808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_97, 0x4830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_96, 0x4858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_95, 0x4880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_94, 0x48A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_93, 0x48D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_92, 0x48F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_91, 0x4920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_90, 0x4948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_89, 0x4970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_88, 0x4998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_87, 0x49C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_86, 0x49E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_85, 0x4A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_84, 0x4A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_83, 0x4A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_82, 0x4A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_81, 0x4AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_80, 0x4AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_79, 0x4B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_78, 0x4B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_77, 0x4B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_76, 0x4B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_75, 0x4BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_74, 0x4BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_73, 0x4BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_72, 0x4C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_71, 0x4C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_70, 0x4C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_69, 0x4C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_68, 0x4CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_67, 0x4CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_66, 0x4D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_65, 0x4D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_64, 0x4D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_63, 0x4D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_62, 0x4DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_61, 0x4DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_60, 0x4DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_59, 0x4E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_58, 0x4E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_57, 0x4E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_56, 0x4E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_55, 0x4EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_54, 0x4EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_53, 0x4F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_52, 0x4F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_51, 0x4F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_50, 0x4F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_206, 0x4FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_63, 0x5000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_205, 0x5030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_204, 0x5080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_754, 0x50D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_246, 0x5150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_392, 0x5210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_753, 0x52B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_752, 0x5330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_106, 0x53B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_751, 0x5460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_62, 0x54E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_203, 0x5510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_202, 0x5560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_750, 0x55B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_245, 0x5630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_391, 0x56F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_749, 0x5790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_748, 0x5810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_201, 0x5890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_200, 0x58E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_747, 0x5930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_244, 0x59B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_390, 0x5A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_746, 0x5B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_745, 0x5B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_105, 0x5C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_744, 0x5CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_61, 0x5D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_199, 0x5D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_198, 0x5DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_743, 0x5E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_243, 0x5E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_389, 0x5F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_742, 0x5FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_741, 0x6070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_197, 0x60F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_196, 0x6140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_740, 0x6190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_242, 0x6210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_388, 0x62D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_739, 0x6370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_738, 0x63F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_104, 0x6470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_737, 0x6520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_60, 0x65A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_195, 0x65D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_194, 0x6620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_736, 0x6670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_241, 0x66F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_387, 0x67B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_735, 0x6850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_734, 0x68D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_103, 0x6950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_733, 0x6A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_59, 0x6A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_193, 0x6AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_192, 0x6B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_732, 0x6B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_240, 0x6BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_386, 0x6C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_731, 0x6D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_730, 0x6DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_102, 0x6E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_729, 0x6EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_58, 0x6F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_191, 0x6F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_190, 0x6FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_728, 0x7030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_239, 0x70B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_385, 0x7170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_727, 0x7210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_726, 0x7290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_101, 0x7310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_725, 0x73C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_57, 0x7440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_100, 0x7470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_724, 0x7520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_723, 0x75A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_56, 0x7620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_99, 0x7650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_722, 0x7700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_170, 0x7780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_169, 0x7888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_134, 0x7990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_133, 0x79B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_168, 0x79D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_721, 0x7AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_55, 0x7B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_49, 0x7B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_98, 0x7BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_720, 0x7C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_167, 0x7CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_166, 0x7DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_133, 0x7EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_132, 0x7F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_165, 0x7F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_719, 0x8038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_54, 0x80B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_97, 0x80E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_718, 0x8198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_164, 0x8218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_163, 0x8320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_132, 0x8428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_131, 0x8448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_162, 0x8468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_717, 0x8570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_53, 0x85F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_96, 0x8620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_716, 0x86D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_161, 0x8750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_160, 0x8858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_131, 0x8960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_130, 0x8980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_159, 0x89A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_715, 0x8AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_52, 0x8B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_95, 0x8B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_714, 0x8C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_158, 0x8C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_157, 0x8D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_130, 0x8E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_129, 0x8EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_156, 0x8ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_713, 0x8FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_51, 0x9060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_94, 0x9090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_712, 0x9140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_155, 0x91C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_154, 0x92C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_129, 0x93D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_128, 0x93F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_153, 0x9410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_711, 0x9518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_50, 0x9598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_93, 0x95C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_710, 0x9678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_152, 0x96F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_151, 0x9800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_128, 0x9908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_127, 0x9928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_150, 0x9948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_709, 0x9A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_49, 0x9AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_92, 0x9B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_708, 0x9BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_149, 0x9C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_148, 0x9D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_127, 0x9E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_126, 0x9E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_147, 0x9E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_228, 0x9F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_48, 0xA070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_91, 0xA0A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_707, 0xA150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_146, 0xA1D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_145, 0xA2D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_126, 0xA3E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_125, 0xA400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_144, 0xA420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_706, 0xA528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_47, 0xA5A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_90, 0xA5D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_705, 0xA688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_143, 0xA708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_142, 0xA810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_125, 0xA918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_124, 0xA938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_141, 0xA958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_704, 0xAA60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_46, 0xAAE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_89, 0xAB10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_703, 0xABC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_140, 0xAC40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_139, 0xAD48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_124, 0xAE50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_123, 0xAE70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_138, 0xAE90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_702, 0xAF98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_45, 0xB018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_48, 0xB048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_47, 0xB070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_88, 0xB098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_227, 0xB148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_87, 0xB230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_701, 0xB2E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_137, 0xB360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_136, 0xB468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_123, 0xB570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_122, 0xB590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_135, 0xB5B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_226, 0xB6B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_44, 0xB7A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_86, 0xB7D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_700, 0xB880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_134, 0xB900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_133, 0xBA08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_122, 0xBB10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_121, 0xBB30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_132, 0xBB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_699, 0xBC58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_43, 0xBCD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_46, 0xBD08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_45, 0xBD30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_44, 0xBD58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_43, 0xBD80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_42, 0xBDA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_41, 0xBDD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_40, 0xBDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_131, 0xBE20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_121, 0xBF28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_130, 0xBF48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_120, 0xC050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_223, 0xC070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_698, 0xC138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_697, 0xC1B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_42, 0xC238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_129, 0xC268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_189, 0xC370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_188, 0xC3C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_222, 0xC410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_384, 0xC4D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_120, 0xC578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_128, 0xC598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_119, 0xC6A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_187, 0xC6C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_41, 0xC710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_39, 0xC740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_186, 0xC768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_40, 0xC7B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_38, 0xC7E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_383, 0xC810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_696, 0xC8B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_238, 0xC930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_382, 0xC9F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_185, 0xCA90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_184, 0xCAE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_381, 0xCB30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_183, 0xCBD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_182, 0xCC20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_181, 0xCC70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_695, 0xCCC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_380, 0xCD40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_180, 0xCDE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_179, 0xCE30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_85, 0xCE80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_39, 0xCF30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_84, 0xCF60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_694, 0xD010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_693, 0xD090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_379, 0xD110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_692, 0xD1B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_237, 0xD230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_691, 0xD2F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_38, 0xD370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_690, 0xD3A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_689, 0xD420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_378, 0xD4A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_688, 0xD540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_83, 0xD5C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_236, 0xD670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_687, 0xD730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_37, 0xD7B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_37, 0xD7E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_36, 0xD808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_35, 0xD830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_235, 0xD858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_686, 0xD918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_377, 0xD998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_685, 0xDA38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_684, 0xDAB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_82, 0xDB38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_683, 0xDBE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_682, 0xDC68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_36, 0xDCE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_681, 0xDD18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_376, 0xDD98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_680, 0xDE38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_375, 0xDEB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_178, 0xDF58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_177, 0xDFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_374, 0xDFF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_176, 0xE098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_175, 0xE0E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_174, 0xE138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_234, 0xE188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_373, 0xE248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_173, 0xE2E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_172, 0xE338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_81, 0xE388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_35, 0xE438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_34, 0xE468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_33, 0xE490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_32, 0xE4B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_31, 0xE4E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_30, 0xE508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_29, 0xE530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_233, 0xE558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_679, 0xE618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_372, 0xE698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_678, 0xE738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_225, 0xE7B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_224, 0xE8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_223, 0xE988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_232, 0xEA70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_677, 0xEB30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_371, 0xEBB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_676, 0xEC50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_222, 0xECD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_221, 0xEDB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_80, 0xEEA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_220, 0xEF50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_219, 0xF038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_34, 0xF120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_28, 0xF150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_675, 0xF178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_674, 0xF1F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_673, 0xF278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_672, 0xF2F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_671, 0xF378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_670, 0xF3F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_669, 0xF478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_668, 0xF4F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_79, 0xF578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_667, 0xF628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_33, 0xF6A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_666, 0xF6D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_665, 0xF758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_664, 0xF7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_663, 0xF858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_662, 0xF8D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_661, 0xF958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_660, 0xF9D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_78, 0xFA58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_659, 0xFB08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_658, 0xFB88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_32, 0xFC08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_657, 0xFC38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_656, 0xFCB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_655, 0xFD38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_654, 0xFDB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_653, 0xFE38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_652, 0xFEB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_77, 0xFF38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_651, 0xFFE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_31, 0x10068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_650, 0x10098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_649, 0x10118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_648, 0x10198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_647, 0x10218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_646, 0x10298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_76, 0x10318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_645, 0x103C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_644, 0x10448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_30, 0x104C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_643, 0x104F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_231, 0x10578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_642, 0x10638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_171, 0x106B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_170, 0x10708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_641, 0x10758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_221, 0x107D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_220, 0x108A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_169, 0x10968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_168, 0x109B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_640, 0x10A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_639, 0x10A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_230, 0x10B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_638, 0x10BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_229, 0x10C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_219, 0x10D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_218, 0x10DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_167, 0x10E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_166, 0x10EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_217, 0x10F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_216, 0x11000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_637, 0x110C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_228, 0x11148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_636, 0x11208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_165, 0x11288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_164, 0x112D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_635, 0x11328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_215, 0x113A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_214, 0x11470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_634, 0x11538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_227, 0x115B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_633, 0x11678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_163, 0x116F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_162, 0x11748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_632, 0x11798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_213, 0x11818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_212, 0x118E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_75, 0x119A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_161, 0x11A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_160, 0x11AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_631, 0x11AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_630, 0x11B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_226, 0x11BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_629, 0x11CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_225, 0x11D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_211, 0x11DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_210, 0x11EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_159, 0x11F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_158, 0x11FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_209, 0x12028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_208, 0x120F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_628, 0x121B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_224, 0x12238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_627, 0x122F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_157, 0x12378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_156, 0x123C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_626, 0x12418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_207, 0x12498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_206, 0x12560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_155, 0x12628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_154, 0x12678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_205, 0x126C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_204, 0x12790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_625, 0x12858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_29, 0x128D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_27, 0x12908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_26, 0x12930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_25, 0x12958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_24, 0x12980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_23, 0x129A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_22, 0x129D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_21, 0x129F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_20, 0x12A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_19, 0x12A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_624, 0x12A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_153, 0x12AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_223, 0x12B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_623, 0x12C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_152, 0x12C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_222, 0x12CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_622, 0x12D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_151, 0x12E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_221, 0x12E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_621, 0x12F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_150, 0x12FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_220, 0x12FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_620, 0x130B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_370, 0x13130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_149, 0x131D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_219, 0x13220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_619, 0x132E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_618, 0x13360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_369, 0x133E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_148, 0x13480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_218, 0x134D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_617, 0x13590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_616, 0x13610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_368, 0x13690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_147, 0x13730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_217, 0x13780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_615, 0x13840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_146, 0x138C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_145, 0x13910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_216, 0x13960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_367, 0x13A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_614, 0x13AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_613, 0x13B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_144, 0x13BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_215, 0x13C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_612, 0x13CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_143, 0x13D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_214, 0x13DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_142, 0x13E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_611, 0x13EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_213, 0x13F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_141, 0x13FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_140, 0x14040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_212, 0x14090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_366, 0x14150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_610, 0x141F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_609, 0x14270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_139, 0x142F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_211, 0x14340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_608, 0x14400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_138, 0x14480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_210, 0x144D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_137, 0x14590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_607, 0x145E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_209, 0x14660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_74, 0x14720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_28, 0x147D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_606, 0x14800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_136, 0x14880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_208, 0x148D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_605, 0x14990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_135, 0x14A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_207, 0x14A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_604, 0x14B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_134, 0x14BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_206, 0x14BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_603, 0x14CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_133, 0x14D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_205, 0x14D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_602, 0x14E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_365, 0x14EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_132, 0x14F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_204, 0x14FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_601, 0x15070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_600, 0x150F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_364, 0x15170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_131, 0x15210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_203, 0x15260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_599, 0x15320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_598, 0x153A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_363, 0x15420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_130, 0x154C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_202, 0x15510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_129, 0x155D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_128, 0x15620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_201, 0x15670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_362, 0x15730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_597, 0x157D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_596, 0x15850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_127, 0x158D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_200, 0x15920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_595, 0x159E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_126, 0x15A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_199, 0x15AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_125, 0x15B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_594, 0x15BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_198, 0x15C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_124, 0x15D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_123, 0x15D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_197, 0x15DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_361, 0x15E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_593, 0x15F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_592, 0x15F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_122, 0x16000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_196, 0x16050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_591, 0x16110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_121, 0x16190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_195, 0x161E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_120, 0x162A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_590, 0x162F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_194, 0x16370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_73, 0x16430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_589, 0x164E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_27, 0x16560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_119, 0x16590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_118, 0x165E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_588, 0x16630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_587, 0x166B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_586, 0x16730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_51, 0x167B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_360, 0x168A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_119, 0x16948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_118, 0x16968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_127, 0x16988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_193, 0x16A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_203, 0x16B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_202, 0x16C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_585, 0x16CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_50, 0x16D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_359, 0x16E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_584, 0x16EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_118, 0x16F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_117, 0x16F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_126, 0x16FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_192, 0x170C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_201, 0x17180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_200, 0x17248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_117, 0x17310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_116, 0x17360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_583, 0x173B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_199, 0x17430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_115, 0x174F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_114, 0x17548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_582, 0x17598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_581, 0x17618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_580, 0x17698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_49, 0x17718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_358, 0x17810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_117, 0x178B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_116, 0x178D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_125, 0x178F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_191, 0x179F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_198, 0x17AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_197, 0x17B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_579, 0x17C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_48, 0x17CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_357, 0x17DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_578, 0x17E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_116, 0x17EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_115, 0x17F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_124, 0x17F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_190, 0x18028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_196, 0x180E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_195, 0x181B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_113, 0x18278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_112, 0x182C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_577, 0x18318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_194, 0x18398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_111, 0x18460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_110, 0x184B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_576, 0x18500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_575, 0x18580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_574, 0x18600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_47, 0x18680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_356, 0x18778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_115, 0x18818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_114, 0x18838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_123, 0x18858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_189, 0x18960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_193, 0x18A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_192, 0x18AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_573, 0x18BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_46, 0x18C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_355, 0x18D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_572, 0x18DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_114, 0x18E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_113, 0x18E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_122, 0x18E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_188, 0x18F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_191, 0x19050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_190, 0x19118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_109, 0x191E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_108, 0x19230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_571, 0x19280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_189, 0x19300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_107, 0x193C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_106, 0x19418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_570, 0x19468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_569, 0x194E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_568, 0x19568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_45, 0x195E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_354, 0x196E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_113, 0x19780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_112, 0x197A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_121, 0x197C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_187, 0x198C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_188, 0x19988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_187, 0x19A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_567, 0x19B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_44, 0x19B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_353, 0x19C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_566, 0x19D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_112, 0x19DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_111, 0x19DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_120, 0x19DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_186, 0x19EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_186, 0x19FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_185, 0x1A080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_105, 0x1A148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_104, 0x1A198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_565, 0x1A1E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_184, 0x1A268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_564, 0x1A330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_43, 0x1A3B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_352, 0x1A4A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_563, 0x1A548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_111, 0x1A5C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_110, 0x1A5E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_119, 0x1A608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_185, 0x1A710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_183, 0x1A7D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_182, 0x1A898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_103, 0x1A960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_102, 0x1A9B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_562, 0x1AA00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_561, 0x1AA80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_42, 0x1AB00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_351, 0x1ABF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_560, 0x1AC98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_110, 0x1AD18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_109, 0x1AD38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_118, 0x1AD58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_184, 0x1AE60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_181, 0x1AF20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_180, 0x1AFE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_101, 0x1B0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_100, 0x1B100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_559, 0x1B150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_558, 0x1B1D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_41, 0x1B250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_350, 0x1B348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_557, 0x1B3E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_109, 0x1B468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_108, 0x1B488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_117, 0x1B4A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_183, 0x1B5B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_179, 0x1B670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_178, 0x1B738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_99, 0x1B800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_98, 0x1B850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_556, 0x1B8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_555, 0x1B920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_40, 0x1B9A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_349, 0x1BA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_554, 0x1BB38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_108, 0x1BBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_107, 0x1BBD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_116, 0x1BBF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_182, 0x1BD00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_177, 0x1BDC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_176, 0x1BE88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_97, 0x1BF50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_96, 0x1BFA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_553, 0x1BFF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_552, 0x1C070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_39, 0x1C0F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_348, 0x1C1E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_551, 0x1C288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_107, 0x1C308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_106, 0x1C328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_115, 0x1C348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_181, 0x1C450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_175, 0x1C510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_174, 0x1C5D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_95, 0x1C6A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_94, 0x1C6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_550, 0x1C740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_549, 0x1C7C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_38, 0x1C840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_347, 0x1C938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_548, 0x1C9D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_106, 0x1CA58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_105, 0x1CA78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_114, 0x1CA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_180, 0x1CBA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_173, 0x1CC60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_172, 0x1CD28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_93, 0x1CDF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_92, 0x1CE40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_547, 0x1CE90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_546, 0x1CF10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_37, 0x1CF90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_346, 0x1D088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_545, 0x1D128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_105, 0x1D1A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_104, 0x1D1C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_113, 0x1D1E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_179, 0x1D2F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_171, 0x1D3B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_170, 0x1D478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_91, 0x1D540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_90, 0x1D590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_544, 0x1D5E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_543, 0x1D660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_36, 0x1D6E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_345, 0x1D7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_542, 0x1D878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_104, 0x1D8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_103, 0x1D918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_112, 0x1D938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_178, 0x1DA40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_169, 0x1DB00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_168, 0x1DBC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_89, 0x1DC90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_88, 0x1DCE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_541, 0x1DD30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_167, 0x1DDB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_166, 0x1DE78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_165, 0x1DF40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_164, 0x1E008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_540, 0x1E0D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_35, 0x1E150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_344, 0x1E248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_539, 0x1E2E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_103, 0x1E368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_102, 0x1E388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_111, 0x1E3A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_177, 0x1E4B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_163, 0x1E570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_162, 0x1E638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_87, 0x1E700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_86, 0x1E750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_538, 0x1E7A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_537, 0x1E820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_34, 0x1E8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_343, 0x1E998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_536, 0x1EA38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_102, 0x1EAB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_101, 0x1EAD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_110, 0x1EAF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_176, 0x1EC00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_161, 0x1ECC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_160, 0x1ED88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_85, 0x1EE50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_84, 0x1EEA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_535, 0x1EEF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_534, 0x1EF70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_33, 0x1EFF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_342, 0x1F0E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_533, 0x1F188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_101, 0x1F208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_100, 0x1F228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_109, 0x1F248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_175, 0x1F350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_159, 0x1F410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_158, 0x1F4D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_83, 0x1F5A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_82, 0x1F5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_532, 0x1F640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_531, 0x1F6C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_32, 0x1F740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_341, 0x1F838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_530, 0x1F8D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_100, 0x1F958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_99, 0x1F978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_108, 0x1F998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_174, 0x1FAA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_157, 0x1FB60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_156, 0x1FC28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_81, 0x1FCF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_80, 0x1FD40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_529, 0x1FD90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_528, 0x1FE10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_31, 0x1FE90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_340, 0x1FF88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_527, 0x20028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_99, 0x200A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_98, 0x200C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_107, 0x200E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_173, 0x201F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_155, 0x202B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_154, 0x20378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_79, 0x20440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_78, 0x20490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_526, 0x204E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_525, 0x20560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_30, 0x205E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_339, 0x206D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_524, 0x20778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_98, 0x207F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_97, 0x20818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_106, 0x20838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_172, 0x20940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_153, 0x20A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_152, 0x20AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_77, 0x20B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_76, 0x20BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_523, 0x20C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_522, 0x20CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_29, 0x20D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_338, 0x20E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_521, 0x20EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_97, 0x20F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_96, 0x20F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_105, 0x20F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_171, 0x21090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_151, 0x21150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_150, 0x21218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_75, 0x212E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_74, 0x21330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_520, 0x21380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_519, 0x21400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_28, 0x21480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_337, 0x21578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_518, 0x21618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_96, 0x21698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_95, 0x216B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_104, 0x216D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_170, 0x217E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_149, 0x218A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_148, 0x21968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_73, 0x21A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_72, 0x21A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_517, 0x21AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_516, 0x21B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_515, 0x21BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_27, 0x21C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_336, 0x21D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_514, 0x21DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_335, 0x21E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_95, 0x21F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_94, 0x21F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_103, 0x21F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_169, 0x22050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_147, 0x22110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_146, 0x221D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_71, 0x222A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_70, 0x222F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_513, 0x22340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_512, 0x223C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_511, 0x22440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_26, 0x224C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_334, 0x225B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_510, 0x22658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_333, 0x226D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_94, 0x22778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_93, 0x22798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_102, 0x227B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_168, 0x228C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_145, 0x22980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_144, 0x22A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_69, 0x22B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_68, 0x22B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_509, 0x22BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_167, 0x22C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_508, 0x22CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_332, 0x22D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_507, 0x22E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_143, 0x22E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_142, 0x22F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_141, 0x23020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_67, 0x230E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_66, 0x23138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_506, 0x23188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_65, 0x23208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_64, 0x23258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_140, 0x232A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_139, 0x23370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_505, 0x23438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_166, 0x234B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_504, 0x23578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_331, 0x235F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_503, 0x23698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_138, 0x23718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_137, 0x237E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_136, 0x238A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_63, 0x23970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_62, 0x239C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_502, 0x23A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_61, 0x23A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_60, 0x23AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_135, 0x23B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_134, 0x23BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_501, 0x23CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_133, 0x23D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_132, 0x23E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_131, 0x23ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_130, 0x23F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_129, 0x24060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_72, 0x24128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_26, 0x241D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_25, 0x24208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_24, 0x24238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_218, 0x24268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_217, 0x24350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_216, 0x24438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_330, 0x24520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_93, 0x245C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_92, 0x245E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_101, 0x24600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_165, 0x24708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_128, 0x247C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_215, 0x24890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_214, 0x24978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_213, 0x24A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_329, 0x24B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_92, 0x24BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_91, 0x24C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_100, 0x24C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_164, 0x24D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_127, 0x24DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_212, 0x24EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_211, 0x24FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_210, 0x25088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_500, 0x25170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_499, 0x251F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_126, 0x25270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_125, 0x25338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_328, 0x25400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_91, 0x254A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_90, 0x254C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_99, 0x254E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_163, 0x255E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_209, 0x256A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_208, 0x25790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_207, 0x25878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_498, 0x25960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_497, 0x259E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_124, 0x25A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_123, 0x25B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_327, 0x25BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_90, 0x25C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_89, 0x25CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_98, 0x25CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_162, 0x25DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_206, 0x25E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_205, 0x25F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_204, 0x26068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_326, 0x26150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_89, 0x261F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_88, 0x26210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_97, 0x26230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_161, 0x26338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_203, 0x263F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_202, 0x264E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_201, 0x265C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_325, 0x266B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_88, 0x26750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_87, 0x26770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_96, 0x26790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_160, 0x26898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_200, 0x26958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_199, 0x26A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_198, 0x26B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_324, 0x26C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_87, 0x26CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_86, 0x26CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_95, 0x26CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_159, 0x26DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_197, 0x26EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_196, 0x26FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_195, 0x27088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_323, 0x27170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_86, 0x27210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_85, 0x27230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_94, 0x27250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_158, 0x27358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_194, 0x27418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_193, 0x27500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_322, 0x275E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_496, 0x27688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_321, 0x27708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_85, 0x277A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_84, 0x277C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_93, 0x277E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_157, 0x278F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_192, 0x279B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_191, 0x27A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_190, 0x27B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_189, 0x27C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_320, 0x27D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_84, 0x27DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_83, 0x27E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_92, 0x27E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_156, 0x27F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_188, 0x27FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_187, 0x280E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_186, 0x281C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_319, 0x282B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_83, 0x28350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_82, 0x28370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_91, 0x28390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_155, 0x28498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_185, 0x28558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_184, 0x28640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_183, 0x28728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_318, 0x28810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_82, 0x288B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_81, 0x288D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_90, 0x288F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_154, 0x289F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_182, 0x28AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_181, 0x28BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_180, 0x28C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_317, 0x28D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_81, 0x28E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_80, 0x28E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_89, 0x28E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_153, 0x28F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_179, 0x29018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_178, 0x29100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_177, 0x291E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_316, 0x292D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_80, 0x29370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_79, 0x29390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_88, 0x293B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_152, 0x294B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_176, 0x29578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_175, 0x29660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_174, 0x29748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_315, 0x29830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_79, 0x298D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_78, 0x298F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_87, 0x29910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_151, 0x29A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_173, 0x29AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_172, 0x29BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_495, 0x29CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_494, 0x29D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_171, 0x29DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_122, 0x29E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_121, 0x29F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_314, 0x2A020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_78, 0x2A0C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_77, 0x2A0E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_86, 0x2A100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_150, 0x2A208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_170, 0x2A2C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_169, 0x2A3B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_168, 0x2A498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_313, 0x2A580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_77, 0x2A620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_76, 0x2A640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_85, 0x2A660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_149, 0x2A768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_167, 0x2A828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_166, 0x2A910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_312, 0x2A9F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_493, 0x2AA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_311, 0x2AB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_76, 0x2ABB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_75, 0x2ABD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_84, 0x2ABF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_148, 0x2AD00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_492, 0x2ADC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_491, 0x2AE40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_165, 0x2AEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_120, 0x2AFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_119, 0x2B070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_164, 0x2B138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_163, 0x2B220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_162, 0x2B308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_310, 0x2B3F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_75, 0x2B490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_74, 0x2B4B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_83, 0x2B4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_147, 0x2B5D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_161, 0x2B698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_160, 0x2B780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_159, 0x2B868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_309, 0x2B950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_74, 0x2B9F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_73, 0x2BA10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_82, 0x2BA30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_146, 0x2BB38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_158, 0x2BBF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_157, 0x2BCE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_156, 0x2BDC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_308, 0x2BEB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_73, 0x2BF50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_72, 0x2BF70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_81, 0x2BF90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_145, 0x2C098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_155, 0x2C158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_154, 0x2C240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_490, 0x2C328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_489, 0x2C3A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_153, 0x2C428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_118, 0x2C510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_117, 0x2C5D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_307, 0x2C6A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_72, 0x2C740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_71, 0x2C760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_80, 0x2C780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_144, 0x2C888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_152, 0x2C948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_151, 0x2CA30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_306, 0x2CB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_488, 0x2CBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_305, 0x2CC38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_71, 0x2CCD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_70, 0x2CCF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_79, 0x2CD18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_143, 0x2CE20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_150, 0x2CEE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_149, 0x2CFC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_148, 0x2D0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_304, 0x2D198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_487, 0x2D238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_303, 0x2D2B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_70, 0x2D358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_69, 0x2D378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_78, 0x2D398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_142, 0x2D4A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_486, 0x2D560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_485, 0x2D5E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_147, 0x2D660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_116, 0x2D748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_115, 0x2D810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_141, 0x2D8D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_484, 0x2D998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_483, 0x2DA18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_482, 0x2DA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_146, 0x2DB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_114, 0x2DC00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_113, 0x2DCC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_145, 0x2DD90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_112, 0x2DE78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_144, 0x2DF40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_140, 0x2E028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_481, 0x2E0E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_302, 0x2E168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_480, 0x2E208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_111, 0x2E288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_479, 0x2E350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_478, 0x2E3D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_110, 0x2E450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_109, 0x2E518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_143, 0x2E5E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_108, 0x2E6C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_107, 0x2E790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_106, 0x2E858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_105, 0x2E920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_104, 0x2E9E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_142, 0x2EAB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_139, 0x2EB98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_477, 0x2EC58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_301, 0x2ECD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_476, 0x2ED78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_103, 0x2EDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_475, 0x2EEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_474, 0x2EF40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_102, 0x2EFC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_101, 0x2F088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_141, 0x2F150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_100, 0x2F238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_99, 0x2F300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_98, 0x2F3C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_97, 0x2F490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_96, 0x2F558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_71, 0x2F620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_23, 0x2F6D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_18, 0x2F700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_70, 0x2F728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_300, 0x2F7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_473, 0x2F878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_472, 0x2F8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_299, 0x2F978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_471, 0x2FA18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_470, 0x2FA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_298, 0x2FB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_469, 0x2FBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_468, 0x2FC38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_297, 0x2FCB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_467, 0x2FD58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_466, 0x2FDD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_69, 0x2FE58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_296, 0x2FF08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_465, 0x2FFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_464, 0x30028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_295, 0x300A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_463, 0x30148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_462, 0x301C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_294, 0x30248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_461, 0x302E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_460, 0x30368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_293, 0x303E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_459, 0x30488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_458, 0x30508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_138, 0x30588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_457, 0x30648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_68, 0x306C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_292, 0x30778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_456, 0x30818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_455, 0x30898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_291, 0x30918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_454, 0x309B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_453, 0x30A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_290, 0x30AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_452, 0x30B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_451, 0x30BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_289, 0x30C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_450, 0x30CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_449, 0x30D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_137, 0x30DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_448, 0x30EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_447, 0x30F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_288, 0x30FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_446, 0x31058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_136, 0x310D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_67, 0x31198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_287, 0x31248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_445, 0x312E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_444, 0x31368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_286, 0x313E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_443, 0x31488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_442, 0x31508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_285, 0x31588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_441, 0x31628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_440, 0x316A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_284, 0x31728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_439, 0x317C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_438, 0x31848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_66, 0x318C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_283, 0x31978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_437, 0x31A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_436, 0x31A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_282, 0x31B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_435, 0x31BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_434, 0x31C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_281, 0x31CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_433, 0x31D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_432, 0x31DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_280, 0x31E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_431, 0x31EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_430, 0x31F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_65, 0x31FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_279, 0x320A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_429, 0x32148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_428, 0x321C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_278, 0x32248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_427, 0x322E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_426, 0x32368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_277, 0x323E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_425, 0x32488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_424, 0x32508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_276, 0x32588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_423, 0x32628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_422, 0x326A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_64, 0x32728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_63, 0x327D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_275, 0x32888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_421, 0x32928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_420, 0x329A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_274, 0x32A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_419, 0x32AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_418, 0x32B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_273, 0x32BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_417, 0x32C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_416, 0x32CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_272, 0x32D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_415, 0x32E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_414, 0x32E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_68, 0x32F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_77, 0x32F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_69, 0x33030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_25, 0x33050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_22, 0x33148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_413, 0x33178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_271, 0x331F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_412, 0x33298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_135, 0x33318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_140, 0x333D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_139, 0x334C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_138, 0x335A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_137, 0x33690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_62, 0x33778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_136, 0x33828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_21, 0x33910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_411, 0x33940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_135, 0x339C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_270, 0x33AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_67, 0x33B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_76, 0x33B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_134, 0x33C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_410, 0x33D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_409, 0x33DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_134, 0x33E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_95, 0x33F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_94, 0x33FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_68, 0x340A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_24, 0x340C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_23, 0x341C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_67, 0x342B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_22, 0x342D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_66, 0x343D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_21, 0x343F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_93, 0x344E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_92, 0x345B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_133, 0x34678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_408, 0x34760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_407, 0x347E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_133, 0x34860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_75, 0x34920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_66, 0x34A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_269, 0x34A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_132, 0x34AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_406, 0x34BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_65, 0x34C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_20, 0x34C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_405, 0x34D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_131, 0x34DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_268, 0x34ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_65, 0x34F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_74, 0x34F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_132, 0x35098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_404, 0x35158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_403, 0x351D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_130, 0x35258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_91, 0x35340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_90, 0x35408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_402, 0x354D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_129, 0x35550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_267, 0x35638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_64, 0x356D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_73, 0x356F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_131, 0x35800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_401, 0x358C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_400, 0x35940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_128, 0x359C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_89, 0x35AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_88, 0x35B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_399, 0x35C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_127, 0x35CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_266, 0x35DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_398, 0x35E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_265, 0x35EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_64, 0x35F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_63, 0x35F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_72, 0x35FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_130, 0x360A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_397, 0x36168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_396, 0x361E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_126, 0x36268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_87, 0x36350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_86, 0x36418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_129, 0x364E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_395, 0x365A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_264, 0x36620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_394, 0x366C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_393, 0x36740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_392, 0x367C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_125, 0x36840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_85, 0x36928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_84, 0x369F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_61, 0x36AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_20, 0x36B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_17, 0x36B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_60, 0x36BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_263, 0x36C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_391, 0x36D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_390, 0x36D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_262, 0x36E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_389, 0x36EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_388, 0x36F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_261, 0x36FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_387, 0x37050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_386, 0x370D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_260, 0x37150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_385, 0x371F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_384, 0x37270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_59, 0x372F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_259, 0x373A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_383, 0x37440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_382, 0x374C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_258, 0x37540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_381, 0x375E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_380, 0x37660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_257, 0x376E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_379, 0x37780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_378, 0x37800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_256, 0x37880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_377, 0x37920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_376, 0x379A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_128, 0x37A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_375, 0x37AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_255, 0x37B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_374, 0x37C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_58, 0x37C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_254, 0x37D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_373, 0x37DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_372, 0x37E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_253, 0x37ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_371, 0x37F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_370, 0x37FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_252, 0x38070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_369, 0x38110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_368, 0x38190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_251, 0x38210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_367, 0x382B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_366, 0x38330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_187, 0x383B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_127, 0x383D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_57, 0x38498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_250, 0x38548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_365, 0x385E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_364, 0x38668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_249, 0x386E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_363, 0x38788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_362, 0x38808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_248, 0x38888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_361, 0x38928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_360, 0x389A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_247, 0x38A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_359, 0x38AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_358, 0x38B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_56, 0x38BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_246, 0x38C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_357, 0x38D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_356, 0x38D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_245, 0x38E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_355, 0x38EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_354, 0x38F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_244, 0x38FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_353, 0x39058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_352, 0x390D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_243, 0x39158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_351, 0x391F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_350, 0x39278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_55, 0x392F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_242, 0x393A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_349, 0x39448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_348, 0x394C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_241, 0x39548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_347, 0x395E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_346, 0x39668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_240, 0x396E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_345, 0x39788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_344, 0x39808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_239, 0x39888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_343, 0x39928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_342, 0x399A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_54, 0x39A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_238, 0x39AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_341, 0x39B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_340, 0x39BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_237, 0x39C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_339, 0x39D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_338, 0x39D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_236, 0x39E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_337, 0x39EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_336, 0x39F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_235, 0x39FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_335, 0x3A058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_334, 0x3A0D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_186, 0x3A158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_126, 0x3A180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_53, 0x3A240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_234, 0x3A2F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_333, 0x3A390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_332, 0x3A410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_233, 0x3A490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_331, 0x3A530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_330, 0x3A5B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_232, 0x3A630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_329, 0x3A6D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_328, 0x3A750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_231, 0x3A7D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_327, 0x3A870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_326, 0x3A8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_325, 0x3A970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_230, 0x3A9F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_324, 0x3AA90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_125, 0x3AB10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_52, 0x3ABD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_229, 0x3AC80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_323, 0x3AD20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_322, 0x3ADA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_228, 0x3AE20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_321, 0x3AEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_320, 0x3AF40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_227, 0x3AFC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_319, 0x3B060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_318, 0x3B0E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_226, 0x3B160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_317, 0x3B200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_316, 0x3B280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_51, 0x3B300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_225, 0x3B3B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_315, 0x3B450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_314, 0x3B4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_224, 0x3B550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_313, 0x3B5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_312, 0x3B670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_223, 0x3B6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_311, 0x3B790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_310, 0x3B810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_222, 0x3B890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_309, 0x3B930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_308, 0x3B9B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_185, 0x3BA30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_124, 0x3BA58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_50, 0x3BB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_221, 0x3BBC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_307, 0x3BC68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_306, 0x3BCE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_220, 0x3BD68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_305, 0x3BE08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_304, 0x3BE88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_219, 0x3BF08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_303, 0x3BFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_302, 0x3C028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_218, 0x3C0A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_301, 0x3C148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_300, 0x3C1C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_49, 0x3C248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_48, 0x3C2F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_217, 0x3C3A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_299, 0x3C448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_298, 0x3C4C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_216, 0x3C548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_297, 0x3C5E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_296, 0x3C668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_215, 0x3C6E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_295, 0x3C788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_294, 0x3C808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_214, 0x3C888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_293, 0x3C928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_292, 0x3C9A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_62, 0x3CA28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_71, 0x3CA48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_63, 0x3CB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_19, 0x3CB70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_19, 0x3CC68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_124, 0x3CC98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_123, 0x3CD80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_123, 0x3CE68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_291, 0x3CF28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_213, 0x3CFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_290, 0x3D048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_122, 0x3D0C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_121, 0x3D1B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_120, 0x3D298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_119, 0x3D380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_118, 0x3D468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_117, 0x3D550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_122, 0x3D638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_289, 0x3D6F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_212, 0x3D778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_288, 0x3D818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_116, 0x3D898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_115, 0x3D980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_114, 0x3DA68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_47, 0x3DB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_113, 0x3DC00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_18, 0x3DCE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_112, 0x3DD18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_111, 0x3DE00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_110, 0x3DEE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_211, 0x3DFD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_62, 0x3E070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_61, 0x3E090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_70, 0x3E0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_121, 0x3E1B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_109, 0x3E278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_108, 0x3E360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_107, 0x3E448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_210, 0x3E530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_61, 0x3E5D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_60, 0x3E5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_69, 0x3E610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_120, 0x3E718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_106, 0x3E7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_105, 0x3E8C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_287, 0x3E9A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_286, 0x3EA28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_104, 0x3EAA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_83, 0x3EB90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_82, 0x3EC58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_209, 0x3ED20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_60, 0x3EDC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_59, 0x3EDE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_68, 0x3EE00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_119, 0x3EF08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_103, 0x3EFC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_102, 0x3F0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_285, 0x3F198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_284, 0x3F218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_101, 0x3F298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_81, 0x3F380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_80, 0x3F448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_208, 0x3F510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_59, 0x3F5B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_58, 0x3F5D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_67, 0x3F5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_118, 0x3F6F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_100, 0x3F7B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_99, 0x3F8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_207, 0x3F988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_283, 0x3FA28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_206, 0x3FAA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_58, 0x3FB48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_57, 0x3FB68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_66, 0x3FB88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_117, 0x3FC90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_282, 0x3FD50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_281, 0x3FDD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_98, 0x3FE50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_79, 0x3FF38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_78, 0x40000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_97, 0x400C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_96, 0x401B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_95, 0x40298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_205, 0x40380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_57, 0x40420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_56, 0x40440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_65, 0x40460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_116, 0x40568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_94, 0x40628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_93, 0x40710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_92, 0x407F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_204, 0x408E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_56, 0x40980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_55, 0x409A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_64, 0x409C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_115, 0x40AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_91, 0x40B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_90, 0x40C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_280, 0x40D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_279, 0x40DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_89, 0x40E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_77, 0x40F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_76, 0x41008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_203, 0x410D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_55, 0x41170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_54, 0x41190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_63, 0x411B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_114, 0x412B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_88, 0x41378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_87, 0x41460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_86, 0x41548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_202, 0x41630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_54, 0x416D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_53, 0x416F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_62, 0x41710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_113, 0x41818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_85, 0x418D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_84, 0x419C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_201, 0x41AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_278, 0x41B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_200, 0x41BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_53, 0x41C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_52, 0x41C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_61, 0x41CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_112, 0x41DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_277, 0x41E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_276, 0x41EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_83, 0x41F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_75, 0x42058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_74, 0x42120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_82, 0x421E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_81, 0x422D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_80, 0x423B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_199, 0x424A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_52, 0x42540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_51, 0x42560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_60, 0x42580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_111, 0x42688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_79, 0x42748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_78, 0x42830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_77, 0x42918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_198, 0x42A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_51, 0x42AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_50, 0x42AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_59, 0x42AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_110, 0x42BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_76, 0x42CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_75, 0x42D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_74, 0x42E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_197, 0x42F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_50, 0x43000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_49, 0x43020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_58, 0x43040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_109, 0x43148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_73, 0x43208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_72, 0x432F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_275, 0x433D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_274, 0x43458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_71, 0x434D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_73, 0x435C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_72, 0x43688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_196, 0x43750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_49, 0x437F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_48, 0x43810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_57, 0x43830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_108, 0x43938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_18, 0x439F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_70, 0x43AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_69, 0x43BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_195, 0x43CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_273, 0x43D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_194, 0x43DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_48, 0x43E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_47, 0x43EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_56, 0x43EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_107, 0x43FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_272, 0x44088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_271, 0x44108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_68, 0x44188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_71, 0x44270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_70, 0x44338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_106, 0x44400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_270, 0x444C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_193, 0x44540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_269, 0x445E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_268, 0x44660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_267, 0x446E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_67, 0x44760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_69, 0x44848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_68, 0x44910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_105, 0x449D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_266, 0x44A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_192, 0x44B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_265, 0x44BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_264, 0x44C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_263, 0x44CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_66, 0x44D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_67, 0x44E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_66, 0x44EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_46, 0x44FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_17, 0x45060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_45, 0x45090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_191, 0x45140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_262, 0x451E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_261, 0x45260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_190, 0x452E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_260, 0x45380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_259, 0x45400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_189, 0x45480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_258, 0x45520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_257, 0x455A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_188, 0x45620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_256, 0x456C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_255, 0x45740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_44, 0x457C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_187, 0x45870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_254, 0x45910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_253, 0x45990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_186, 0x45A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_252, 0x45AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_251, 0x45B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_185, 0x45BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_250, 0x45C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_249, 0x45CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_184, 0x45D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_248, 0x45DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_247, 0x45E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_104, 0x45EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_246, 0x45FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_183, 0x46030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_245, 0x460D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_43, 0x46150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_182, 0x46200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_244, 0x462A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_243, 0x46320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_181, 0x463A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_242, 0x46440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_241, 0x464C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_180, 0x46540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_240, 0x465E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_239, 0x46660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_179, 0x466E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_238, 0x46780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_237, 0x46800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_184, 0x46880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_103, 0x468A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_42, 0x46968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_178, 0x46A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_236, 0x46AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_235, 0x46B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_177, 0x46BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_234, 0x46C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_233, 0x46CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_176, 0x46D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_232, 0x46DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_231, 0x46E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_175, 0x46EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_230, 0x46F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_229, 0x47018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_41, 0x47098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_174, 0x47148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_228, 0x471E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_227, 0x47268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_173, 0x472E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_226, 0x47388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_225, 0x47408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_172, 0x47488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_224, 0x47528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_223, 0x475A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_171, 0x47628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_222, 0x476C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_221, 0x47748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_40, 0x477C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_170, 0x47878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_220, 0x47918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_219, 0x47998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_169, 0x47A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_218, 0x47AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_217, 0x47B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_168, 0x47BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_216, 0x47C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_215, 0x47CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_167, 0x47D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_214, 0x47DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_213, 0x47E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_183, 0x47EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_102, 0x47F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_39, 0x47FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_166, 0x48090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_212, 0x48130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_211, 0x481B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_165, 0x48230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_210, 0x482D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_209, 0x48350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_164, 0x483D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_208, 0x48470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_207, 0x484F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_163, 0x48570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_206, 0x48610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_205, 0x48690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_204, 0x48710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_162, 0x48790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_203, 0x48830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_101, 0x488B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_38, 0x48970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_161, 0x48A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_202, 0x48AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_201, 0x48B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_160, 0x48BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_200, 0x48C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_199, 0x48CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_159, 0x48D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_198, 0x48E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_197, 0x48E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_158, 0x48F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_196, 0x48FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_195, 0x49020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_157, 0x490A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_37, 0x49140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_156, 0x491F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_194, 0x49290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_193, 0x49310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_155, 0x49390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_192, 0x49430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_191, 0x494B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_154, 0x49530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_190, 0x495D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_189, 0x49650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_153, 0x496D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_188, 0x49770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_187, 0x497F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_36, 0x49870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_152, 0x49920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_186, 0x499C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_185, 0x49A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_151, 0x49AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_184, 0x49B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_183, 0x49BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_150, 0x49C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_182, 0x49D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_181, 0x49D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_149, 0x49E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_180, 0x49EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_179, 0x49F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_182, 0x49FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_100, 0x49FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_35, 0x4A088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_148, 0x4A138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_178, 0x4A1D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_177, 0x4A258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_147, 0x4A2D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_176, 0x4A378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_175, 0x4A3F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_146, 0x4A478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_174, 0x4A518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_173, 0x4A598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_145, 0x4A618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_172, 0x4A6B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_171, 0x4A738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_34, 0x4A7B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_33, 0x4A868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_144, 0x4A918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_170, 0x4A9B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_169, 0x4AA38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_143, 0x4AAB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_168, 0x4AB58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_167, 0x4ABD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_142, 0x4AC58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_166, 0x4ACF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_165, 0x4AD78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_141, 0x4ADF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_164, 0x4AE98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_163, 0x4AF18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_46, 0x4AF98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_55, 0x4AFB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_47, 0x4B0C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_17, 0x4B0E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_16, 0x4B1D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_65, 0x4B208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_99, 0x4B2F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_162, 0x4B3B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_140, 0x4B430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_161, 0x4B4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_64, 0x4B550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_63, 0x4B638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_62, 0x4B720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_61, 0x4B808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_60, 0x4B8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_98, 0x4B9D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_160, 0x4BA98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_139, 0x4BB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_159, 0x4BBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_59, 0x4BC38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_138, 0x4BD20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_58, 0x4BDC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_57, 0x4BEA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_56, 0x4BF90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_55, 0x4C078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_54, 0x4C160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_181, 0x4C248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_97, 0x4C270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_32, 0x4C330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_53, 0x4C3E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_15, 0x4C4C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_180, 0x4C4F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_96, 0x4C520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_52, 0x4C5E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_179, 0x4C6C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_95, 0x4C6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_51, 0x4C7B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_50, 0x4C898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_49, 0x4C980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_158, 0x4CA68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_157, 0x4CAE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_65, 0x4CB68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_64, 0x4CC30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_137, 0x4CCF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_46, 0x4CD98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_45, 0x4CDB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_54, 0x4CDD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_94, 0x4CEE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_48, 0x4CFA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_47, 0x4D088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_46, 0x4D170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_156, 0x4D258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_155, 0x4D2D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_63, 0x4D358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_62, 0x4D420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_136, 0x4D4E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_45, 0x4D588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_44, 0x4D5A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_53, 0x4D5C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_93, 0x4D6D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_45, 0x4D790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_44, 0x4D878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_43, 0x4D960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_135, 0x4DA48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_44, 0x4DAE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_43, 0x4DB08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_52, 0x4DB28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_92, 0x4DC30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_42, 0x4DCF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_41, 0x4DDD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_40, 0x4DEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_134, 0x4DFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_43, 0x4E048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_42, 0x4E068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_51, 0x4E088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_91, 0x4E190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_39, 0x4E250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_178, 0x4E338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_90, 0x4E360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_38, 0x4E420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_37, 0x4E508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_154, 0x4E5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_153, 0x4E670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_36, 0x4E6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_61, 0x4E7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_60, 0x4E8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_133, 0x4E968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_42, 0x4EA08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_41, 0x4EA28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_50, 0x4EA48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_89, 0x4EB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_35, 0x4EC10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_34, 0x4ECF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_33, 0x4EDE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_132, 0x4EEC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_41, 0x4EF68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_40, 0x4EF88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_49, 0x4EFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_88, 0x4F0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_32, 0x4F170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_31, 0x4F258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_131, 0x4F340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_152, 0x4F3E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_130, 0x4F460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_40, 0x4F500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_39, 0x4F520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_48, 0x4F540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_87, 0x4F648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_151, 0x4F708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_150, 0x4F788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_30, 0x4F808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_59, 0x4F8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_58, 0x4F9B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_29, 0x4FA80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_28, 0x4FB68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_27, 0x4FC50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_129, 0x4FD38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_39, 0x4FDD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_38, 0x4FDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_47, 0x4FE18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_86, 0x4FF20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_26, 0x4FFE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_25, 0x500C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_24, 0x501B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_128, 0x50298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_38, 0x50338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_37, 0x50358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_46, 0x50378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_85, 0x50480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_23, 0x50540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_22, 0x50628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_21, 0x50710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_127, 0x507F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_37, 0x50898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_36, 0x508B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_45, 0x508D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_84, 0x509E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_20, 0x50AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_19, 0x50B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_18, 0x50C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_126, 0x50D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_36, 0x50DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_35, 0x50E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_44, 0x50E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_83, 0x50F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_17, 0x51000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_16, 0x510E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_149, 0x511D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_148, 0x51250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_15, 0x512D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_57, 0x513B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_56, 0x51480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_125, 0x51548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_35, 0x515E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_34, 0x51608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_43, 0x51628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_82, 0x51730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_14, 0x517F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_13, 0x518D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_124, 0x519C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_147, 0x51A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_123, 0x51AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_34, 0x51B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_33, 0x51BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_42, 0x51BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_81, 0x51CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_146, 0x51D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_122, 0x51E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_145, 0x51EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_80, 0x51F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_144, 0x51FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_143, 0x52068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_12, 0x520E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_55, 0x521D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_54, 0x52298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_142, 0x52360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_141, 0x523E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_11, 0x52460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_53, 0x52548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_52, 0x52610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_140, 0x526D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_121, 0x52758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_139, 0x527F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_79, 0x52878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_138, 0x52938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_137, 0x529B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_10, 0x52A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_51, 0x52B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_50, 0x52BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_120, 0x52CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_9, 0x52D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_8, 0x52E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_119, 0x52F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_7, 0x52FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_177, 0x530A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_78, 0x530D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_31, 0x53190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_136, 0x53240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_135, 0x532C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_6, 0x53340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_49, 0x53428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_48, 0x534F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_14, 0x535B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_176, 0x535E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_175, 0x53610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_77, 0x53638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_59, 0x536F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_58, 0x53748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_47, 0x53798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_46, 0x53860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_174, 0x53928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_173, 0x53950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_76, 0x53978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_57, 0x53A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_56, 0x53A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_45, 0x53AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_44, 0x53BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_55, 0x53C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_54, 0x53CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_134, 0x53D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_133, 0x53D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_132, 0x53E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_16, 0x53E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_118, 0x53F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_33, 0x54020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_32, 0x54040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_41, 0x54060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_75, 0x54168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_43, 0x54228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_42, 0x542F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_53, 0x543B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_52, 0x54408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_131, 0x54458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_130, 0x544D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_129, 0x54558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_15, 0x545D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_117, 0x546D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_32, 0x54770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_31, 0x54790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_40, 0x547B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_74, 0x548B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_41, 0x54978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_40, 0x54A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_128, 0x54B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_73, 0x54B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_127, 0x54C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_72, 0x54CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_126, 0x54D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_71, 0x54E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_125, 0x54EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_70, 0x54F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_124, 0x55008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_69, 0x55088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_123, 0x55148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_68, 0x551C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_122, 0x55288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_14, 0x55308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_116, 0x55400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_121, 0x554A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_31, 0x55520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_30, 0x55540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_39, 0x55560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_67, 0x55668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_39, 0x55728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_38, 0x557F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_51, 0x558B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_50, 0x55908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_120, 0x55958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_119, 0x559D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_13, 0x55A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_115, 0x55B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_118, 0x55BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_30, 0x55C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_29, 0x55C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_38, 0x55CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_66, 0x55DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_37, 0x55E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_36, 0x55F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_49, 0x56008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_48, 0x56058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_117, 0x560A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_114, 0x56128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_116, 0x561C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_12, 0x56248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_113, 0x56340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_115, 0x563E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_29, 0x56460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_28, 0x56480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_37, 0x564A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_65, 0x565A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_35, 0x56668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_34, 0x56730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_47, 0x567F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_46, 0x56848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_114, 0x56898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_113, 0x56918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_11, 0x56998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_112, 0x56A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_112, 0x56B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_28, 0x56BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_27, 0x56BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_36, 0x56BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_64, 0x56CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_33, 0x56DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_32, 0x56E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_45, 0x56F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_44, 0x56F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_111, 0x56FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_110, 0x57068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_10, 0x570E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_111, 0x571E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_109, 0x57280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_27, 0x57300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_26, 0x57320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_35, 0x57340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_63, 0x57448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_31, 0x57508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_30, 0x575D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_43, 0x57698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_42, 0x576E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_108, 0x57738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_107, 0x577B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_9, 0x57838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_110, 0x57930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_106, 0x579D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_26, 0x57A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_25, 0x57A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_34, 0x57A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_62, 0x57B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_29, 0x57C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_28, 0x57D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_41, 0x57DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_40, 0x57E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_105, 0x57E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_104, 0x57F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_8, 0x57F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_109, 0x58080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_103, 0x58120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_25, 0x581A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_24, 0x581C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_33, 0x581E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_61, 0x582E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_27, 0x583A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_26, 0x58470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_39, 0x58538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_38, 0x58588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_102, 0x585D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_101, 0x58658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_7, 0x586D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_108, 0x587D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_100, 0x58870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_24, 0x588F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_23, 0x58910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_32, 0x58930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_60, 0x58A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_25, 0x58AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_24, 0x58BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_37, 0x58C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_36, 0x58CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_99, 0x58D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_98, 0x58DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_97, 0x58E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_96, 0x58EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_6, 0x58F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_107, 0x59020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_95, 0x590C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_106, 0x59140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_23, 0x591E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_22, 0x59200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_31, 0x59220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_59, 0x59328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_23, 0x593E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_22, 0x594B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_35, 0x59578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_34, 0x595C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_94, 0x59618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_5, 0x59698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_105, 0x59790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_93, 0x59830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_22, 0x598B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_21, 0x598D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_30, 0x598F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_58, 0x599F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_21, 0x59AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_20, 0x59B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_33, 0x59C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_32, 0x59C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_92, 0x59CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_91, 0x59D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_4, 0x59DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_104, 0x59EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_90, 0x59F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_21, 0x5A000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_20, 0x5A020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_29, 0x5A040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_57, 0x5A148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_19, 0x5A208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_18, 0x5A2D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_31, 0x5A398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_30, 0x5A3E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_89, 0x5A438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_56, 0x5A4B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_88, 0x5A578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_103, 0x5A5F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_87, 0x5A698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_86, 0x5A718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_102, 0x5A798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_85, 0x5A838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_29, 0x5A8B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_28, 0x5A908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_17, 0x5A958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_16, 0x5AA20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_84, 0x5AAE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_101, 0x5AB68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_83, 0x5AC08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_82, 0x5AC88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_100, 0x5AD08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_81, 0x5ADA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_27, 0x5AE28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_26, 0x5AE78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_55, 0x5AEC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_15, 0x5AF88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_14, 0x5B050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_172, 0x5B118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_171, 0x5B140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_54, 0x5B168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_25, 0x5B228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_24, 0x5B278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_13, 0x5B2C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_12, 0x5B390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_53, 0x5B458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_80, 0x5B518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_99, 0x5B598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_79, 0x5B638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_78, 0x5B6B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_98, 0x5B738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_77, 0x5B7D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_23, 0x5B858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_22, 0x5B8A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_11, 0x5B8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_10, 0x5B9C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_76, 0x5BA88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_97, 0x5BB08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_75, 0x5BBA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_74, 0x5BC28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_96, 0x5BCA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_73, 0x5BD48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_21, 0x5BDC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_20, 0x5BE18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_52, 0x5BE68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_9, 0x5BF28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_8, 0x5BFF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_27, 0x5C0B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_95, 0x5C100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_170, 0x5C1A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_169, 0x5C1C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_51, 0x5C1F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_19, 0x5C2B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_18, 0x5C300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_7, 0x5C350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_6, 0x5C418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_30, 0x5C4E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_13, 0x5C590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_72, 0x5C5C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_12, 0x5C640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateMachine_3, 0x5C670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_94, 0x5C720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_44, 0x5C7C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_168, 0x5C918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_167, 0x5C940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_93, 0x5C968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_29, 0x5CA08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_71, 0x5CAB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_70, 0x5CB38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_69, 0x5CBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_50, 0x5CC38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_28, 0x5CCF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_166, 0x5CDA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_165, 0x5CDD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_26, 0x5CDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_25, 0x5CE40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_24, 0x5CE88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_17, 0x5CED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_49, 0x5CF20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_164, 0x5CFE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_19, 0x5D008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_20, 0x5D028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_28, 0x5D048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_27, 0x5D150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_26, 0x5D258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_43, 0x5D360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_42, 0x5D4B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_25, 0x5D610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_24, 0x5D718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_92, 0x5D820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_163, 0x5D8C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_3, 0x5D8E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_27, 0x5D9E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_5, 0x5DA90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_16, 0x5DB78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_48, 0x5DBC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_15, 0x5DC88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_47, 0x5DCD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_14, 0x5DD98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_46, 0x5DDE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_13, 0x5DEA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_45, 0x5DEF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_12, 0x5DFB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_44, 0x5E008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_11, 0x5E0C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_43, 0x5E118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_10, 0x5E1D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_42, 0x5E228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_162, 0x5E2E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_23, 0x5E310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_41, 0x5E358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_9, 0x5E418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_40, 0x5E468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_8, 0x5E528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_39, 0x5E578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_38, 0x5E638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_68, 0x5E6F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_91, 0x5E778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_161, 0x5E818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_7, 0x5E840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_37, 0x5E890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_6, 0x5E950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_36, 0x5E9A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_41, 0x5EA60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyMeshSpaceAdditive_4, 0x5EBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_5, 0x5EC88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_160, 0x5ED50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_23, 0x5ED78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_19, 0x5EE80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_18, 0x5EEA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_40, 0x5EEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_22, 0x5F018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_39, 0x5F120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_4, 0x5F278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_159, 0x5F340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_158, 0x5F368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_157, 0x5F390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_156, 0x5F3B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_155, 0x5F3E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_154, 0x5F408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_22, 0x5F430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_25, 0x5F478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_153, 0x5F608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_90, 0x5F630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_89, 0x5F6D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_152, 0x5F770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_151, 0x5F798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_88, 0x5F7C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_24, 0x5F860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_23, 0x5F9F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_150, 0x5FB80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_87, 0x5FBA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_5, 0x5FC48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_86, 0x5FC98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph_6, 0x5FD38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_26, 0x5FDD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_25, 0x5FE88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_22, 0x5FF38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_21, 0x600C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_149, 0x60258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_148, 0x60280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_147, 0x602A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_4, 0x602D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_24, 0x603B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_18, 0x60468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_146, 0x60488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_20, 0x604B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_19, 0x60640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_145, 0x607D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_85, 0x607F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_UZ8U, 0x60898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Fabrik_5, 0x608A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_144, 0x60A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_17, 0x60A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_17, 0x60A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_84, 0x60A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_16, 0x60B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_83, 0x60B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_8, 0x60BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_143, 0x60CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_142, 0x60D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_141, 0x60D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_82, 0x60D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_81, 0x60E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_38, 0x60EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_23, 0x60FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_35, 0x610A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_67, 0x61168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_80, 0x611E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_34, 0x61288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_66, 0x61348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_79, 0x613C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_33, 0x61468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_65, 0x61528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_78, 0x615A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_77, 0x61648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_22, 0x616E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_32, 0x61798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_64, 0x61858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_76, 0x618D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_31, 0x61978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_63, 0x61A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_75, 0x61AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_30, 0x61B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_62, 0x61C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_74, 0x61C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_73, 0x61D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_29, 0x61DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_61, 0x61E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_72, 0x61F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_71, 0x61FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_140, 0x62058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_139, 0x62080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_138, 0x620A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_137, 0x620D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_136, 0x620F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_135, 0x62120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_37, 0x62148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_134, 0x622A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_133, 0x622C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_132, 0x622F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_131, 0x62318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_130, 0x62340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_129, 0x62368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_128, 0x62390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_127, 0x623B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_36, 0x623E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_126, 0x62538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_125, 0x62560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_28, 0x62588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_60, 0x62648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_70, 0x626C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_124, 0x62768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_123, 0x62790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_69, 0x627B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_59, 0x62858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_58, 0x628D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_68, 0x62958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_57, 0x629F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_56, 0x62A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_67, 0x62AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_55, 0x62B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_54, 0x62C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_66, 0x62C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_3, 0x62D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_65, 0x62E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_21, 0x62EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_122, 0x62F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_121, 0x62F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_120, 0x62FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_21, 0x62FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_20, 0x63010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_19, 0x63058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_20, 0x630A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_119, 0x63150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_18, 0x63178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_53, 0x631C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_52, 0x63240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_64, 0x632C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_63, 0x63360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_17, 0x63400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_16, 0x63448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_15, 0x63490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_14, 0x634D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_13, 0x63520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_12, 0x63568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_11, 0x635B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_10, 0x635F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_9, 0x63640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_35, 0x63688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK_2, 0x637E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_16, 0x638D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_15, 0x638F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_27, 0x63918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_118, 0x639D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_117, 0x63A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_62, 0x63A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_116, 0x63AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_21, 0x63AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_115, 0x63BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyMeshSpaceAdditive_3, 0x63C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_26, 0x63CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_51, 0x63DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_50, 0x63E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_34, 0x63EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_61, 0x64008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_33, 0x640A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_114, 0x64200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_113, 0x64228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_112, 0x64250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_111, 0x64278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_110, 0x642A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SpringBone_3, 0x642C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SpringBone_2, 0x643F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_25, 0x64518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_24, 0x645D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_109, 0x64698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_108, 0x646C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_107, 0x646E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_106, 0x64710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_19, 0x64738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_32, 0x647E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_105, 0x64940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_23, 0x64968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_31, 0x64A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_60, 0x64B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_49, 0x64C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_48, 0x64CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_18, 0x64D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_17, 0x64DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_22, 0x64E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_47, 0x64F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_59, 0x64FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_21, 0x65060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_46, 0x65120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_58, 0x651A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_20, 0x65240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_45, 0x65300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_57, 0x65380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_30, 0x65420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_104, 0x65578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_103, 0x655A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_102, 0x655C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_101, 0x655F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_100, 0x65618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_99, 0x65640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_29, 0x65668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_98, 0x657C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_56, 0x657E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_97, 0x65888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_16, 0x658B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_18, 0x65960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_17, 0x65AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_96, 0x65C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_95, 0x65CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_94, 0x65CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_16, 0x65CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_15, 0x65E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_93, 0x66018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_55, 0x66040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_28, 0x660E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_15, 0x66238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_19, 0x662E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_44, 0x663A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_54, 0x66428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_18, 0x664C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_43, 0x66588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_53, 0x66608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_17, 0x666A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_42, 0x66768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_52, 0x667E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_51, 0x66888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_16, 0x66928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_41, 0x669E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_50, 0x66A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_15, 0x66B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_40, 0x66BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_49, 0x66C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_48, 0x66CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_92, 0x66D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_91, 0x66DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_90, 0x66DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_89, 0x66E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_88, 0x66E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_87, 0x66E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_86, 0x66E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_85, 0x66EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_84, 0x66EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_83, 0x66EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_14, 0x66F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_15, 0x66F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_1GWT, 0x66F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Fabrik_4, 0x66F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Fabrik_3, 0x670F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_47, 0x67280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_27, 0x67320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_82, 0x67478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_81, 0x674A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_26, 0x674C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_14, 0x67620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_39, 0x676D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_38, 0x67750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_37, 0x677D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend_2, 0x67850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_36, 0x67918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_13, 0x67998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_35, 0x67A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_34, 0x67AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_14, 0x67B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_80, 0x67C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_25, 0x67C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_79, 0x67D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_78, 0x67DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_77, 0x67DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_46, 0x67E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_24, 0x67EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_76, 0x67FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_75, 0x68020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_74, 0x68048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_13, 0x68070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_45, 0x68130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_23, 0x681D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_73, 0x68328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_12, 0x68350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_72, 0x68400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_33, 0x68428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_71, 0x684A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_70, 0x684D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_69, 0x684F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_22, 0x68520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_68, 0x68678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_44, 0x686A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_32, 0x68740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoWayBlend, 0x687C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_11, 0x68888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_31, 0x68938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_30, 0x689B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_29, 0x68A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyAdditive, 0x68AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_28, 0x68B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_43, 0x68C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose_3, 0x68CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_27, 0x68CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_42, 0x68D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose_2, 0x68DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_26, 0x68DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_41, 0x68E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_IdentityPose, 0x68F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_10, 0x68F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_67, 0x68FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_14, 0x69000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_14, 0x69190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_40, 0x691B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_21, 0x69250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_66, 0x693A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_65, 0x693D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_20, 0x693F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_64, 0x69550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_39, 0x69578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_25, 0x69618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_19, 0x69698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_63, 0x697F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_62, 0x69818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_61, 0x69840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LegIK, 0x69868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_20, 0x69960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_13, 0x69A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_19, 0x69A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoBoneIK_4, 0x69B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_18, 0x69D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_HMA6, 0x69E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoBoneIK_3, 0x69E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_13, 0x6A060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_9, 0x6A080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_24, 0x6A130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_23, 0x6A1B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_22, 0x6A230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_38, 0x6A2B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_18, 0x6A350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_60, 0x6A4A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_13, 0x6A4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_37, 0x6A660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_8, 0x6A700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_36, 0x6A7B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_59, 0x6A850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_58, 0x6A878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_57, 0x6A8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_56, 0x6A8C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_12, 0x6A8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_35, 0x6AA80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_55, 0x6AB20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_54, 0x6AB48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_11, 0x6AB70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_34, 0x6AD00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_17, 0x6ADA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_53, 0x6AEA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_52, 0x6AED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_10, 0x6AEF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_33, 0x6B088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_51, 0x6B128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_50, 0x6B150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_17, 0x6B178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_32, 0x6B2D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_49, 0x6B370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_9, 0x6B398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_31, 0x6B528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_48, 0x6B5C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_47, 0x6B5F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_7, 0x6B618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_46, 0x6B6C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_16, 0x6B6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_12, 0x6B7F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_45, 0x6B818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_12, 0x6B840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_30, 0x6B860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_21, 0x6B900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_29, 0x6B980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_28, 0x6BA20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph_5, 0x6BAC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph_4, 0x6BB60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph_3, 0x6BC00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_16, 0x6BCA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_44, 0x6BDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_43, 0x6BE20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_7, 0x6BE48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_11, 0x6BF38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_15, 0x6BF58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_11, 0x6C0B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_42, 0x6C0D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph_2, 0x6C0F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_10, 0x6C198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_10, 0x6C1B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LinkedAnimGraph, 0x6C1D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_14, 0x6C278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_27, 0x6C3D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_41, 0x6C470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_12, 0x6C498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_40, 0x6C558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_39, 0x6C580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_11, 0x6C5A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_38, 0x6C668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_26, 0x6C690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_20, 0x6C730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_9, 0x6C7B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_15, 0x6C7D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_14, 0x6C8D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_9, 0x6C9E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Fabrik_2, 0x6CA00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_13, 0x6CB90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_37, 0x6CCE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_8, 0x6CD10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SpringBone, 0x6CD30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_25, 0x6CE58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_36, 0x6CEF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_10, 0x6CF20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_8, 0x6CFE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_35, 0x6D028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_34, 0x6D050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_33, 0x6D078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_12, 0x6D0A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_11, 0x6D1F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_24, 0x6D350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_19, 0x6D3F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_18, 0x6D470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_23, 0x6D4F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_32, 0x6D590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_10, 0x6D5B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_9, 0x6D710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_22, 0x6D868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_31, 0x6D908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_30, 0x6D930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_8, 0x6D958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_16, 0x6DAB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_15, 0x6DAD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_14, 0x6DB00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_13, 0x6DB28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_4, 0x6DB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_21, 0x6DBA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_3, 0x6DC40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyMeshSpaceAdditive_2, 0x6DD28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_3, 0x6DDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_11, 0x6DE48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_17, 0x6DE78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_16, 0x6DEF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_20, 0x6DF78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_19, 0x6E018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer_2, 0x6E0B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_10, 0x6E1A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator_2, 0x6E1D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_18, 0x6E220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_15, 0x6E2C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_14, 0x6E340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_17, 0x6E3C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_16, 0x6E460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendSpacePlayer, 0x6E500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ApplyMeshSpaceAdditive, 0x6E5E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequenceEvaluator, 0x6E6B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_9, 0x6E708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalRefPose, 0x6E738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_8, 0x6E750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateMachine_2, 0x6E780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_12, 0x6E830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_11, 0x6E858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_10, 0x6E880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_9, 0x6E8A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_8, 0x6E8D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_7, 0x6E8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_6, 0x6E920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_5, 0x6E948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_4, 0x6E970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_3, 0x6E998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult_2, 0x6E9C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TransitionResult, 0x6E9E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_13, 0x6EA10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_8, 0x6EA90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_7, 0x6EC20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_12, 0x6EC50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_7, 0x6ECD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_6, 0x6EE60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_5, 0x6EE90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_11, 0x6EEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_6, 0x6EF40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_4, 0x6F0D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_10, 0x6F100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_5, 0x6F180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_3, 0x6F310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_9, 0x6F340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_4, 0x6F3C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult_2, 0x6F550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_3, 0x6F580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_8, 0x6F710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateResult, 0x6F790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_StateMachine, 0x6F7C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_7, 0x6F870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_7, 0x6F8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_7, 0x6F938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_29, 0x6FA90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_28, 0x6FAB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_9, 0x6FAE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_13, 0x6FBA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_8, 0x6FCA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_12, 0x6FCC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_6, 0x6FDD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_7, 0x6FE80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_27, 0x6FEA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_26, 0x6FEC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_8, 0x6FEF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_11, 0x6FFB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_7, 0x700B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_10, 0x700D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_6, 0x701E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_15, 0x70200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_6, 0x702A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_7, 0x70390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_25, 0x70450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_24, 0x70478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_14, 0x704A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_5, 0x70540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_23, 0x705F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_22, 0x70618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_6, 0x70640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_5, 0x70700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_5, 0x707F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_6, 0x70810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_5, 0x70830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_21, 0x708F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x70918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_20, 0x70AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_4, 0x70AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_5, 0x70BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_4, 0x70BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_3, 0x70C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_4, 0x70CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_3, 0x70D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_13, 0x70D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_19, 0x70DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_4, 0x70DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_18, 0x70EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_17, 0x70EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_3, 0x70F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_6, 0x70FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_6, 0x71010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_16, 0x71168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend_2, 0x71190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_15, 0x71250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_12, 0x71278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_5, 0x71318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_14, 0x71360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_4, 0x71388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_3, 0x713D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_11, 0x71418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_6, 0x714B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_10, 0x71538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_5, 0x715D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_9, 0x71658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_4, 0x716F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_8, 0x717A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_4, 0x71848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_7, 0x718C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_3, 0x71968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_6, 0x719E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_5, 0x71A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_13, 0x71BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_12, 0x71C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_11, 0x71C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_10, 0x71C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_4, 0x71C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_9, 0x71DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot_2, 0x71E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_8, 0x71E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Slot, 0x71E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_5, 0x71EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_4, 0x71F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_7, 0x71FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_3, 0x72020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose_2, 0x72178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_6, 0x722D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_5, 0x722F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_3, 0x72320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_3, 0x723C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_4, 0x72470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_3, 0x72498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_RotationOffsetBlendSpace, 0x724C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_PoseSnapshot_3, 0x72650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum_2, 0x726E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_PoseSnapshot_2, 0x72790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByEnum, 0x72820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool_2, 0x728D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_PoseSnapshot, 0x72970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SaveCachedPose, 0x72A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_2JBB, 0x72B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoBoneIK_2, 0x72B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_TwoBoneIK, 0x72D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_3, 0x72F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Root, 0x72F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose_2, 0x72F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LayeredBoneBlend, 0x72F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_9, 0x73058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_8, 0x73160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone_2, 0x73268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace_2, 0x73358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace_2, 0x73378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer_2, 0x73398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_BlendListByBool, 0x73418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_SequencePlayer, 0x734B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_UseCachedPose, 0x73538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_7, 0x73560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_CopyBone, 0x73668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_LocalToComponentSpace, 0x73758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ComponentToLocalSpace, 0x73778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_6, 0x73798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_5, 0x738A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_4, 0x739A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_Fabrik, 0x73AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_3, 0x73C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone_2, 0x73D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, AnimGraphNode_ModifyBone, 0x73E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Stance_F4B9317B4E715E265E0A97B6F0983BD6, 0x73F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_ShouldApplyArmsPitchCorrection_F4B9317B4E715E265E0A97B6F0983BD6, 0x73F59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_FIGI, 0x73F5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_FirstPersonAimYawDelta_F4B9317B4E715E265E0A97B6F0983BD6, 0x73F5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_FirstPersonAimPitch_F4B9317B4E715E265E0A97B6F0983BD6, 0x73F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_RibcageLeanAngle_F4FC7282407696652FBBEF97327C88FB, 0x73F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine3LeanAngle_F4FC7282407696652FBBEF97327C88FB, 0x73F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine2LeanAngle_F4FC7282407696652FBBEF97327C88FB, 0x73F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine1LeanAngle_F4FC7282407696652FBBEF97327C88FB, 0x73F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_LeanAmount_F4FC7282407696652FBBEF97327C88FB, 0x73F74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Stance_C02CE809436FE44638743095A0E89557, 0x73F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_ShouldApplyArmsPitchCorrection_C02CE809436FE44638743095A0E89557, 0x73F79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_9MCH, 0x73F7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_FirstPersonAimYawDelta_C02CE809436FE44638743095A0E89557, 0x73F7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_FirstPersonAimPitch_C02CE809436FE44638743095A0E89557, 0x73F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_RibcageLeanAngle_E36F94384712DBE79A8CAEB6A20F8F3E, 0x73F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine3LeanAngle_E36F94384712DBE79A8CAEB6A20F8F3E, 0x73F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine2LeanAngle_E36F94384712DBE79A8CAEB6A20F8F3E, 0x73F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine1LeanAngle_E36F94384712DBE79A8CAEB6A20F8F3E, 0x73F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_LeanAmount_E36F94384712DBE79A8CAEB6A20F8F3E, 0x73F94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_RibcageLeanAngle_37E85B9A4B96D6BDEF5EEC8946C8679F, 0x73F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine3LeanAngle_37E85B9A4B96D6BDEF5EEC8946C8679F, 0x73F9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine2LeanAngle_37E85B9A4B96D6BDEF5EEC8946C8679F, 0x73FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_Spine1LeanAngle_37E85B9A4B96D6BDEF5EEC8946C8679F, 0x73FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, __CustomProperty_LeanAmount_37E85B9A4B96D6BDEF5EEC8946C8679F, 0x73FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, RightFootEffectorLocation, 0x73FAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, LeftFootEffectorLocation, 0x73FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_HOX9, 0x73FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, Prisoner, 0x73FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, PelvisLockBoneTransform, 0x73FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, LeanAmount, 0x74000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, RandomStream, 0x74004);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, bShouldSkipStandWalkOrJogOrRunStart, 0x7400C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, ShouldTakePenisInHands, 0x7400D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, UnknownData_ZQ33, 0x7400E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, RightHandEffectorLocation, 0x74010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, LeftHandEffectorLocation, 0x7401C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, LeftHandRotation, 0x74028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, PelvisLeanMultiplier, 0x74034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, PelvisLeanAngle, 0x74038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, ThighLeanAngle, 0x7403C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, Spine1LeanAngle, 0x74040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, Spine2LeanAngle, 0x74044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, Spine3LeanAngle, 0x74048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, RibcageLeanAngle, 0x7404C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, FootIKLeanAngle, 0x74050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_C, FootIKAlpha, 0x74054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_C, 0x74058);
		}

		// class UBP_ImprovisedPistol_OpenEmptyInsertBullet_C : public UInsertCartridge
		TEST_METHOD(BlueprintGeneratedClass__BP_ImprovisedPistol_OpenEmptyInsertBullet__BP_ImprovisedPistol_OpenEmptyInsertBullet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ImprovisedPistol_OpenEmptyInsertBullet_C, 0x00A0);
		}

		// class UNiagaraDataInterfaceVelocityGrid : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceVelocityGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, GridSize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, UnknownData_55OL, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVelocityGrid, 0x00E8);
		}

		// class UNiagaraDataInterfacePressureGrid : public UNiagaraDataInterfaceVelocityGrid
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePressureGrid)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePressureGrid, 0x00E8);
		}

		// class AGroomActor : public AActor
		TEST_METHOD(Class__HairStrandsCore__GroomActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGroomActor, GroomComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGroomActor, 0x0228);
		}

		// class UGroomAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_VH2N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsRendering, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsPhysics, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInterpolation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsLOD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsCards, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMeshes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_6S93, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EnableGlobalInterpolation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairInterpolationType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, LODSelectionType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_MZ91, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, MinLOD, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, DisableBelowMinLodStripping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_UQ6X, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EffectiveLODBias, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, AssetUserData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_EGG5, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAsset, 0x00F8);
		}

		// class UGroomAssetImportData : public UAssetImportData
		TEST_METHOD(Class__HairStrandsCore__GroomAssetImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAssetImportData, ImportOptions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAssetImportData, 0x0030);
		}

		// class UGroomBindingAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomBindingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, Groom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, SourceSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, TargetSkeletalMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, NumInterpolationPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, MatchingSection, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, GroupInfos, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, UnknownData_WIMS, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBindingAsset, 0x00A0);
		}

		// class UGroomBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HairStrandsCore__GroomBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBlueprintLibrary, 0x0028);
		}

		// class UGroomComponent : public UMeshComponent
		TEST_METHOD(Class__HairStrandsCore__GroomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_LBAP, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomAsset, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, NiagaraComponents, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, SourceSkeletalMesh, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, BindingAsset, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, PhysicsAsset, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DebugMaterial, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DefaultMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Cards_DefaultMaterial, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Meshes_DefaultMaterial, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AngularSpringsSystem, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, CosseratRodsSystem, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AttachmentName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_4B45, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomGroupsDesc, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_0WGO, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomComponent, 0x0580);
		}

		// class UGroomCreateBindingOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateBindingOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, SourceSkeletalMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, TargetSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, NumInterpolationPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, MatchingSection, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateBindingOptions, 0x0040);
		}

		// class UGroomCreateFollicleMaskOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateFollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, RootRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Grooms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateFollicleMaskOptions, 0x0040);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_IQQA, 0x0B38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0B50);
		}

		// class UGroomCreateStrandsTexturesOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateStrandsTexturesOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_CMOV, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, MeshType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_F32E, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, StaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SkeletalMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, LODIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SectionIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UVChannelIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_UG89, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, GroupIndex, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateStrandsTexturesOptions, 0x0068);
		}

		// class UGroomImportOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, ConversionSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, InterpolationSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomImportOptions, 0x0050);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x052C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0530);
		}

		// class UGroomHairGroupsPreview : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomHairGroupsPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomHairGroupsPreview, Groups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomHairGroupsPreview, 0x0038);
		}

		// class UNiagaraDataInterfaceHairStrands : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceHairStrands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, UnknownData_SIRN, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceHairStrands, 0x0050);
		}

		// class UNiagaraDataInterfacePhysicsAsset : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, UnknownData_8Q85, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePhysicsAsset, 0x0068);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_BLFJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_02WP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class ABig_Animal_Fat_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Big_Animal_Fat__Big_Animal_Fat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABig_Animal_Fat_C, 0x0898);
		}

		// class USoundUtilitiesBPFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundUtilities__SoundUtilitiesBPFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundUtilitiesBPFunctionLibrary, 0x0028);
		}

		// class USoundSimple : public USoundBase
		TEST_METHOD(Class__SoundUtilities__SoundSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, Variations, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, SoundWave, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSimple, 0x01D0);
		}

		// class UMovieSceneSceneComponentImpersonator : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// class UMovieSceneCompiledData : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_EV6R, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// class UMovieSceneCompiledDataManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_NB72, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_3S2O, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// class UMovieSceneFloatDecomposer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_CV1P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_1U2L, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_XX96, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneEntitySystemLinker : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_97QF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_RVU9, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// class UMovieSceneEntitySystem : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_I5VE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_H29J, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_NNPU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// class UMovieScenePreAnimatedStateSystemInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneSequenceTickManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_TJ07, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_EXZK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_Q0SH, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_SCJL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_OP68, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_YDEA, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_IDCI, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_PR8G, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_0GX8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_EJB2, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_15PP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_0Y33, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_R68C, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_BEHR, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneTrackInstance : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_V2UT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_V47M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_MJNF, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_6UKD, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_BJQY, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_L9U1, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_RLQ4, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieSceneEntityProvider : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieSceneTrackTemplateProducer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// class UNodeAndChannelMappings : public UInterface
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// class UMovieSceneNodeGroup : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// class UMovieSceneNodeGroupCollection : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_6W3N, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_ZRGU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_DKAR, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_5M0U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UMotoSynthPreset : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// class UMotoSynthSource : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_6KNQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_AQH3, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_IO3U, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// class USynthComponentMoto : public USynthComponent
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_Q0XG, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// class AAkAcousticPortal : public AVolume
		TEST_METHOD(Class__AkAudio__AkAcousticPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, InitialState, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, UnknownData_0YMW, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, ObstructionRefreshInterval, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, ObstructionCollisionChannel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, UnknownData_3P31, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAcousticPortal, 0x02E8);
		}

		// class UAkPortalComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, UnknownData_M38B, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPortalComponent, 0x0200);
		}

		// class UAkAcousticTexture : public UPhysicalMaterial
		TEST_METHOD(Class__AkAudio__AkAcousticTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticTexture, 0x0080);
		}

		// class AAkAmbientSound : public AActor
		TEST_METHOD(Class__AkAudio__AkAmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkAudioEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, StopWhenOwnerIsDestroyed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AutoPost, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, UnknownData_0DXB, 0x0232);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAmbientSound, 0x0260);
		}

		// class UAkAudioBank : public UObject
		TEST_METHOD(Class__AkAudio__AkAudioBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, AutoLoad, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_RV26, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioBank, 0x0030);
		}

		// class UAkAudioEvent : public UObject
		TEST_METHOD(Class__AkAudio__AkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, RequiredBank, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaxAttenuationRadius, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, IsInfinite, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_XTPP, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MinimumDuration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaximumDuration, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEvent, 0x0040);
		}

		// class UAkComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_RH08, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBus, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBusName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionOrder, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionBusSendGain, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionMaxPathLength, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionCollisionChannel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_25HA, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_ZCYG, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, roomReverbAuxBusGain, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxEdges, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPaths, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPathLength, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_SGQE, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, StopWhenOwnerDestroyed, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_7YZ7, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, AttenuationScalingFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionRefreshInterval, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, AkAudioEvent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EventName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_SCX9, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkComponent, 0x03DC);
		}

		// class UAkAudioInputComponent : public UAkComponent
		TEST_METHOD(Class__AkAudio__AkAudioInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioInputComponent, UnknownData_2LKV, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioInputComponent, UnknownData_9MK8, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioInputComponent, 0x03F0);
		}

		// class UAkAuxBus : public UObject
		TEST_METHOD(Class__AkAudio__AkAuxBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAuxBus, RequiredBank, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAuxBus, UnknownData_ZR21, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAuxBus, 0x0038);
		}

		// class UAkCheckBox : public UContentWidget
		TEST_METHOD(Class__AkAudio__AkCheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_WHMB, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedState, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_F87E, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedStateDelegate, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_298K, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, WidgetStyle, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, HorizontalAlignment, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, IsFocusable, 0x0A51);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_4NSC, 0x0A52);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ThePropertyToControl, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ItemToControl, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, AkOnCheckStateChanged, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnItemDropped, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnPropertyDropped, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_PVQQ, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCheckBox, 0x0B28);
		}

		// class UAkGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkGameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameplayStatics, 0x0028);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_DPRV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class UAkCallbackInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCallbackInfo, AkComponent, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCallbackInfo, 0x0030);
		}

		// class UAkEventCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, EventId, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkEventCallbackInfo, 0x0038);
		}

		// class UAkMIDIEventCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMIDIEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMIDIEventCallbackInfo, UnknownData_8GH1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMIDIEventCallbackInfo, 0x0040);
		}

		// class UAkMarkerCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMarkerCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Identifier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, position, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Label, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMarkerCallbackInfo, 0x0050);
		}

		// class UAkDurationCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkDurationCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, EstimatedDuration, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, AudioNodeID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, MediaID, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, bStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, UnknownData_VG10, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDurationCallbackInfo, 0x0050);
		}

		// class UAkMusicSyncCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMusicSyncCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, SegmentInfo, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, MusicSyncType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UnknownData_3JJU, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UserCueName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMusicSyncCallbackInfo, 0x0070);
		}

		// class UAkItemBoolPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemBoolPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolPropertiesConv, 0x0028);
		}

		// class UAkItemBoolProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemBoolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, UnknownData_9ZU3, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolProperties, 0x0148);
		}

		// class UAkItemPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemPropertiesConv, 0x0028);
		}

		// class UAkItemProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, UnknownData_MOM4, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemProperties, 0x0148);
		}

		// class UAkLateReverbComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkLateReverbComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_G80D, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBus, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBusName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, SendLevel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, FadeRate, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, Priority, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_57XU, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, NextLowerPriorityComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_PLLK, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLateReverbComponent, 0x0238);
		}

		// class AAkReverbVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkReverbVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_7T09, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBus, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBusName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, SendLevel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, FadeRate, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, Priority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_59TI, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, LateReverbComponent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkReverbVolume, 0x0290);
		}

		// class UAkRoomComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkRoomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_0DGJ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, NextLowerPriorityComponent, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, Priority, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, WallOcclusion, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_OREC, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRoomComponent, 0x0220);
		}

		// class UAkSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MaxSimultaneousReverbVolumes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_1R9P, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseProjectPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseSoundBankFolder, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bAutoConnectToWAAPI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bEnableMultiCoreRendering, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultOcclusionCollisionChannel, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_DMJ2, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseWindowsInstallationPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseMacInstallationPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_SL7Y, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettings, 0x00A8);
		}

		// class UAkSettingsPerUser : public UObject
		TEST_METHOD(Class__AkAudio__AkSettingsPerUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseWindowsInstallationPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseMacInstallationPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SuppressWwiseProjectPathWarnings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_SJ8U, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettingsPerUser, 0x0050);
		}

		// class UAkSlider : public UWidget
		TEST_METHOD(Class__AkAudio__AkSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_PBER, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Orientation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_2WQD, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderBarColor, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderHandleColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IndentHandle, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Locked, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_HPIU, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, StepSize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IsFocusable, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_QL9Y, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ThePropertyToControl, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ItemToControl, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnValueChanged, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnItemDropped, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnPropertyDropped, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_HR5V, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSlider, 0x0530);
		}

		// class AAkSpatialAudioVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkSpatialAudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, SurfaceReflectorSet, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, LateReverb, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, Room, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpatialAudioVolume, 0x0270);
		}

		// class AAkSpotReflector : public AActor
		TEST_METHOD(Class__AkAudio__AkSpotReflector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, AuxBus, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, AuxBusName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, AcousticTexture, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, DistanceScalingFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, Level, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, UnknownData_V7PG, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpotReflector, 0x0250);
		}

		// class UAkSurfaceReflectorSetComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkSurfaceReflectorSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_VO15, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AcousticPolys, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_14EG, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSurfaceReflectorSetComponent, 0x0230);
		}

		// class UAkWaapiCalls : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiCalls)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiCalls, 0x0028);
		}

		// class USAkWaapiFieldNamesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__SAkWaapiFieldNamesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USAkWaapiFieldNamesConv, 0x0028);
		}

		// class UAkWaapiJsonManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiJsonManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiJsonManager, 0x0028);
		}

		// class UAkWaapiUriConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiUriConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiUriConv, 0x0028);
		}

		// class UAkWwiseTree : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, UnknownData_R1UV, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTree, 0x0148);
		}

		// class UAkWwiseTreeSelector : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTreeSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, UnknownData_SI4H, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTreeSelector, 0x0168);
		}

		// class UInterpTrackAkAudioEvent : public UInterpTrackVectorBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, Events, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, UnknownData_4KKD, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioEvent, 0x00A8);
		}

		// class UInterpTrackAkAudioRTPC : public UInterpTrackFloatBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, Param, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, UnknownData_MRUK, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioRTPC, 0x00A8);
		}

		// class UInterpTrackInstAkAudioEvent : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, UnknownData_98GV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioEvent, 0x0030);
		}

		// class UInterpTrackInstAkAudioRTPC : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, UnknownData_87E8, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioRTPC, 0x0030);
		}

		// class UMovieSceneAkAudioEventSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_J17R, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, Event, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, RetriggerEvent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_GV89, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, ScrubTailLengthMs, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, StopAtSectionEnd, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_HEAU, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, EventName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_J2S4, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxSourceDuration, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_8S7I, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxDurationSourceID, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_R4W4, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventSection, 0x01D0);
		}

		// class UMovieSceneAkTrack : public UMovieSceneTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, UnknownData_8IWK, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkTrack, 0x0090);
		}

		// class UMovieSceneAkAudioEventTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventTrack, 0x0090);
		}

		// class UMovieSceneAkAudioRTPCSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, Name, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, UnknownData_8ESO, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCSection, 0x0248);
		}

		// class UMovieSceneAkAudioRTPCTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCTrack, 0x0090);
		}

		// class AMagicLeapARPinInfoActor_C : public AMagicLeapARPinInfoActorBase
		TEST_METHOD(BlueprintGeneratedClass__MagicLeapARPinInfoActor__MagicLeapARPinInfoActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Right, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Forward, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Up, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ValidRadiusVisualizer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, AxisRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, VisualizerRoot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TypeValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrValue, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrLabel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrLabel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceLabel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, PinIDValue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, InfoRoot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Root, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotationSmoothSpeed, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActor_C, 0x02C4);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_G8HQ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class ABP_Dropping_01_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Dropping_01__BP_Dropping_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, MyConstraintComp1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, MyConstraintComp, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, Shit_03, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, Shit_02, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, Shit_01, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, SharedRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, OffsetTimeline_Offset_509AAF33465941489534FEBEC2819093, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, OffsetTimeline__Direction_509AAF33465941489534FEBEC2819093, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, UnknownData_YTP0, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, OffsetTimeline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, Shit_01_Relative_Location, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, HasSpawnedEffects, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, UnknownData_Y3ZD, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, DecalSize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, UnknownData_947P, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, ParticlesToSpawn, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, DecalToSpawn, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, SoundToSpawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Dropping_01_C, LifeTime, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Dropping_01_C, 0x02AC);
		}

		// class UABP_Prisoner_Corpse_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Prisoner_Corpse__ABP_Prisoner_Corpse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_Corpse_C, UnknownData_ZGXY, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_Corpse_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_Corpse_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Prisoner_Corpse_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Prisoner_Corpse_C, 0x0378);
		}

		// class UBP_MountTypeWeaponMagazineMP5_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponMagazineMP5__BP_MountTypeWeaponMagazineMP5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponMagazineMP5_C, 0x0028);
		}

		// class UBP_ImprPistol_Driver_UnloadInsertBullet_C : public UInsertCartridge
		TEST_METHOD(BlueprintGeneratedClass__BP_ImprPistol_Driver_UnloadInsertBullet__BP_ImprPistol_Driver_UnloadInsertBullet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ImprPistol_Driver_UnloadInsertBullet_C, 0x00A0);
		}

		// class ABP_WeaponBullet_50ActionExpress_C : public AProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponBullet_50ActionExpress__BP_WeaponBullet_50ActionExpress_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WeaponBullet_50ActionExpress_C, 0x0408);
		}

		// class ABig_Animal_guts_C : public AFoodItem
		TEST_METHOD(BlueprintGeneratedClass__Big_Animal_guts__Big_Animal_guts_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABig_Animal_guts_C, 0x0898);
		}

		// class UABP_Dick_Placeholder_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Dick_Placeholder__ABP_Dick_Placeholder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, UnknownData_DY2Y, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_BlendListByBool, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, UnknownData_Z673, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_Fabrik, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_MeshRefPose_2, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_ComponentToLocalSpace, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_MeshRefPose, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, AnimGraphNode_RigidBody, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, EnabledIK, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, UnknownData_1TC8, 0x0BE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, _targetIK, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, IsPenisInHands, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, UnknownData_YIR9, 0x0BF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, _handsIK, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Dick_Placeholder_C, IsInRange, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Dick_Placeholder_C, 0x0C01);
		}

		// class UBP_MountTypeWeaponMagazine76254_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponMagazine76254__BP_MountTypeWeaponMagazine76254_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponMagazine76254_C, 0x0028);
		}

		// class USteamAuthComponentModuleInterface : public UHandlerComponentFactory
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_OYWL, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07C0);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_0SGE, 0x1B91);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1B98);
		}

		// class AMagicLeapSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldPlayerController, UnknownData_4UDI, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldPlayerController, 0x0588);
		}

		// class AMagicLeapSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, SharedWorldData, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, UnknownData_3C70, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, ChosenOne, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameMode, 0x03D8);
		}

		// class AMagicLeapSharedWorldGameState : public AGameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, SharedWorldData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameState, 0x02D0);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnabledByDefault, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_POY2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_01BP, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_695D, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_YHHK, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_WM0T, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_NKH8, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_ZXX3, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_KG9U, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_F1J7, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// class UBP_MountTypeWeaponMagazine54539_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponMagazine54539__BP_MountTypeWeaponMagazine54539_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponMagazine54539_C, 0x0028);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_QFXN, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_JFUZ, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_OR2H, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_NWNL, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0148);
		}

		// class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_7Z6K, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_2AV8, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_2KFP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_AYH3, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_GG63, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_Q5PK, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_LGK5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_S0NP, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_8SJA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// class UMovieScenePropertySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_3G7H, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_27SD, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_BSXZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, eventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_CM4D, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_K98L, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_X26Y, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_PGU3, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_L7P9, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// class UMovieSceneFadeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_4GA1, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_0WCI, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_73AO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_LJPV, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_SK9M, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_CPUK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_LI5R, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_0AZ8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_OZP0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_H1VB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_9YVH, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_TGYZ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_7LZP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_EXP1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_E8FF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_AAQB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_AFWW, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_N1N0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_MKS4, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_ZRYY, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_554G, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_CJDJ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_X2RJ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_D84Y, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_JRBS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_VCDQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_ULTF, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_24QF, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_1BP4, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_KZYP, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_G931, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_FG2X, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_WP8T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_161T, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_1K3W, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_NT2D, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_WAYF, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_HL0Q, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_ZJKE, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_1UK6, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_1ML4, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_FDBW, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_QPAE, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_YNJU, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_3BGI, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_9WFT, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_R644, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_K6ZE, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_E0KY, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_LD1Z, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_ZX47, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_KRYW, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_FFJD, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_9SSW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_NJZP, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_BB05, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, UnknownData_0ABP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0090);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0118);
		}

		// class UEasyAntiCheatNetComponent : public UActorComponent
		TEST_METHOD(Class__EasyAntiCheatCommon__EasyAntiCheatNetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEasyAntiCheatNetComponent, UnknownData_B460, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEasyAntiCheatNetComponent, 0x00B8);
		}

		// class ABP_Gib_C : public AGib
		TEST_METHOD(BlueprintGeneratedClass__BP_Gib__BP_Gib_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Gib_C, 0x0230);
		}

		// class UAudioSynesthesiaNRTSettings : public UAudioAnalyzerNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRTSettings, 0x0028);
		}

		// class UAudioSynesthesiaNRT : public UAudioAnalyzerNRT
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRT)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRT, 0x0078);
		}

		// class ULoudnessNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRT, 0x0080);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_PU74, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_P601, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x02E0);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_8B09, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x02D0);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_T54O, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x02D0);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_F4HH, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_MA04, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_2I8Z, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_3RYU, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0118);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_GGD1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UBP_AK47_RemoveBullet_C : public URemoveCartridge
		TEST_METHOD(BlueprintGeneratedClass__BP_AK47_RemoveBullet__BP_AK47_RemoveBullet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AK47_RemoveBullet_C, 0x0058);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UOnsetNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, bDownmixToMono, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_4NFS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, GranularityInSeconds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, Sensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MinimumFrequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MaximumFrequency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_0UXA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRTSettings, 0x0040);
		}

		// class UOnsetNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRT, 0x0080);
		}

		// class UConstantQNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, StartingFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBands, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBandsPerOctave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, AnalysisPeriod, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, bDownmixToMono, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, FFTSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, WindowType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, SpectrumType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, BandWidthStretch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, CQTNormalization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, UnknownData_KFKR, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRTSettings, 0x0048);
		}

		// class UConstantQNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRT, 0x0080);
		}

		// class ULoudnessNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, AnalysisPeriod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MinimumFrequency, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MaximumFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, CurveType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_BGNN, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, NoiseFloorDb, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_6EP9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRTSettings, 0x0040);
		}

		// class ADummyPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__DummyPawn__DummyPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyPawn_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADummyPawn_C, 0x0288);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_OUTD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_0JW7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_OLQZ, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_3JVN, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_WN2H, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class ABP_WeaponBullet_762x39FMJ_C : public AProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponBullet_762x39FMJ__BP_WeaponBullet_762x39FMJ_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WeaponBullet_762x39FMJ_C, 0x0408);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_B960, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UReplicationGraphNode : public UObject
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode, AllChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode, UnknownData_FZKZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode, 0x0050);
		}

		// class UReplicationGraphNode_ActorList : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ActorList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ActorList, UnknownData_0I11, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ActorList, 0x00F8);
		}

		// class UReplicationGraphNode_DormancyNode : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_DormancyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_DormancyNode, UnknownData_8A3J, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_DormancyNode, 0x0108);
		}

		// class UReplicationGraphNode_GridCell : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_GridCell)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, UnknownData_ZUO5, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, DynamicNode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, DormancyNode, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_GridCell, 0x0150);
		}

		// class UReplicationGraphNode_GridSpatialization2D : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_GridSpatialization2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridSpatialization2D, UnknownData_DXEB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_GridSpatialization2D, 0x0230);
		}

		// class UReplicationGraphNode_AlwaysRelevant : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_AlwaysRelevant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant, ChildNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant, UnknownData_K8JB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_AlwaysRelevant, 0x0068);
		}

		// class UReplicationGraphNode_ActorListFrequencyBuckets : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ActorListFrequencyBuckets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ActorListFrequencyBuckets, UnknownData_OPQI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ActorListFrequencyBuckets, 0x0138);
		}

		// class UReplicationGraphNode_DynamicSpatialFrequency : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_DynamicSpatialFrequency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_DynamicSpatialFrequency, UnknownData_HI23, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_DynamicSpatialFrequency, 0x0128);
		}

		// class UReplicationGraphNode_ConnectionDormancyNode : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ConnectionDormancyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ConnectionDormancyNode, UnknownData_WHYV, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ConnectionDormancyNode, 0x0190);
		}

		// class UReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_AlwaysRelevant_ForConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, UnknownData_U5MA, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, PastRelevantActors, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, 0x0120);
		}

		// class UReplicationGraphNode_TearOff_ForConnection : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_TearOff_ForConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_TearOff_ForConnection, TearOffActors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_TearOff_ForConnection, UnknownData_LOWD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_TearOff_ForConnection, 0x0078);
		}

		// class UNetReplicationGraphConnection : public UReplicationConnectionDriver
		TEST_METHOD(Class__ReplicationGraph__NetReplicationGraphConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, NetConnection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_UVYL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, DebugActor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_52SY, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, LastGatherLocations, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_7WHG, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, ConnectionGraphNodes, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, TearOffNode, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_R2F9, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetReplicationGraphConnection, 0x0238);
		}

		// class AReplicationGraphDebugActor : public AActor
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphDebugActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReplicationGraphDebugActor, ReplicationGraph, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReplicationGraphDebugActor, ConnectionManager, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReplicationGraphDebugActor, 0x0230);
		}

		// class UReplicationGraph : public UReplicationDriver
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, ReplicationConnectionManagerClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, Connections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, PendingConnections, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, UnknownData_NSCV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, GlobalGraphNodes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, PrepareForReplicationNodes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, UnknownData_2PQY, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraph, 0x0498);
		}

		// class UBasicReplicationGraph : public UReplicationGraph
		TEST_METHOD(Class__ReplicationGraph__BasicReplicationGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, GridNode, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, AlwaysRelevantNode, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, AlwaysRelevantForConnectionList, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, ActorsWithoutNetConnection, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, UnknownData_D0LU, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicReplicationGraph, 0x04D0);
		}

		// class UBP_MountTypeWeaponMagazine76239_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponMagazine76239__BP_MountTypeWeaponMagazine76239_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponMagazine76239_C, 0x0028);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0028);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0028);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0050);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, AxisOrientation, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_OH2N, 0x005B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0060);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0028);
		}

		// class ALuminAROrigin : public AAROriginActor
		TEST_METHOD(Class__MagicLeapAR__LuminAROrigin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, MRMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, PlaneSurfaceMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, WireframeMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, UnknownData_VNA8, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALuminAROrigin, 0x02E0);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_525B, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_8SFA, 0x019A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x01A0);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, UnknownData_O2LW, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0090);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0128);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_MY3S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_46X5, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_IVUG, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_9V49, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_QZ4Z, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_YSV3, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_1ZRQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_I151, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_6F9J, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_VY1Y, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_2QAG, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_K2BF, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_EOAN, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_DHD0, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_X1AP, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_FF8M, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_ICZ8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_6LOA, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_86O1, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_3GPG, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_WW3P, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_CEDX, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_ASRX, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_GOWL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_XADZ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_YY3E, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_UJ5H, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_OJOK, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_5D2M, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DYG4, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_JHKW, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_36VW, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F8);
		}

		// class UBuoyantMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__OceanPlugin__BuoyantMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_I2AQ, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bVerticalForcesOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bUseWaterPatch, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bUseStaticForces, 0x04DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bUseDynamicForces, 0x04DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_5578, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, OceanManager, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bDrawForceArrows, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bDrawWaterline, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bDrawVertices, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bDrawTriangles, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bDrawSubtriangles, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_JG5X, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, ForceArrowSize, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bOverrideMeshDensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_B1RJ, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, MeshDensity, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, bOverrideMass, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_5ROC, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, Mass, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, WaterDensity, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_W1WR, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, WaterHeightmap, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantMeshComponent, UnknownData_MNAJ, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuoyantMeshComponent, 0x0540);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_B3FO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_UABN, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_5S22, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_WHM8, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_59J9, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class ACustomVehicleController : public APlayerController
		TEST_METHOD(Class__OceanPlugin__CustomVehicleController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomVehicleController, PlayerPawn, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomVehicleController, 0x0578);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_WV80, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_00DX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_8O2I, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_JP9D, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_8KEP, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_DV6Q, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_MJRF, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_YFJ8, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// class AFishManager : public AActor
		TEST_METHOD(Class__OceanPlugin__FishManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, flockTypes, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, numInFlock, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, MinZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, maxZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, underwaterBoxLength, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, attachToPlayer, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, DebugMode, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, UnknownData_5DLV, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, playerType, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishManager, UnknownData_099N, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFishManager, 0x0278);
		}

		// class AFlockFish : public APawn
		TEST_METHOD(Class__OceanPlugin__FlockFish)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, UnknownData_BZOR, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, FishInteractionSphere, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, isLeader, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, UnknownData_J843, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, enemyTypes, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, preyTypes, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, neighborType, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, followDist, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, Speed, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, MaxSpeed, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, turnSpeed, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, turnFrequency, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, hungerResetTime, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, distBehindSpeedUpRange, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, SeperationDistanceMultiplier, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, FleeDistanceMultiplier, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, FleeAccelerationMultiplier, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, ChaseAccelerationMultiplier, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, SeekDecelerationMultiplier, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, AvoidForceMultiplier, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, AvoidanceForce, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, playerType, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, underwaterMin, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, underwaterMax, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, CustomZSeekMin, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, CustomZSeekMax, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, NumNeighborsToEvaluate, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, UpdateEveryTick, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, UnknownData_JF5Z, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, DebugMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlockFish, UnknownData_IMMJ, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlockFish, 0x0400);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_QUII, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_ROY7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_9EXA, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_EEB8, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_MJ1U, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UCameraShakeBase : public UObject
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_OOYA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_MTJW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x0098);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_C17W, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_O4YE, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_FKG9, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_FR9S, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_YY0H, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_FDQD, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class UInfiniteSystemComponent : public USceneComponent
		TEST_METHOD(Class__OceanPlugin__InfiniteSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, UnknownData_PL0S, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, GridSnapSize, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, MaxLookAtDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, ScaleByDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, UnknownData_KXW3, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, ScaleDistanceFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, ScaleStartDistance, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, ScaleMin, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, ScaleMax, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfiniteSystemComponent, UnknownData_GSNO, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfiniteSystemComponent, 0x0220);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_D7VI, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_0YE9, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_4GW5, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_NT2T, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_LZNA, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_SLNQ, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_NIO4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_EIJG, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_TUE6, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0440);
		}

		// class AOceanManager : public AActor
		TEST_METHOD(Class__OceanPlugin__OceanManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, EnableGerstnerWaves, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, UnknownData_1SXA, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, GlobalWaveDirection, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, GlobalWaveSpeed, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, GlobalWaveAmplitude, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, DistanceCheck, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, WaveClusters, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, WaveSetOffsetsOverride, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, NetWorkTimeOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, bEnableLandscapeModulation, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, UnknownData_M0KL, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, ModulationStartHeight, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, ModulationMaxHeight, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, ModulationPower, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, UnknownData_8D2R, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, Landscape, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, HeightmapTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanManager, UnknownData_2NWR, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOceanManager, 0x02A8);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_J76K, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_M533, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_NUCC, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0468);
		}

		// class ATimeManager : public AActor
		TEST_METHOD(Class__OceanPlugin__TimeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, CurrentLocalTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, Latitude, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, Longitude, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, OffsetUTC, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, OffsetDST, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, bAllowDaylightSavings, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, bDaylightSavingsActive, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, UnknownData_E15B, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, TimeScaleMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SolarTime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LocalClockTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, TimeCorrection, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LSTM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, DayOfYear, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, EoT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SolarAltAngle, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SolarDeclination, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SolarAzimuth, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SolarHRA, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, SiderealTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarAltAngle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarHRA, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarDeclination, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarAzimuth, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarRightAsc, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, LunarElapsedDays, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, EcLongitude, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, EcLatitude, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, EcDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, PartL, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, PartM, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, PartF, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeManager, UnknownData_NQQK, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeManager, 0x02E8);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_1MGI, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_6WTM, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_Q7HL, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_JVS3, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_K2E9, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_BSV2, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_B826, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_AJVW, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_XZV7, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_7923, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0690);
		}

		// class UWaterHeightmapComponent : public UActorComponent
		TEST_METHOD(Class__OceanPlugin__WaterHeightmapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, DesiredCellSize, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, bOnlyCollidingComponents, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, UnknownData_H3RE, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, GridSizeMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, bDrawUsedTriangles, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, bDrawHeightmap, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, UnknownData_DEHO, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterHeightmapComponent, OceanManager, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterHeightmapComponent, 0x0128);
		}

		// class UAdvancedBuoyancyComponent : public USceneComponent
		TEST_METHOD(Class__OceanPlugin__AdvancedBuoyancyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, UnknownData_IVO5, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, TheOcean, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, WaterDensity, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, Gravity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, MeshDensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, UnknownData_1PIU, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, BuoyantMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, MeshTransform, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, FalseVolume, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, BuoyancyReductionCoefficient, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, BuoyancyPitchReductionCoefficient, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, DensityCorrection, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, DensityCorrectionModifier, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, SubmergedVolume, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, ImpactCoefficient, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, DragCoefficient, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, SuctionCoefficient, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, ViscousDragCoefficient, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, MaxSlamAcceleration, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, UnknownData_5YDF, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, AdvancedGridHeight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, SubmergedTris, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, TriSizes, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, TriSubmergedArea, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedBuoyancyComponent, UnknownData_5K7C, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedBuoyancyComponent, 0x0310);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VN4H, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_8DL9, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IDUJ, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QT8L, 0x08A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_23YS, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LIIT, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_0WBJ, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_TM2Q, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_RR87, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QFDH, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_D6ZG, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_DOE2, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XOSX, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LYIQ, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_M9RY, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ED0);
		}

		// class UBuoyancyComponent : public UMovementComponent
		TEST_METHOD(Class__OceanPlugin__BuoyancyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, OceanManager, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, MeshDensity, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, FluidDensity, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, FluidLinearDamping, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, FluidAngularDamping, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, VelocityDamper, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, ClampMaxVelocity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, UnknownData_RU60, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, MaxUnderwaterVelocity, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, TestPointRadius, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, TestPoints, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, PointDensityOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, DrawDebugPoints, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, EnableStayUprightConstraint, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, UnknownData_P2MQ, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, StayUprightStiffness, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, StayUprightDamping, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, StayUprightDesiredRotation, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, EnableWaveForces, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, UnknownData_C6BH, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, WaveForceMultiplier, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, UnknownData_JFQ8, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuoyancyComponent, 0x0180);
		}

		// class UBuoyancyForceComponent : public USceneComponent
		TEST_METHOD(Class__OceanPlugin__BuoyancyForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, OceanManager, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, MeshDensity, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, FluidDensity, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, FluidLinearDamping, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, FluidAngularDamping, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, VelocityDamper, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, ClampMaxVelocity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, UnknownData_LUDQ, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, MaxUnderwaterVelocity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, TestPointRadius, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, TestPoints, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, ApplyForceToBones, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, SnapToSurfaceIfNoPhysics, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, TwoGerstnerIterations, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, UnknownData_S0DK, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, PointDensityOverride, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, BoneOverride, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, DrawDebugPoints, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, EnableStayUprightConstraint, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, UnknownData_Q3EM, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, StayUprightStiffness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, StayUprightDamping, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, StayUprightDesiredRotation, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, EnableWaveForces, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, UnknownData_PIPU, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, WaveForceMultiplier, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, TickGroup, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyForceComponent, UnknownData_HKG8, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuoyancyForceComponent, 0x02A0);
		}

		// class ABuoyantDestructible : public AActor
		TEST_METHOD(Class__OceanPlugin__BuoyantDestructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuoyantDestructible, BuoyantDestructibleComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuoyantDestructible, 0x0228);
		}

		// class UBuoyantDestructibleComponent : public UDestructibleComponent
		TEST_METHOD(Class__OceanPlugin__BuoyantDestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, UnknownData_AV2F, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, OceanManager, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, ChunkDensity, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, FluidDensity, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, FluidLinearDamping, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, FluidAngularDamping, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, VelocityDamper, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, ClampMaxVelocity, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, UnknownData_0ATH, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, MaxUnderwaterVelocity, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, TestPointRadius, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, DrawDebugPoints, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, EnableWaveForces, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, UnknownData_WP1C, 0x07AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, WaveForceMultiplier, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, ChunkSleepThreshold, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, ChunkStabilizationThreshold, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyantDestructibleComponent, UnknownData_5QI6, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuoyantDestructibleComponent, 0x07C0);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_165F, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_BITK, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_WJUQ, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0260);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0028);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_UPDV, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_786E, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_LG7X, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02B8);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_MPZF, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_P58Z, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_U5HN, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_3OWT, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0440);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_CWX2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_KTZE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_D983, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_0QTL, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D0);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_62HI, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_T3PS, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_TODV, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_YDL2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_SV79, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VYX5, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_QLHY, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BY58, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_WMMQ, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CJDS, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CIRG, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YQ1T, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_V02J, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_NIB1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_OGUG, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GL2H, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_U24L, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IV84, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HZ2G, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_V3NK, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_8UOE, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_EM5L, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_NPN6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_V9WJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_2TDJ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_LEKG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_DVSX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_LZTZ, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_CX79, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_CV9W, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_K6XF, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_F7TV, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_NTUH, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedCrouchedStateAndCapsuleHalfHeight, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_LGD1, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_O8TE, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_QH0Y, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2BU1, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04C8);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_Y41A, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_I5ZT, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_X90Q, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0540);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_S9YV, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_53TV, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_HS5U, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_E3VB, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_LROW, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_YZX8, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_99X3, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_JQKX, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GG2F, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IMNL, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_A3A7, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_4DBH, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_YZVU, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_JAER, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_1WVJ, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_NL9Q, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_3JG0, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_R3GN, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_EJ35, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_J875, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_63UZ, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_RBC6, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_SELW, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_Z0BA, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_JG0H, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_GTKQ, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_VLV5, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_T7O9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_FBK7, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_Q8UI, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_O9FS, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_104N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_ULBW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_OP5O, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_96QO, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x022C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_681C, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_2TTL, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_QCWM, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_N26P, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_73MD, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_FWUZ, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_JAF6, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_XGGK, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_MXFN, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x032C);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0340);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_DK71, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_GO6S, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x035C);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_SLH0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_YP53, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_QVH6, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_9SVP, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1AKX, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_WF9Z, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_9680, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_Z18X, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_FHG3, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_P8AA, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_3WJC, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_XYE1, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_UR4G, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_M6L4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_8WR8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_7YX5, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_IW8A, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_9CDH, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_Y6S7, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_WTPK, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_UCOL, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_HOA7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_B1DI, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_NNPN, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class AAchievementsManagerClient : public AActor
		TEST_METHOD(Class__ConZ__AchievementsManagerClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAchievementsManagerClient, UnknownData_ZWGT, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAchievementsManagerClient, 0x02B8);
		}

		// class AAchievementsManagerServer : public AActor
		TEST_METHOD(Class__ConZ__AchievementsManagerServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAchievementsManagerServer, UnknownData_N69D, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAchievementsManagerServer, 0x0298);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class UDesignableUserWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__DesignableUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDesignableUserWidget, UnknownData_UTIA, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDesignableUserWidget, 0x0278);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_O7MS, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_BKG1, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_7Y7H, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_XAC8, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UActionProgressWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ActionProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, ActionProgressFinishedEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, ActionProgressCancelledEvent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, CanCancel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, UnknownData_0Z1X, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, _currentTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, _duration, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, _manualMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionProgressWidget, UnknownData_RT2F, 0x02AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionProgressWidget, 0x02C8);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_GELH, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ZCUY, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_49O7, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_F1LC, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_XHMD, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UActorStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ActorStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorStatics, 0x0028);
		}

		// class USickness : public UObject
		TEST_METHOD(Class__ConZ__Sickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USickness, UnknownData_52QU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USickness, 0x01B0);
		}

		// class UAddiction : public USickness
		TEST_METHOD(Class__ConZ__Addiction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddiction, 0x01B0);
		}

		// class UAdminCommand : public UObject
		TEST_METHOD(Class__ConZ__AdminCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _verb, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _argumentDescriptions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _numberOfRequiredArguments, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _isEnabled, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _isEnabledInShippingBuild, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _isAdminStatusRequired, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _isDeveloperStatusRequired, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _shouldExecuteOnServer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _shouldExecuteOnClient, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _shouldDisableSingleplayerAchievementsIfExecuted, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, UnknownData_GVJW, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, _description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand, UnknownData_88YO, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand, 0x0080);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_HM3Y, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_HI8Y, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_5F0L, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UAdminCommand_AddOrRemoveWidget : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_AddOrRemoveWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_AddOrRemoveWidget, _widgetClassesByName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_AddOrRemoveWidget, 0x00D0);
		}

		// class UAdminCommand_AddPrisonerBodyEffect : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_AddPrisonerBodyEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_AddPrisonerBodyEffect, 0x0080);
		}

		// class UAdminCommand_AdminLight : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_AdminLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_AdminLight, _adminLightComponent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_AdminLight, _maxIntensityMultiplier, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_AdminLight, UnknownData_RBVL, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_AdminLight, 0x0090);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_567K, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0458);
		}

		// class UAdminCommand_Announce : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Announce)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Announce, 0x0080);
		}

		// class UAdminCommand_BanPlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_BanPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_BanPlayer, 0x0080);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_PJIE, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0460);
		}

		// class UAdminCommand_CancelVote : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_CancelVote)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_CancelVote, 0x0080);
		}

		// class UAdminCommand_CharacterSpawner : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_CharacterSpawner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_CharacterSpawner, 0x0080);
		}

		// class UAdminCommand_ClearFakeName : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ClearFakeName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ClearFakeName, 0x0080);
		}

		// class UAdminCommand_CompleteMission : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_CompleteMission)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_CompleteMission, 0x0080);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_KQWK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_FXD5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UAdminCommand_ComputeBodyComposition : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ComputeBodyComposition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ComputeBodyComposition, 0x0080);
		}

		// class UAdminCommand_CrashMajestically : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_CrashMajestically)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_CrashMajestically, 0x0080);
		}

		// class UAdminCommand_DemolitionSkillDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DemolitionSkillDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DemolitionSkillDebug, 0x0080);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, bKeepInstanceBufferCPUAccess, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_QMLK, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_EP8F, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_TBIP, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_Z94S, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_F824, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// class UAdminCommand_DestroyAllVehicles : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DestroyAllVehicles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DestroyAllVehicles, 0x0080);
		}

		// class UAdminCommand_DestroyVehicle : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DestroyVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DestroyVehicle, 0x0080);
		}

		// class UAdminCommand_DistanceDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DistanceDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DistanceDebug, 0x0080);
		}

		// class UAdminCommand_DoorDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DoorDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DoorDebug, 0x0080);
		}

		// class UAdminCommand_DumpAllSquadsInfoList : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_DumpAllSquadsInfoList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_DumpAllSquadsInfoList, 0x0080);
		}

		// class UAdminCommand_EndTournamentMode : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_EndTournamentMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_EndTournamentMode, 0x0080);
		}

		// class UAdminCommand_ExecuteConsoleCommand : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ExecuteConsoleCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ExecuteConsoleCommand, 0x0080);
		}

		// class UAdminCommand_FindSquadMember : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_FindSquadMember)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_FindSquadMember, 0x0080);
		}

		// class UAdminCommand_Immortality : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Immortality)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Immortality, 0x0080);
		}

		// class UAdminCommand_KickPlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_KickPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_KickPlayer, 0x0080);
		}

		// class UAdminCommand_Knockout : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Knockout)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Knockout, 0x0080);
		}

		// class UAdminCommand_LeaveCorpse : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_LeaveCorpse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_LeaveCorpse, 0x0080);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_6IQW, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_AQKK, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_37MU, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_5IZK, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_L2Z5, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0668);
		}

		// class UAdminCommand_ListMutedPlayers : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListMutedPlayers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListMutedPlayers, 0x0080);
		}

		// class UAdminCommand_ListPlayers : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListPlayers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListPlayers, 0x0080);
		}

		// class UAdminCommand_ListPrimaryAssets : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListPrimaryAssets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_ListPrimaryAssets, _primaryAssetType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_ListPrimaryAssets, _primaryAssetsToExclude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListPrimaryAssets, 0x00D8);
		}

		// class UAdminCommand_ListSilencedPlayers : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListSilencedPlayers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListSilencedPlayers, 0x0080);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_IGXV, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_1DJH, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_YEFC, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_6S47, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class UAdminCommand_ListSpawnedAnimals : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListSpawnedAnimals)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListSpawnedAnimals, 0x0080);
		}

		// class UAdminCommand_ListSpawnedVehicles : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListSpawnedVehicles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_ListSpawnedVehicles, _vehicleSpawnGroupsByCategory, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListSpawnedVehicles, 0x0160);
		}

		// class UAdminCommand_ListSquadMembers : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListSquadMembers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListSquadMembers, 0x0080);
		}

		// class UAdminCommand_ListSquads : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ListSquads)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ListSquads, 0x0080);
		}

		// class UAdminCommand_Location : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Location)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Location, 0x0080);
		}

		// class UAdminCommand_LogCharacterSpawner : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_LogCharacterSpawner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_LogCharacterSpawner, 0x0080);
		}

		// class UAdminCommand_Loot : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Loot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Loot, 0x0080);
		}

		// class UAdminCommand_MutePlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_MutePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_MutePlayer, 0x0080);
		}

		// class UAdminCommand_PlaceableActorDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_PlaceableActorDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_PlaceableActorDebug, 0x0080);
		}

		// class UAdminCommand_PrisonerTakeDamage : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_PrisonerTakeDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_PrisonerTakeDamage, 0x0080);
		}

		// class UAdminCommand_ReloadCustomMapConfig : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ReloadCustomMapConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ReloadCustomMapConfig, 0x0080);
		}

		// class UAdminCommand_ReloadVoteConfig : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ReloadVoteConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ReloadVoteConfig, 0x0080);
		}

		// class UAdminCommand_RenameVehicle : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_RenameVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_RenameVehicle, 0x0080);
		}

		// class UAdminCommand_ResetAchievements : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ResetAchievements)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ResetAchievements, 0x0080);
		}

		// class UAdminCommand_ResetMissionEnabled : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ResetMissionEnabled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ResetMissionEnabled, 0x0080);
		}

		// class UAdminCommand_ResetSquadInfo : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ResetSquadInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ResetSquadInfo, 0x0080);
		}

		// class UAdminCommand_ScheduleWorldEvent : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ScheduleWorldEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ScheduleWorldEvent, 0x0080);
		}

		// class UAdminCommand_SendNotification : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SendNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SendNotification, 0x0080);
		}

		// class UAdminCommand_SetDecayTimeDilation : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetDecayTimeDilation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetDecayTimeDilation, 0x0080);
		}

		// class UAdminCommand_SetFacialHairLength : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetFacialHairLength)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetFacialHairLength, 0x0080);
		}

		// class UAdminCommand_SetFakeName : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetFakeName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetFakeName, 0x0080);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class UAdminCommand_SetFamePoints : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetFamePoints)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetFamePoints, 0x0080);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class UAdminCommand_SetFamePointsToAll : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetFamePointsToAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetFamePointsToAll, 0x0080);
		}

		// class UAdminCommand_SetFamePointsToAllOnline : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetFamePointsToAllOnline)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetFamePointsToAllOnline, 0x0080);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UAdminCommand_SetGodMode : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetGodMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetGodMode, 0x0080);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_ZQFR, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_ZP2G, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_M05D, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// class UAdminCommand_SetHairLength : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetHairLength)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetHairLength, 0x0080);
		}

		// class UAdminCommand_SetHealthToItemInHands : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetHealthToItemInHands)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetHealthToItemInHands, 0x0080);
		}

		// class UAdminCommand_SetInfiniteAmmo : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetInfiniteAmmo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetInfiniteAmmo, 0x0080);
		}

		// class UAdminCommand_SetInfiniteStamina : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetInfiniteStamina)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetInfiniteStamina, 0x0080);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_BD35, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_JO00, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_ODUF, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UAdminCommand_SetMalfunctionProbability : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetMalfunctionProbability)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetMalfunctionProbability, 0x0080);
		}

		// class UAdminCommand_SetMountedVehicleProperty : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetMountedVehicleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetMountedVehicleProperty, 0x0080);
		}

		// class UAdminCommand_SetPrisonerProperty : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetPrisonerProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetPrisonerProperty, 0x0080);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_B8X9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_340B, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class UAdminCommand_SetSkillLevel : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetSkillLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetSkillLevel, 0x0080);
		}

		// class UAdminCommand_SetStamina : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetStamina)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetStamina, 0x0080);
		}

		// class UAdminCommand_SetTime : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetTime, 0x0080);
		}

		// class UAdminCommand_SetWeather : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SetWeather)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SetWeather, 0x0080);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_Z7NP, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// class UAdminCommand_ShouldChainTeleportToVehicles : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ShouldChainTeleportToVehicles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ShouldChainTeleportToVehicles, 0x0080);
		}

		// class UAdminCommand_ShouldShowOtherPlayerInfo : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ShouldShowOtherPlayerInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ShouldShowOtherPlayerInfo, 0x0080);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class UAdminCommand_ShouldShowOtherPlayerLocations : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ShouldShowOtherPlayerLocations)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ShouldShowOtherPlayerLocations, 0x0080);
		}

		// class UAdminCommand_ShowBaseBuildingDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ShowBaseBuildingDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ShowBaseBuildingDebug, 0x0080);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class UAdminCommand_ShowWeaponInfo : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_ShowWeaponInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_ShowWeaponInfo, 0x0080);
		}

		// class UAdminCommand_SilencePlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SilencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SilencePlayer, 0x0080);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_7NMU, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UAdminCommand_Sleep : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Sleep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Sleep, 0x0080);
		}

		// class UAdminCommand_SpawnPrimaryActorAsset : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_SpawnPrimaryActorAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, _primaryAssetType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, _primaryAssetsToExclude, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, _countArgumentMinValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, _countArgumentMaxValue, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, _spawnOffset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnPrimaryActorAsset, UnknownData_757P, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SpawnPrimaryActorAsset, 0x00F0);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_HPEU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_O5VG, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_03VY, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// class UAdminCommand_SpawnItem : public UAdminCommand_SpawnPrimaryActorAsset
		TEST_METHOD(Class__ConZ__AdminCommand_SpawnItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommand_SpawnItem, UnknownData_IHDB, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SpawnItem, 0x0100);
		}

		// class UAdminCommand_SpawnRandomPrimaryActorAsset : public UAdminCommand_SpawnPrimaryActorAsset
		TEST_METHOD(Class__ConZ__AdminCommand_SpawnRandomPrimaryActorAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SpawnRandomPrimaryActorAsset, 0x00F0);
		}

		// class UAdminCommand_SpawnVehicle : public UAdminCommand_SpawnPrimaryActorAsset
		TEST_METHOD(Class__ConZ__AdminCommand_SpawnVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_SpawnVehicle, 0x00F0);
		}

		// class UAdminCommand_StartTournamentMode : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_StartTournamentMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_StartTournamentMode, 0x0080);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_ELBD, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// class UAdminCommand_Teleport : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Teleport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Teleport, 0x0080);
		}

		// class UAdminCommand_TeleportTo : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TeleportTo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TeleportTo, 0x0080);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_3218, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UAdminCommand_TeleportTo3pm : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TeleportTo3pm)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TeleportTo3pm, 0x0080);
		}

		// class UAdminCommand_TeleportToMe : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TeleportToMe)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TeleportToMe, 0x0080);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_20BV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_NERV, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_UIMW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UAdminCommand_TeleportToVehicle : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TeleportToVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TeleportToVehicle, 0x0080);
		}

		// class UAdminCommand_TrackShotsFired : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TrackShotsFired)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TrackShotsFired, 0x0080);
		}

		// class UAdminCommand_TrapsDebug : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_TrapsDebug)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_TrapsDebug, 0x0080);
		}

		// class UAdminCommand_UnbanPlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_UnbanPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_UnbanPlayer, 0x0080);
		}

		// class UAdminCommand_UnmutePlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_UnmutePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_UnmutePlayer, 0x0080);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_GB8W, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_05ZI, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_RHOM, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// class UAdminCommand_UnsilencePlayer : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_UnsilencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_UnsilencePlayer, 0x0080);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_TU24, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_YF8T, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_0GT7, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_64YJ, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_5RJH, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_QE68, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_V8W4, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_QNLW, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_2GJD, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_ZKVR, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_UQUR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_RC9J, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_BHZB, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_Q7B2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_8G4A, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_C9UD, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_I2HT, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_GX3H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_K6G3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_7C9N, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_2FTQ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_0M7H, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_KIUO, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_YP4M, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_3ZJI, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_XHEH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_94UI, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_RSAM, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_S0PC, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_C01C, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_T6GV, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_XQ6S, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_YL0C, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_8DI3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_TQF8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_36R6, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_657T, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_J6VJ, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_8OG2, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_CNP6, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_CPJN, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_OJ9D, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_TNFB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_L284, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_907R, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_8TXB, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_F4OD, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_2T5M, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_CGH8, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_C5WT, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_ASHU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAdminCommand_VisualizeBulletTrajectories : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_VisualizeBulletTrajectories)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_VisualizeBulletTrajectories, 0x0080);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAdminCommand_VisualizePlayerAiming : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_VisualizePlayerAiming)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_VisualizePlayerAiming, 0x0080);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAdminCommand_VisualizeZombieLocation : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_VisualizeZombieLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_VisualizeZombieLocation, 0x0080);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAdminCommand_Vote : public UAdminCommand
		TEST_METHOD(Class__ConZ__AdminCommand_Vote)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommand_Vote, 0x0080);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAdminCommandArgumentCompletion : public UObject
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion, _canCompletionValuesBeCached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion, UnknownData_EOBJ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion, 0x0030);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_SL28, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_Q83L, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_EZOA, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAdminCommandArgumentCompletion_Constant : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Constant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Constant, _completionValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Constant, 0x0040);
		}

		// class UAdminCommandArgumentCompletion_Enum : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, _enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, _excludeNoneEnumerator, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, _excludeCountEnumerator, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, _excludeAutoGeneratedEnumerator, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, UnknownData_V3C4, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Enum, _additionalEnumeratorsToExclude, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Enum, 0x0090);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAdminCommandArgumentCompletion_Player : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Player)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Player, 0x0030);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_8XII, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_PTFW, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_MK3Z, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAdminCommandArgumentCompletion_PrimaryAsset : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_PrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_PrimaryAsset, _primaryAssetType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_PrimaryAsset, _primaryAssetsToExclude, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_PrimaryAsset, 0x0088);
		}

		// class UAdminCommandArgumentCompletion_Skill : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Skill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Skill, 0x0030);
		}

		// class UAdminCommandArgumentCompletion_Squad : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Squad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Squad, 0x0030);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_1FIG, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_4V87, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAdminCommandArgumentCompletion_Widget : public UAdminCommandArgumentCompletion
		TEST_METHOD(Class__ConZ__AdminCommandArgumentCompletion_Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandArgumentCompletion_Widget, _commandClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandArgumentCompletion_Widget, 0x0038);
		}

		// class UAdminCommandCompletionManager : public UObject
		TEST_METHOD(Class__ConZ__AdminCommandCompletionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandCompletionManager, _commands, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandCompletionManager, UnknownData_9INI, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandCompletionManager, 0x00D8);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAdminCommandRegistry : public UObject
		TEST_METHOD(Class__ConZ__AdminCommandRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandRegistry, _commands, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminCommandRegistry, UnknownData_ORGD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandRegistry, 0x0088);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAdminCommandsStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__AdminCommandsStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminCommandsStatics, 0x0028);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_BVAV, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_5Y53, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_L9Z5, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAdminLight : public UPointLightComponent
		TEST_METHOD(Class__ConZ__AdminLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminLight, UnknownData_UT99, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminLight, _intensityVersusTimeOfDay, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminLight, UnknownData_OA3D, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminLight, 0x0370);
		}

		// class AAIDetectionTimerHandler : public AActor
		TEST_METHOD(Class__ConZ__AIDetectionTimerHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDetectionTimerHandler, UnknownData_0AP4, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIDetectionTimerHandler, 0x0270);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_SG8V, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_6UZR, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_AF9Z, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_MWK4, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_SUIG, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_F527, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAIStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__AIStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIStatics, 0x0028);
		}

		// class UAlcoholismAddiction : public UAddiction
		TEST_METHOD(Class__ConZ__AlcoholismAddiction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlcoholismAddiction, UnknownData_XIYS, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlcoholismAddiction, 0x01C0);
		}

		// class UDisease : public USickness
		TEST_METHOD(Class__ConZ__Disease)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisease, 0x01B0);
		}

		// class UPoisoning : public UDisease
		TEST_METHOD(Class__ConZ__Poisoning)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoisoning, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_08WX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_B67U, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAmanitaMuscariaPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__AmanitaMuscariaPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmanitaMuscariaPoisoning, UnknownData_C98C, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmanitaMuscariaPoisoning, 0x01C0);
		}

		// class UAmanitaPantheriaPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__AmanitaPantheriaPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmanitaPantheriaPoisoning, UnknownData_XFOB, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmanitaPantheriaPoisoning, 0x01B8);
		}

		// class UAmanitaPhalloidesPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__AmanitaPhalloidesPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmanitaPhalloidesPoisoning, UnknownData_FLY1, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmanitaPhalloidesPoisoning, 0x01B8);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// class UAmanitaVirosaPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__AmanitaVirosaPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmanitaVirosaPoisoning, UnknownData_QDSD, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmanitaVirosaPoisoning, 0x01C0);
		}

		// class AAmbientSounds : public AActor
		TEST_METHOD(Class__ConZ__AmbientSounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, MinCameraLocationDeltaForUpdate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ForestMask, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ForestMaskSearchRadius, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ForestMaskTopLeftWorld, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ForestMaskBottomRightWorld, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CoastalForestAudioEvent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ContinentalForest1AudioEvent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ContinentalForest2AudioEvent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, ContinentalForest3AudioEvent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, UndergroundAudioEvent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CityMask, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CityMaskSearchRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CityMaskTopLeftWorld, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CityMaskBottomRightWorld, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, UnknownData_SI50, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, CityAudioEvent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, LargeVillageAudioEvent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, SmallVillageAudioEvent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, IndustrialAreaAudioEvent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSounds, UnknownData_BFGY, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSounds, 0x0320);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class AItem : public AActor
		TEST_METHOD(Class__ConZ__Item)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_FNTO, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, DebugTextChanged, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, PickedUpState, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, OnStaticMeshChanged, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, OnSkeletalMeshChanged, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_OBG0, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, AttachmentSocketMountType, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, AttachmentSockets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, HolsterAttachmentSocketMountType, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, AttachmentSocketsOffset, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Mesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InventoryIcon, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InventoryIconInHands, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, OutsideInventoryIcon, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Caption, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SizeX, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SizeY, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InventoryWhiteList, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InventoryBlackList, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, IgnoreMaxContainedWeight, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_JL31, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, MaxContainedWeight, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, MaxWaterWeightAsRatioOfWeight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, IsIgnoredBySpawners, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_7JKX, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SpawnTimeoutPerPlayer, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ItemLocation, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Rarity, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_8OZW, 0x0407);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ItemSpawnTypes, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ItemSpawnGroup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SpawnLocationOffset, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SpawnRotationOffset, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, SpawnRotationRandomization, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ShouldOverrideUsageWhenSpawnedBySpawners, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_DLM8, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InitialUsageWhenSpawnedBySpawners, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, RandomizeUsageWhenSpawnedBySpawners, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Uses, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_75A0, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Description, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, DamageOnUse, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, DamageOverTime, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, AutoDestructTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, IfExhausted, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, CraftingInteraction, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_JUH0, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ChoppingRecipeDataAsset, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, PickupCaption, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, EnableGlowOnBeginPlay, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, EnableAwarenessGlow, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, EnableHoverGlow, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_X9R5, 0x04AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ItemTags, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, OwnedItemTags, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, BurriedItemTags, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, NoiseLevel, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_9IL7, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, MotionNoise, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, InventoryHandlingSounds, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, DestroyedSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_5FCK, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ThrowingComponent, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, ShouldDestroyContainedItemsOnDestroyEvent, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_XTKY, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _itemUniqueIdOverride, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _itemUniqueId, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_ADR7, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _itemComponents, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _placementMeshOverride, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _attachParentObject, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _visibilityReplication, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_BMT1, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _waterWeightReplicated, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_NQX6, 0x05D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Fuel, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, Weight, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _health, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _maxHealth, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _defaultMaxHealth, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _healthReplicated, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_6T6F, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _weightUsed, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _isCrafted, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_XEP4, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _uncraftTime, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _isBusy, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _examined, 0x05FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_ASCJ, 0x05FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _tempSceneComponent, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _useHandCorrections, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _shouldBeMaintained, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_0UJ0, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _expirationTime, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _canBeDropped, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _canContainNonEmptyItems, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _blinkOnSpawn, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _isPartOfEvent, 0x0643);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _vicinityCheckDistance, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _stacks, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _stackableClasses, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _maxNumOfStacks, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_5BG0, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _stackExhaustedSuccessorItem, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _parentContainer, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _parentInventoryNode, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _canEverBeVirtualized, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _hasHighLoadPriorityInVirtualization, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_ZZ9N, 0x069A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _virtualizationDistance, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _canPlaceItemsOn, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _shouldShowStatusWidget, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _canBeNamed, 0x06A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_SISU, 0x06A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _shouldEverBeVisibleInVicinity, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_NKWI, 0x06A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _itemStatusWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _editTextWidget, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _playerGivenName, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_I4FN, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _preferredDamagePerUpdate, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_UK8Q, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _craftingParts, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_D36L, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _itemLoadingWeightOverride, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _containedDamageStartPercentage, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _throwingOffsetLocation, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _quickAccessIndex, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _twoHanded, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_TTXP, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _resultHealthMultiplierWhenCraftingIngredient, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_V4Q0, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _isSubjectToAllowMinesConfig, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, UnknownData_5438, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem, _inventoryContainer2D, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem, 0x0758);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_TO8R, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_OKRS, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_URBK, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_F0LV, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0460);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_8FZB, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_KTG5, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_43P9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_FDFN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_G9NP, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_OO5O, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_RTOP, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioBus : public UObject
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_ETAT, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_2NKC, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_B330, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_0KO2, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_D9V3, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_UM80, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class AAmmunitionItem : public AItem
		TEST_METHOD(Class__ConZ__AmmunitionItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, AmmunitionTag, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, AmmunitionTypeString, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, projectileClass, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, CartridgeMesh, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, CasingMesh, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, WeaponSpreadMultiplier, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, MaxAmmoCount, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, _ammoCount, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, _ammoCountOwnerHelper, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionItem, UnknownData_CKPR, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmmunitionItem, 0x07A0);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_4HXQ, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_TESY, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// class AAmmunitionArrow : public AAmmunitionItem
		TEST_METHOD(Class__ConZ__AmmunitionArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, DestroyOnHit, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, UnknownData_PVWO, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, BrokenArrowClass, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, _muzzleVelocityMultiplier, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, _stiffnessFactor, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, _flightRotationCorrectionSpeed, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionArrow, _elasticityFactorSpread, 0x07BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmmunitionArrow, 0x07C0);
		}

		// class UAmmunitionBoneListAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__AmmunitionBoneListAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmunitionBoneListAssetData, CartridgeBoneNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmmunitionBoneListAssetData, 0x0038);
		}

		// class AAmmunitionBoxItem : public AItem
		TEST_METHOD(Class__ConZ__AmmunitionBoxItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionBoxItem, AmmunitionItemClass, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionBoxItem, ItemClassToSpawnWhenUnpacked, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionBoxItem, MaxAmmoCount, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmunitionBoxItem, _ammoCount, 0x076C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmmunitionBoxItem, 0x0770);
		}

		// class AConZCharacter : public ACharacter
		TEST_METHOD(Class__ConZ__ConZCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_D0WO, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_8JU2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, CorpseClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, ChoppingRecipeDataAsset, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, IterativeChopping, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_QSWM, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, ItemRepresentation, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, HeadBoneName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, BodyPartByBoneName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, HeadHeight, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, TorsoHeight, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, ShouldAutoUpdateEnvironmentDescription, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_DT2B, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, EnvironmentDescriptionAutoUpdateInterval, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, EnteredIndoorEnvironmentAudioEvent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, EnteredOutdoorEnvironmentAudioEvent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, EnteredUndergroundAudioEvent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, LeftUndergroundAudioEvent, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_D622, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, SoundComponent, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_1FUM, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _gender, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_74FU, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _physicsDominanceGroup, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_931W, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _activeHitTimeToLive, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _hitDamageVsVehicleSpeedInKph, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _knockoutChanceNormalizedVsVehicleSpeedInKph, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _effectsOnVehicleHit, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_SHQL, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, _aiTeam, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCharacter, UnknownData_1TG2, 0x06C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZCharacter, 0x06C8);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_RMI4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_OQH0, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_V2N3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_IR4Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class AAnimal2 : public AConZCharacter
		TEST_METHOD(Class__ConZ__Animal2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, Species, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, ActivityCycle, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_C5QA, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, maxHealth, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, HitReactComponent, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, HitReactType, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, EyesViewPointSocketName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TrackingMarker, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, BloodTrailMarker, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TrackingMarkerFrequency, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TrackingMarkerDistance, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TrackingMarkerRadius, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TrackingMarkerDuration, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, BleedingSpeed, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, LightWoundDamageAmount, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, MeleeBleedingThreshold, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, StuckCheckDuration, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, StuckRadius, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnstuckMode, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_AL23, 0x0735);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, OnDamageTaken, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, HeadBoneRotationSendToServerInterval, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, SightRange, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, TiltMeshOnSlopes, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, AdjustMeshHeightOnSlopes, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_X3PZ, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, MeshPositionLerpSpeed, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, BleedInterval, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, ShouldGoToRagdolIfTakenDamage, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_JBLC, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, RagdollDuration, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _health, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _woundDamage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_LWE3, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _packSizeMin, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _packSizeMax, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_LB9Q, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _animalStance, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_8M4G, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _shouldUpdateMovementSpeedRTPCValue, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_OY1L, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _doNotCrumble, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_WO4Q, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _meleeDamageMultiplier, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _meleeDamageMultiplierPerBodyPart, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _throwingDamageMultiplier, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _throwingDamageMultiplierPerBodyPart, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _projectileDamageMultiplier, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _projectileDamageMultiplierPerBodyPart, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _radialDamageMultiplier, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_DF19, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, _delayBetweenTakeDamageSounds, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimal2, UnknownData_CU8F, 0x08C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimal2, 0x08CC);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_0F7H, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0460);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_UXEX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_L7IO, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_ZSUU, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_HQMP, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_3QBT, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_HHF6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UConZCharacterMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ConZ__ConZCharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZCharacterMovementComponent, _navWalkingCollisionResponseToWorldStatic, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZCharacterMovementComponent, _navWalkingCollisionResponseToWorldDynamic, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZCharacterMovementComponent, UnknownData_68C0, 0x0B02);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZCharacterMovementComponent, 0x0B08);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UAnimal2MovementComponent : public UConZCharacterMovementComponent
		TEST_METHOD(Class__ConZ__Animal2MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2MovementComponent, UnknownData_X75A, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2MovementComponent, UnknownData_7EUR, 0x0B10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimal2MovementComponent, 0x0B20);
		}

		// class UCharacterSoundComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__CharacterSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, AttachedSoundsAttachPointName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, ImpactSounds, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, PainSounds, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, MinDurationBetweenPainSounds, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, MaxDurationBetweenPainSounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSoundComponent, UnknownData_SM0F, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSoundComponent, 0x00D8);
		}

		// class UAnimal2SoundComponent : public UCharacterSoundComponent
		TEST_METHOD(Class__ConZ__Animal2SoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, IdleAudioEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, AngryAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, AttackAudioEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, ScaredAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, AlertedAudioEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, TakeDamageAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, KillAudioEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, AnimalFootstep, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, FootstepSoundOverlap, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, FixedFootstepVolume, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, SpeedFootstepVolume, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, MinSilenceTimeout, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, MaxSilenceTimeout, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2SoundComponent, UnknownData_Q24Q, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimal2SoundComponent, 0x0150);
		}

		// class UAnimal2AnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__Animal2AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, InverseLocomotionBias, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, MaximumLeaningAngle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, IdleStanceIndex, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, Stance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, UnknownData_1TOQ, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, SlopeRootTiltRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, ABPSpeed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, ABPTurn, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, MoveVelocity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimal2AnimInstance, UnknownData_LBRU, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimal2AnimInstance, 0x02F0);
		}

		// class AComplexAnimalAIController : public AAIController
		TEST_METHOD(Class__ConZ__ComplexAnimalAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, Agressivness, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, UnknownData_IRF7, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, SightIntimidateRadius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, SightAttackRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, FoeChargeVelocity, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, ShouldForceChargeRotation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, UnknownData_XZOA, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AnimalVelocityThatMakesThisAnimalFlee, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, FleeDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, FleeTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, TrotTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, TimeToAttackWhenAggro, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, TimeToQuitObserve, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MinReactionTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MaxReactionTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MovingUpdateInterval, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AttackingUpdateInetrval, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, PathSegmentLength_OBSOLETE, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MinPaceDuration_OBSOLETE, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MaxNumWalks_OBSOLETE, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MaxNumTrots_OBSOLETE, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, PathDirectionCounterResetTime_OBOLETE, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MoveSegmentLength, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, BackOffDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AttackTrackingDistance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, PredictionFactor, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, BackAndForthStuckCheck, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AttackAttempts, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, UnknownData_ID6B, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, ActionChangedDelay, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, CloseAttackRepeatDelay, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AttackChainDelay, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, BlockedPathRetryAttempts, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, DirectionLockTime, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MinWalkTimeDuringRoaming, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MaxWalkTimeDuringRoaming, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MinStandTimeDuringRoaming, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, MaxStandTimeDuringRoaming, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, IntimidateTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, IntimidateAnimationEndTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AlertActionTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AlertStartupTime, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AlertAllowedAgainTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, DoNotDespawnTime, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, NormalAISenseSight, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, NormalAISenseHearing, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, RelaxedAISenseHearing, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, AlertedAISenseHearing, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, SleepAISenseSight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, _animal, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, UnknownData_FCTP, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, _healthPercentageToFlee, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, _damageMagnitudeHealthPercentageToFlee, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimalAIController, UnknownData_H836, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AComplexAnimalAIController, 0x04D0);
		}

		// class AAnimalContinuousChargeAttackAIController : public AComplexAnimalAIController
		TEST_METHOD(Class__ConZ__AnimalContinuousChargeAttackAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalContinuousChargeAttackAIController, LockAttackDirectionDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalContinuousChargeAttackAIController, ContinueAttackDistance, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalContinuousChargeAttackAIController, UnknownData_6AVK, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimalContinuousChargeAttackAIController, 0x04E8);
		}

		// class UBaseItemTag : public UDataAsset
		TEST_METHOD(Class__ConZ__BaseItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseItemTag, 0x0030);
		}

		// class UAnimalHandlingItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__AnimalHandlingItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimalHandlingItemTag, 0x0030);
		}

		// class USkill : public UDataAsset
		TEST_METHOD(Class__ConZ__Skill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Caption, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ReplicationID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_XI5D, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ComboBonus, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, NoSkillBonus, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, BasicBonus, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, MediumBonus, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AdvancedBonus, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, DisplayActionMessages, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, IsAvailableInCharacterCreation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_2I64, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, _skillIcon, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_PH51, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, _skillFamePointsMultiplier, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill, 0x00A0);
		}

		// class UIntelligenceSkill : public USkill
		TEST_METHOD(Class__ConZ__IntelligenceSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntelligenceSkill, 0x00A0);
		}

		// class UAnimalHandlingSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__AnimalHandlingSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimalHandlingSkill, UnknownData_W4LS, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimalHandlingSkill, 0x00B0);
		}

		// class UAnimNotify_CharacterActionEnd : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_CharacterActionEnd)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_CharacterActionEnd, 0x0038);
		}

		// class UAnimNotify_CharacterActionMarker : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_CharacterActionMarker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_CharacterActionMarker, 0x0038);
		}

		// class UAnimNotify_CharacterActionNotify : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_CharacterActionNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CharacterActionNotify, CharacterActionNotifyType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CharacterActionNotify, UnknownData_TV6B, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_CharacterActionNotify, 0x0040);
		}

		// class UAnimNotify_ClimbingFinished : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_ClimbingFinished)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ClimbingFinished, 0x0038);
		}

		// class UAnimNotify_MakeNoise : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_MakeNoise, NoiseLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_MakeNoise, UnknownData_W221, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_MakeNoise, 0x0040);
		}

		// class UAnimNotify_PlaySoundBySurface : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_PlaySoundBySurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySoundBySurface, AudioEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySoundBySurface, TraceChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySoundBySurface, UnknownData_8BUD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySoundBySurface, 0x0048);
		}

		// class UAnimNotify_PlaySoundOnOwner : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_PlaySoundOnOwner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySoundOnOwner, AudioEvent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySoundOnOwner, 0x0040);
		}

		// class UAnimNotify_WaterPaddle : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WaterPaddle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, ParticleSystem, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, AudioEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, VolumeMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, PitchMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, AttachPointName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, DebugMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WaterPaddle, UnknownData_UH93, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WaterPaddle, 0x0060);
		}

		// class UAnimNotify_WeaponActionNotify : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WeaponActionNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WeaponActionNotify, WeaponActionNotifyType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WeaponActionNotify, UnknownData_CR77, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WeaponActionNotify, 0x0040);
		}

		// class UAnimNotify_WeaponChamberBullet : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WeaponChamberBullet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WeaponChamberBullet, 0x0038);
		}

		// class UAnimNotify_WeaponChamberBulletInternal : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WeaponChamberBulletInternal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WeaponChamberBulletInternal, 0x0038);
		}

		// class UAnimNotify_WeaponEjectCasing : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WeaponEjectCasing)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WeaponEjectCasing, 0x0038);
		}

		// class UAnimNotify_WeaponUpdateAmmunitionMeshes : public UAnimNotify
		TEST_METHOD(Class__ConZ__AnimNotify_WeaponUpdateAmmunitionMeshes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_WeaponUpdateAmmunitionMeshes, ammoIndices, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_WeaponUpdateAmmunitionMeshes, 0x0048);
		}

		// class UAnimNotifyState_ChamberWeapon : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_ChamberWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_ChamberWeapon, 0x0030);
		}

		// class UAnimNotifyState_DrainStamina : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_DrainStamina)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, DrainType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, DrainCategory, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, UnknownData_9GSK, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, AmountToDrain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, RecoveryDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, RecoveryTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_DrainStamina, UnknownData_28XA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DrainStamina, 0x0048);
		}

		// class UAnimNotifyState_Fade : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_Fade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Fade, _fadeOutRatio, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Fade, _fadeInRatio, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Fade, _forAction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Fade, UnknownData_C7X2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Fade, 0x0050);
		}

		// class UAnimNotifyState_Melee : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_Melee)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _attackCapsuleAttachment, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _damageMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _damageMagnitudeType, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, UnknownData_1C6B, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _knockoutChance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _knockoutAttackType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _stopOnHit, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, UnknownData_O2FS, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _hitDetectionMarkersRootBoneParentName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _hitDetectionMarkers, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, _hitDetectionSamplingRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Melee, UnknownData_4NYS, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Melee, 0x0078);
		}

		// class UAnimNotifyState_NoScopingAllowed : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_NoScopingAllowed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_NoScopingAllowed, UnknownData_RYBW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_NoScopingAllowed, 0x0038);
		}

		// class UAnimNotifyState_PaniniOverride : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_PaniniOverride)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_PaniniOverride, 0x0030);
		}

		// class UAnimNotifyState_PhysicalAnimation : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_PhysicalAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, GotoRagdollOnEnd, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, UnknownData_FUQ5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, BodyProfileName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, ConstraintProfileName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, BoneName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, StrengthBlendCurveName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, PhysicsBlendCurveName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PhysicalAnimation, UnknownData_YD4S, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_PhysicalAnimation, 0x0060);
		}

		// class UAnimNotifyState_PlaySoundOnOwnerRanged : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_PlaySoundOnOwnerRanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PlaySoundOnOwnerRanged, BeginAudioEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PlaySoundOnOwnerRanged, EndAudioEvent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_PlaySoundOnOwnerRanged, 0x0040);
		}

		// class UAnimNotifyState_WeaponHideMagazine : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_WeaponHideMagazine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_WeaponHideMagazine, UnknownData_A17M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_WeaponHideMagazine, 0x0040);
		}

		// class UAnimNotifyState_WeaponShowAmmunitionMeshes : public UAnimNotifyState
		TEST_METHOD(Class__ConZ__AnimNotifyState_WeaponShowAmmunitionMeshes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_WeaponShowAmmunitionMeshes, ammoIndices, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_WeaponShowAmmunitionMeshes, 0x0040);
		}

		// class UAnimStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__AnimStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStatics, 0x0028);
		}

		// class UStrengthSkill : public USkill
		TEST_METHOD(Class__ConZ__StrengthSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrengthSkill, 0x00A0);
		}

		// class URangedWeaponsSkill : public UStrengthSkill
		TEST_METHOD(Class__ConZ__RangedWeaponsSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, UnknownData_AJP1, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionBadRound, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionStovePipe, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionRoundNotLoaded, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionDoubleFeed, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionStuckBullet, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, _clearMalfunctionClipPartiallyEjected, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, NoSkillParameters, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, BasicSkillParameters, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, MediumSkillParameters, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, AdvancedSkillParameters, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, AboveAdvancedSkillParameters, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedWeaponsSkill, UnknownData_ELCW, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangedWeaponsSkill, 0x00E0);
		}

		// class UArcherySkill : public URangedWeaponsSkill
		TEST_METHOD(Class__ConZ__ArcherySkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawWeightNoSkillValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawWeightBasicSkillValue, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawWeightMediumSkillValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawWeightAdvancedSkillValue, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawWeightAboveAvancedSkillValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _holdTimeInFullDrawNoSkillValue, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _holdTimeInFullDrawBasicSkillValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _holdTimeInFullDrawMediumSkillValue, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _holdTimeInFullDrawAdvancedSkillValue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _holdTimeInFullDrawAboveAvancedSkillValue, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _armsShakeMultiplierNoSkillValue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _armsShakeMultiplierBasicSkillValue, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _armsShakeMultiplierMediumSkillValue, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _armsShakeMultiplierAdvancedSkillValue, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _armsShakeMultiplierAboveAvancedSkillValue, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _tuneBowDurationNoSkillValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _tuneBowDurationBasicSkillValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _tuneBowDurationMediumSkillValue, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _tuneBowDurationAdvancedSkillValue, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _tuneBowDurationAboveAvancedSkillValue, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawCenterDotExtraTimeLimitNoSkillValue, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawCenterDotExtraTimeLimitBasicSkillValue, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawCenterDotExtraTimeLimitMediumSkillValue, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawCenterDotExtraTimeLimitAdvancedSkillValue, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, _drawCenterDotExtraTimeLimitAboveAvancedSkillValue, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArcherySkill, UnknownData_OTX3, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArcherySkill, 0x0148);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UArrayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ArrayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayStatics, 0x0028);
		}

		// class USkillAction : public UObject
		TEST_METHOD(Class__ConZ__SkillAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAction, UnknownData_BBE4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAction, 0x00A0);
		}

		// class UMedicalAction : public USkillAction
		TEST_METHOD(Class__ConZ__MedicalAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalAction, UnknownData_BT1V, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedicalAction, 0x00A8);
		}

		// class UArtificalPerspirationAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__ArtificalPerspirationAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArtificalPerspirationAction, 0x00A8);
		}

		// class UAttachmentSocketMountType : public UObject
		TEST_METHOD(Class__ConZ__AttachmentSocketMountType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttachmentSocketMountType, 0x0028);
		}

		// class UAttachmentSocketMountTypePrisonerHand : public UAttachmentSocketMountType
		TEST_METHOD(Class__ConZ__AttachmentSocketMountTypePrisonerHand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttachmentSocketMountTypePrisonerHand, 0x0028);
		}

		// class UAttributeMapInterface : public UInterface
		TEST_METHOD(Class__ConZ__AttributeMapInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributeMapInterface, 0x0028);
		}

		// class UAttributesGraph : public UWidget
		TEST_METHOD(Class__ConZ__AttributesGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, Attribute, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, UnknownData_4AP9, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, ColorAndOpacity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, ColorAndOpacityDelegate, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, Thickness, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, HoverBrush, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, HoverBrushDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, Font, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, UnknownData_O41C, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesGraph, _prisonerLifeComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributesGraph, 0x0238);
		}

		// class UAudioStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__AudioStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioStatics, 0x0028);
		}

		// class UAwarenessSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__AwarenessSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, UnknownData_1AMG, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, StaminaConsumption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, UnknownData_EZP4, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, EnterFocusModeAudioEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, LeaveFocusModeAudioEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _updateTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _serverUpdateTime, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicWatchingDetectionChance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumWatchingDetectionChance, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedWatchingDetectionChance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedWatchingDetectionChance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillItemDetectionTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicItemDetectionTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumItemDetectionTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedItemDetectionTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedItemDetectionTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillItemDetectionRadius, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicItemDetectionRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumItemDetectionRadius, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedItemDetectionRadius, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedItemDetectionRadius, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillItemDetectionChance, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicItemDetectionChance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumItemDetectionChance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedItemDetectionChance, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedItemDetectionChance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillItemHighlightByDayRadius, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicItemHighlightByDayRadius, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumItemHighlightByDayRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedItemHighlightByDayRadius, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedItemHighlightByDayRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillItemHighlightByNightRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicItemHighlightByNightRadius, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumItemHighlightByNightRadius, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedItemHighlightByNightRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedItemHighlightByNightRadius, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillWatchingDetectionRadius, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicWatchingDetectionRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumWatchingDetectionRadius, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedWatchingDetectionRadius, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedWatchingDetectionRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _characterDetectionAngle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _characterDetectionTime, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _characterDetectionRange, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _characterDetectionPeriodicRangeIncrement, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillHiddenCharacterDetectionRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicHiddenCharacterDetectionRange, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumHiddenCharacterDetectionRange, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedHiddenCharacterDetectionRange, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedHiddenCharacterDetectionRange, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillHotSpotHiddenCharacterDetectionRange, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicHotSpotHiddenCharacterDetectionRange, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumHotSpotHiddenCharacterDetectionRange, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedHotSpotHiddenCharacterDetectionRange, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedHotSpotHiddenCharacterDetectionRange, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillSoundDetectionRange, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicSoundDetectionRange, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumSoundDetectionRange, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedSoundDetectionRange, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedSoundDetectionRange, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _notMovingFocusRangeMultiplier, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _slowMovingFocusRangeMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumMovingFocusRangeMultiplier, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _fastMovingFocusRangeMultiplier, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillFocusModeActivationTime, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicFocusModeActivationTime, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumFocusModeActivationTime, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedFocusModeActivationTime, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedFocusModeActivationTime, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillTrackDetectionRange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicTrackDetectionRange, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumTrackDetectionRange, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedTrackDetectionRange, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedTrackDetectionRange, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _trackDetectionNightTimeMultiplier, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillTrapDetectionRange, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicTrapDetectionRange, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumTrapDetectionRange, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedTrapDetectionRange, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedTrapDetectionRange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillFlashFadeOutDurationMultiplier, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicFlashFadeOutDurationMultiplier, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumFlashFadeOutDurationMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedFlashFadeOutDurationMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedFlashFadeOutDurationMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillMoundDetectionDistanceStart, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicMoundDetectionDistanceStart, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumMoundDetectionDistanceStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advandedMoundDetectionDistanceStart, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedMoundDetectionDistanceStart, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillMoundDetectionDistanceEnd, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicMoundDetectionDistanceEnd, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumMoundDetectionDistanceEnd, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advandedMoundDetectionDistanceEnd, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedMoundDetectionDistanceEnd, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _noSkillContainerItemSpawnProbabilityModifier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _basicContainerItemSpawnProbabilityModifier, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _mediumContainerItemSpawnProbabilityModifier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _advancedContainerItemSpawnProbabilityModifier, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, _aboveAdvancedContainerItemSpawnProbabilityModifier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessSkill, UnknownData_32JO, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwarenessSkill, 0x0348);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBacillusCereusPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__BacillusCereusPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBacillusCereusPoisoning, UnknownData_CD57, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBacillusCereusPoisoning, 0x01B8);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBaneberryPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__BaneberryPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaneberryPoisoning, UnknownData_E5KH, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaneberryPoisoning, 0x01C0);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBaseBuildingComponent : public UStaticMeshComponent
		TEST_METHOD(Class__ConZ__BaseBuildingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _name, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _baseElementType, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_98XN, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _isClimbable, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _isBlockingItemPlacement, 0x04E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_PUYD, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _staticMeshVariations, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _choppingRecipeAsset, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _healthPoints, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _canBeDamaged, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_52GJ, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _hoursToDecay, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _isUsedForRespawn, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_0VRG, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _radialDamageMultiplier, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_1VYV, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _weatherMaskMesh, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _maxInstancesPerFlagArea, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_C5XQ, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _upgradeRecipe, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _cascadeDestroySnappedElementsOnUpgrade, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _isTileable, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _mustBePlacedOnFoundation, 0x0532);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _canEverBePlacedOnFoundation, 0x0533);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _canBePlacedOnOtherBaseElements, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _canBePlacedWithoutSnapping, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _shouldIgnoreSelfWhilePlacing, 0x0536);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _canBeGroundedOnOtherElements, 0x0537);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _maxHeightLevel, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_IMUJ, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _maxHeightDifference, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _addRandomRotation, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _mustGroundAllPoints, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _traceComplexWhilePlacing, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _mustBePlacedUpright, 0x0543);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _placementHeightType, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _useSimpleCollisionForOverlaps, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_GBIY, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _maxRotationWhilePlacing, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_6OV6, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _elementSnapMarkers, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _useEncapsulationTestWhenSnapping, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_YK8T, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _sizeVariations, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_CLUO, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _sizeVariationsSpacing, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _repairTime, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_KBLO, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _repairableParams, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _experienceAwardForBuilding, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_LBO2, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _destructionParticles, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _destructionParticlesSpawnTransforms, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _destructionSound, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _isDoor, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_M9ZY, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _doorClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _hasLadder, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_K11W, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _ladderMarkers, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _damageZones, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _shouldDestroyElementsOnTopWhenDestroyed, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_YAKE, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _destructionTime, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _shouldRemoveIntersectingElementsOnDestroy, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_M3BG, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _destructionZones, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _useAsReplenishableResource, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_WPYU, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, _replenishableResourceDescription, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingComponent, UnknownData_0WL3, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBuildingComponent, 0x06D0);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_R8NA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoundsCopyComponent : public UActorComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_Z9XT, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_905T, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_9YKF, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AffectedBySkyLight, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_CCQL, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_OOCI, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_C7ZN, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// class UBaseBuildingStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__BaseBuildingStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBuildingStatics, 0x0028);
		}

		// class UBaseInteractionComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__BaseInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseInteractionComponent, UnknownData_3EJ1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseInteractionComponent, UnknownData_L4BK, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseInteractionComponent, 0x0210);
		}

		// class UBaseItemContainerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__BaseItemContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, ObjectAddedToContainer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, UnknownData_BSAN, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, Columns, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, Rows, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, UnknownData_JYTQ, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, GridPanel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, HighlightBorder, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemContainerWidget, UnknownData_PBRV, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseItemContainerWidget, 0x02B0);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_FDJP, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_PM4Q, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_EF5D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_2A69, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_6FAY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_60CJ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UItemComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__ItemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemComponent, 0x00B0);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0450);
		}

		// class UBasicGameResourceContainerComponent : public UItemComponent
		TEST_METHOD(Class__ConZ__BasicGameResourceContainerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, UnknownData_EWZB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceAmount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _repResourceAmount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, UnknownData_C8AT, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _acceptedResourceType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _currentResourceType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceFillingInSocketTypes, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceFillingOutSocketTypes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _requiredItemTagsForFilling, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _initialResourceAmount, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _maxResourceAmount, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceUsagePerHour, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _shouldUpdateOwningItemUses, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _canSpill, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _canCheck, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, UnknownData_IFXF, 0x0147);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _interactionText, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceFillingMontage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceStartFillingAudioEvent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceStopFillingAudioEvent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceFillingDurationPerAmountFilled, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _resourceFillingExperiencePerAmount, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _targetStanceWhenFilling, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _shouldTakeInHandsWhenFilling, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, UnknownData_87XH, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _spillStartAudioEvent, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, _spillStopAudioEvent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicGameResourceContainerComponent, UnknownData_724H, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicGameResourceContainerComponent, 0x01A0);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_BYB3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_4GGI, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_VKH4, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_1WWO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_8582, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_H614, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_LTFP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_PSTZ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_9VNG, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class ABasicLadder : public AActor
		TEST_METHOD(Class__ConZ__BasicLadder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicLadder, _mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicLadder, _ladderMarkers, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicLadder, UnknownData_2O32, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasicLadder, 0x0248);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_BN12, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UConZNotification : public UObject
		TEST_METHOD(Class__ConZ__ConZNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZNotification, UnknownData_PHUC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZNotification, 0x0030);
		}

		// class UMatineeCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_HW93, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_3OJY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, Anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_SZ1K, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_PEL3, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// class UBasicNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__BasicNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicNotification, 0x0030);
		}

		// class UNotificationDescription : public UObject
		TEST_METHOD(Class__ConZ__NotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationDescription, Target, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationDescription, UnknownData_JQFE, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationDescription, TargetUserProfileId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationDescription, ShouldSendIfClientOffline, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationDescription, UnknownData_WI27, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotificationDescription, 0x0040);
		}

		// class UBasicNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__BasicNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicNotificationDescription, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicNotificationDescription, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicNotificationDescription, ping, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicNotificationDescription, UnknownData_H9JY, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicNotificationDescription, 0x0058);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UBasicTextWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__BasicTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicTextWidget, MaxTextRows, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicTextWidget, MaxCharactersPerTextRow, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicTextWidget, 0x0268);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_NRG5, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_817H, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_DFCA, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// class ABinocularsItem : public AItem
		TEST_METHOD(Class__ConZ__BinocularsItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, UnknownData_PLL9, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _zoomLevelSettings, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _scopingOverlayTexture, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageStandingFP, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageCrouchingFP, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageProneFP, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageStandingTP, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageCrouchingTP, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _montageProneTP, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _scopingStartDelay, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, _scopingStopDelay, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABinocularsItem, UnknownData_BZLO, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABinocularsItem, 0x07B8);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_ZNEC, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_5EYR, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_Q15A, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UBioChemSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__BioChemSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBioChemSkill, 0x00A0);
		}

		// class ABird2 : public AAnimal2
		TEST_METHOD(Class__ConZ__Bird2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, MinFlightAltitude, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, MaxFlightAltitude, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _isLanding, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _isTakingOff, 0x08D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _isPerched, 0x08D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _isFlying, 0x08D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _states, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, _repStates, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2, UnknownData_GXB2, 0x08E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird2, 0x0900);
		}

		// class ABird2AIController : public AAIController
		TEST_METHOD(Class__ConZ__Bird2AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, FlyDurationMin, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, FlyDurationMax, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, RemainOnGroundDurationMin, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, RemainOnGroundDurationMax, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, turnSpeed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, FlightSegmentDistance, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, LandingDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird2AIController, UnknownData_849V, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird2AIController, 0x0388);
		}

		// class UBird2AnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__Bird2AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBird2AnimInstance, UnknownData_K3L8, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBird2AnimInstance, IsFlying, 0x02BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBird2AnimInstance, IsStaringPerched, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBird2AnimInstance, UnknownData_WUAD, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBird2AnimInstance, SlopeRootTiltRotation, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBird2AnimInstance, 0x02D0);
		}

		// class ABirdTargetPoint : public AActor
		TEST_METHOD(Class__ConZ__BirdTargetPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABirdTargetPoint, IsOccupied, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABirdTargetPoint, UnknownData_BJYD, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABirdTargetPoint, 0x0228);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_GV02, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// class UBloodOxygenationWidget : public UWidget
		TEST_METHOD(Class__ConZ__BloodOxygenationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, Thickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, Periods, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, UnknownData_MEVK, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOxygenationWidget, _prisonerLifeComponent, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOxygenationWidget, 0x01E0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_3T27, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// class UBloodPressureWidget : public UWidget
		TEST_METHOD(Class__ConZ__BloodPressureWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, Thickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, Periods, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, UnknownData_BJNV, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPressureWidget, _prisonerLifeComponent, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodPressureWidget, 0x01E0);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_ET03, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_1BHX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class AObjective : public AActor
		TEST_METHOD(Class__ConZ__Objective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, UnknownData_GQ93, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _objectivesIntroDialogues, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _objectivesOutroSuccessDialogues, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _objectivesOutroFailDialogues, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _objectiveState, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, UnknownData_1GAP, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _parentMission, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, UnknownData_WSY7, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _description, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, UnknownData_0X2M, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _canInterruptDialogue, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, _playUISounds, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObjective, UnknownData_05QO, 0x031B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AObjective, 0x0320);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_B1YS, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_DEWZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_2CHN, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UActorComponentInstanceDataTransientOuter : public UObject
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_6G3I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class ARequirementObjective : public AObjective
		TEST_METHOD(Class__ConZ__RequirementObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARequirementObjective, UnknownData_IZD1, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARequirementObjective, 0x0330);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_W4IF, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class ABlueprintableItemObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__BlueprintableItemObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlueprintableItemObjective, _actionType, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlueprintableItemObjective, UnknownData_KSFM, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlueprintableItemObjective, _targetBlueprintActor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlueprintableItemObjective, _itemsToFill, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlueprintableItemObjective, UnknownData_HH15, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlueprintableItemObjective, 0x0368);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_UK08, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_A9BH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_4QZ6, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_V77V, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// class UBodyTemperatureWidget : public UWidget
		TEST_METHOD(Class__ConZ__BodyTemperatureWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, Thickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, Periods, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, UnknownData_LH2S, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodyTemperatureWidget, _prisonerLifeComponent, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodyTemperatureWidget, 0x01E0);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9KV5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2U3R, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6FLG, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_AJVH, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_R0C5, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_85RE, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZLW4, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_W52Z, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_J1LD, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_OF50, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_US8K, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SDNS, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9YAX, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2Q3V, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_JBUV, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SQTF, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Q57L, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8R0L, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_4MLP, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7GWV, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7E58, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class AMinigame : public AActor
		TEST_METHOD(Class__ConZ__Minigame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, UnknownData_M3HU, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _testingMode, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, UnknownData_WDQ9, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _rootComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _captureCam, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _captureMaskCam, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, UnknownData_AEGU, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _minigameWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _minigameWidgetClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, UnknownData_8EPF, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _introDuration, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _outroDurationOnFail, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _outroDurationOnSuccess, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _canBeCanceled, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _simulatedMontage, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, UnknownData_78EE, 0x02BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _simulatedAudioStart, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _simulatedAudioStop, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMinigame, _takeInHandsItemTagClasses, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMinigame, 0x02E0);
		}

		// class ABombDefusalMinigame : public AMinigame
		TEST_METHOD(Class__ConZ__BombDefusalMinigame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_N8K1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _timeBomb, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _splineConnectorMesh, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_YMSV, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireButtonsSize, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_S8RO, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _bombDefusalTimerStartSound, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _bombDefusalTimerStopSound, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSound, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _bombDefusedSound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _defusalTool, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _toolMovementSensitivity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _minDefusingToolOffsetFromCenter, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _maxDefusingToolOffsetFromCenter, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_02WA, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _greenLedLight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _redLedLight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _yellowLedLight, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _ledLights, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _ledLightMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_XO3K, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresEndPositions, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wires, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_20BB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _splines, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_N801, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _numberOfWires, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _numberOfWirePoints, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresShuffleIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _minWiresComplexity, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresForwardAxis, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_DFHF, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresStartSmoothness, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresEndSmoothness, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresMiddleSmoothness, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wiresSharpCornerSmoothness, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _maxSegmentSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wirePointsSpreadPositive, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wirePointsSpreadNegative, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireHeight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireVerticalSpacing, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wirePointsOffset, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireEndOffset, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _additionalWireEndPointOffset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, UnknownData_FUTN, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment0, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment2, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment3, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment4, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _cutWireSegment5, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment0, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment3, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment4, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _uncutWireSegment5, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox1, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox3, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox4, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox5, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombDefusalMinigame, _wireBox6, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABombDefusalMinigame, 0x04E0);
		}

		// class UMinigameConfiguration : public UObject
		TEST_METHOD(Class__ConZ__MinigameConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMinigameConfiguration, MinigameClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMinigameConfiguration, UnknownData_5WPR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMinigameConfiguration, 0x0058);
		}

		// class UBombDefusalMinigameConfiguration : public UMinigameConfiguration
		TEST_METHOD(Class__ConZ__BombDefusalMinigameConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombDefusalMinigameConfiguration, UnknownData_UD71, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBombDefusalMinigameConfiguration, 0x0068);
		}

		// class UMinigameWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__MinigameWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMinigameWidget, UnknownData_H9T6, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMinigameWidget, 0x0290);
		}

		// class UBombDefusalWidget : public UMinigameWidget
		TEST_METHOD(Class__ConZ__BombDefusalWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombDefusalWidget, _remainingTimeMinutes1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombDefusalWidget, _remainingTimeMinutes2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombDefusalWidget, _remainingTimeSeconds1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombDefusalWidget, _remainingTimeSeconds2, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBombDefusalWidget, 0x02B0);
		}

		// class UBondageComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__ConZ__BondageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageComponent, _bondageItem, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageComponent, _boundBodyPart, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageComponent, UnknownData_4DS7, 0x0ED9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageComponent, _tightness, 0x0EDC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBondageComponent, 0x0EE0);
		}

		// class UBondageItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__BondageItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, BondageMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, BaseStruggleDuration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, StruggleStrengthModifier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, StruggleDexterityModifier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, GroundMovementSpeedMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, WaterMovementSpeedMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, UnknownData_1PEL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsBoundIdleFPAnimation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsBoundIdleTPAnimation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsBoundMontage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsAdjustMontage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsBoundStruggleMontage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsFreedMontage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, BindingHandsMontage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, AdjustingHandsMontage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBondageItemTag, HandsBoundSuicideMontage, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBondageItemTag, 0x0098);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_804M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_VKID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_934X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_FCUS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_7Y2P, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_FNYD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_VUKL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_7ENH, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_EHQD, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_B17W, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_W4RO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_TSZB, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UBotulismPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__BotulismPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotulismPoisoning, UnknownData_NIH6, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBotulismPoisoning, 0x01C0);
		}

		// class AWeaponAttachment : public AItem
		TEST_METHOD(Class__ConZ__WeaponAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachment, UnknownData_EKCM, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachment, _staticMeshWhenAttached, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachment, UnknownData_JCYV, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachment, 0x0778);
		}

		// class ABowAttachmentSilencer : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__BowAttachmentSilencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowAttachmentSilencer, _noiseMultiplier, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowAttachmentSilencer, UnknownData_LWIL, 0x077C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowAttachmentSilencer, 0x0780);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_TD9P, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ABowAttachmentStabilizer : public ABowAttachmentSilencer
		TEST_METHOD(Class__ConZ__BowAttachmentStabilizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowAttachmentStabilizer, _shakinessModifier, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowAttachmentStabilizer, UnknownData_ZL7T, 0x0784);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowAttachmentStabilizer, 0x0788);
		}

		// class UMeleeSkill : public UStrengthSkill
		TEST_METHOD(Class__ConZ__MeleeSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, AnimationsPreset, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, _noSkillExperienceAwards, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, _basicSkillExperienceAwards, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, _mediumSkillExperienceAwards, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, _advancedSkillExperienceAwards, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkill, _aboveAdvancedSkillExperienceAwards, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeSkill, 0x00F8);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_PD8K, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_ZCU3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UBoxingSkill : public UMeleeSkill
		TEST_METHOD(Class__ConZ__BoxingSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxingSkill, 0x00F8);
		}

		// class UTriggerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__ConZ__TriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerComponent, UnknownData_OZBU, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerComponent, 0x04A8);
		}

		// class UProximityTriggerComponent : public UTriggerComponent
		TEST_METHOD(Class__ConZ__ProximityTriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, TriggerForwardVector, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, TriggerAngle, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, MotionDetectionSensitivity, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, MotionDetectionDepletionSpeed, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, _motionDetector, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, UnknownData_9PQK, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, _motionDetectorStartSound, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, _motionDetectorEndSound, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProximityTriggerComponent, UnknownData_VTGE, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProximityTriggerComponent, 0x04F0);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UBoxProximityTriggerComponent : public UProximityTriggerComponent
		TEST_METHOD(Class__ConZ__BoxProximityTriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxProximityTriggerComponent, BoxCollisionComponent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxProximityTriggerComponent, _triggerSize, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxProximityTriggerComponent, UnknownData_1HEU, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxProximityTriggerComponent, 0x0510);
		}

		// class UBreathingBarLungsWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__BreathingBarLungsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingBarLungsWidget, UnknownData_CSIM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingBarLungsWidget, _lungs, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingBarLungsWidget, _lungsCritical, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreathingBarLungsWidget, 0x0278);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_RQID, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class ABrokenArrow : public AItem
		TEST_METHOD(Class__ConZ__BrokenArrow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrokenArrow, 0x0758);
		}

		// class UInjury : public USickness
		TEST_METHOD(Class__ConZ__Injury)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInjury, 0x01B0);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_G0YR, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UPhysicalInjury : public UInjury
		TEST_METHOD(Class__ConZ__PhysicalInjury)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalInjury, UnknownData_83Z3, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalInjury, 0x0220);
		}

		// class UBrokenLimbsInjury : public UPhysicalInjury
		TEST_METHOD(Class__ConZ__BrokenLimbsInjury)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrokenLimbsInjury, UnknownData_SYSW, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrokenLimbsInjury, 0x0228);
		}

		// class UBruisingComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__BruisingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, BruisingData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, FadeBruises, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, UnknownData_OU8H, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, BruisesLifeTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, BruisesFadeUpdateInterval, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, UnknownData_LJX2, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, _renderTargetByLayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingComponent, UnknownData_WVPP, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBruisingComponent, 0x0128);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_VTN5, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_J18X, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// class UBruisingData : public UDataAsset
		TEST_METHOD(Class__ConZ__BruisingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBruisingData, Patches, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBruisingData, 0x0040);
		}

		// class UBuildingHelperComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__BuildingHelperComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildingHelperComponent, 0x00B0);
		}

		// class ABuilding : public AActor
		TEST_METHOD(Class__ConZ__Building)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, UnknownData_ZTDC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _ladderMarkers, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, UnknownData_HKGN, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _windowMarkers, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _windowMarkersDynamic, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _windowMarkerModifiers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _isCleared, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _isClaimable, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, UnknownData_UPTO, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _doors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, _fortifications, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding, UnknownData_FJ0A, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding, 0x0328);
		}

		// class ABuildingManager : public AActor
		TEST_METHOD(Class__ConZ__BuildingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, UnknownData_CY5Q, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, _buildings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, _buildingsOwned, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, UnknownData_UPOK, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, _buildingsDataRepHelper, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildingManager, UnknownData_KOK2, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuildingManager, 0x0468);
		}

		// class UBurnable : public UInterface
		TEST_METHOD(Class__ConZ__Burnable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBurnable, 0x0028);
		}

		// class UBuryData : public UDataAsset
		TEST_METHOD(Class__ConZ__BuryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, AllowedBuryMaterials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, MoundItemClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, staminaDrain, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, RecoveredStaminaThreshold, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, SkillToIncrease, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, SkillIncreaseAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryData, SkillIncreaseModifier, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuryData, 0x00A0);
		}

		// class UBuryToolItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__BuryToolItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, IsSmallSizedTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, UnknownData_4SWT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, BuryItemUsage, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, BuryDurationModifier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, BladeTipSocket, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, BladeCenterSocket, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, ShortToolMinBuryTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, ShortToolMaxBuryTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, LongToolMinBuryTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, LongToolMaxBuryTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuryToolItemTag, UnknownData_BP5B, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuryToolItemTag, 0x0060);
		}

		// class UC4PartTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__C4PartTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UC4PartTag, 0x0030);
		}

		// class UDeficiency : public USickness
		TEST_METHOD(Class__ConZ__Deficiency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeficiency, UnknownData_ACJ2, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeficiency, 0x01C0);
		}

		// class UCalciumDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__CalciumDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCalciumDeficiency, 0x01C0);
		}

		// class UCamouflageSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__CamouflageSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _activationTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _standingPenalty, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _crouchingPenalty, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _pronePenalty, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _slowMovingStandingPenalty, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _slowMovingCrouchingPenalty, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _slowMovingPronePenalty, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _mediumMovingStandingPenalty, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _mediumMovingCrouchingPenalty, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _fastMovingStandingPenalty, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _standingAIPerceptionMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _crouchingAIPerceptionMultiplier, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _proneAIPerceptionMultiplier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, _maxRelevantAIPerceptionRadius, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, UnknownData_7FKI, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, NoSkillExperienceAwards, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, BasicSkillExperienceAwards, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, MediumSkillExperienceAwards, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, AdvancedSkillExperienceAwards, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, AboveAdvancedSkillExperienceAwards, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, NoSkillParameters, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, BasicSkillParameters, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, MediumSkillParameters, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, AdvancedSkillParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamouflageSkill, AboveAdvancedSkillParameters, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamouflageSkill, 0x01A8);
		}

		// class UCampylobacteriosisPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__CampylobacteriosisPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCampylobacteriosisPoisoning, UnknownData_S8F9, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCampylobacteriosisPoisoning, 0x01B8);
		}

		// class UCarbonMonoxidePoisoning : public UDisease
		TEST_METHOD(Class__ConZ__CarbonMonoxidePoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarbonMonoxidePoisoning, UnknownData_0966, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCarbonMonoxidePoisoning, 0x01C0);
		}

		// class ACargoDropContainer : public AActor
		TEST_METHOD(Class__ConZ__CargoDropContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, DelayDuration, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, FallDuration, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, DetonationTime, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, DetonationCountdown, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, LandSound, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, WarningSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, DetonationSound, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, DetonationParticles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, CameraShakeClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, MajorSpawnerOptions, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, MinorSpawnerOptions, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, UnlockLockersAudioEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _parachuteMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _flareParticles, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _dustParticles, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _timerWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _lockedText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _unlockedText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, UnknownData_S4Z3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _endLocation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _rotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _landed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, UnknownData_SZCR, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _fallingSpeed, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _timeRemaining, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _flareParticlesEnabled, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, UnknownData_VATO, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, _cargoLockers, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropContainer, UnknownData_SU0N, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACargoDropContainer, 0x0308);
		}

		// class AWorldEvent : public AActor
		TEST_METHOD(Class__ConZ__WorldEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEvent, Location, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEvent, Radius, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEvent, IconTexture, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEvent, UnknownData_QLO4, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldEvent, 0x0248);
		}

		// class ACargoDropEvent : public AWorldEvent
		TEST_METHOD(Class__ConZ__CargoDropEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropEvent, CargoDropClasses, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropEvent, ForcePlayerStart, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACargoDropEvent, _characterAroundInfo, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACargoDropEvent, 0x02B0);
		}

		// class ACargoDropShip : public AActor
		TEST_METHOD(Class__ConZ__CargoDropShip)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACargoDropShip, 0x0220);
		}

		// class UCCAttributeSpinnerWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__CCAttributeSpinnerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCAttributeSpinnerWidget, UnknownData_ZYRY, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCAttributeSpinnerWidget, _valueTextBlock, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCAttributeSpinnerWidget, _increaseValueButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCAttributeSpinnerWidget, _decreaseValueButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCAttributeSpinnerWidget, UnknownData_44EC, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCCAttributeSpinnerWidget, 0x02A0);
		}

		// class UCCBodyTypeTriangleWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__CCBodyTypeTriangleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, UnknownData_IJVI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, _markerBackgroundCanvasPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, _markerBackgroundImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, _markerCanvasPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, _markerImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCBodyTypeTriangleWidget, UnknownData_UMAQ, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCCBodyTypeTriangleWidget, 0x02A8);
		}

		// class UCCMainWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__CCMainWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCMainWidget, _bodyTypeTriangleWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCCMainWidget, UnknownData_E0WX, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCCMainWidget, 0x0270);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_SJV6, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// class AWeaponItem : public AItem
		TEST_METHOD(Class__ConZ__WeaponItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, SizeXInHands, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, SizeYInHands, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, MinRange, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, MaxRange, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, MinDamage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, MaxDamage, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, AP, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, MagazineSize, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, FireModes, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, ROF, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, ReloadTime, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, UnknownData_ESDX, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, AccuracyGroup, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, DamageGroup, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponItem, RecoilGroup, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponItem, 0x07A0);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_VI0R, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_CFGK, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_H1Z8, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UItemAnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__ItemAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAnimInstance, UnknownData_CWM1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAnimInstance, _owningPrisonerStance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAnimInstance, _isOwningPrisonerInFirstPersonView, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAnimInstance, UnknownData_NGL4, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemAnimInstance, 0x02D0);
		}

		// class UChainsawAnimInstance : public UItemAnimInstance
		TEST_METHOD(Class__ConZ__ChainsawAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawAnimInstance, _isTurnedOn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawAnimInstance, UnknownData_A7DQ, 0x02D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainsawAnimInstance, 0x02E0);
		}

		// class UWeaponAction : public UObject
		TEST_METHOD(Class__ConZ__WeaponAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponAction, 0x0028);
		}

		// class UWeaponActionReloadSequence : public UWeaponAction
		TEST_METHOD(Class__ConZ__WeaponActionReloadSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionReloadSequence, AnimationStandAndCrouch, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionReloadSequence, AnimationProne, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionReloadSequence, CanBeInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionReloadSequence, UnknownData_ROZU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponActionReloadSequence, 0x0090);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class UChamberCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__ChamberCartridge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChamberCartridge, 0x0090);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, sortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_Q6E4, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_1DI8, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0240);
		}

		// class UWaypointWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__WaypointWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, IconTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, AccentTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, AccentColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, BarValue, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, BarColor, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, HeightOffset, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, Emphasized, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, UnknownData_OVEZ, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, EmphasisColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, UnknownData_56O0, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, LabelText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointWidget, UnknownData_FWP1, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaypointWidget, 0x0310);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_ZOQB, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_FZRU, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_CGJA, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_KC0V, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_URAF, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_PT4P, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_50PQ, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_CHAK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_PZC2, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UChangeTextWidget : public UWaypointWidget
		TEST_METHOD(Class__ConZ__ChangeTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeTextWidget, UnknownData_J4F3, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeTextWidget, 0x0338);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UCharacterAction : public UObject
		TEST_METHOD(Class__ConZ__CharacterAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, UnknownData_NDJY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, PreActionsDescriptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, PostActionsDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, ParentAction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, _preActions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, _postActions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, _progressWidget, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, UnknownData_ZD75, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, _description, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterAction, UnknownData_4FMA, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterAction, 0x00F8);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_WX5B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_C500, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// class UDeviceProfileFragment : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_3N3L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_22OO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UCharacterActionDescription : public UObject
		TEST_METHOD(Class__ConZ__CharacterActionDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterActionDescription, UnknownData_C87R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterActionDescription, 0x0030);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_JBS5, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_11J7, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_FPY0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_8DJP, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class UCharacterCreationProgressBar : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CharacterCreationProgressBar)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCreationProgressBar, 0x0278);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_A76Y, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_19S1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UCharacterCreationWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CharacterCreationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreationWidget, UnknownData_QQQS, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCreationWidget, 0x0280);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_AYWZ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_8BHY, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class UCharacterImpactSoundsData : public UDataAsset
		TEST_METHOD(Class__ConZ__CharacterImpactSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterImpactSoundsData, head, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterImpactSoundsData, Torso, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterImpactSoundsData, Arms, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterImpactSoundsData, Legs, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterImpactSoundsData, 0x0090);
		}

		// class UCharacterPainSoundsData : public UDataAsset
		TEST_METHOD(Class__ConZ__CharacterPainSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPainSoundsData, AudioEvent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterPainSoundsData, 0x0038);
		}

		// class UCharacterSelectionWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CharacterSelectionWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSelectionWidget, 0x0278);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_LTMH, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_H7WY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_6JZ5, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_81IJ, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_JARD, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_7GGM, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// class ACharacterSpawner : public AActor
		TEST_METHOD(Class__ConZ__CharacterSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, SpriteComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, Characters, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, AllowedSurfaces, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, CharactersPerCell, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, TotalCharacters, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, CellSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, CellsX, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, CellsY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, MinSpawnRadius, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, MaxSpawnRadius, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, MinSpawnDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, MaxSpawnDistance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, CullDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, SpawnRetries, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, TickFrequency, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, Enabled, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, DebugDraw, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, UnknownData_KS4R, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, DebugColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawner, UnknownData_P5F2, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacterSpawner, 0x0298);
		}

		// class UCharacterSpawnerComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__CharacterSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, UnknownData_ZKFD, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, Probability, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, OverrideDefaultRespawnTime, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, UnknownData_68YE, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, RespawnTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, MinCharactersToSpawn, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, MaxCharactersToSpawn, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, SpawnerMarkers, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerComponent, UnknownData_DZDT, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSpawnerComponent, 0x0230);
		}

		// class UCharacterSpawnerSpawnee : public UInterface
		TEST_METHOD(Class__ConZ__CharacterSpawnerSpawnee)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSpawnerSpawnee, 0x0028);
		}

		// class ACharacterSpawningManager : public AActor
		TEST_METHOD(Class__ConZ__CharacterSpawningManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _spawnableCharacters, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _managerProcessUpdateTime, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _spawnUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _spawnTriggerGroupUpdateTime, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _spawnTriggerGroupRadius, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _spawnTriggerGroupProximityQueryRadius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _interiorSearchDistanceThreshold, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _exteriorSpawnerGroupsSpawnCooldownTimeSP, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _interiorSpawnerGroupsSpawnCooldownTimeSP, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _exteriorSpawnerGroupsSpawnCooldownTimeMP, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _interiorSpawnerGroupsSpawnCooldownTimeMP, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _baseElementQueryDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _exteriorSpawnerGroupsProbabilityMP, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _interiorSpawnerGroupsProbabilityMP, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _exteriorSpawnerGroupsProbabilitySP, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _interiorSpawnerGroupsProbabilitySP, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _disableSerialization, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _startSpawnerGroupCooldownAfterSpawning, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _startSpawnerGroupCooldownAfterEnteringInterior, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, UnknownData_LTKU, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, _referencedPawnClasses, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterSpawningManager, UnknownData_OGC7, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacterSpawningManager, 0x17A8);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_0NDG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_UHJV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_SETA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UCharacterSpawnerPreset : public UObject
		TEST_METHOD(Class__ConZ__CharacterSpawnerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSpawnerPreset, SpawnerData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSpawnerPreset, 0x0038);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UChatNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__ChatNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatNotification, 0x0030);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_0JFQ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UChatNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__ChatNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatNotificationDescription, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatNotificationDescription, chatType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatNotificationDescription, shouldCopyToClientClipboard, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatNotificationDescription, UnknownData_F6OX, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatNotificationDescription, 0x0058);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UChatSuggestionWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ChatSuggestionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSuggestionWidget, _border, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSuggestionWidget, _textBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSuggestionWidget, _defaultColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSuggestionWidget, _highlightedColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSuggestionWidget, UnknownData_5TDW, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatSuggestionWidget, 0x02B0);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UChatText : public UTextBlock
		TEST_METHOD(Class__ConZ__ChatText)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatText, 0x02A8);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UChatWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ChatWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _backgroundImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _chatScrollBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _suggestionsScrollBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _suggestionsDropDown, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _inputText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _chatTypeIndicator, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _localChatColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _globalChatColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _squadChatColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _serverChatColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _errorChatColor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _defaultChatColor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _suggestionsTextColor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_MS32, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, _adminCommandCompletionManager, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_W014, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatWidget, 0x0350);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_IR27, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_30MD, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_K1Q6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_7KOO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_TU1K, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class ACal_9mm_C : public AAmmunitionItem
		TEST_METHOD(BlueprintGeneratedClass__Cal_9mm__Cal_9mm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACal_9mm_C, 0x07A0);
		}

		// class UWeaponActionCheckAmmoSequence : public UWeaponAction
		TEST_METHOD(Class__ConZ__WeaponActionCheckAmmoSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionCheckAmmoSequence, Animations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionCheckAmmoSequence, CanBeInterrupted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionCheckAmmoSequence, UnknownData_QQYB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponActionCheckAmmoSequence, 0x0050);
		}

		// class UCheckAmmoMagazineAttached : public UWeaponActionCheckAmmoSequence
		TEST_METHOD(Class__ConZ__CheckAmmoMagazineAttached)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckAmmoMagazineAttached, 0x0050);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_W992, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UCheckAmmoMagazineNotAttached : public UWeaponActionCheckAmmoSequence
		TEST_METHOD(Class__ConZ__CheckAmmoMagazineNotAttached)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckAmmoMagazineNotAttached, 0x0050);
		}

		// class UCheckDetectableItemsAction : public USkillAction
		TEST_METHOD(Class__ConZ__CheckDetectableItemsAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckDetectableItemsAction, UnknownData_C5RT, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckDetectableItemsAction, 0x00B0);
		}

		// class UCheckDetectablePlayersAction : public USkillAction
		TEST_METHOD(Class__ConZ__CheckDetectablePlayersAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckDetectablePlayersAction, UnknownData_X2QB, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckDetectablePlayersAction, 0x00A8);
		}

		// class UCheckOccludedDetectablePlayersAction : public USkillAction
		TEST_METHOD(Class__ConZ__CheckOccludedDetectablePlayersAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckOccludedDetectablePlayersAction, UnknownData_NJ45, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckOccludedDetectablePlayersAction, 0x00A8);
		}

		// class UChokingSickness : public USickness
		TEST_METHOD(Class__ConZ__ChokingSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChokingSickness, UnknownData_41R7, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChokingSickness, 0x01B8);
		}

		// class UInteractionAction : public UObject
		TEST_METHOD(Class__ConZ__InteractionAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAction, UnknownData_P4KL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionAction, 0x00A8);
		}

		// class UChopItemAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__ChopItemAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChopItemAction, UnknownData_GBZT, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChopItemAction, 0x00B0);
		}

		// class UChoppable : public UInterface
		TEST_METHOD(Class__ConZ__Choppable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChoppable, 0x0028);
		}

		// class AChoppingObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__ChoppingObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, _targetActors, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, _targetSpecificClothesType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, UnknownData_YSA0, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, _targetClothesTypes, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, _singleTarget, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChoppingObjective, UnknownData_T9AI, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChoppingObjective, 0x0368);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UChoppingRecipeDataAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__ChoppingRecipeDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoppingRecipeDataAsset, ChoppingRecipe, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChoppingRecipeDataAsset, 0x00C8);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_HW7G, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_0Z23, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UChoppingToolItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__ChoppingToolItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoppingToolItemTag, ChoppingTimeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoppingToolItemTag, IngredientsQuantityBonus, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChoppingToolItemTag, 0x0038);
		}

		// class UCircularMenuSegmentInfo : public UDataAsset
		TEST_METHOD(Class__ConZ__CircularMenuSegmentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, Caption, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, Icons, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, ShouldApplyFadeToIcon, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, UnknownData_MXBX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, IconSizeOverride, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInfo, ParentCircularWidget, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentInfo, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_OSAH, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_ZFRG, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_S4I3, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class UCircularMenuSegmentWeaponMalfunctionInfo : public UCircularMenuSegmentInfo
		TEST_METHOD(Class__ConZ__CircularMenuSegmentWeaponMalfunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWeaponMalfunctionInfo, _weaponMalfunction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWeaponMalfunctionInfo, UnknownData_IGNK, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentWeaponMalfunctionInfo, 0x0068);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_DTK4, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UCircularMenuSegmentIcons : public UDataAsset
		TEST_METHOD(Class__ConZ__CircularMenuSegmentIcons)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentIcons, UnselectedIcon, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentIcons, SelectedIcon, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentIcons, DisabledIcon, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentIcons, OverlayIcon, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentIcons, 0x0050);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_1TTD, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0460);
		}

		// class UCircularMenuSegmentSubmenuInfo : public UCircularMenuSegmentInfo
		TEST_METHOD(Class__ConZ__CircularMenuSegmentSubmenuInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentSubmenuInfo, SubmenuInfo, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentSubmenuInfo, IndexOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentSubmenuInfo, UnknownData_WKCW, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentSubmenuInfo, 0x0078);
		}

		// class UCircularMenuSegmentThrowingInfo : public UCircularMenuSegmentInfo
		TEST_METHOD(Class__ConZ__CircularMenuSegmentThrowingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentThrowingInfo, Action, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentThrowingInfo, Index, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentThrowingInfo, UnknownData_E69T, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentThrowingInfo, 0x0078);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_U1IK, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0460);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0460);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_C9YK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UCircularMenuSegmentInteractionInfo : public UCircularMenuSegmentInfo
		TEST_METHOD(Class__ConZ__CircularMenuSegmentInteractionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInteractionInfo, InteractionTargetType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInteractionInfo, UnknownData_JGGH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInteractionInfo, InteractionInfo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInteractionInfo, _interactionInitiator, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentInteractionInfo, _interactableObject, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentInteractionInfo, 0x00F0);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_MIX4, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_17PB, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_P8CM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_WGAP, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_ZG59, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_QFOU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UCircularMenuSegmentWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CircularMenuSegmentWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _nonSelectableAlpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _highlightedColour, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _unHighlightedColour, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, UnknownData_6NWW, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _info, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _segment, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _iconsOverlay, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _iconSizeBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _icon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _overlayIconSizeBox, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, _overlayIcon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuSegmentWidget, UnknownData_UJ5Y, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuSegmentWidget, 0x02E8);
		}

		// class UCircularMenuWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CircularMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, _layerData, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, _centerSize, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, UnknownData_86XU, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, _segmentsByLayer, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, _mainOverlay, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, _actionText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularMenuWidget, UnknownData_RTV0, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularMenuWidget, 0x02C0);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_PJRI, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class UCircularParameterWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CircularParameterWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularParameterWidget, 0x0278);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_DC5Q, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class UWeaponActionClearMalfunctionSequence : public UWeaponAction
		TEST_METHOD(Class__ConZ__WeaponActionClearMalfunctionSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, SortIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, MalfunctionType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, UnknownData_MRIL, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, CircularMenuSegmentInfo, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, Malfunctions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, CanBeInterrupted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, AllowBeginFiringSequence, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionClearMalfunctionSequence, UnknownData_RL61, 0x00A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponActionClearMalfunctionSequence, 0x00B8);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_2POR, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_4VMC, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_21TK, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UClearBadRound : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearBadRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearBadRound, MontageEndSectionName, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearBadRound, 0x00C0);
		}

		// class UClearClipPartiallyEjected : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearClipPartiallyEjected)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearClipPartiallyEjected, MontageEndSectionName, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearClipPartiallyEjected, 0x00C0);
		}

		// class UClearDoubleFeed : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearDoubleFeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearDoubleFeed, MontageEndSectionName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearDoubleFeed, _ejectedRoundsCount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearDoubleFeed, UnknownData_QXUN, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearDoubleFeed, _magazineToRestore, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearDoubleFeed, 0x00D0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UClearRoundNotLoaded : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearRoundNotLoaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearRoundNotLoaded, MontageEndSectionName, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearRoundNotLoaded, 0x00C0);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UClearStovePipe : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearStovePipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearStovePipe, MontageEndSectionName, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearStovePipe, 0x00C0);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UClearStuckBullet : public UWeaponActionClearMalfunctionSequence
		TEST_METHOD(Class__ConZ__ClearStuckBullet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClearStuckBullet, MontageEndSectionName, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClearStuckBullet, 0x00C0);
		}

		// class UClockFaceWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ClockFaceWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClockFaceWidget, 0x0278);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_7GY3, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UInteractionAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__InteractionAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAssetData, UnknownData_M3QG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionAssetData, 0x0030);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_12PH, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_0UOX, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_0HMR, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_9BGP, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// class UCutObjectAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__CutObjectAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCutObjectAssetData, ChoppingRecipeDataAsset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCutObjectAssetData, 0x0038);
		}

		// class UCollectObjectAssetData : public UCutObjectAssetData
		TEST_METHOD(Class__ConZ__CollectObjectAssetData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectObjectAssetData, 0x0038);
		}

		// class UCompassItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__CompassItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassItemTag, CompassLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassItemTag, UnknownData_LYLE, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassItemTag, 0x0038);
		}

		// class UCompassWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__CompassWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UnknownData_CJMC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrack, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrackNorthOnly, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrackCardinalOnly, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrackCardinalAndIntercardinal, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrackEverything, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _offset, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, _compassTrackWidthMultiplier, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UnknownData_5939, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassWidget, 0x02A0);
		}

		// class AComplexAnimal2 : public AAnimal2
		TEST_METHOD(Class__ConZ__ComplexAnimal2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HungerDepletionRate, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HungerDepletionRateWhenResting, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, EnergyRefillRate, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HungerRefillRate, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HealthRegenerationRate, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HealthDepletionRate, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, MovementPaceSettings, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, RotationRateSettings, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, OnActionChanged, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, ChargeAttacks, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, CloseRangeAttacks, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, TurnMonatges, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, AnimalActions, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, AttackRotationRate, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, MinActionTime, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HitReactTypeResting, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, HitReactTypeIntimidate, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, UnknownData_DE73, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, _hungerAndEnergyReplicated, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, UnknownData_SCSS, 0x09AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, _lookAtPoint, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AComplexAnimal2, UnknownData_0QLQ, 0x09CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AComplexAnimal2, 0x0A4C);
		}

		// class UComplexAnimal2AnimInstance : public UAnimal2AnimInstance
		TEST_METHOD(Class__ConZ__ComplexAnimal2AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, CurrentAction, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, UnknownData_8L2E, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, HeadLookRight, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, HeadLookUp, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, HeadMovementLerpSpeed, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, AngularVelocity, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, faceMorphTargetName, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, InterpolationSpeed, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, BlendInTime, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, BlendOutTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, UnknownData_ZTJA, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, _faceMorphValueChangePerSeconds, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComplexAnimal2AnimInstance, UnknownData_Y4AR, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComplexAnimal2AnimInstance, 0x0360);
		}

		// class UConsoleStatics : public UObject
		TEST_METHOD(Class__ConZ__ConsoleStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleStatics, 0x0028);
		}

		// class UConstitutionSkill : public USkill
		TEST_METHOD(Class__ConZ__ConstitutionSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstitutionSkill, UnknownData_7A7W, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstitutionSkill, 0x00B8);
		}

		// class UContainerItemDescriptor : public UObject
		TEST_METHOD(Class__ConZ__ContainerItemDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, UnknownData_TDZ3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, _itemClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, UnknownData_1PB8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, _data, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, _owningContainer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, _owningNode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, _firstReplication, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContainerItemDescriptor, UnknownData_6356, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContainerItemDescriptor, 0x00E0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_1Z6H, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_0JT2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UConZAssetManager : public UAssetManager
		TEST_METHOD(Class__ConZ__ConZAssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZAssetManager, _imageAssetsToLoad, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZAssetManager, UnknownData_RI3F, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZAssetManager, 0x04B8);
		}

		// class AConZBase : public AActor
		TEST_METHOD(Class__ConZ__ConZBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _baseElementActor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, UnknownData_2E9Q, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _drawBaseDebug, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _debugMode, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _overrideBlockStackingRules, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, UnknownData_M5H3, 0x02AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _debugRenderingDistance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _decayProcessingNumberOfFrames, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, _decayProcessingMaxDestroyedElementsPerUpdate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBase, UnknownData_109T, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZBase, 0x02D8);
		}

		// class AConZBaseElement : public AActor
		TEST_METHOD(Class__ConZ__ConZBaseElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseElement, UnknownData_6NOZ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseElement, _weatherMaskComponentClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseElement, UnknownData_H2AX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseElement, _elementClassMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseElement, UnknownData_LTAX, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZBaseElement, 0x0320);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_B9C6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_G1ZY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_WBQ1, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_ED4U, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class AConZBaseManager : public AActor
		TEST_METHOD(Class__ConZ__ConZBaseManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, UnknownData_IQUL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _damageEventProcessingPeriod, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _decayProcessingPeriod, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _flagOvertakePeriod, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _baseInteractionsPeriod, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _baseClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _baseElementClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _flagAreaVisualizerClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _initialBaseSize, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _flagInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _flagOvertakeDuration, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _maxBaseBuildingHeight, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _shortRepairDuration, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _mediumRepairDuration, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _longRepairDuration, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, UnknownData_8RZ3, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _useBuildingRestrictions, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _disableBaseBuilding, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, UnknownData_SWO5, 0x02E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, _bases, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZBaseManager, UnknownData_6IR8, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZBaseManager, 0x0388);
		}

		// class UConZBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ConZBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZBlueprintFunctionLibrary, 0x0028);
		}

		// class AConZCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__ConZ__ConZCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZCameraManager, UnknownData_9PFQ, 0x27B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZCameraManager, 0x27C0);
		}

		// class UConZGameInstance : public UGameInstance
		TEST_METHOD(Class__ConZ__ConZGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, CommonMapNames, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, CharacterCreationMenuContext, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, NetworkFailed, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, WasKickedFromGameSession, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, UnknownData_VNEK, 0x01F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, GameplayLogLogin, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, GameplayLogAdmin, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, GameplayLogKill, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, GameplayLogViolations, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, GameplayLogChat, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, FileIntegrityCompromised, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, UnknownData_SUJ3, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, FileIntegrityCompromisedDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, UnknownData_LZW5, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _databaseConnections, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, UnknownData_7POF, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _serverRequest, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _userManager, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _currentUser, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _currentUserProfile, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _loadingScreenTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, _loadingScreen, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZGameInstance, UnknownData_9PEV, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZGameInstance, 0x0340);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_7UZA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_1DLT, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_REI3, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_7KCY, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// class AConZGameMode : public AGameMode
		TEST_METHOD(Class__ConZ__ConZGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, SerializationFrequency, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, UnknownData_HFTY, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _doorLockingRegistry, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _prisonerClassToSpawn, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _droneClassToSpawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, UnknownData_SFR6, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _itemSpawningManagerClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _itemSpawningManager, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _itemVirtualizationManagerClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _itemVirtualizationManager, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _globalAnimalSpawner, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _globalBirdSpawner, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _vehicleSpawningManagerClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _vehicleSpawningManager, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _reportingManagerClass, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _reportingManager, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _characterSpawningManagerClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _characterSpawningManager, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _achievementsManagerServerClass, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _achievementsManagerServer, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _missionLevelManagerClass, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _missionLevelManager, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _missionSchedulerClass, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _missionScheduler, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _survivalStatsHandlerClass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _survivalStatsHandler, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _heatSourceManagerClass, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _heatSourceManager, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _baseManagerClass, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _baseManager, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _ladderMarkersReplicatorClass, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _ladderMarkersReplicator, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _effectOverTimeDealerClass, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _effectOverTimeDealer, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _notificationManagerClass, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _notificationManager, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _voteSystemManagerClass, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _voteSystemManager, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _serverAnalyticsManagerClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _serverAnalyticsManager, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _aiDetectionTimerHandlerClass, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _aiDetectionTimerHandler, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, UnknownData_TQRE, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, _serverResponse, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameMode, UnknownData_SK8S, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZGameMode, 0x0858);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_BIG4, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_0CQI, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_TW3R, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_JBFZ, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_12TI, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_LND7, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class AConZGameSession : public AGameSession
		TEST_METHOD(Class__ConZ__ConZGameSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZGameSession, 0x0238);
		}

		// class AConZGameState : public AGameState
		TEST_METHOD(Class__ConZ__ConZGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_JEIG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, RespawnSettings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, AllowSectorRespawn, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, AllowShelterRespawn, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, AllowSquadmateRespawn, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_CZ0X, 0x02F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _craftingDatabase, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _globalItemSpawner, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_3M1U, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _persistentItemTag, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _registeredCharacters, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_WZQ3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _oceans, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _sicknessClasses, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _squads, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _currentDroneTargetDispatcherMap, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _droneTargetDispatcherHistoryMap, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _droneTargetVisits, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_FEVE, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _ladderMarkersRegistryClass, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _ladderMarkersRegistry, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_N1H5, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _replenishableResourceManager, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _restorableMeshInstancesManager, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _resourceLockingManager, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _itemRegistry, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _safeZoneRegistry, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _gameResourceContainerProxyForReplenishableResourceRegistry, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, UnknownData_SJOD, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _prisonerKillRegistry, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _customMapBorderClass, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _tournamentClass, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _customMapBorder, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZGameState, _tournament, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZGameState, 0x0678);
		}

		// class UGameplayLog : public UObject
		TEST_METHOD(Class__ConZ__GameplayLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayLog, UnknownData_53GE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayLog, 0x0040);
		}

		// class AConZPlayerController : public APlayerController
		TEST_METHOD(Class__ConZ__ConZPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_FNR5, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, ComponentsToHide, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, OnPrisonerSpawned, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, CurrentInteractionContainerWidget, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, LocalChatDistance, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, IsTalkButtonPressed, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_9OO5, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _playerRpcChannel, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_S2AB, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _userProfile, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_X397, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _userFakeName, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_ZZM4, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _possessedPawn, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_VXRX, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _noiseEmitterComponent, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_FTN0, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _teleportWorldStreamingLocationChangeDelay, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _teleportWorldStreamingTriggerLag, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_9VPI, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _repFamePoints, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_HLTR, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _maxHistorySize, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_6AM7, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _weatherHeightUpdatePeriod, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_5T2F, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _adminCommandRegistry, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_PJ8S, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _achievementsManagerClient, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _achievementsManagerClientClass, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _missionManagerClass, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _missionManager, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _missionDialogueManagerClass, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_LXNF, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _isReadyForPlayDelay, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_77ZG, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _replicatedServerUtcNow, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_OQCX, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _pathFollowingComponent, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _forceSpawnAsDrone, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, _mpSpawnDroneAndPrisoner, 0x0909);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerController, UnknownData_E6WE, 0x090A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZPlayerController, 0x0918);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AConZPlayerState : public APlayerState
		TEST_METHOD(Class__ConZ__ConZPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerState, UnknownData_A2MK, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZPlayerState, _repPawnLocationOnMap, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZPlayerState, 0x0330);
		}

		// class UConZReverbComponent : public UAkLateReverbComponent
		TEST_METHOD(Class__ConZ__ConZReverbComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZReverbComponent, IndoorSmallAuxBus, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZReverbComponent, IndoorMediumAuxBus, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZReverbComponent, IndoorLargeAuxBus, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZReverbComponent, OutdoorLargeAuxBus, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZReverbComponent, UnknownData_RXZ4, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZReverbComponent, 0x0260);
		}

		// class AConZReverbVolume : public AAkReverbVolume
		TEST_METHOD(Class__ConZ__ConZReverbVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZReverbVolume, 0x0290);
		}

		// class AConZSpectatorPawn : public ASpectatorPawn
		TEST_METHOD(Class__ConZ__ConZSpectatorPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSpectatorPawn, DefaultFOV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSpectatorPawn, UnknownData_I8IX, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZSpectatorPawn, 0x02B8);
		}

		// class AConZSquad : public AActor
		TEST_METHOD(Class__ConZ__ConZSquad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, squadId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, SquadName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, SquadMessage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, SquadInformation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, SquadEmblem, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, _pendingMembers, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, _members, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, _oldMembers, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, _repEmblem, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, _maxAllowedSquadMembers, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZSquad, UnknownData_QK7J, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZSquad, 0x02A0);
		}

		// class AConZVehicle4W : public ADcxVehicle4W
		TEST_METHOD(Class__ConZ__ConZVehicle4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_1TPX, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _spawnParameters, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _physicsDominanceGroup, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_PE28, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _isMassChangeByCargoAllowed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _isMassChangeByMounteesAllowed, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _isCenterOfMassChangeByCargoAllowed, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _isCenterOfMassChangeByMounteesAllowed, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _cargoCenterOfMassOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _minEffectiveCargoMass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxEffectiveCargoMass, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _pushImpulseMagnitude, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_A7FE, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _pushIntensityCurve, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _pushDirectionRatioBetweenForwardAndUp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxDistanceToAllowThePush, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxDistanceToAllowThePushStart, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _pushStartAccelerationChange, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _pushStartSpeedThresholdKph, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_BRZQ, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxSpeed, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _supportsHandbrake, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_ZXDK, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStartingAudioEvent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStartedAudioEvent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineTurnedOffAudioEvent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFailedToStartAudioEvent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFailedToStartNoFuelAudioEvent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFailedToStartNoBatteryAudioEvent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStalledAudioEvent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _noFuelToStartEngineAudioEvent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _noBatteryToStartEngineAudioEvent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _hornStartAudioEvent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _hornStopAudioEvent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _noBatteryToActivateHornAudioEvent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _lightsActivatedAudioEvent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _lightsDeactivatedAudioEvent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _noBatteryToActivateLightsAudioEvent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _noBatteryToTurnOnRadioAudioEvent, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _gearUpAudioEvent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _gearDownAudioEvent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _chassisStartedMovingAudioEvent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _chassisStoppedMovingAudioEvent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_VGMP, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _rpmScaleForSoundWhenSpeedIsEqualOrGreaterThanZero, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _rpmScaleForSoundWhenSpeedIsLessThanZero, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _soundCullDistance, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _tireToSurfaceAudioData, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _sendStateInterval, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _rigidBodyStatePositionErrorTolerance, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _rigidBodyStateRotationErrorTolerance, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _distanceErrorToHardSnapToRemoteLocation, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _mountSlots, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineState, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_6D53, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingForceMagnitude, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _hornActive, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _lightsActive, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_Z7M6, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _headlightsMaterialParameter, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _reverseLightsMaterialParameter, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _brakeLightsMaterialParameter, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _brakeLightsAlwaysOnIfLightsAreActivated, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_E080, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _itemContainerClass, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _itemContainer, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _itemContainerContainedItemsMass, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_A52V, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canEngineBeStalledByAcceleration, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_6TRT, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByAccelerationSpeedThreshold, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByAccelerationOccurrenceInterval, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_YTNO, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByAccelerationAudioEvent, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByAccelerationAudioEventTriggerTimeRatios, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canEngineBeStalledByUpShift, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_EX1K, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByUpShiftOccurrenceInterval, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_UDJ2, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByUpShiftAudioEvent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingByUpShiftAudioEventTriggerTimeRatios, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingWhenStartingViaMotionAudioEvent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingWhenStartingViaMotionAudioEventTriggerTimeRatios, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canSkillAffectMaxSpeed, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canSkillAffectSteerRate, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canSkillAffectThrottleAmount, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _canSkillAffectBrakeAmount, 0x05AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_3Q2L, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineBlockMaxHealth, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_WRV9, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxHealth, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _autoHealthDrainThreshold, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _autoHealthDrain, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _repairableParams, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _damagedEffects, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_VLEG, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _damageMaterialParameterName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _exhaustEffects, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _repairableTireParams, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _tireEffectUpdateRange, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _numAudioObjectsForTires, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_U819, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _tireEffectProperties, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_BE1Q, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _corpseClass, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _activeHitTimeToLive, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_N7IG, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _impactEffects, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, ImpactDamageVsNormalImpulse, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_A11N, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _makeNoiseInterval, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxNoiseLoudnessFromEngine, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxNoiseLoudnessFromSpeed, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_B628, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _speedThresholdInKphToAffectNavigation, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _allowedWaterImmersionDepth, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _disallowedWaterImmersionDepth, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _waterImmersionDepthToForceEvictMountees, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _timeToEvictMounteesWhenImmersedIntoWater, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _timeToForceEvictMounteesWhenImmersedIntoWater, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _timeToAutoDestructWhenImmersedIntoWater, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_3YVM, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _shouldEvictMounteesIfTiltedAboveThreshold, 0x07ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_5AET, 0x07EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _tiltThresholdAngleToEvictMountees, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_O5AI, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _healthBarCaption, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_8AZ8, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelResourceType, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxFuelAmount, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelDrainWhenStartingEngine, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFuelDrainPerRpm, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFuelDrainPerRpmScale, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_47CP, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFuelDrainPerRpmUnderLoad, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineFuelDrainPerRpmUnderLoadScale, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelDrainWhenInactive, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelFillingBaseDuration, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fillingDurationPerFuelAmountFilled, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _experienceAwardedPerFuelAmountFilled, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_5ZKY, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _prisonerFillingFuelMontage, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _startFillingFuelAudioEvent, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _stopFillingFuelAudioEvent, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _startFillingFuelWithReplenishableResourceAudioEvent, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _stopFillingFuelWithReplenishableResourceAudioEvent, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fillFuelWithReplenishableResourceOverlapBoxExtent, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelDrainingBaseDuration, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _drainingDurationPerFuelAmountDrained, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _experienceAwardedPerFuelAmountDrained, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _prisonerDrainingFuelMontage, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _startDrainingFuelAudioEvent, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _stopDrainingFuelAudioEvent, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _engineStallingParametersWhenOutOfFuel, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_VXWZ, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _fuelUpdateInterval, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_A3KK, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryResourceType, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxBatteryAmount, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDrainWhenStartingEngine, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDrainWhenHornIsActive, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDrainWhenLightsAreActive, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDrainWhenRadioIsTurnedOn, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDrainWhenInactive, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDynamoChargePerKph, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryDynamoChargePerKphScale, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_F8LV, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryAlternatorChargePerRpm, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryAlternatorChargePerRpmScale, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryPowerReductionThreshold, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _startEngineDurationPenaltyWhenBatteryReducedInPower, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryChargingBaseDuration, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _chargingDurationPerBatteryAmountCharged, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _experienceAwardedPerBatteryAmountCharged, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _prisonerChargingBatteryMontage, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _startChargingBatteryAudioEvent, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _stopChargingBatteryAudioEvent, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_D02S, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _batteryUpdateInterval, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_UG6Y, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _radioComponent, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _hitZones, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _vehiclePartsStateFlags, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _doorsNum, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _doorWindowsNum, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_ON6X, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _isInteriorExposedByDefault, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_SZGV, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _maxVehicleEnterAngle, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_4QUZ, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _aiTeam, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_YRLE, 0x0BE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _repPackedSimulationState, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, _repHealthFuelBatteryAmount, 0x0C64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZVehicle4W, UnknownData_GK8L, 0x0C68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZVehicle4W, 0x0CD0);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_FCQ6, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_S25O, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_Q9ZY, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_041G, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_RTAI, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_0XLX, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_6PO7, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_F31Z, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// class UHLODProxyDesc : public UObject
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_3HWS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UConZVehicle4WMountSlot : public UActorComponent
		TEST_METHOD(Class__ConZ__ConZVehicle4WMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, UnknownData_ICJ7, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _socketName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _mountAudioEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _mountPriority, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, UnknownData_R1LE, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _entryPoints, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _unmountAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _isReachableFromSky, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _mountingMotionIntensity, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _unmountingMotionIntensity, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, UnknownData_X70Y, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _mounteeCenterOfMassOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _minEffectiveMounteeMass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _maxEffectiveMounteeMass, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _mountee, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _reservee, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _canMounteeBeAttackedByMelee, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, UnknownData_G1DK, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _interactionZoneMaterials, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WMountSlot, _vehicleWeaponAimingParameters, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicle4WMountSlot, 0x0130);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UConZVehicle4WDriverMountSlot : public UConZVehicle4WMountSlot
		TEST_METHOD(Class__ConZ__ConZVehicle4WDriverMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _forwardIdleAnimation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _forwardSteeringAnimation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _forwardSteeringAnimationFP, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _reverseIdleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _reverseSteeringAnimation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WDriverMountSlot, _reverseSteeringAnimationFP, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicle4WDriverMountSlot, 0x0160);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_01R0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_SNMO, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UConZVehicle4WPassengerMountSlot : public UConZVehicle4WMountSlot
		TEST_METHOD(Class__ConZ__ConZVehicle4WPassengerMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicle4WPassengerMountSlot, _idleAnimation, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicle4WPassengerMountSlot, 0x0138);
		}

		// class UConZVehicleAnimInstance : public UDcxVehicleAnimInstance
		TEST_METHOD(Class__ConZ__ConZVehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, EngineRpm, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, EngineRpmInterpSpeed, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, Speed, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, SpeedKph, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, MaxSteeringWheelSteerAngle, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, SteeringWheelSteerAngleInterpSpeed, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, CurrentSteeringWheelSteerAngle, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, DoorOpenPercentage, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleAnimInstance, DoorWindowOpenPercentage, 0x0A68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicleAnimInstance, 0x0A78);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_W95Q, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_DF1K, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_CKGT, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// class UConZVehicleDriveComponent4W : public UDcxVehicleDriveComponent4W
		TEST_METHOD(Class__ConZ__ConZVehicleDriveComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleDriveComponent4W, _maxArtificialBrakingForce, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleDriveComponent4W, _speedLimiterMaxSpeed, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleDriveComponent4W, _speedLimiterMaxBrakingForce, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleDriveComponent4W, _speedLimiterInfluenceCoefficient, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleDriveComponent4W, _flatTireWheelConfigurations, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicleDriveComponent4W, 0x03F8);
		}

		// class UConZVehicleSpringArmComponent : public USpringArmComponent
		TEST_METHOD(Class__ConZ__ConZVehicleSpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleSpringArmComponent, _ownerAccelerationDirectionInterpSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleSpringArmComponent, _maxCameraOffset, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleSpringArmComponent, _cameraOffsetInterpSpeed, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleSpringArmComponent, UnknownData_NV0G, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicleSpringArmComponent, 0x02D0);
		}

		// class UConZVehicleTire : public UDcxVehicleTire
		TEST_METHOD(Class__ConZ__ConZVehicleTire)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleTire, ParticleTrail, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConZVehicleTire, ParticleWave, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConZVehicleTire, 0x0108);
		}

		// class AConZWaterVolume : public APhysicsVolume
		TEST_METHOD(Class__ConZ__ConZWaterVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWaterVolume, Ocean, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZWaterVolume, 0x0270);
		}

		// class AConZWorldBoundsVolume : public AVolume
		TEST_METHOD(Class__ConZ__ConZWorldBoundsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZWorldBoundsVolume, 0x0258);
		}

		// class AConZWorldSettings : public AWorldSettings
		TEST_METHOD(Class__ConZ__ConZWorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, SerializeInstances, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, UnknownData_REZX, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, WeatherController, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, WetnessManager, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, GameEventManager, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, WorldEventManager, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, BuildingManager, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, ItemContainerManager, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, RadioStations, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, RadioNoiseStartEvent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, RadioNoiseStopEvent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, RadioStopEvent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, RadioStationChangeNoiseEvent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, ItemSpawningSettings, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, IslandBoundsVolume, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, UseVirtualizationSystem, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, UnknownData_LB92, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, WorldBounds, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, HeightMapGameplayTag, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, MapPropertiesGameplayTag, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConZWorldSettings, UnknownData_X5NR, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConZWorldSettings, 0x04C8);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UBoneReferenceSkeletonProvider : public UInterface
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UCookingSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__CookingSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCookingSkill, 0x00A0);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UCopperDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__CopperDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCopperDeficiency, 0x01C0);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_643Y, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UCorpseInterface : public UInterface
		TEST_METHOD(Class__ConZ__CorpseInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorpseInterface, 0x0028);
		}

		// class UCraftableItem : public UDataAsset
		TEST_METHOD(Class__ConZ__CraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, ItemCategory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, UnknownData_K34V, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, ItemOrder, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, CraftedItems, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, Interaction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, UnknownData_E9DF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, InteractionCaption, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, MandatoryItems, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, OptionalItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, ToolsNeeded, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AutoCalculation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, UnknownData_VV1R, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, Skill, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, NoSkillLevelData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, BasicLevelData, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, MediumLevelData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AdvancedLevelData, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, CustomCraftingMontage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, StartCraftingAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, StopCraftingAudioEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, OnlyForSupporterPack, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, UnknownData_RR35, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, MatBaseOutlineOffset, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, MatThinness, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, MatIsTwoSided, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AutoCalculateHealth, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AutoCalculateWeight, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AutoCalculateFoodParameters, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, AlcoholContentMultiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftableItem, BulletStackAmount, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftableItem, 0x0128);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_MUWK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_LN4Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_UQE5, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UPlaceableCraftableItem : public UCraftableItem
		TEST_METHOD(Class__ConZ__PlaceableCraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, MaxPlacementAngle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, AdjustRotation, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, UnknownData_15AJ, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, GroundOffsetWhilePlacing, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, MaxDistanceFromGroundWhilePlacing, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, ReachabilityVerticalOffset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, IgnoreFloatingCheckWhilePlacing, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, UnknownData_CJF5, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, PlacementLocationOffset, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, BoundsExtensionWhilePlacing, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, BoundsExtensionWhilePlacingMin, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, BoundsExtensionWhilePlacingMax, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, PlacementTracesBoundsExtension, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, FloatingTracesBoundsExtension, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, FloatingTracesCenterOffset, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, MaxHeightAdjustmentWhilePlacing, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, MinHeightAdjustmentWhilePlacing, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, UseMeshCollisionForPlacement, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, CanPlaceInEnemyFlagArea, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, CheckBaseBuildingPlacementMask, 0x019E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, PlacementAlgorithm, 0x019F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, MaxMissedPlacementTracesPercent, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, ShowDirectionIndicator, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, UnknownData_SR00, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, DirectionIndicatorOffset, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, DirectionIndicatorRotation, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, DirectionIndicatorSize, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableCraftableItem, UnknownData_9UWG, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceableCraftableItem, 0x01C0);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_D6OC, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_CP4L, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_R431, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_RON0, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UFortificationCraftableItem : public UPlaceableCraftableItem
		TEST_METHOD(Class__ConZ__FortificationCraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationCraftableItem, FortificationClass, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationCraftableItem, Icon, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationCraftableItem, Caption, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationCraftableItem, Description, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortificationCraftableItem, 0x0200);
		}

		// class UBaseBuildingBlockCraftableItem : public UPlaceableCraftableItem
		TEST_METHOD(Class__ConZ__BaseBuildingBlockCraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, BaseBlockClass, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, Icon, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, Caption, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, Description, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, PlacementMeshOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, PlacementMeshScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, IsUpgrade, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBuildingBlockCraftableItem, UnknownData_2S5B, 0x0219);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBuildingBlockCraftableItem, 0x0220);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_Q1GS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UCraftingAvailableItemWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CraftingAvailableItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, OnClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, _isSelected, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, _isOptional, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, _optionalState, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, UnknownData_HQN4, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, _item, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingAvailableItemWidget, _clickSound, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingAvailableItemWidget, 0x02A0);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_FFNV, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_QOZ9, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UCraftingComponentWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CraftingComponentWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, ItemWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, _isTool, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, UnknownData_928T, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, _itemClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, _isAvailable, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingComponentWidget, UnknownData_ZPZL, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingComponentWidget, 0x02A0);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_A364, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_W3NJ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_JNN6, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UCraftingDatabase : public UDataAsset
		TEST_METHOD(Class__ConZ__CraftingDatabase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, CraftableItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, AssetPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, CookableTag, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, SmokableTag, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, OpenItemTag, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, LightFireTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, ConservedFoodTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, IngredientsGroup, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, IngredientsGroupPaths, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, IngredientsExcludePaths, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDatabase, _itemsByTags, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingDatabase, 0x00F0);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_VO5M, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UCraftingInfoWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CraftingInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, ItemWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, ComponentsGridPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, CraftingGridPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, ComponentsMinimizableWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, CraftingMinimizableWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, _itemClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, UnknownData_UT0K, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, _switchWidgets, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, _inventoryComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, _craftingRecipe, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingInfoWidget, UnknownData_6EXX, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingInfoWidget, 0x0368);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_0FVE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_7QDN, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UCraftingItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__CraftingItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingItemTag, 0x0030);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_8JFI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_66RH, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class ACraftingObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__CraftingObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraftingObjective, _targetItems, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraftingObjective, UnknownData_BU3C, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACraftingObjective, 0x0348);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UCraftingPanelWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CraftingPanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, RecipeItemClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _craftingInfo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _inventoryBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _vicinityBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsSubBox1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsSubBox2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsSubBox3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsSubBox4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsSubBox5, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ToolsAndWeaponsSubContainer1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ToolsAndWeaponsSubContainer2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ToolsAndWeaponsSubContainer3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ToolsAndWeaponsSubContainer4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ToolsAndWeaponsSubContainer5, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsSubBox1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsSubBox2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsSubBox3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsSubBox4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsSubBox5, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ItemsSubContainer1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ItemsSubContainer2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ItemsSubContainer3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ItemsSubContainer4, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, ItemsSubContainer5, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodBox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodSubBox1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodSubBox2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodSubBox3, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodSubBox4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodSubBox5, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, FoodSubContainer1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, FoodSubContainer2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, FoodSubContainer3, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, FoodSubContainer4, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, FoodSubContainer5, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesBox, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesSubBox1, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesSubBox2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesSubBox3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesSubBox4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesSubBox5, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, PlaceablesSubContainer1, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, PlaceablesSubContainer2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, PlaceablesSubContainer3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, PlaceablesSubContainer4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, PlaceablesSubContainer5, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingBox, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingSubBox1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingSubBox2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingSubBox3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingSubBox4, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _basebuildingSubBox5, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingContainer, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingSubContainer1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingSubContainer2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingSubContainer3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingSubContainer4, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, BaseBuildingSubContainer5, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _inventoryScrollBox, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _vicinityScrollBox, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsScrollBox, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsScrollBox, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodScrollBox, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesScrollBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _toolsAndWeaponsScaleBox, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _itemsScaleBox, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _foodScaleBox, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placeablesScaleBox, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _selectedRecipeWidget, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, _placedPlaceableWidget, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanelWidget, UnknownData_JWIB, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingPanelWidget, 0x0510);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_54K3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_9PNM, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_75LX, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_MR95, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_197N, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_7ERZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_85YE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_1GVZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_2JGB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_FQAQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_JKR6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_9EK0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_NV5E, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UCraftingRecipeWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__CraftingRecipeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, ItemWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, RecipeID, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, UnknownData_LZ0S, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, OnRecipeSelected, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _isGrayedOut, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, UnknownData_N44W, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _itemImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _additionalText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _craftableItem, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, UnknownData_1KCD, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _isExaminable, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, _availabilityState, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, UnknownData_55QW, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeWidget, 0x02C8);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_1IU0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_KV0Y, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_A16S, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_HWUX, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UCraftItemAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__CraftItemAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftItemAction, UnknownData_L9GA, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftItemAction, 0x0140);
		}

		// class ACTFBase : public AActor
		TEST_METHOD(Class__ConZ__CTFBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, SphereComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, Mesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, TeamMaterials, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, _gameEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, _team, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFBase, _radius, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACTFBase, 0x0250);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_7PTR, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class ACTFFlag : public AActor
		TEST_METHOD(Class__ConZ__CTFFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, SphereComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, FlagMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, TeamMaterials, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, AttachSocketName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _gameEvent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _team, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, UnknownData_F9ZW, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _carrier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, UnknownData_H0V2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _resetProgress, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, UnknownData_OE3V, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _baseTransform, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlag, _flagTransform, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACTFFlag, 0x02D0);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_4I4R, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class ACTFFlagStand : public AActor
		TEST_METHOD(Class__ConZ__CTFFlagStand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlagStand, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlagStand, Light, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFFlagStand, _lightColor, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACTFFlagStand, 0x0240);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_YY02, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class AGameEventBase : public AActor
		TEST_METHOD(Class__ConZ__GameEventBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, EventName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, ParticipantStatsClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, RoundInfoWidgetClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, TeamHeaderWidgetClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, StatWidgetClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, MiniStatWidgetClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, TransportClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, TimesUpAnnouncement, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, BlueTeamWonRoundAnnouncement, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, RedTeamWonRoundAnnouncement, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, RoundDrawAnnouncement, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, BlueTeamWonEventAnnouncement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, RedTeamWonEventAnnouncement, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, EventDrawAnnouncement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, Time30sAnnouncement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, Time15sAnnouncement, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, Time10sCountdownAnnouncement, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, TensionMusicStart, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, TensionMusicStop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _state, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, UnknownData_IWW8, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _activeParticipantCount, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _numberOfTeams, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, UnknownData_MHVH, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _teamMemberCount, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _teamScores, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _roundWinningTeam, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _round, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _roundTimeLeft, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _cancelTimeLeft, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, UnknownData_GWHE, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _marker, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _border, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _manager, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _participantInfo, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _parameters, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _cardWidget, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _scoreboardWidget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _miniScoreboardWidget, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _rankings, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, UnknownData_PN9P, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _lastAnnouncement, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, _lastCountdownAnnouncement, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBase, UnknownData_7PT2, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEventBase, 0x0578);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_O15N, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_NXTT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_YQ1T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_0MQS, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_N9ZN, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UGameEventParticipantStats : public UObject
		TEST_METHOD(Class__ConZ__GameEventParticipantStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, Score, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, EnemyKills, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, TeamKills, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, Deaths, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, Suicides, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, Assists, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, Headshots, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStats, UnknownData_691P, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventParticipantStats, 0x0048);
		}

		// class UCTFParticipantStats : public UGameEventParticipantStats
		TEST_METHOD(Class__ConZ__CTFParticipantStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCTFParticipantStats, Pickups, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCTFParticipantStats, Captures, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCTFParticipantStats, Returns, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCTFParticipantStats, UnknownData_FMZE, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCTFParticipantStats, 0x0058);
		}

		// class ACTFGameEvent : public AGameEventBase
		TEST_METHOD(Class__ConZ__CTFGameEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, FlagClass, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, CaptureBaseClass, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, FlagStandClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, FlagIconTexture, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, FlagAccentTexture, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BaseIconTexture, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BaseAccentTexture, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, EmptyBaseIconTexture, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, EmptyBaseAccentTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, TeamColorA, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, TeamColorB, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BlueTeamPickedUpFlagAnnouncement, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BlueTeamCapturedFlagAnnouncement, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BlueTeamFlagDroppedAnnouncement, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, BlueTeamFlagReturnedAnnouncement, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, RedTeamPickedUpFlagAnnouncement, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, RedTeamCapturedFlagAnnouncement, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, RedTeamFlagDroppedAnnouncement, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, RedTeamFlagReturnedAnnouncement, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, _CTFParameters, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, _flagA, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, _flagB, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, _baseA, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, _baseB, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFGameEvent, UnknownData_4C7O, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACTFGameEvent, 0x06A0);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class AGameEventLocationMarker : public AActor
		TEST_METHOD(Class__ConZ__GameEventLocationMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, LocationName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, LocationImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, LocationImageGrayscale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, EligibleForRandomPick, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, UnknownData_TJUE, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, GameEventClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, GameEventParameters, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, BorderClass, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, AreaCenterOffset, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, Radius, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, SpawnAreas, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, Sphere, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventLocationMarker, Sprite, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEventLocationMarker, 0x0418);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class ACTFLocationMarker : public AGameEventLocationMarker
		TEST_METHOD(Class__ConZ__CTFLocationMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, CTFParameters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, CaptureOffsetA, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, CaptureOffsetB, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, CaptureRadiusA, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, CaptureRadiusB, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, UnknownData_C3BV, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, FlagOffsetA, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, FlagOffsetB, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, FlagAPreviewMesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACTFLocationMarker, FlagBPreviewMesh, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACTFLocationMarker, 0x04E0);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class ACustomMapBorder : public AActor
		TEST_METHOD(Class__ConZ__CustomMapBorder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, TournamentMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, Material, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _minCustomMapSize, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _isInTournamentMode, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, UnknownData_JYWE, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _tournamentModeCompletionPercentage, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _nearingCompletionPercentage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, UnknownData_G9F6, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _minTournamentMapSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _tournamentFinalBorderDimensions, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _active, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, UnknownData_CIMX, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomMapBorder, _customMapDimensions, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomMapBorder, 0x0288);
		}

		// class UCutObjectAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__CutObjectAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCutObjectAction, UnknownData_1AKY, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCutObjectAction, 0x00D0);
		}

		// class ACuttingObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__CuttingObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, _targetMeshes, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, _specificItem, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, UnknownData_X02R, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, _itemToFound, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, _itemAmount, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACuttingObjective, UnknownData_LQ99, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACuttingObjective, 0x0360);
		}

		// class UCyclosporiasisPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__CyclosporiasisPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCyclosporiasisPoisoning, UnknownData_PQPX, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCyclosporiasisPoisoning, 0x01B8);
		}

		// class UCystitisDisease : public UDisease
		TEST_METHOD(Class__ConZ__CystitisDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCystitisDisease, UnknownData_UAW1, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCystitisDisease, 0x01D8);
		}

		// class UDamageDirectionIndicator : public UObject
		TEST_METHOD(Class__ConZ__DamageDirectionIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, visible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, UnknownData_NHQ5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, Texture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, Radius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, OpacityMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, DefaultDelayDuration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, DefaultSustainDuration, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, DefaultReleaseDuration, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionIndicator, UnknownData_E2NT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageDirectionIndicator, 0x0070);
		}

		// class ATrapItem : public AItem
		TEST_METHOD(Class__ConZ__TrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_FICU, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, AutoDestroyTimeWhenArmed, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, DestroyAfterTriggered, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_U700, 0x0765);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, DestroyDelay, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, CanEverBeRefueled, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_7J8J, 0x076D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, RefuelItemTag, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, TriggerForwardVector, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, RagdollDuration, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, CanBeBurried, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, MustBeArmed, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, IgnoreRadialDamage, 0x078A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, ShouldApplyPhysicalDamage, 0x078B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, PhysicalDamageBoundsBox, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, ActorDestructionDelay, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, HasFixedTrigger, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_FIMQ, 0x07AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, MinDamageForTrigger, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_HH64, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, TriggerVisualTransform, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, MaxTriggerAngle, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, CanEverShowTrigger, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_QT24, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _isDestroyed, 0x07F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_TN8C, 0x07F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _minigameClass, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _minigameToolTag, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_S9XQ, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _isBuried, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _isArmed, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _wasTriggered, 0x0832);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _canBeTriggered, 0x0833);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_EYLB, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _ownerlessDecayTime, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_FOKI, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _burriedDecayTime, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_8KLV, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _numRemainingDefuseAttempts, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _currentTrigger, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_QI7M, 0x085D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _lastTriggerOwner, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _quality, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_76HT, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _burriedMesh, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _burriedMeshMaterial, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _spriteMarkerBillboard, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _moundStartFadeDistance, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _moundEndFadeDistance, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _applyBuryMaterial, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, UnknownData_K6PE, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapItem, _numberOfDefuseAttempts, 0x0894);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrapItem, 0x0898);
		}

		// class ADamagingTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__DamagingTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamagingTrapItem, UnknownData_HDCL, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamagingTrapItem, _damagePerSecond, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamagingTrapItem, _triggerSound, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamagingTrapItem, UnknownData_5EXU, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADamagingTrapItem, 0x08B0);
		}

		// class UDataSingleton : public UObject
		TEST_METHOD(Class__ConZ__DataSingleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ImpulseMultipliers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DamageMultipliers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairIconUp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairIconDown, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairIconLeft, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairIconRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairIconCenter, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, CrosshairBlockedIcon, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, BowSpreadCircle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, SingleFireIcon, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, AutoFireIcon, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, BurstFireIcon, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponSpreadBase, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponSpreadData, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, BowArrowDeviationDegreesAngleByStep, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponViewKickData, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponAimingAutoCorrectAngle, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, UnknownData_OT2Y, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponMalfunctionProbabilityCurves, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, UpperBoundStaminaAmountToDrain, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, LowerBoundWeaponWeightForStaminaDrain, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, UpperBoundWeaponWeightForStaminaDrain, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponFOVWhileScoping, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DownTheSightsModeLerpCurve, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WeaponFOVParameterCollection, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, InteractIcon, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, BondageIcon, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DefaultInputData, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, Widgets, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceablePrimaryMatValid, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceablePrimaryMatInvalid, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceablePrimaryMatFriendlyFlag, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceableOutlineMat, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceableDepthMat, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PlaceableMaterialRadiusSphere, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WidgetMaterial, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DivingMaskItemTag, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ToolBoxItemTag, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, MushroomItemTag, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, AlcoholItemTag, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, SoapItemTag, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, AnimalSkinItemClass, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, TrapData, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DogTagItemClass, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ItemObstructionCollisionChannel, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ShouldTraceComplexCollisionForItemObstruction, 0x08C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, UnknownData_JHLU, 0x08C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, AssetsHiddenFromAdminCommands, 0x08C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, MissonDataGroup, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, DialogueData, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, NetworkDataIdAsset, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, WashClothesData, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, BuryData, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, SquadEmblemData, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, VoiceSoundClass, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ItemTetrisMaterial, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, PhysicalSurfaceEffectsData, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ChestLockedIcon, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ChestUnlockedIcon, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, ChestLockingSound, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, UIData, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataSingleton, _noiseLevelValues, 0x0980);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataSingleton, 0x0998);
		}

		// class UDbConnection : public UObject
		TEST_METHOD(Class__ConZ__DbConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbConnection, UnknownData_QYBL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbConnection, 0x0050);
		}

		// class UDbStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__DbStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbStatics, 0x0028);
		}

		// class UDeadlyNightshadePoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__DeadlyNightshadePoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadlyNightshadePoisoning, UnknownData_1NPO, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeadlyNightshadePoisoning, 0x01C0);
		}

		// class UDeathmatchParticipantStats : public UGameEventParticipantStats
		TEST_METHOD(Class__ConZ__DeathmatchParticipantStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathmatchParticipantStats, LongestHeadshot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathmatchParticipantStats, MeleeKills, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathmatchParticipantStats, LongestLife, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathmatchParticipantStats, UnknownData_FUGW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathmatchParticipantStats, 0x0058);
		}

		// class ADeathmatchGameEvent : public AGameEventBase
		TEST_METHOD(Class__ConZ__DeathmatchGameEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchGameEvent, _deathmatchParameters, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchGameEvent, UnknownData_8IBJ, 0x058C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADeathmatchGameEvent, 0x0598);
		}

		// class ADeathmatchLocationMarker : public AGameEventLocationMarker
		TEST_METHOD(Class__ConZ__DeathmatchLocationMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchLocationMarker, DeathmatchParameters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchLocationMarker, FocusOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchLocationMarker, MinimalRadius, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeathmatchLocationMarker, UnknownData_LDEF, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADeathmatchLocationMarker, 0x0440);
		}

		// class UDecayable : public UInterface
		TEST_METHOD(Class__ConZ__Decayable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecayable, 0x0028);
		}

		// class UDedicatedServerRequest : public UObject
		TEST_METHOD(Class__ConZ__DedicatedServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerRequest, UnknownData_JEIO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServerRequest, 0x00E8);
		}

		// class UDedicatedServerResponse : public UObject
		TEST_METHOD(Class__ConZ__DedicatedServerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerResponse, UnknownData_XESX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerResponse, _dbConnection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerResponse, UnknownData_5315, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServerResponse, 0x00D0);
		}

		// class ADeer2 : public AComplexAnimal2
		TEST_METHOD(Class__ConZ__Deer2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, HartScaleVariance, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, HindBaseScale, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, HindScaleVariance, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, bMale, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, UnknownData_HU33, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, SkeletalMeshes, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, AntlerMeshes, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, Antlers, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, _hartHind, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADeer2, UnknownData_MFI2, 0x0A9C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADeer2, 0x0AA0);
		}

		// class UDefusingCuttingToolItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__DefusingCuttingToolItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefusingCuttingToolItemTag, SkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefusingCuttingToolItemTag, Montage, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefusingCuttingToolItemTag, 0x0040);
		}

		// class UDehydrationSickness : public USickness
		TEST_METHOD(Class__ConZ__DehydrationSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDehydrationSickness, UnknownData_E4CQ, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDehydrationSickness, 0x01B8);
		}

		// class UDexteritySkill : public USkill
		TEST_METHOD(Class__ConZ__DexteritySkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDexteritySkill, 0x00A0);
		}

		// class UDemolitionSkill : public UDexteritySkill
		TEST_METHOD(Class__ConZ__DemolitionSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, NoSkillParameters, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, BasicSkillParameters, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, MediumSkillParameters, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, AdvancedSkillParameters, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, AboveAdvancedSkillParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemolitionSkill, UnknownData_STAE, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemolitionSkill, 0x0180);
		}

		// class UDerivedWidgetsData : public UDataAsset
		TEST_METHOD(Class__ConZ__DerivedWidgetsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingPanel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingInfo, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingSectionContainer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftableItem, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingIngredient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingPossibleItem, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, StripedFiller, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, AvailableItem, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, WorldCraftingMarker, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, LoadingScreen, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InteractionWidgetClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InteractionGroupWidgetClass, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InteractionContainerWidgetClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ItemWidgetClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventoryWidgetClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventorySlotWidgetClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, WarningWidgetClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, HudWidgetClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, LoadingWidgetClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, LoadingIconWidgetClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, SpawnScreenWidgetClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, WaypointScreenWidgetClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, HoverPanelWidgetClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ActionProgressWidgetClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ItemSelectionWidgetClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ExamineWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, HandsInventoryWidgetClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, GenericItemInventoryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventoryContainersWidgetClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CombinedInventoryWidgetClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, TeamInvitationWidgetClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingInfoWidgetClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingComponentWidgetClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CraftingRecipeWidgetClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, EmptySlotWidgetClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, TeamInfoWidgetClass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, TeammateNameWidgetClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, PreviousNextSwitchWidgetClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, VicinityItemContainerWidgetClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, QuickAccessItemWidget, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ChangeTextWidgetClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ItemStatusWidgetClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, HealthWidgetClass, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, GameEventPanelWidgetClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, GameEventCardWidgetClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, GameEventScoreboardWidgetClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, GameEventMiniScoreboardWidgetClass, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, TournamentScoreboardWidgetClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CircularMenuWidgetClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, CircularMenuSegmentWidgetClass, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, LockpickingWidgetClass, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, DoorUpgradeWidgetClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, UpgradeWidgetClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventoryContainerWidget2Test, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventoryItemWidget2Test, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ItemInventoryWidget2, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, InventoryPanelSideLayerWidget, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, Widgets, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ObjectivesWidgetClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, MissionPromptClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, MissionResultClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, MissionItemClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ObjectiveItemClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, MissionRewardClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, RewardItemWidgetClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, StatisticsListRow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, ItemTooltipPanels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, MalfunctionsContainerClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, WeaponAmmoCountContainerClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDerivedWidgetsData, PlaceableElementWidgetClass, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDerivedWidgetsData, 0x02B0);
		}

		// class UDetectableTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__DetectableTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetectableTag, 0x0030);
		}

		// class UDialogueContainerWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__DialogueContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueContainerWidget, _subtitleWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueContainerWidget, _avatarImageOverlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueContainerWidget, _actionText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueContainerWidget, UnknownData_0NJ7, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueContainerWidget, 0x0280);
		}

		// class UDialogueData : public UDataAsset
		TEST_METHOD(Class__ConZ__DialogueData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueData, Dialogs, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueData, 0x0080);
		}

		// class UDiarrheaSickness : public USickness
		TEST_METHOD(Class__ConZ__DiarrheaSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiarrheaSickness, UnknownData_VB4N, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiarrheaSickness, 0x01C8);
		}

		// class UDigestionItem : public UObject
		TEST_METHOD(Class__ConZ__DigestionItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDigestionItem, UnknownData_5LNW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDigestionItem, 0x0190);
		}

		// class ADistantLevel : public AActor
		TEST_METHOD(Class__ConZ__DistantLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _previewMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _streamingLevelName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _meshStreamingBehavior, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, UnknownData_6PK7, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _meshBounds, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _collisionMesh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevel, _meshLODs, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADistantLevel, 0x0290);
		}

		// class ADistantLevelManager : public AActor
		TEST_METHOD(Class__ConZ__DistantLevelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _rootComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _minCameraLocationChangeToUpdateDistantLevels, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _distantMeshPreloadDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _maxNumSimultaneouslyStreamedDistantMeshLODs, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _distantCollisionMeshUnloadDistance, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _maxNumSimultaneouslyStreamedDistantCollisionMeshes, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, UnknownData_9NIK, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, _distantLevelDescriptions, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADistantLevelManager, UnknownData_ELAF, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADistantLevelManager, 0x02C0);
		}

		// class ADogTagItem : public AItem
		TEST_METHOD(Class__ConZ__DogTagItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADogTagItem, _userProfileName, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADogTagItem, 0x0768);
		}

		// class UPriceCategory : public UDataAsset
		TEST_METHOD(Class__ConZ__PriceCategory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPriceCategory, Price, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPriceCategory, UnknownData_I21P, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPriceCategory, 0x0038);
		}

		// class ADoor : public AActor
		TEST_METHOD(Class__ConZ__Door)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_PKDW, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, ControlName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, Mesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, OnOpened, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_UZA4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _rootComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_I1OA, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _maxNumberOfLocks, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _maxNumberOfZappers, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, CanOpenOnBothSides, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_E9D5, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _openingDuration, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _canOpen, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_FX7V, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _openingSoundCue, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _openedSoundCue, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _closingSoundCue, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _closedSoundCue, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _noiseLoudness, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _isJammed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_477F, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _jammedOpenPercent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_7UEY, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _doorUnlockData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_8F9V, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _stateFlags, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_PZ4C, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _canEverBeOpened, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _canEverBeClosed, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_JPXO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _priceCategory, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _upgradeItemsClasses, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _lockData, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _originalUpgradeItemsClasses, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _originalLockData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_KKQ5, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _owningUserProfileId, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_N8ZA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _upgradeWidget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_EAWZ, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _doorRepData, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_ASKU, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, _disableSerialization, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoor, UnknownData_CYRR, 0x03D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoor, 0x03E8);
		}

		// class UDoorLockingRegistry : public UActorComponent
		TEST_METHOD(Class__ConZ__DoorLockingRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorLockingRegistry, _doorUnlockDataByType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorLockingRegistry, _countNormalizationThreshold, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorLockingRegistry, UnknownData_4O3B, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorLockingRegistry, 0x0108);
		}

		// class UDoorUnlockData : public UObject
		TEST_METHOD(Class__ConZ__DoorUnlockData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorUnlockData, Type, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorUnlockData, UnknownData_ADF1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorUnlockData, Description, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorUnlockData, 0x0040);
		}

		// class ADoorUnlockItem : public AItem
		TEST_METHOD(Class__ConZ__DoorUnlockItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorUnlockItem, _expirationTimeSeconds, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorUnlockItem, _unlockDataType, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorUnlockItem, UnknownData_LM9M, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorUnlockItem, _doorUnlockData, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorUnlockItem, _itemCreatedTimestamp, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoorUnlockItem, 0x0778);
		}

		// class UUpgradeWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__UpgradeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _upgradeClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _itemIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _backgroundImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _priceText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _regularColour, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _unavailableColour, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeWidget, _availableColour, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpgradeWidget, 0x02C8);
		}

		// class UUpgradeSlotWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__UpgradeSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _buyableUpgradesBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _itemIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _gridSymbol, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _backgroundImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _defaultImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _regularColour, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _dropUnavailableColour, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _dropAvailableColour, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _slotType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, UnknownData_I1DS, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, _buyableUpgrades, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeSlotWidget, UnknownData_MRMC, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpgradeSlotWidget, 0x02F8);
		}

		// class UDoorUpgradeWidget : public UWaypointWidget
		TEST_METHOD(Class__ConZ__DoorUpgradeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorUpgradeWidget, _door, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorUpgradeWidget, UnknownData_7Z9U, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorUpgradeWidget, 0x0338);
		}

		// class ADoubleDoor : public ADoor
		TEST_METHOD(Class__ConZ__DoubleDoor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleDoor, Mesh1, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleDoor, 0x03F0);
		}

		// class ADoubleRegularDoorStatic : public ADoubleDoor
		TEST_METHOD(Class__ConZ__DoubleRegularDoorStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorStatic, _openRotation0, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorStatic, _openRotation1, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorStatic, _closedRotation0, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorStatic, _closedRotation1, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleRegularDoorStatic, 0x0420);
		}

		// class ADoubleRegularDoorDestructible : public ADoubleDoor
		TEST_METHOD(Class__ConZ__DoubleRegularDoorDestructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorDestructible, _openRotation0, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorDestructible, _openRotation1, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorDestructible, _closedRotation0, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleRegularDoorDestructible, _closedRotation1, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleRegularDoorDestructible, 0x0420);
		}

		// class ADoubleSlidingDoorStatic : public ADoubleDoor
		TEST_METHOD(Class__ConZ__DoubleSlidingDoorStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorStatic, ClosedPositionComponent0, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorStatic, ClosedPositionComponent1, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorStatic, OpenPositionComponent0, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorStatic, OpenPositionComponent1, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleSlidingDoorStatic, 0x0410);
		}

		// class ADoubleSlidingDoorDestructible : public ADoubleDoor
		TEST_METHOD(Class__ConZ__DoubleSlidingDoorDestructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorDestructible, ClosedPositionComponent0, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorDestructible, ClosedPositionComponent1, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorDestructible, OpenPositionComponent0, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleSlidingDoorDestructible, OpenPositionComponent1, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleSlidingDoorDestructible, 0x0410);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class AFoodItem : public AItem
		TEST_METHOD(Class__ConZ__FoodItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Volume, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Energy, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Water, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, EatingTime, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, DigestionGroup, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_J5XT, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Fat, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SaturatedFat, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Sodium, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Carbs, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Fiber, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Sugar, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Proteins, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Alcohol, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_A, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B1, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B2, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B3, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B4, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B5, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B6, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B9, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_B12, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_C, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_D, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_E, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Vitamin_K, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Calcium, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Iron, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Magnesium, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Phosphorus, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Potassium, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Zinc, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Copper, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Manganese, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Selenium, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, Cookable, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_3PEJ, 0x07E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, CookingTime, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, MinCookingTemperature, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, MaxCookingTemperature, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, MinCookingSpeed, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, MaxCookingSpeed, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, ThermalConductivityFactor, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, QualitySensitivityFactor, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, FreezingTemperature, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, RoomTemperature, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, ShelfLife, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SpoilageRateCooked, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SpoilageRateFrozen, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, IsConsumable, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, CanCheckTaste, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_Y70S, 0x081A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SteamComponent, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SteamParticles, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SmokeComponent, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, SmokeParticles, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, ItemOpenedMesh, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, ItemEmptyMesh, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, StartEatingAudioEvent, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, StopEatingAudioEvent, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, StartCookingAudioEvent, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, StopCookingAudioEvent, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _caloriesBonus, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _catchSicknessModifier, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _itemOpened, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_Y6LS, 0x0879);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _temperature, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _environmentTemperature, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _isCooking, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_MAI1, 0x0885);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, _cookedAmount, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoodItem, UnknownData_D1J1, 0x088C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFoodItem, 0x0898);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class ADrinkItem : public AFoodItem
		TEST_METHOD(Class__ConZ__DrinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrinkItem, _gameResourceContainer, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrinkItem, UnknownData_0Q8W, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADrinkItem, 0x08A8);
		}

		// class UDrinkWaterAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__DrinkWaterAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrinkWaterAssetData, QuantityPerDrink, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrinkWaterAssetData, salinity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrinkWaterAssetData, StartDrinkingAudioEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrinkWaterAssetData, StopDrinkingAudioEvent, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrinkWaterAssetData, 0x0048);
		}

		// class UDrivingSkill : public UDexteritySkill
		TEST_METHOD(Class__ConZ__DrivingSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, NoSkillExperienceAwards, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, BasicSkillExperienceAwards, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, MediumSkillExperienceAwards, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, AdvancedSkillExperienceAwards, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, AboveAdvancedSkillExperienceAwards, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, NoSkillParameters, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, BasicSkillParameters, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, MediumSkillParameters, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, AdvancedSkillParameters, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrivingSkill, AboveAdvancedSkillParameters, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrivingSkill, 0x05C8);
		}

		// class ADrone : public AConZCharacter
		TEST_METHOD(Class__ConZ__Drone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_2S6M, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, SpeedSteps, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, MovementInertiaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, MovementInertiaAI, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, MovementRotationSpeedExpFactor, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, EngineParticlesChangeSpeedExpFactor, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, EngineVolumeFromSpeed, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, MovementBreathingInterval, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, MovementBreathingIntensity, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, ScanBeamOpeningSpeed, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, ScanBeamScanningSpeed, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, ScanFaceHalfHeight, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_TDKW, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, SelfDestructParticles, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, EngineAudioEvent, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, EngineStopAudioEvent, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, SelfDestructAudioEvent, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_B3LX, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _nightVisionMaterial, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _currentSpeedStep, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_GT9R, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _movementInertia, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_SK9D, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _cameraMesh, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_NQCR, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _health, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_28VC, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _silentMode, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_ZJZL, 0x0842);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _interactionDistance, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, _progressWidget, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrone, UnknownData_S2OJ, 0x08E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADrone, 0x08F0);
		}

		// class ADroneAIController : public AAIController
		TEST_METHOD(Class__ConZ__DroneAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, FollowingDuration, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, FollowingHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, FollowingDistance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, MinDistanceForFollowingAtHeight, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, ProximityAccelScale, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, ProximityZPriority, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, MinimumNavigationProximity, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, DroneCruisingHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroneAIController, UnknownData_MHDR, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroneAIController, 0x0680);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class ADroneCameraActor : public ACameraActor
		TEST_METHOD(Class__ConZ__DroneCameraActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroneCameraActor, 0x07A0);
		}

		// class UDroneSoundComponent : public UCharacterSoundComponent
		TEST_METHOD(Class__ConZ__DroneSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, IdleSound, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, IdleAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, AngrySound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, AngryAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, AttackSound, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, AttackAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, KillSound, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, KillAudioEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, MinSilenceTimeout, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneSoundComponent, MaxSilenceTimeout, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDroneSoundComponent, 0x0120);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UDroneTargetData : public UObject
		TEST_METHOD(Class__ConZ__DroneTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDroneTargetData, UnknownData_Q70X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDroneTargetData, 0x0030);
		}

		// class UDropdownMenuSelectionWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__DropdownMenuSelectionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, OnClicked, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, OnUpdated, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, Selected, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, UnknownData_HA6B, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, SelectionIndex, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, option, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, UnknownData_P20U, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuSelectionWidget, _dropdownMenu, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropdownMenuSelectionWidget, 0x0298);
		}

		// class UDropdownMenuWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__DropdownMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuWidget, OnUpdate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuWidget, UnknownData_PHON, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropdownMenuWidget, _panelSlot, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropdownMenuWidget, 0x0280);
		}

		// class ADropZoneDroppable : public AActor
		TEST_METHOD(Class__ConZ__DropZoneDroppable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, LandSound, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _gameEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, UnknownData_TJK7, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _flareParticles0, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _flareParticles1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _flareParticles2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, UnknownData_46R5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _endLocation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _fallingSpeed, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _flareParticlesEnabled, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, UnknownData_INDB, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, _flareParticlesTeam, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneDroppable, UnknownData_G9JC, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneDroppable, 0x0280);
		}

		// class ADropZoneCargo : public ADropZoneDroppable
		TEST_METHOD(Class__ConZ__DropZoneCargo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneCargo, UnknownData_1280, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneCargo, Slot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneCargo, 0x0290);
		}

		// class ADropZoneCrate : public ADropZoneDroppable
		TEST_METHOD(Class__ConZ__DropZoneCrate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneCrate, KeyClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneCrate, _hasKey, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneCrate, UnknownData_KUOB, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneCrate, 0x0290);
		}

		// class ADropZoneEquipmentTable : public AActor
		TEST_METHOD(Class__ConZ__DropZoneEquipmentTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneEquipmentTable, _trackedItems, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneEquipmentTable, UnknownData_WX0U, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneEquipmentTable, 0x0238);
		}

		// class UDropZoneParticipantStats : public UGameEventParticipantStats
		TEST_METHOD(Class__ConZ__DropZoneParticipantStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropZoneParticipantStats, Activations, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropZoneParticipantStats, UnknownData_8EMY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropZoneParticipantStats, 0x0050);
		}

		// class ADropZoneGameEvent : public AGameEventBase
		TEST_METHOD(Class__ConZ__DropZoneGameEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, TableAClass, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, TableBClass, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, CrateClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, CargoClass, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, IntroAnnouncement, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, LocateTheKeyAnnouncement, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, BlueTeamFoundKeyAnnouncement, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, BlueTeamUnlockedAnnouncement, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, BlueTeamStolenAnnouncement, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, RedTeamFoundKeyAnnouncement, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, RedTeamUnlockedAnnouncement, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, RedTeamStolenAnnouncement, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, CargoDropAnnouncement, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, CargoLandedAnnouncement, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, KeyIcon, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, CargoIcon, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, FriendlyColor, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, EnemyColor, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _dropZoneParameters, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, UnknownData_JTHL, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _phase, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, UnknownData_KKAA, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _capturingTeam, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _phaseTimeLeft, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _captureProgress, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, UnknownData_YIKS, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _barrierA, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _barrierB, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _tableA, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _tableB, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _crateA, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _crateB, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _key, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _keyCarrier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _topmostKeyOwner, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _cargo, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, _slot, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneGameEvent, UnknownData_8GCU, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneGameEvent, 0x06D0);
		}

		// class ADropZoneKey : public AItem
		TEST_METHOD(Class__ConZ__DropZoneKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneKey, SphereComponent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneKey, _gameEvent, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneKey, 0x0768);
		}

		// class ADropZoneLocationMarker : public AGameEventLocationMarker
		TEST_METHOD(Class__ConZ__DropZoneLocationMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, DropZoneParameters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, SpawnOffsetA, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, SpawnOffsetB, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, SpawnRadiusA, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, SpawnRadiusB, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, UnknownData_G4QI, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CargoDropOffset, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CrateDropOffsetA, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CrateDropOffsetB, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CrateAPreviewMesh, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CrateBPreviewMesh, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, CargoPreviewMesh, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneLocationMarker, UnknownData_XHCI, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneLocationMarker, 0x0520);
		}

		// class ADropZoneSlot : public AActor
		TEST_METHOD(Class__ConZ__DropZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, UnknownData_SXP9, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, Mesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, ActivationDuration, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, UnknownData_K1PK, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, UnlockedMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, ActivateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, _gameEvent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADropZoneSlot, UnknownData_TJ1W, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADropZoneSlot, 0x0260);
		}

		// class UDrunkennessSickness : public USickness
		TEST_METHOD(Class__ConZ__DrunkennessSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrunkennessSickness, UnknownData_JRTX, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrunkennessSickness, 0x01C0);
		}

		// class UDummyCollisionCapsule : public UCapsuleComponent
		TEST_METHOD(Class__ConZ__DummyCollisionCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyCollisionCapsule, _attachment, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyCollisionCapsule, UnknownData_627Q, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDummyCollisionCapsule, 0x0470);
		}

		// class UDysenteryDisease : public UDisease
		TEST_METHOD(Class__ConZ__DysenteryDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDysenteryDisease, UnknownData_8ZY2, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDysenteryDisease, 0x01B8);
		}

		// class AEffectOverTimeDealer : public AActor
		TEST_METHOD(Class__ConZ__EffectOverTimeDealer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectOverTimeDealer, _updateGroups, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectOverTimeDealer, _actorLimitPerTick, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectOverTimeDealer, UnknownData_1YJQ, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectOverTimeDealer, _timeDilation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectOverTimeDealer, UnknownData_WJ53, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEffectOverTimeDealer, 0x0270);
		}

		// class UElectricDoorAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__ElectricDoorAssetData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UElectricDoorAssetData, 0x0028);
		}

		// class UElectricianGlovesTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__ElectricianGlovesTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UElectricianGlovesTag, PrisonerDamageModifier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElectricianGlovesTag, UnknownData_0HYS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UElectricianGlovesTag, 0x0038);
		}

		// class UEmblemData : public UDataAsset
		TEST_METHOD(Class__ConZ__EmblemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblemData, BackgroundTextures, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblemData, SymbolTextures, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblemData, ColorPalette, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmblemData, 0x0060);
		}

		// class UEnduranceSkill : public UConstitutionSkill
		TEST_METHOD(Class__ConZ__EnduranceSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceSkill, NoSkillParameters, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceSkill, BasicSkillParameters, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceSkill, MediumSkillParameters, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceSkill, AdvancedSkillParameters, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceSkill, UnknownData_5S54, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnduranceSkill, 0x00E0);
		}

		// class UEnergyDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__EnergyDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnergyDeficiency, 0x01C0);
		}

		// class UEngineeringSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__EngineeringSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, NoSkillExperienceAwards, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, BasicSkillExperienceAwards, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, MediumSkillExperienceAwards, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, AdvancedSkillExperienceAwards, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, AboveAdvancedSkillExperienceAwards, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, NoSkillParameters, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, BasicSkillParameters, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, MediumSkillParameters, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, AdvancedSkillParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineeringSkill, AboveAdvancedSkillParameters, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineeringSkill, 0x0190);
		}

		// class UEnvironmentDescriptionComponent : public UStaticMeshComponent
		TEST_METHOD(Class__ConZ__EnvironmentDescriptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvironmentDescriptionComponent, EnvironmentClass, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvironmentDescriptionComponent, IsUnderground, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvironmentDescriptionComponent, UnknownData_78E0, 0x04D2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvironmentDescriptionComponent, 0x04E0);
		}

		// class AObtainItemObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__ObtainItemObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AObtainItemObjective, _targetItems, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObtainItemObjective, _itemInHands, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObtainItemObjective, _itemInHolster, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObtainItemObjective, _itemInInventory, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::AObtainItemObjective, UnknownData_U1PE, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AObtainItemObjective, 0x0378);
		}

		// class AEquipItemObjective : public AObtainItemObjective
		TEST_METHOD(Class__ConZ__EquipItemObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipItemObjective, UnknownData_Y0EG, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEquipItemObjective, 0x0380);
		}

		// class AEquipmentItem : public AItem
		TEST_METHOD(Class__ConZ__EquipmentItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, MinRange, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, MaxRange, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, MinDamage, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, MaxDamage, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, AP, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentItem, UnknownData_6TQG, 0x076C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEquipmentItem, 0x0770);
		}

		// class UEventInsertCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__EventInsertCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventInsertCartridge, MontageEndSectionName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventInsertCartridge, UnknownData_R0X6, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventInsertCartridge, 0x00A0);
		}

		// class UEventInsertMagazine : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__EventInsertMagazine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventInsertMagazine, 0x0090);
		}

		// class UExamineAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__ExamineAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExamineAction, 0x00A8);
		}

		// class UExamineAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__ExamineAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UsePresetBasedSpawning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_ZODO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, ExamineData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, StartExamineAudioEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, StopExamineAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, NoiseLevel, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_ZSOW, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, quantity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, MinQuantity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, MaxQuantity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, Probability, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_2LXT, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, ItemSpawnTypes, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, Items, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, ItemGroups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, DataPerItemGroup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, ItemsOwner, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UseItemZone, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UseItemRarity, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_4RD2, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, InitialDamage, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, RandomizeDamage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, InitialUsage, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, RandomizeUsage, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, InitialDirtiness, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, RandomizeDirtiness, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_DPWE, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, PossibleSicknesses, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, CanStore, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, CanSave, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, HasCustomExpirationTime, 0x01EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_0M9U, 0x01EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, Title, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineAssetData, UnknownData_S8QH, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExamineAssetData, 0x0238);
		}

		// class UExamineObjectAction : public UExamineAction
		TEST_METHOD(Class__ConZ__ExamineObjectAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamineObjectAction, UnknownData_59U0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExamineObjectAction, 0x00C8);
		}

		// class UExaminePrisonerAction : public UExamineAction
		TEST_METHOD(Class__ConZ__ExaminePrisonerAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExaminePrisonerAction, UnknownData_VCTF, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExaminePrisonerAction, 0x00B0);
		}

		// class UExecuteInteractionAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__ExecuteInteractionAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecuteInteractionAction, UnknownData_KAIZ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecuteInteractionAction, 0x0140);
		}

		// class UExplosionDamageType : public UDamageType
		TEST_METHOD(Class__ConZ__ExplosionDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosionDamageType, 0x0040);
		}

		// class UFailurePenalty : public UObject
		TEST_METHOD(Class__ConZ__FailurePenalty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFailurePenalty, _shouldExecuteOnClients, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFailurePenalty, UnknownData_VEKJ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFailurePenalty, 0x0030);
		}

		// class UExplosionFailurePenalty : public UFailurePenalty
		TEST_METHOD(Class__ConZ__ExplosionFailurePenalty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _explosionBaseDamage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _minimumDamage, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _damageInnerRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _damageOuterRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _damageFalloff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, UnknownData_HNTQ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _explosionPS, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosionFailurePenalty, _explosionAudioEvent, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosionFailurePenalty, 0x0058);
		}

		// class UExplosiveProtectionItemComponent : public UItemComponent
		TEST_METHOD(Class__ConZ__ExplosiveProtectionItemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, UnknownData_Z0U6, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _minigameClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _minigameToolTag, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _lockData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionParticles, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionParticlesLocation, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, UnknownData_W3NC, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionAudioEvent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionBaseDamage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionMinimalDamage, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionDamagePositionOffset, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionDamageFalloff, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionInnerRadius, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionOuterRadius, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _hearingDamageRadius, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, UnknownData_UTJC, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _explosionCameraShakeClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, _isArmed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveProtectionItemComponent, UnknownData_PS6V, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosiveProtectionItemComponent, 0x01A0);
		}

		// class AExplosiveTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__ExplosiveTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, UnknownData_MMUC, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _trapForwardVector, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _triggerSound, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _detonationSound, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _detonationParticles, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _detonationParticlesTransform, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _hasPrimaryExplosion, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, UnknownData_Q4G1, 0x08F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryBaseDamage, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryMinimumDamage, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageInnerRadius, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageOuterRadius, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageMinAngleDeg, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageMaxAngleDeg, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageChanceMultiplier, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageMinChance, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageMaxChance, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageFalloff, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _primaryDamageAngleFalloff, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _hasSecondaryExplosion, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, UnknownData_5VYT, 0x0921);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _secondaryBaseDamage, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _secondaryMinimumDamage, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _secondaryDamageInnerRadius, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _secondaryDamageOuterRadius, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _secondaryDamageFalloff, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _instantlyDestroysStructures, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, UnknownData_90ES, 0x0939);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _structureDestructionRadius, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _minimalElementAreaCovered, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _structureDestructionMinAngleDeg, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _structureDestructionMaxAngleDeg, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _explosionDamagePositionOffset, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, _damageDescription, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExplosiveTrapItem, UnknownData_72MV, 0x0954);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExplosiveTrapItem, 0x0970);
		}

		// class UExteriorCharacterSpawnerComponent : public UCharacterSpawnerComponent
		TEST_METHOD(Class__ConZ__ExteriorCharacterSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExteriorCharacterSpawnerComponent, Range, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExteriorCharacterSpawnerComponent, UnknownData_X8CO, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExteriorCharacterSpawnerComponent, 0x0240);
		}

		// class UFatDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__FatDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFatDeficiency, 0x01C0);
		}

		// class UFiberDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__FiberDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFiberDeficiency, 0x01C0);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class UFillItemWithReplenishableResourceAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__FillItemWithReplenishableResourceAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFillItemWithReplenishableResourceAssetData, InteractionData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFillItemWithReplenishableResourceAssetData, 0x0078);
		}

		// class UFillWaterAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__FillWaterAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFillWaterAction, UnknownData_KLHP, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFillWaterAction, 0x00D0);
		}

		// class AFireItem : public AEquipmentItem
		TEST_METHOD(Class__ConZ__FireItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, FuelCapacity, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, FuelDuration, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, BurningSpeed, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, BurningSpeedRain, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, HeatSourceParameters, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, StartBurningAudioEvent, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, StopBurningAudioEvent, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, AudioComponent, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, FireComponent, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, TouchDamage, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, _isBurning, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, UnknownData_LB80, 0x07C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, _burningStage, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireItem, UnknownData_TX4P, 0x07D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFireItem, 0x07D8);
		}

		// class AFireplaceItem : public AFireItem
		TEST_METHOD(Class__ConZ__FireplaceItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, CookingComponent, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, FireplaceMesh, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, MaterialSwitchIndex, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, UnknownData_5SN7, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, LitMaterial, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, UnlitMaterial, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, SphereCollider, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, IntensityIncreasePeriod, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireplaceItem, IntensityIncreaseDuration, 0x0814);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFireplaceItem, 0x0818);
		}

		// class AFireworksItem : public AItem
		TEST_METHOD(Class__ConZ__FireworksItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, _isFiring, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, UnknownData_SUFB, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, _totalShells, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, UnknownData_ZCZW, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, _secondsBetweenLaunches, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksItem, _noiseLoudnessOnLaunch, 0x0774);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFireworksItem, 0x0778);
		}

		// class AFireworksTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__FireworksTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, _triggerSound, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, _numShells, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, _shellLaunchPeriod, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, _detonationDelay, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, UnknownData_FAGE, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, _isFiring, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFireworksTrapItem, UnknownData_HCNQ, 0x08BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFireworksTrapItem, 0x08D0);
		}

		// class AFish : public AAnimal2
		TEST_METHOD(Class__ConZ__Fish)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFish, UnknownData_XT35, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFish, UnknownData_M5WI, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFish, 0x08E0);
		}

		// class AFishAIController : public AAIController
		TEST_METHOD(Class__ConZ__FishAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, turnSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, FleeImpulse, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, StuckCheckTime, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, FleeTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, FleeTurnSpeed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, FleeDistance, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, FleeRotationRate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishAIController, UnknownData_WHLN, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFishAIController, 0x0388);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_TW37, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class AFishSpawner : public AActor
		TEST_METHOD(Class__ConZ__FishSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, StartSpawningDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, MinSpawnAnwayDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, MaxFishesPerVolume, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, MinFishesPerVolume, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, BulkSpawnAtOnceMax, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, WaterVolumeChecksPerFrame, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, UnknownData_RNMG, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, Sprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, SpawnInfo, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, UpVertialExtent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, DownVertialExtent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFishSpawner, UnknownData_LPHA, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFishSpawner, 0x0380);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_BNJS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_ODBV, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_5TET, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_CB9R, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_Y91S, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// class AFlagAreaVisualizer : public AActor
		TEST_METHOD(Class__ConZ__FlagAreaVisualizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlagAreaVisualizer, _staticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlagAreaVisualizer, UnknownData_RVCL, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlagAreaVisualizer, 0x0230);
		}

		// class AFlareItem : public AItem
		TEST_METHOD(Class__ConZ__FlareItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, UnknownData_DF5S, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _repState, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, UnknownData_P3R6, 0x075A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _effectsSocket, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, UnknownData_MC9X, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareIgnitedAudioEvent, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareExtinguishedAudioEvent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _particlesLoopStartBlend, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _particlesLoopDuration, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareIgnitedParticle, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareLoopParticle, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareExtinguishedParticle, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _autoDestroyTimeOnUse, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareIgnitedParticlesDuration, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _flareExtinguishedParticleDuration, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _noiseLoudnessWhileIgnited, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _noiseLoudnessUpdateFrequencyPerHour, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _burningNoiseTag, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, UnknownData_JOE5, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _pointLightColor, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, _pointLightFunctionMaterial, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareItem, UnknownData_1NJR, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlareItem, 0x0800);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class AFlareTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__FlareTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _triggerSound, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _detonationDelay, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, UnknownData_BRHF, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _projectileClass, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _projectileLocation, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _projectileRotation, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _projectileMuzzleVelocity, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, _projectileLifetime, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlareTrapItem, UnknownData_2VBC, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlareTrapItem, 0x08E0);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_2LDZ, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_9MJ2, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class AGrenadeItem : public AItem
		TEST_METHOD(Class__ConZ__GrenadeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, ExplosionAudioEvent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionDamage, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionOuterRadius, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionInnerRadius, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionFalloff, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionDelay, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _damageDescription, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionImpulse_OBSOLETE, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, UnknownData_WH7X, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionParticle, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _explosionCameraShakeClass, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _hearingDamageRadius, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, UnknownData_MBA4, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _skeletalMesh, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _grenadeLongThrowMontage, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _grenadeLongThrowLoopMontage, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _grenadeShortThrowMontage, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _grenadeThrowbackMontage, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _leverReleasedSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, _leverReleasedPS, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeItem, UnknownData_UL59, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrenadeItem, 0x07E0);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_78L9, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_OAEV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_CGW4, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_4FKR, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_WMJB, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class AFlashbangItem : public AGrenadeItem
		TEST_METHOD(Class__ConZ__FlashbangItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItem, FlashbangEffectsClass, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItem, UnknownData_GZ5P, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashbangItem, 0x07F0);
		}

		// class AFlashbangItemEffects : public AActor
		TEST_METHOD(Class__ConZ__FlashbangItemEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, ExplosionParticles, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, ExplosionCameraShakeClass, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, ExplosionAudioEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, StartStunnedSoundEffectsAudioEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, StopStunnedSoundEffectsAudioEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, MinFlashbangDurationToStartStunnedSoundEffects, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, FullFlashDuration, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, FlashFadeOutDuration, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, FlashRadius, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, FlashLineTraceDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashbangItemEffects, UnknownData_WAQL, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashbangItemEffects, 0x0270);
		}

		// class AFogSphere : public AActor
		TEST_METHOD(Class__ConZ__FogSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSphere, _shouldExistOnDedicatedServer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSphere, UnknownData_HTKR, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSphere, _densityVersusTimeOfDay, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFogSphere, 0x0230);
		}

		// class UFoliageAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__FoliageAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageAssetData, GeneralData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageAssetData, EffectsData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageAssetData, AIPerceptionData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageAssetData, UnknownData_8JVI, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageAssetData, 0x0058);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class UFoliageInstancedBush : public UFoliageInstancedStaticMeshComponent
		TEST_METHOD(Class__ConZ__FoliageInstancedBush)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedBush, 0x06A0);
		}

		// class UFoliageInstancedGrass : public UFoliageInstancedStaticMeshComponent
		TEST_METHOD(Class__ConZ__FoliageInstancedGrass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedGrass, 0x06A0);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class UFoliageInstancedTree : public UFoliageInstancedStaticMeshComponent
		TEST_METHOD(Class__ConZ__FoliageInstancedTree)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedTree, 0x06A0);
		}

		// class AFollowsMouseActor : public AActor
		TEST_METHOD(Class__ConZ__FollowsMouseActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowsMouseActor, DistanceFromCamera, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowsMouseActor, UnknownData_9MZA, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFollowsMouseActor, 0x0228);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class UForceUnlockItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__ForceUnlockItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceUnlockItemTag, 0x0030);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_V10C, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_AMWS, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class UFortificationComponent : public UStaticMeshComponent
		TEST_METHOD(Class__ConZ__FortificationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, UnknownData_LGL7, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, _destructionParticles, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, _destructionAudio, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, _parentBuilding, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, _markerIndex, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, _health, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortificationComponent, UnknownData_6RMT, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortificationComponent, 0x0500);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UFoxglovePoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__FoxglovePoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoxglovePoisoning, UnknownData_IYER, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoxglovePoisoning, 0x01C0);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_XRL7, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// class AFragGrenadeItem : public AGrenadeItem
		TEST_METHOD(Class__ConZ__FragGrenadeItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFragGrenadeItem, 0x07E0);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_HEFB, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// class AFuelCanister : public AEquipmentItem
		TEST_METHOD(Class__ConZ__FuelCanister)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFuelCanister, 0x0770);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class AGameEventBorder : public AActor
		TEST_METHOD(Class__ConZ__GameEventBorder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, Material, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, SoundSpline, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, AudioEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _state, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, UnknownData_I9YS, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _desiredRadius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, UnknownData_9F1G, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _desiredOffset, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, UnknownData_0HYX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _desiredHeat, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, UnknownData_ZPC8, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _radiusChangeSpeed, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _offsetChangeSpeed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _heatChangeSpeed, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _collisionEnabled, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, _blockPawns, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventBorder, UnknownData_E0YW, 0x027A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEventBorder, 0x0290);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_7OCR, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0480);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_L8PV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZI43, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_C2FV, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZJOW, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_KCUC, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class UGameEventCardWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventCardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventCardWidget, _gameEvent, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventCardWidget, 0x0280);
		}

		// class UGameEventInfoWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventInfoWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventInfoWidget, 0x0278);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_UFFU, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class UGameEventLeaderboardWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventLeaderboardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventLeaderboardWidget, TopPlayersStats, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventLeaderboardWidget, PlayerRankingStats, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventLeaderboardWidget, playerRank, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventLeaderboardWidget, UnknownData_VCMC, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventLeaderboardWidget, 0x02A8);
		}

		// class ULODSyncComponent : public UActorComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// class UGameEventLoadoutMenuWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventLoadoutMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventLoadoutMenuWidget, UnknownData_N11S, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventLoadoutMenuWidget, 0x0280);
		}

		// class ULODSyncInterface : public UInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// class UGameEventPanelWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventPanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventPanelWidget, _GEManager, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventPanelWidget, 0x0280);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_5ZXZ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9JUI, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_J1ZX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MFN1, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_S2Q5, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MZI7, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0T14, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3A7G, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_24Z9, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VE32, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_H7M7, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_T0KE, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Y3U1, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_YKIG, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QZ9Q, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_SZOJ, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3T4R, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PNGN, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8YXP, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_NKN9, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// class UGameEventParticipantInfoCardWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventParticipantInfoCardWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventParticipantInfoCardWidget, 0x0278);
		}

		// class UGameEventParticipantStatsWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventParticipantStatsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, _gameEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, _index, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, UnknownData_TM2J, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, _scoreboard, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, _teamIndex, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventParticipantStatsWidget, UnknownData_BQIG, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventParticipantStatsWidget, 0x0298);
		}

		// class UGameEventRoundInfoWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventRoundInfoWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventRoundInfoWidget, 0x0278);
		}

		// class UGameEventScoreboardWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventScoreboardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, RoundInfoWidgetClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, TeamHeaderWidgetClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, StatWidgetClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, StatWidgets, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, _gameEvent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, _selected, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventScoreboardWidget, UnknownData_TDCP, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventScoreboardWidget, 0x02B0);
		}

		// class UGameEventTeamHeaderWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__GameEventTeamHeaderWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventTeamHeaderWidget, 0x0278);
		}

		// class AGameEventTransport : public AActor
		TEST_METHOD(Class__ConZ__GameEventTransport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, Sphere, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, PodMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, TargetMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, TravelSpeed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, TravelHeight, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, HoverHeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, LargerRadius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, SmallerRadius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, _state, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, UnknownData_UVSI, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, _lastPosition, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, _targetPosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, _blend, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventTransport, UnknownData_HD83, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEventTransport, 0x02A8);
		}

		// class UGameResourceContainer : public UInterface
		TEST_METHOD(Class__ConZ__GameResourceContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceContainer, 0x0028);
		}

		// class UGameResourceContainerProxyForReplenishableResourceRegistry : public UActorComponent
		TEST_METHOD(Class__ConZ__GameResourceContainerProxyForReplenishableResourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceContainerProxyForReplenishableResourceRegistry, UnknownData_L1OD, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceContainerProxyForReplenishableResourceRegistry, 0x0100);
		}

		// class UGameResourceContainerProxyForReplenishableResource : public UObject
		TEST_METHOD(Class__ConZ__GameResourceContainerProxyForReplenishableResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceContainerProxyForReplenishableResource, UnknownData_HA7D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceContainerProxyForReplenishableResource, 0x00B8);
		}

		// class UGameResourceItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__GameResourceItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceItemTag, ResourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceItemTag, SocketTypes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceItemTag, ResourceAmountPerUse, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceItemTag, UnknownData_09O8, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceItemTag, RequiredItemTagsForFueling, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceItemTag, 0x0070);
		}

		// class UGameResourceType : public UObject
		TEST_METHOD(Class__ConZ__GameResourceType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType, ResourceName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType, ConfigSectionName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType, IsDrinkable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType, CanWashWith, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType, UnknownData_DPON, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType, 0x0050);
		}

		// class UGameResourceType_Alcohol : public UGameResourceType
		TEST_METHOD(Class__ConZ__GameResourceType_Alcohol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType_Alcohol, 0x0050);
		}

		// class UGameResourceType_Liquid : public UGameResourceType
		TEST_METHOD(Class__ConZ__GameResourceType_Liquid)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType_Liquid, 0x0050);
		}

		// class UGameResourceType_Water : public UGameResourceType_Liquid
		TEST_METHOD(Class__ConZ__GameResourceType_Water)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType_Water, salinity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResourceType_Water, UnknownData_PO4J, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType_Water, 0x0058);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0450);
		}

		// class UGameResourceType_SoftDrink : public UGameResourceType_Water
		TEST_METHOD(Class__ConZ__GameResourceType_SoftDrink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResourceType_SoftDrink, 0x0058);
		}

		// class UGasMaskTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__GasMaskTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGasMaskTag, 0x0030);
		}

		// class UGasPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__GasPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGasPoisoning, UnknownData_JW34, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGasPoisoning, 0x01B8);
		}

		// class UGhostTrailComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__GhostTrailComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostTrailComponent, 0x00B0);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_562J, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class AGib : public AActor
		TEST_METHOD(Class__ConZ__Gib)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGib, MeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGib, ShrinkFactor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGib, ImpulseMultiplier, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGib, 0x0230);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_JWGA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class AGlobalAnimalSpawner : public AActor
		TEST_METHOD(Class__ConZ__GlobalAnimalSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAnimalSpawner, SpawnInfo, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAnimalSpawner, AllowedSurfaces, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAnimalSpawner, AnimalSpawners, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAnimalSpawner, Sprite, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAnimalSpawner, UnknownData_7BMZ, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGlobalAnimalSpawner, 0x02F0);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_QGRS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_WTT5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class AGlobalBirdSpawner2 : public AActor
		TEST_METHOD(Class__ConZ__GlobalBirdSpawner2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MaxSpawnInstances, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MaxCoastalBirdSpawnPerPlayer, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MaxContinentalBirdSpawnPerPlayer, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, UnknownData_VPXI, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, CoastalBirds, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, ContinentalBirds, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, FlyingBirdSpawnAwayDistanceMin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, FlyingBirdSpawnAwayDistanceMax, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, GroundBirdSpawnAwayDistanceMin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, GroundBirdSpawnAwayDistanceMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MinSpawnInfrontDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, BirdSpawnerMask, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MapTopLeft, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, MapBottomRight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, BulkSpawn, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, AllowedSurfaces, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, Sprite, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, UnknownData_DPXA, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, _birds, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalBirdSpawner2, UnknownData_FXAX, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGlobalBirdSpawner2, 0x02F8);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_ZBEU, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// class UGlobalItemSpawner : public UObject
		TEST_METHOD(Class__ConZ__GlobalItemSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, UnknownData_QM2P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, SpawnProbabilityMultiplier, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, RespawnInterval, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, RespawnDistanceSquared, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, RespawnBatch, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, RarityValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, UnknownData_IYUZ, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, _itemClasses, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, UnknownData_WOPG, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, _spawnerVolumes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalItemSpawner, UnknownData_2XCQ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalItemSpawner, 0x0168);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_FNKS, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// class UGlobalUIData : public UObject
		TEST_METHOD(Class__ConZ__GlobalUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalUIData, DefaultModularTooltipClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalUIData, ModularTooltipElementClassMapping, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalUIData, 0x0080);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_SCDA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_62ZL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UGloveStatsTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__GloveStatsTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGloveStatsTag, ElectricalDamageModifier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGloveStatsTag, LockpkickingPressureModifier, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGloveStatsTag, 0x0038);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_XG2A, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UGraph2DWidget : public UWidget
		TEST_METHOD(Class__ConZ__Graph2DWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, GraphLineThickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, GraphSize, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, InitializeGraphWithDefaultValue, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, UnknownData_5UO2, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, SampleMax, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, DefaultSampleValue, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, UseLineAntialiasing, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraph2DWidget, UnknownData_65Z9, 0x01D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraph2DWidget, 0x01F0);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_X22F, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_L9H5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UGrenadeAnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__GrenadeAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, UnknownData_YG02, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, _owningPrisonerStance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, _isOwningPrisonerInFirstPersonView, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, _isPinPulled, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, UnknownData_UEKR, 0x02C3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrenadeAnimInstance, 0x02D0);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_TO3X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UHandgunSkill : public URangedWeaponsSkill
		TEST_METHOD(Class__ConZ__HandgunSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandgunSkill, 0x00E0);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_CL56, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class AHandheldLightItem : public AItem
		TEST_METHOD(Class__ConZ__HandheldLightItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, _currentLightAngleIndex, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, UnknownData_O5L2, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, _possibleLightAngles, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, _resourceContainerComponent, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, _currentLightIntensity, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, _canChangeLightIntensity, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldLightItem, UnknownData_R1GJ, 0x077D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHandheldLightItem, 0x0780);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_4KIU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_NE7K, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_GNDQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_75NJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UHandheldLightItemAnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__HandheldLightItemAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandheldLightItemAnimInstance, UnknownData_P41T, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandheldLightItemAnimInstance, 0x02C0);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_NQ53, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class AHandheldSkeletalMeshLightItem : public AHandheldLightItem
		TEST_METHOD(Class__ConZ__HandheldSkeletalMeshLightItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandheldSkeletalMeshLightItem, SkeletalMesh, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHandheldSkeletalMeshLightItem, 0x0788);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_0NTG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UHandPanel3 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__HandPanel3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandPanel3, _handInventory, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandPanel3, _holsterInventory0, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandPanel3, _holsterInventory1, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandPanel3, 0x0290);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UInventoryContainerWidget2 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventoryContainerWidget2)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainerWidget2, 0x0278);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UHandsHolstersWidget2 : public UInventoryContainerWidget2
		TEST_METHOD(Class__ConZ__HandsHolstersWidget2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _container, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _handsHolstersContainer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _nameText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _itemSlotWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _itemWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _inventoryGrid, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _attachmentSlotWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _slotsWidgets, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _attachmentWidgets, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _type, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, UnknownData_P8YO, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsHolstersWidget2, _item, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandsHolstersWidget2, 0x02E8);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_GO9D, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_JQ7U, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_73QM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_7HWS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_5S88, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_517Y, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UHasCustomRadialDamageHandler : public UInterface
		TEST_METHOD(Class__ConZ__HasCustomRadialDamageHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasCustomRadialDamageHandler, 0x0028);
		}

		// class UHasLadderMarkersInterface : public UInterface
		TEST_METHOD(Class__ConZ__HasLadderMarkersInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasLadderMarkersInterface, 0x0028);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_BTJV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UHasOwningUser : public UInterface
		TEST_METHOD(Class__ConZ__HasOwningUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasOwningUser, 0x0028);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_QBFR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_1CO9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_F3B0, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UHasProcessViewRotation : public UInterface
		TEST_METHOD(Class__ConZ__HasProcessViewRotation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasProcessViewRotation, 0x0028);
		}

		// class UHasWindowMarkersInterface : public UInterface
		TEST_METHOD(Class__ConZ__HasWindowMarkersInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasWindowMarkersInterface, 0x0028);
		}

		// class UHealingItem : public UObject
		TEST_METHOD(Class__ConZ__HealingItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealingItem, UnknownData_YM5U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealingItem, 0x0080);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UHealthWidget : public UWaypointWidget
		TEST_METHOD(Class__ConZ__HealthWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthWidget, 0x0310);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_PSTE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UHeartAttack : public UDisease
		TEST_METHOD(Class__ConZ__HeartAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartAttack, UnknownData_8IL7, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeartAttack, 0x01F8);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UHeartbeatWidget : public UWidget
		TEST_METHOD(Class__ConZ__HeartbeatWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, Thickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, Periods, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, UnknownData_Q2G5, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeartbeatWidget, _prisonerLifeComponent, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeartbeatWidget, 0x01E0);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_OALF, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_3M8I, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// class AHeatSourceManager : public AActor
		TEST_METHOD(Class__ConZ__HeatSourceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeatSourceManager, UnknownData_JOFH, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHeatSourceManager, 0x0290);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_OVKP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_QLCZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_GLE5, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_X9V5, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UHeatstrokeDisease : public UDisease
		TEST_METHOD(Class__ConZ__HeatstrokeDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeatstrokeDisease, UnknownData_AQE2, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeatstrokeDisease, 0x01D0);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_3XNC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UHemlockPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__HemlockPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHemlockPoisoning, UnknownData_9I4P, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHemlockPoisoning, 0x01C0);
		}

		// class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// class UHepatitisADisease : public UDisease
		TEST_METHOD(Class__ConZ__HepatitisADisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHepatitisADisease, UnknownData_G9E4, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHepatitisADisease, 0x01B8);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UHighlightable : public UInterface
		TEST_METHOD(Class__ConZ__Highlightable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHighlightable, 0x0028);
		}

		// class UHitReactComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__HitReactComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, UnknownData_XW0D, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, HitReactMappings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, PhysicalHitReactData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, RagdollConstraintProfileName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, RagdollRestThresholdSingleBodyMax, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, RagdollRestThresholdAverageBodyMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, UnknownData_55JZ, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _pelvisBoneName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _rootBoneName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _getUpFromFaceMontage, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _getUpFromBackMontage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, UnknownData_EZ58, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _ragdollTransitionState, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, UnknownData_9FKR, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, _serverRagollLocation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactComponent, UnknownData_IFK9, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitReactComponent, 0x01D0);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_RISN, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_I3JA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_HE2E, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_D6CF, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UHitReactMapping : public UDataAsset
		TEST_METHOD(Class__ConZ__HitReactMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, HitReactTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, RegainControlMultiplier, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, UnknownData_DF5E, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, HeadHit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, BodyHit, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, LegsHit, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitReactMapping, LandingHit, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitReactMapping, 0x03E0);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UHookwormsDisease : public UDisease
		TEST_METHOD(Class__ConZ__HookwormsDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookwormsDisease, UnknownData_10V4, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookwormsDisease, 0x01B8);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UHoverPanelWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__HoverPanelWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoverPanelWidget, 0x0278);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_29S4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_0LTD, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UHoverWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__HoverWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoverWidget, 0x0278);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_NXQP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class AHUD_John : public AHUD
		TEST_METHOD(Class__ConZ__HUD_John)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD_John, UnknownData_A69R, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD_John, NormalFont, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD_John, UnknownData_WXA8, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD_John, 0x0360);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_PQMG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_861F, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UHUDNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__HUDNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDNotification, 0x0030);
		}

		// class UHUDNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__HUDNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDNotificationDescription, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDNotificationDescription, beep, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDNotificationDescription, UnknownData_SYM2, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDNotificationDescription, 0x0058);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_D6HX, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UHudWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__HudWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _quickAccessBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _throwingAccess, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _handQuickAccessItemWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _vicinityPanel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _vicinityContainer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, UnknownData_3OBU, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _objectivesContainer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _missionResultWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _dialogueContainerWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _journalPanelWidget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _squadPanelWidget, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _handPanel, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _screenSpaceHealthWidget, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _nightVisionGogglesBatteryWidget, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudWidget, _shotsFiredTrackerWidget, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudWidget, 0x0300);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_BCRC, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_T920, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_6PD3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_FTLF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_ZO9U, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_M4U1, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_1WGH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_F7C5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UHyperthermiaDisease : public UDisease
		TEST_METHOD(Class__ConZ__HyperthermiaDisease)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHyperthermiaDisease, 0x01B0);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_242Y, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_4QTO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UHypothermiaDisease : public UDisease
		TEST_METHOD(Class__ConZ__HypothermiaDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHypothermiaDisease, UnknownData_NNB9, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHypothermiaDisease, 0x01C0);
		}

		// class UInocybePatouillardiiPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__InocybePatouillardiiPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInocybePatouillardiiPoisoning, UnknownData_POOV, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInocybePatouillardiiPoisoning, 0x01B8);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_4ZSA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UInsertCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__InsertCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertCartridge, MontageEndSectionName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertCartridge, UnknownData_O2RP, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsertCartridge, 0x00A0);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_NSAP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_UWQY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UInsertCartridgeIntoMagazine : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__InsertCartridgeIntoMagazine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertCartridgeIntoMagazine, MontageEndSectionName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertCartridgeIntoMagazine, UnknownData_CBBY, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsertCartridgeIntoMagazine, 0x00A0);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_6WLG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_RZK7, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UInsertMagazine : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__InsertMagazine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsertMagazine, 0x0090);
		}

		// class UBP_MountTypeWeaponMagazineM9_C : public UAttachmentSocketMountType
		TEST_METHOD(BlueprintGeneratedClass__BP_MountTypeWeaponMagazineM9__BP_MountTypeWeaponMagazineM9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountTypeWeaponMagazineM9_C, 0x0028);
		}

		// class UInsertMagazineInsertCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__InsertMagazineInsertCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertMagazineInsertCartridge, MontageEndSectionName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInsertMagazineInsertCartridge, UnknownData_79HQ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsertMagazineInsertCartridge, 0x00A0);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UInspectedItemWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InspectedItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInspectedItemWidget, ItemWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInspectedItemWidget, SkillText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInspectedItemWidget, SkillLevelText, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInspectedItemWidget, 0x0290);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_3VV9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_MHBL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class AInstancedStaticMeshActor : public AActor
		TEST_METHOD(Class__ConZ__InstancedStaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedStaticMeshActor, MeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedStaticMeshActor, 0x0228);
		}

		// class AInstrumentItem : public AItem
		TEST_METHOD(Class__ConZ__InstrumentItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, UnknownData_TGYQ, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _numberOfOctaves, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentStartMontageFP, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentStartMontageTP, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentStopMontageFP, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentStopMontageTP, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentIdleAnimationFP, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentPlayingAnimationFP, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentIdleAnimationTP, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playInstrumentPlayingAnimationTP, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _playingPoseHoldTime, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, UnknownData_5GKD, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteCStart, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteCStop, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteDStart, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteDStop, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteDbStart, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteDbStop, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteEStart, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteEStop, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteEbStart, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteEbStop, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteFStart, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteFStop, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteGStart, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteGStop, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteGbStart, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteGbStop, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteAStart, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteAStop, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteAbStart, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteAbStop, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteBStart, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteBStop, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteBbStart, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteBbStop, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteC2Start, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentItem, _noteC2Stop, 0x0940);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstrumentItem, 0x0950);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_0XKI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_4VZW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_LTOJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_V0WT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_RO9F, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_SWGE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_GWUJ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UInteractableInterface : public UInterface
		TEST_METHOD(Class__ConZ__InteractableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractableInterface, 0x0028);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_ETXG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_RZY7, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_LH4L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UInteractionComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__InteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_FPP2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, ExamineChanceMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, ExamineActionDuration, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, ExamineReplicationDelay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, PickupItemActionDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, PickupItemReplicationDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, StoreItemActionDuration, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, TickFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, MinLandscapeInteractionDistanceSquared, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, SavedGroundSearchLocationsCount, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_5CO7, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, _actions, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_JOKI, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, _replicatedExamineSpawnedItems, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, _replicatedPickupSpawnedItem, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_7V6C, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, _drinkAllowedThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, _reexamineFrequency, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_CO6G, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionComponent, 0x0228);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_6Z47, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_LBMC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_8CS8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_I52E, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_QGCI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_APR2, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_6I25, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_BZHJ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_TXI3, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_1I2E, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_JRLC, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_BZ7V, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UInteractionContainerUserWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InteractionContainerUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionContainerUserWidget, UnknownData_HXYM, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionContainerUserWidget, _actionContainer, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionContainerUserWidget, UnknownData_6WC4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionContainerUserWidget, _underlyingInteractableActor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionContainerUserWidget, UnknownData_JMSW, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionContainerUserWidget, 0x02C0);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_7URF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UInteractionGroupUserWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InteractionGroupUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionGroupUserWidget, _groupText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionGroupUserWidget, _groupBorder, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionGroupUserWidget, UnknownData_PZ35, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionGroupUserWidget, 0x0298);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_FVKQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_HCBD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_IQAJ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UInteractionObject : public UInterface
		TEST_METHOD(Class__ConZ__InteractionObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionObject, 0x0028);
		}

		// class UInteractionUserWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InteractionUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionUserWidget, _actionText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionUserWidget, _actionButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionUserWidget, UnknownData_H8F3, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionUserWidget, 0x02E8);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_4IOU, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionHairColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_W8NH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_N78T, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_EP0G, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// class UInteriorCharacterSpawnerComponent : public UCharacterSpawnerComponent
		TEST_METHOD(Class__ConZ__InteriorCharacterSpawnerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteriorCharacterSpawnerComponent, 0x0230);
		}

		// class UInteriorStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__ConZ__InteriorStaticMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteriorStaticMeshComponent, 0x04D0);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_KH8R, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_HBD8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_N1WY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_HZ53, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_QCH2, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UIntestinalCryptosporidiosisPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__IntestinalCryptosporidiosisPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntestinalCryptosporidiosisPoisoning, UnknownData_A3OL, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntestinalCryptosporidiosisPoisoning, 0x01B8);
		}

		// class UInventoryPositionData : public UObject
		TEST_METHOD(Class__ConZ__InventoryPositionData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPositionData, 0x0028);
		}

		// class UInventoryContainer : public UInterface
		TEST_METHOD(Class__ConZ__InventoryContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainer, 0x0028);
		}

		// class UInventorySizeData : public UObject
		TEST_METHOD(Class__ConZ__InventorySizeData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventorySizeData, 0x0028);
		}

		// class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_KN88, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_HJ2H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_W0M1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_L53B, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// class UInventorySizeData2D : public UInventorySizeData
		TEST_METHOD(Class__ConZ__InventorySizeData2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySizeData2D, SizeX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySizeData2D, SizeY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySizeData2D, Bitmask, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventorySizeData2D, 0x0040);
		}

		// class UInventoryPositionData2D : public UInventoryPositionData
		TEST_METHOD(Class__ConZ__InventoryPositionData2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionData2D, PositionX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionData2D, PositionY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionData2D, Rotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionData2D, IsLoading, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionData2D, UnknownData_J44P, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPositionData2D, 0x0038);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UInventoryContainer2D : public UObject
		TEST_METHOD(Class__ConZ__InventoryContainer2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, UnknownData_72CF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _data, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _oldData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _dataPredictionSnapshots, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _widgets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _parent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _widget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _grid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, _gridDamaged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainer2D, UnknownData_1REB, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainer2D, 0x00E0);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_RTB3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_FQG4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UInventoryContainer2DLight : public UInventoryContainer2D
		TEST_METHOD(Class__ConZ__InventoryContainer2DLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainer2DLight, 0x00E0);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_MYAY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_BFCC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_I866, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UInventoryPositionDataClothes : public UInventoryPositionData
		TEST_METHOD(Class__ConZ__InventoryPositionDataClothes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionDataClothes, UnknownData_84F4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPositionDataClothes, 0x0030);
		}

		// class UInventoryContainerClothes : public UObject
		TEST_METHOD(Class__ConZ__InventoryContainerClothes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, UnknownData_WZKD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, _widget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, UnknownData_H0UP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, _data, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, _oldData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerClothes, UnknownData_RD65, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainerClothes, 0x0090);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_I9K8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UInventoryPositionDataHandsHolsters : public UInventoryPositionData
		TEST_METHOD(Class__ConZ__InventoryPositionDataHandsHolsters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionDataHandsHolsters, UnknownData_LGE0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPositionDataHandsHolsters, 0x0030);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_J5LW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UInventoryContainerHandsHolsters : public UObject
		TEST_METHOD(Class__ConZ__InventoryContainerHandsHolsters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, UnknownData_4H3G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, _handWidget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, _shoulderLeftWidget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, _shoulderRightWidget, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, UnknownData_Z2Q5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, _data, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, _oldData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerHandsHolsters, UnknownData_OTBA, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainerHandsHolsters, 0x00A8);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_P4ML, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_54L7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_AOX4, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_HDWS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_JDGR, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YKTN, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_972S, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IDTJ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FTPS, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MY2H, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4FB4, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KBZF, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_N1YF, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Z38E, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_L8M8, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_B3Y7, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4OYX, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XEGU, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_L8WT, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_JYD7, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_HXER, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UInventoryPositionDataSelection : public UInventoryPositionData
		TEST_METHOD(Class__ConZ__InventoryPositionDataSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionDataSelection, position, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPositionDataSelection, UnknownData_6JJJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPositionDataSelection, 0x0030);
		}

		// class UInventoryContainerSelection : public UObject
		TEST_METHOD(Class__ConZ__InventoryContainerSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, UnknownData_Q173, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _maxNumOfItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, UnknownData_6H4V, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _itemsRep, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, UnknownData_MNH1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _parentRep, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _data, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _widgets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, _widget, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerSelection, UnknownData_2CM8, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainerSelection, 0x00B8);
		}

		// class UInventoryItemWidget2Test : public UUserWidget
		TEST_METHOD(Class__ConZ__InventoryItemWidget2Test)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget2Test, _itemIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget2Test, _itemCaption, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemWidget2Test, 0x0270);
		}

		// class UInventoryContainerWidget2Test : public UInventoryContainerWidget2
		TEST_METHOD(Class__ConZ__InventoryContainerWidget2Test)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerWidget2Test, _itemIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerWidget2Test, _itemCaption, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerWidget2Test, _itemContainer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryContainerWidget2Test, UnknownData_P8QM, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryContainerWidget2Test, 0x02F0);
		}

		// class UInventoryPanelWidget2Test : public UInventoryContainerWidget2
		TEST_METHOD(Class__ConZ__InventoryPanelWidget2Test)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget2Test, _itemContainer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget2Test, UnknownData_VZ3P, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelWidget2Test, 0x02D0);
		}

		// class UInventoryGridWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventoryGridWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWidget, _image, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryGridWidget, 0x0280);
		}

		// class UInventoryItemData : public UDataAsset
		TEST_METHOD(Class__ConZ__InventoryItemData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemData, 0x0030);
		}

		// class UInventoryItemDataDescription : public UInventoryItemData
		TEST_METHOD(Class__ConZ__InventoryItemDataDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDataDescription, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDataDescription, Description, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemDataDescription, 0x0060);
		}

		// class UInventoryItemDataIcon : public UInventoryItemData
		TEST_METHOD(Class__ConZ__InventoryItemDataIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDataIcon, Icon, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemDataIcon, 0x0038);
		}

		// class UInventoryItemData2D : public UInventoryItemData
		TEST_METHOD(Class__ConZ__InventoryItemData2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemData2D, SizeX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemData2D, SizeY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemData2D, 0x0038);
		}

		// class UInventoryItem : public UInterface
		TEST_METHOD(Class__ConZ__InventoryItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItem, 0x0028);
		}

		// class UInventoryNode : public UInterface
		TEST_METHOD(Class__ConZ__InventoryNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryNode, 0x0028);
		}

		// class UInventoryPanelSideLayerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventoryPanelSideLayerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelSideLayerWidget, _itemWidget, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelSideLayerWidget, 0x0280);
		}

		// class UInventoryPanelThirdIteration : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventoryPanelThirdIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _displayedCharacter, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _inventoriesScrollBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _nonContainerBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _inventories, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _sideLayers, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _nonContainerItems, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelThirdIteration, _nonContainerItemsPadding, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelThirdIteration, 0x0390);
		}

		// class UInventoryPanelWidget2 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventoryPanelWidget2)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelWidget2, 0x0278);
		}

		// class UInventorySlotUserWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__InventorySlotUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotUserWidget, HasItem, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotUserWidget, UnknownData_HBJ9, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotUserWidget, ImageWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotUserWidget, SizeBoxWrapper, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotUserWidget, ParentContainerWidget, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventorySlotUserWidget, 0x0298);
		}

		// class UIronDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__IronDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIronDeficiency, 0x01C0);
		}

		// class UItemClassWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemClassWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemClassWidget, _itemClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemClassWidget, 0x0280);
		}

		// class AItemContainer : public AActor
		TEST_METHOD(Class__ConZ__ItemContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, UnknownData_5AXW, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _rootComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _forceUnlockTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, UnknownData_RB9S, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _unlockPositionMarker, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, UnknownData_6Q2M, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _upgradeItemsClasses, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _lockData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _originalUpgradeItemClasses, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _originalLockData, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, UnknownData_RH29, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _disableSerialization, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, _shouldBeResetOnNewSession, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainer, UnknownData_6MGP, 0x0303);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemContainer, 0x0320);
		}

		// class AItemContainerManager : public AActor
		TEST_METHOD(Class__ConZ__ItemContainerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, UnknownData_9TCE, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, _itemContainers, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, _itemContainersOwned, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, UnknownData_13MX, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, _itemContainersDataRepHelper, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemContainerManager, UnknownData_FJXZ, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemContainerManager, 0x03A8);
		}

		// class AItemDropPlaceholder : public AActor
		TEST_METHOD(Class__ConZ__ItemDropPlaceholder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemDropPlaceholder, BoxCollisionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemDropPlaceholder, StaticMeshComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemDropPlaceholder, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemDropPlaceholder, UnknownData_3QNT, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemDropPlaceholder, _rootComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemDropPlaceholder, 0x0248);
		}

		// class UItemGroup : public UDataAsset
		TEST_METHOD(Class__ConZ__ItemGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemGroup, Items, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemGroup, 0x0040);
		}

		// class UItemInventoryWidget2 : public UInventoryContainerWidget2
		TEST_METHOD(Class__ConZ__ItemInventoryWidget2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _item, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _container, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _nameText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _itemWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _inventoryGrid, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _inventoryGridWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _inventoryCanvas, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _contentBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _expandToggle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _slotsWidgets, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, _canMinimize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemInventoryWidget2, UnknownData_8G9H, 0x02D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemInventoryWidget2, 0x02E0);
		}

		// class UItemObstructionTestCapsuleComponent : public UCapsuleComponent
		TEST_METHOD(Class__ConZ__ItemObstructionTestCapsuleComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemObstructionTestCapsuleComponent, 0x0460);
		}

		// class UItemObstructionStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ItemObstructionStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemObstructionStatics, 0x0028);
		}

		// class UItemRegistry : public UActorComponent
		TEST_METHOD(Class__ConZ__ItemRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemRegistry, UnknownData_CW2K, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemRegistry, 0x0100);
		}

		// class UItemSelection : public UDataAsset
		TEST_METHOD(Class__ConZ__ItemSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, MainItem, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, SupportItems, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, Attachments, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, UnselectedIcon, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, SelectedIcon, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, DisabledIcon, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, SelectionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, SizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, SizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, TeamIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSelection, UnknownData_9H1E, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSelection, 0x0098);
		}

		// class UItemSelectionSlotWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemSelectionSlotWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSelectionSlotWidget, 0x0278);
		}

		// class UItemSpawnerComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__ItemSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnerComponent, UnknownData_GHW9, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnerComponent, SpawnerMarkers, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnerComponent, SpawnerGroupName, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnerComponent, 0x0220);
		}

		// class AItemSpawnerGroup : public AActor
		TEST_METHOD(Class__ConZ__ItemSpawnerGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerGroup, SpawnerComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemSpawnerGroup, 0x0228);
		}

		// class AItemSpawnerVolume : public AVolume
		TEST_METHOD(Class__ConZ__ItemSpawnerVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, zone, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, UnknownData_LNGS, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, ItemHealthMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, ProbabilityMultiplier, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, ExamineProbabilityMultiplier, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawnerVolume, UnknownData_ZD8V, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemSpawnerVolume, 0x0278);
		}

		// class AItemSpawningManager : public AActor
		TEST_METHOD(Class__ConZ__ItemSpawningManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawningManager, UnknownData_3BIN, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawningManager, _referencedItemClasses, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawningManager, UnknownData_HZ9V, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemSpawningManager, 0x1920);
		}

		// class UPostItemsSpawnedActions : public UObject
		TEST_METHOD(Class__ConZ__PostItemsSpawnedActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostItemsSpawnedActions, 0x0028);
		}

		// class UItemSpawnerPreset : public UObject
		TEST_METHOD(Class__ConZ__ItemSpawnerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnerPreset, SpawnerData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnerPreset, 0x00A0);
		}

		// class UItemStatusWidget : public UWaypointWidget
		TEST_METHOD(Class__ConZ__ItemStatusWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemStatusWidget, 0x0310);
		}

		// class UItemTooltipTab : public UWidgetSwitcher
		TEST_METHOD(Class__ConZ__ItemTooltipTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltipTab, _panels, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemTooltipTab, 0x0148);
		}

		// class UItemTooltip : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemTooltip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _mainPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _overviewPanels, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _additionalPanels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _pageIndicatorBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _expandHintText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, _pageIndicatorGrid, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltip, UnknownData_6CCL, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemTooltip, 0x02C0);
		}

		// class UExtendedRichTextBlock : public URichTextBlock
		TEST_METHOD(Class__ConZ__ExtendedRichTextBlock)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtendedRichTextBlock, 0x0678);
		}

		// class UItemTooltipPanelElement : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemTooltipPanelElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltipPanelElement, _elementName, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemTooltipPanelElement, 0x0280);
		}

		// class UItemTooltipPanel : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemTooltipPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemTooltipPanel, UnknownData_QE8L, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemTooltipPanel, 0x02C8);
		}

		// class UBaseItemWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__BaseItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemWidget, ParentInventory, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemWidget, UnknownData_Q7S9, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemWidget, Width, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemWidget, Height, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseItemWidget, _imageWidget, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseItemWidget, 0x0298);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_RQZ4, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_QDSM, 0x0874);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x08A0);
		}

		// class UItemUserWidget : public UBaseItemWidget
		TEST_METHOD(Class__ConZ__ItemUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemUserWidget, OnClicked, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemUserWidget, _uiBorder, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemUserWidget, _isSelected, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemUserWidget, _isHovered, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemUserWidget, UnknownData_3C9Q, 0x02B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemUserWidget, 0x02B8);
		}

		// class AItemVirtualizationManager : public AActor
		TEST_METHOD(Class__ConZ__ItemVirtualizationManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemVirtualizationManager, UnknownData_4DWI, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemVirtualizationManager, 0x0340);
		}

		// class UVirtualizedItemUserData : public UObject
		TEST_METHOD(Class__ConZ__VirtualizedItemUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualizedItemUserData, 0x0028);
		}

		// class UItemWidget2 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ItemWidget2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, OnRightClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_RTLD, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _item, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _container, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _itemClass, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _icon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _iconSizeBox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _background, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _mainInvalidationBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _backgroundGrid, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _foregroundGrid, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _selectionOverlay, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _widgetType, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_9XD3, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _numberData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _isVicinityContainer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_3K7C, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _defaultBackgroundColour, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _hoveredBackgroundColour, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _selectedBackgroundColour, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _selectedHoveredBackgroundColour, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_2K9F, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _shouldUpdateVisuals, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_N15W, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _lowerLeftBox, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _additionalIcon, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, _additionalIconSizeBox, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemWidget2, UnknownData_YOKX, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemWidget2, 0x0410);
		}

		// class AItemWithText : public AItem
		TEST_METHOD(Class__ConZ__ItemWithText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, UnknownData_865M, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, MaxTextCharactersPerRow, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, MaxTextRows, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, _textWidgetComponent, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, _text, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, _owningUserProfileId, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemWithText, UnknownData_ZXUX, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemWithText, 0x07A8);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_ONTL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UJournalMissionContainer : public UUserWidget
		TEST_METHOD(Class__ConZ__JournalMissionContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _missionItemWidgetsContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _completedMissionItemWidgetsContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _completedMissionsOverlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _noContentText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, UnknownData_I0QU, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _missionItemWidgets, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalMissionContainer, _completedMissionItemWidgets, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJournalMissionContainer, 0x0328);
		}

		// class UJournalObjectiveContainer : public UUserWidget
		TEST_METHOD(Class__ConZ__JournalObjectiveContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _objectiveContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _rewardContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _headerNameText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _missionDescriptionText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _missionBanner, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _noDescriptionText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _noRewardsText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _activateMissionButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _untrackMissionButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _resetMissionButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _restartMissionButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _activateButtonOverlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _untrackButtonOverlay, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _resetButtonOverlay, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _restartButtonOverlay, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _objectiveItemBottomPadding, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _objectiveItemFontSize, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, UnknownData_8AAR, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalObjectiveContainer, _objectiveItemWidgets, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJournalObjectiveContainer, 0x0340);
		}

		// class UJournalPanelWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__JournalPanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _journalWidgetSwitcher, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _mainStoryContainerWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _sideStoryContainerWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _tutorialContainerWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _objectivesContainerWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _mainStoryTab, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _sideStoryTab, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _tutorialTab, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _firstTabDivider, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, _secondTabDivider, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJournalPanelWidget, UnknownData_S2TH, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJournalPanelWidget, 0x02F0);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_ULHN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_L4FB, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_QD96, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UKeyboardIllumination : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__KeyboardIllumination)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyboardIllumination, 0x0028);
		}

		// class AKillBoxC4SpawnPoint : public AActor
		TEST_METHOD(Class__ConZ__KillBoxC4SpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxC4SpawnPoint, _possibleSpawnClasses, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillBoxC4SpawnPoint, 0x0230);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class APlaceableActorBlocker : public AActor
		TEST_METHOD(Class__ConZ__PlaceableActorBlocker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorBlocker, 0x0220);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class AKillBoxDetectionField : public APlaceableActorBlocker
		TEST_METHOD(Class__ConZ__KillBoxDetectionField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxDetectionField, BoxCollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillBoxDetectionField, 0x0228);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_NBRJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_VE40, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UCharacterActionComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__CharacterActionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterActionComponent, UnknownData_VF8N, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterActionComponent, _shouldStopMontageOnEnd, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterActionComponent, UnknownData_PCDO, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterActionComponent, 0x00C0);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_HP5W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_5P0O, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UKillBoxEntranceComponent : public UCharacterActionComponent
		TEST_METHOD(Class__ConZ__KillBoxEntranceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillBoxEntranceComponent, _killBoxManager, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillBoxEntranceComponent, 0x00C8);
		}

		// class AKillBoxManager : public AActor
		TEST_METHOD(Class__ConZ__KillBoxManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _isActivated, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _isFinale, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, UnknownData_1JWF, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxDuration, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _lockdownDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxResetDelay, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _reductionTimeCap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _reductionTimePenalty, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _saveStateInterval, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _gasEntranceTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _panicModeTimeCut, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserEntranceTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _difficultyCalibrationTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _calibrationPrisonerThreshold, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _zapperDamageModifierPerPrisoner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _maxZapperDamageModifier, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _availableDifficultyConfigurations, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserGadgetsTopPosition, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserGadgetsBottomPosition, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserMovingSpeed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _maxSpawnedZombies, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _maxSpawnedZombiesPerMistake, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _prisonerNumPerGoldDoorZapper, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _maxGoldDoorZappers, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _specialPauseCountdownDuration, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _pauseMaxPrisonerCount, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _spawnMinPrisonerCount, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _specialEventInterval, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserQuoteTimeRemainingTrigger, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _gasQuoteTimeRemainingTrigger, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _randomQuoteInterval, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _timedHostBlockTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, UnknownData_HCUH, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxOpeningQuotes, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxLaserAnnouncementQuotes, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxDescriptionQuotes, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxRandomnQuotes, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxFailureQuotes, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxGasAnnouncementQuotes, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxZombieSpawnQuotes, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxTimePauseQuotes, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _difficultyCalibrationQuote, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBoxMusicStart, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxMusicStop, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxGasSound, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox30SecondsMark, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox10SecondsMark, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox5SecondsMark, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox4SecondsMark, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox3SecondsMark, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox2SecondsMark, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBox1SecondsMark, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, KillBoxBuzzerSound, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _killBoxEntrance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _detectionField, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserDevices, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _laserGrid, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _spawnPoints, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _hardSpawnPoints, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _spawnedZombies, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _currentAudioComponent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _currentMusicComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _remainingTime, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _unlockFailureAssistanceBonus, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, UnknownData_HK2F, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _queuedQuotes, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _electricalDoors, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _roomDefinitions, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _timerWidgets, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _gasEmitters, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _gasMist, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, _panicButton, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxManager, UnknownData_17KX, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillBoxManager, 0x04B8);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_YHSR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_4NCM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_73JQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_3VCF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_YHUG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_F55K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_S2EF, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_PUR6, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_D1MJ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_VSB9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_8FM2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_5N7W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_NZ7Y, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_5UI3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_LI8B, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class AKillBoxSpawnPoint : public AActor
		TEST_METHOD(Class__ConZ__KillBoxSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, _openDelay, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, _closeDelay, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, _zombieList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, _door, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, UnknownData_JN34, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, _stableZombieProbability, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillBoxSpawnPoint, UnknownData_E2FL, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillBoxSpawnPoint, 0x0260);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UKillBoxTimerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__KillBoxTimerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillBoxTimerWidget, _remainingTimeMinutes1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillBoxTimerWidget, _remainingTimeMinutes2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillBoxTimerWidget, _remainingTimeSeconds1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillBoxTimerWidget, _remainingTimeSeconds2, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillBoxTimerWidget, 0x0298);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UKillFeedNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__KillFeedNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillFeedNotification, 0x0030);
		}

		// class UKillFeedNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__KillFeedNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillFeedNotificationDescription, prefix, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillFeedNotificationDescription, characterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillFeedNotificationDescription, suffix, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillFeedNotificationDescription, ping, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillFeedNotificationDescription, UnknownData_GJUS, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillFeedNotificationDescription, 0x0078);
		}

		// class ULadderMarkersComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__LadderMarkersComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULadderMarkersComponent, _ladderMarkers, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULadderMarkersComponent, UnknownData_HF5G, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULadderMarkersComponent, 0x0220);
		}

		// class ALadderMarkersRegistry : public AActor
		TEST_METHOD(Class__ConZ__LadderMarkersRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadderMarkersRegistry, UnknownData_5RON, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALadderMarkersRegistry, 0x0230);
		}

		// class ALadderMarkersReplicator : public AActor
		TEST_METHOD(Class__ConZ__LadderMarkersReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadderMarkersReplicator, UnknownData_69O5, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALadderMarkersReplicator, 0x02B8);
		}

		// class ULandingDamageType : public UDamageType
		TEST_METHOD(Class__ConZ__LandingDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandingDamageType, 0x0040);
		}

		// class ULandingEffects : public UDataAsset
		TEST_METHOD(Class__ConZ__LandingEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, MinImpactSpeedForLightEffects, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, MinImpactSpeedForMediumEffects, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, MinImpactSpeedForHeavyEffects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, UnknownData_KXVC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, ImpactAudioEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, grass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, ForrestGroundCoastal, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, ForrestGroundContinental, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Rock, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Stone, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Gravel, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, GravelBeach, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Pebbles, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Snow, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Ice, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Sand, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Asphalt, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Dirt, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Water, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, WaterOcean, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Cloth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Metal, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Aluminium, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Concrete, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Brick, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Wood, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Plastic, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Rubber, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Glass, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Folliage, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Bark, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Flesh, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, RoofTile, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, CeramicsTiles, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Scrap, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Trunk, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Leaves, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Plaster, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, Kevlar, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, ForceField, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandingEffects, NoEffect, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandingEffects, 0x0738);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class ULaserTriggerComponent : public UTriggerComponent
		TEST_METHOD(Class__ConZ__LaserTriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, BoxCollisionComponent, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, VisualizationMeshComponent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _laserDirection, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _maxLaserLength, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _laserThickness, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _laserHeight, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _visualizationMesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, UnknownData_LDE0, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, _laserMeshTransform, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTriggerComponent, UnknownData_5HJE, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULaserTriggerComponent, 0x0520);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_J76M, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// class ULeptospirosisDisease : public UDisease
		TEST_METHOD(Class__ConZ__LeptospirosisDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeptospirosisDisease, UnknownData_JVKJ, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeptospirosisDisease, 0x01C0);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class ALevelMarkers : public AActor
		TEST_METHOD(Class__ConZ__LevelMarkers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelMarkers, LadderMarkers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelMarkers, WindowMarkers, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelMarkers, UnknownData_D37D, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelMarkers, 0x0250);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_LNNB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_I3UG, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class ULevelUpNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__LevelUpNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelUpNotification, 0x0030);
		}

		// class ULevelUpNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__LevelUpNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationDescription, Skill, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationDescription, skillLevel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationDescription, UnknownData_WQIB, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelUpNotificationDescription, 0x0050);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class ULevelUpNotificationWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__LevelUpNotificationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _overlay, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _backgroundImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _arrowImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _skillLevelText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _skillNameText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _levelUpNotificationAudioEvent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, UnknownData_OCN0, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _displayTime, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _slideInTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, _slideOutTime, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUpNotificationWidget, UnknownData_HXZ5, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelUpNotificationWidget, 0x02E0);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_4DIR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_9944, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_CHXI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class ULoadingIconWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__LoadingIconWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingIconWidget, 0x0278);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class ULoadingScreen : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__LoadingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, UnknownData_LGSE, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreen, 0x0280);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class ALocationMarker : public AActor
		TEST_METHOD(Class__ConZ__LocationMarker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocationMarker, 0x0220);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_E6XX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_59RU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class ALocationObjective : public AObjective
		TEST_METHOD(Class__ConZ__LocationObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, _locationTrigger, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, _locationMarkerClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, _shouldRemoveObjectiveItem, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, UnknownData_8ZDU, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, _objectiveItemToRemove, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, _locationMarker, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationObjective, UnknownData_H39Q, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocationObjective, 0x0370);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_KWKY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_4UDE, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// class ALocationTrigger : public ATriggerBox
		TEST_METHOD(Class__ConZ__LocationTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationTrigger, UnknownData_HSXY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocationTrigger, _markerTransform, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocationTrigger, 0x0260);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_ZKZM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_84DI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class ALockBombDefusalMinigame : public AMinigame
		TEST_METHOD(Class__ConZ__LockBombDefusalMinigame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_Q9HQ, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _bombClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_3L3N, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _defusalTool, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _toolMovementSensitivity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _minDefusingToolOffsetFromCenter, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _maxDefusingToolOffsetFromCenter, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_OME6, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _timeBomb, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _splineConnectorMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_9XGR, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireButtonsSize, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_IHJZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _bombDefusalTimerStartSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _bombDefusalTimerStopSound, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSound, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _bombDefusedSound, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _greenLedLight, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _redLedLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _yellowLedLight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _ledLights, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _ledLightMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_QURG, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireMesh, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresEndPositions, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wires, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_ORFT, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _splines, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_UXLZ, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _numberOfWires, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _numberOfWirePoints, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresShuffleIntensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _minWiresComplexity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresForwardAxis, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_FUKL, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresStartSmoothness, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresEndSmoothness, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresMiddleSmoothness, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wiresSharpCornerSmoothness, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _maxSegmentSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wirePointsSpreadPositive, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wirePointsSpreadNegative, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireVerticalSpacing, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wirePointsOffset, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireEndOffset, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _additionalWireEndPointOffset, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, UnknownData_30IV, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment0, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment4, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _cutWireSegment5, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment0, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment1, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment4, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _uncutWireSegment5, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox1, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox3, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox4, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox5, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockBombDefusalMinigame, _wireBox6, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALockBombDefusalMinigame, 0x04F8);
		}

		// class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_3TJJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_SK2H, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_VTYG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_5PDA, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_BQ4X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_B3VF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_IOC8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_IPY9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_VWL1, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_EH1Q, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_UNL7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_9U8U, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class ULockpickable : public UInterface
		TEST_METHOD(Class__ConZ__Lockpickable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickable, 0x0028);
		}

		// class ULockpickableLocksVisualComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__LockpickableLocksVisualComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickableLocksVisualComponent, UnknownData_VJC4, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickableLocksVisualComponent, UnknownData_Y5UY, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickableLocksVisualComponent, _lockStaticMeshComponentNames, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickableLocksVisualComponent, _lockMeshPerLockDifficulty, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickableLocksVisualComponent, UnknownData_EURL, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickableLocksVisualComponent, 0x0240);
		}

		// class ALockpickingMinigame : public AMinigame
		TEST_METHOD(Class__ConZ__LockpickingMinigame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _outerRing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _movableRing, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingSetAnchor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickManipulator, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickAnchor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpick, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _tensionToolManipulator, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _tensionToolAnchor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _tensionTool, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _zoomStartLocation, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _zoomEndLocation, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _protectionParticlesTransform, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _zoomCurve, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _fadeCurve, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _pickBreakingMultiplierForMediumDifficulty, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _pickBreakingMultiplierForHardDifficulty, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, UnknownData_6M1X, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockpickMovementStartAudioEvent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockpickMovementStopAudioEvent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockTensionStartAudioEvent, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockTensionStopAudioEvent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockTurningStartAudioEvent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingLockTurningStopAudioEvent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingSuccessAudioEvent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingFailedAudioEvent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _lockpickingResetAudioEvent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, UnknownData_IROJ, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _rotatingStartAngle, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _duration, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _angleTolerance, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, _pickBreakingMultiplier, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickingMinigame, UnknownData_H6S8, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALockpickingMinigame, 0x0480);
		}

		// class ULockpickingMinigameConfiguration : public UMinigameConfiguration
		TEST_METHOD(Class__ConZ__LockpickingMinigameConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingMinigameConfiguration, UnknownData_SMTA, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickingMinigameConfiguration, 0x0118);
		}

		// class UUpgradeItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__UpgradeItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeItemTag, Price, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpgradeItemTag, UnknownData_5HPQ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpgradeItemTag, 0x0038);
		}

		// class ULockItemTag : public UUpgradeItemTag
		TEST_METHOD(Class__ConZ__LockItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockItemTag, LockData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockItemTag, 0x00C0);
		}

		// class ULockProtectionTag : public UUpgradeItemTag
		TEST_METHOD(Class__ConZ__LockProtectionTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, FailureParticles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, FailureAudio, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, FailureParticlesInWorld, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, FailureAudioInWorld, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, FailureParticlesScaleInWorld, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, _baseDamage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockProtectionTag, UnknownData_N21C, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockProtectionTag, 0x0070);
		}

		// class ULockpickingTensionToolItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__LockpickingTensionToolItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingTensionToolItemTag, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingTensionToolItemTag, UnknownData_L87C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingTensionToolItemTag, TensionToolTransform, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickingTensionToolItemTag, 0x0070);
		}

		// class ULockpickingWidget : public UMinigameWidget
		TEST_METHOD(Class__ConZ__LockpickingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingWidget, _lockpicks, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingWidget, _tensionTools, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickingWidget, UnknownData_S3H8, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickingWidget, 0x02B8);
		}

		// class ULockpickItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__LockpickItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickItemTag, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickItemTag, LockpickingDurability, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockpickItemTag, UnknownData_572X, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockpickItemTag, 0x0040);
		}

		// class AChestItem : public AItem
		TEST_METHOD(Class__ConZ__ChestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, UnknownData_O76T, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _capacityX, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _capacityY, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, UnknownData_JKVF, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _decayInDays, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _decayedChestClass, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _canBeBuried, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _canContainChestItem, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, UnknownData_VDXQ, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _containedItemsWeight, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _owningUserProfileId, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _lockItemsClasses, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _lockData, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, UnknownData_QMFI, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, _activeAccessLevel, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChestItem, UnknownData_EWMM, 0x07D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChestItem, 0x07E0);
		}

		// class ALogShedItem : public AChestItem
		TEST_METHOD(Class__ConZ__LogShedItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALogShedItem, 0x07E0);
		}

		// class ALookoutItem : public AItem
		TEST_METHOD(Class__ConZ__LookoutItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALookoutItem, 0x0758);
		}

		// class UMagnesiumDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__MagnesiumDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagnesiumDeficiency, 0x01C0);
		}

		// class AMainMenuGameMode : public AGameMode
		TEST_METHOD(Class__ConZ__MainMenuGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuGameMode, MainMenuClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuGameMode, _widgetClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuGameMode, _currentWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuGameMode, UnknownData_ENAA, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuGameMode, 0x0370);
		}

		// class UMakeConsciousAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__MakeConsciousAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMakeConsciousAction, 0x00A8);
		}

		// class UMakeUnconsciousAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__MakeUnconsciousAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMakeUnconsciousAction, 0x00A8);
		}

		// class UMalariaDisease : public UDisease
		TEST_METHOD(Class__ConZ__MalariaDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMalariaDisease, UnknownData_4WO6, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMalariaDisease, 0x01E0);
		}

		// class UMalfunctionsContainerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__MalfunctionsContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMalfunctionsContainerWidget, _malfunctionsCircularMenu, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMalfunctionsContainerWidget, 0x0280);
		}

		// class UMalfunctionWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__MalfunctionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMalfunctionWidget, UnknownData_RHXN, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMalfunctionWidget, _descriptionWidget, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMalfunctionWidget, 0x0288);
		}

		// class UManganeseDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__ManganeseDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManganeseDeficiency, 0x01C0);
		}

		// class UMathStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__MathStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMathStatics, 0x0028);
		}

		// class AMechanoidsManager : public AActor
		TEST_METHOD(Class__ConZ__MechanoidsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, DroneSpawnClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, DroneSpawnDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, DroneSpawnHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, DroneCheckForNearbyPlayerDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, DronePatrolDistanceRange, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, UnknownData_727R, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, _minDroneTargetInitialVisitTime, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, _maxDroneTargetInitialVisitTime, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, _minDroneTargetRevisitTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, _maxDroneTargetRevisitTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, _droneVisitClusterRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanoidsManager, UnknownData_9X1V, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMechanoidsManager, 0x0278);
		}

		// class UMedicalBonusAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__MedicalBonusAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalBonusAction, UnknownData_375R, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedicalBonusAction, 0x00B8);
		}

		// class UMedicalDiagnosisAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__MedicalDiagnosisAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalDiagnosisAction, UnknownData_9FID, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedicalDiagnosisAction, 0x00B0);
		}

		// class UMedicalItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__MedicalItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedicalItemTag, 0x0030);
		}

		// class UMedicalSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__MedicalSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PatchLightWoundsTag, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PatchSevereWoundsTag, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, ImmobilizeLimbsTag, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, MendBonesTag, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PullToothTag, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PerformLocalAnesthesiaTag, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PerformGeneralAnesthesiaTag, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, PerformSurgeryTag, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedicalSkill, UnknownData_YR5Z, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedicalSkill, 0x0110);
		}

		// class AMedicationItem : public AItem
		TEST_METHOD(Class__ConZ__MedicationItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, usage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, Type, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, UnknownData_6E8H, 0x075A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, DailyDoses, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, TimeToAbsorbSeconds, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, EffectTimeMultiplier, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, ReuseEffectTimeIncrease, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, MaxEffectTime, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, RepeatedAbuseReaction, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedicationItem, UnknownData_R0LC, 0x0771);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMedicationItem, 0x0778);
		}

		// class UMeleeAttackCollisionCapsule : public UCapsuleComponent
		TEST_METHOD(Class__ConZ__MeleeAttackCollisionCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeAttackCollisionCapsule, _attachment, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeAttackCollisionCapsule, _weaponDesc, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeAttackCollisionCapsule, 0x04A0);
		}

		// class UMeleeCombatComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__MeleeCombatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeCombatComponent, UnknownData_RIWE, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeCombatComponent, 0x01B8);
		}

		// class UMeleeDamageType : public UDamageType
		TEST_METHOD(Class__ConZ__MeleeDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeDamageType, 0x0040);
		}

		// class UMeleeDetectHitCollisionCapsule : public UCapsuleComponent
		TEST_METHOD(Class__ConZ__MeleeDetectHitCollisionCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeDetectHitCollisionCapsule, DetectHitCollisionType, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeDetectHitCollisionCapsule, UnknownData_HD4V, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeDetectHitCollisionCapsule, 0x0470);
		}

		// class UMeleeInterface : public UInterface
		TEST_METHOD(Class__ConZ__MeleeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeInterface, 0x0028);
		}

		// class UMeleeSkillAnimationsPreset : public UDataAsset
		TEST_METHOD(Class__ConZ__MeleeSkillAnimationsPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, NoSkillAnimations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, BasicSkillAnimations, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, MediumSkillAnimations, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, AdvancedSkillAnimations, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, NoSkillParameters, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, BasicSkillParameters, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, MediumSkillParameters, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeSkillAnimationsPreset, AdvancedSkillParameters, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeSkillAnimationsPreset, 0x04F0);
		}

		// class UMeleeStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__MeleeStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeStatics, 0x0028);
		}

		// class UMeleeWeaponItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__MeleeWeaponItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponItemTag, CombatAnimationPlayRateModifier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponItemTag, StrengthBelowWhichCombatPerformanceBeginsToDrop, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeWeaponItemTag, 0x0038);
		}

		// class UMeleeWeaponsSkill : public UMeleeSkill
		TEST_METHOD(Class__ConZ__MeleeWeaponsSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeWeaponsSkill, 0x00F8);
		}

		// class UMeningitisDisease : public UDisease
		TEST_METHOD(Class__ConZ__MeningitisDisease)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeningitisDisease, 0x01B0);
		}

		// class UMenuHelpers : public UDataAsset
		TEST_METHOD(Class__ConZ__MenuHelpers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, MainMenuClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, ServerBrowserClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, OptionsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, AdvancedOptionsClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, CharacterCreationClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, CharacterSelectionClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpers, CharacterCreationSecondIterationClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuHelpers, 0x0068);
		}

		// class AMenuPlayerController : public APlayerController
		TEST_METHOD(Class__ConZ__MenuPlayerController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuPlayerController, 0x0570);
		}

		// class UMeshHitZones : public UActorComponent
		TEST_METHOD(Class__ConZ__MeshHitZones)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshHitZones, UnknownData_1VM3, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshHitZones, _deactivationMaterial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshHitZones, UnknownData_G3VJ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshHitZones, 0x00D0);
		}

		// class UMetabolism_BCU_ICU_StatsPanel : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_BCU_ICU_StatsPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_StatsPanel, _stats_EKG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_StatsPanel, _stats_ST, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_StatsPanel, _stats_SPO2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_StatsPanel, _stats_RR, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_StatsPanel, _stats_TEMP, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_BCU_ICU_StatsPanel, 0x0288);
		}

		// class UMetabolism_BCU_ICU_Monitor : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_BCU_ICU_Monitor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_Monitor, _chbSwitchICUState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_Monitor, _icu_Switcher, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_Monitor, _icu_Collapsed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolism_BCU_ICU_Monitor, _icu_Expanded, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_BCU_ICU_Monitor, 0x0280);
		}

		// class UMetabolism_ICU_EKG_Stats : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_ICU_EKG_Stats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_ICU_EKG_Stats, 0x0260);
		}

		// class UMetabolism_ICU_ST_Stats : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_ICU_ST_Stats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_ICU_ST_Stats, 0x0260);
		}

		// class UMetabolism_ICU_SPO2_Stats : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_ICU_SPO2_Stats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_ICU_SPO2_Stats, 0x0260);
		}

		// class UMetabolism_ICU_RR_Stats : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_ICU_RR_Stats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_ICU_RR_Stats, 0x0260);
		}

		// class UMetabolism_ICU_TEMP_Stats : public UUserWidget
		TEST_METHOD(Class__ConZ__Metabolism_ICU_TEMP_Stats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolism_ICU_TEMP_Stats, 0x0260);
		}

		// class UMetabolismAdvancedProgressBar : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismAdvancedProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _progressBarEffect, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _valueText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _normalBackgroundColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _normalForegroundColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _alertedBackgroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _alertedForegroundColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _normalTextColorEmpty, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _normalTextColorFilled, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _alertedTextColorEmpty, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, _alertedTextColorFilled, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismAdvancedProgressBar, UnknownData_AH24, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismAdvancedProgressBar, 0x0300);
		}

		// class UMetabolismBasicInfoPanel : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismBasicInfoPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismBasicInfoPanel, UnknownData_9RB0, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismBasicInfoPanel, 0x0268);
		}

		// class UMetabolismBodyStatsPanel : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismBodyStatsPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismBodyStatsPanel, UnknownData_Y3CO, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismBodyStatsPanel, 0x0268);
		}

		// class UMetabolismLeftPanel : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismLeftPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismLeftPanel, _mainPanelTabs, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismLeftPanel, _mainTabSwitcher, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismLeftPanel, _statsPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismLeftPanel, UnknownData_JI1J, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismLeftPanel, 0x0280);
		}

		// class UMetabolismRadialAttributeProgressBar : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismRadialAttributeProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, _coloredBackground, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, _radialProgressBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, _fontEffectPass1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, _fontEffectPass2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, _attributeValueTextBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismRadialAttributeProgressBar, UnknownData_W01M, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismRadialAttributeProgressBar, 0x0290);
		}

		// class UMetabolismStatsPanel : public UUserWidget
		TEST_METHOD(Class__ConZ__MetabolismStatsPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _str_progressWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _con_progressWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _dex_progressWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _int_progressWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _basicInfoPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, _bodyStatsPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetabolismStatsPanel, UnknownData_3HBR, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetabolismStatsPanel, 0x02A8);
		}

		// class AMetalDetector : public AItem
		TEST_METHOD(Class__ConZ__MetalDetector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _resourceContainerComponent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _minDetectionRadius, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _maxDetectionRadius, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _updatePeriod, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _detectionFactor, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, StartEvent, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, StopEvent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, RTPCName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, _soundInterpolationTimeMs, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, UnknownData_CJGM, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMetalDetector, DetectionSourceSocketName, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMetalDetector, 0x07A0);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_30SR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_U3FB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_4711, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_QC7V, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_15CO, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_UJQE, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_MSKX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_SYFX, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_PRFR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_7GP2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_KTH1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_FXWH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_ED4V, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_DC0G, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_RU5P, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_GH2D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_66PV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_W1PX, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_RQOL, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UMiscStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__MiscStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiscStatics, 0x0028);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_MRIJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_PDFM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_XYWP, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_5THH, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_SFZC, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_1SLU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_88GW, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class AMission : public AActor
		TEST_METHOD(Class__ConZ__Mission)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, UnknownData_GD8X, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _activeObjective, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionObjectiveClasses, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionObjectiveAssets, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionObjectives, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionCategory, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionDescription, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionType, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, UnknownData_GOHK, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionOrdinalNumber, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionFaction, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, UnknownData_JIEL, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionLevel, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionRewards, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionBannerImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionStartingLocations, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _intendedNumberOfPlayers, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionCooldownTime, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, UnknownData_X30Y, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionItemSpawnerClass, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionIntroDialogues, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionOutroSuccessDialogues, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionOutroFailDialogues, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _missionOutroBelatedDialogues, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, _canInterruptDialogue, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMission, UnknownData_SUZ6, 0x0431);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMission, 0x0468);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_8J1B, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_EZXT, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_SQTM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_FROQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_DT1P, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_IFXB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_MNY5, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMissionContainerWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionContainerWidget, _missionObjectivesSizeBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionContainerWidget, _missionName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionContainerWidget, _objectivesWidgets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionContainerWidget, UnknownData_JB1C, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionContainerWidget, 0x0288);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_28ZW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_LH9I, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_TLP6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_3MEG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_JKOX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_5T9W, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_WAC6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_TT7G, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_L2JN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMissionDataGroup : public UDataAsset
		TEST_METHOD(Class__ConZ__MissionDataGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, MissionRootPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, MissionStartedSound, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, MissionCompletedSound, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, MissionFailedSound, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, ObjectiveStartedSound, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, ObjectiveCompletedSound, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, ObjectiveFailedSound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, MainStoryMissions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, SideStoryMissions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDataGroup, TutorialMissions, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionDataGroup, 0x0160);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_N9PF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_G7ER, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class AMissionDialogueManager : public AActor
		TEST_METHOD(Class__ConZ__MissionDialogueManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDialogueManager, UnknownData_HHWJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDialogueManager, _lineDurationModifier, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDialogueManager, _delayBetweenDialogues, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDialogueManager, UnknownData_4M63, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionDialogueManager, 0x0250);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_4DJR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class AMissionItemSpawner : public AActor
		TEST_METHOD(Class__ConZ__MissionItemSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionItemSpawner, _missionItemsInfo, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionItemSpawner, UnknownData_UMLQ, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionItemSpawner, 0x0280);
		}

		// class UMaterialExpressionSmoothStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_FXVQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_P4UM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_NE80, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// class UMissionItemWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, UnknownData_4I7O, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _missionItemName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _missionItemCategory, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _selectionBorder, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _stateImageIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _expandButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _objectiveContentOverlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _objectiveContainer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _availableMissionIcon, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _startedMissionIcon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _completedMissionIcon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _failedMissionIcon, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _widgetNormalColor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _widgetCompletedColor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _activeTextFontSize, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _inactiveTextFontSize, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _expandButtonOpenSound, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _expandButtonClosedSound, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, UnknownData_0BSF, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, _objectiveItemWidgets, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionItemWidget, UnknownData_VUDU, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionItemWidget, 0x0448);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_LIR3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_SYDG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_7NXR, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_S6M0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_75H1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_QP5S, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_GJLE, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_XQY1, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_X85L, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class AMissionLevelManager : public AActor
		TEST_METHOD(Class__ConZ__MissionLevelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionLevelManager, UnknownData_8H6W, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionLevelManager, 0x0278);
		}

		// class AMissionManager : public AActor
		TEST_METHOD(Class__ConZ__MissionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, UnknownData_FIDM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _mainStoryMissions, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _sideStoryMissions, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _tutorialMissions, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, UnknownData_B87R, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _tutorialEnabled, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _tutorialDelay, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, UnknownData_EH9U, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _activeMainStoryMission, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _activeSideStoryMission, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _activeTutorialMission, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _availableMission, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, _missionManagerState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionManager, UnknownData_HICC, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionManager, 0x03A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_2YAU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_BW1H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_OXJT, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_AAY7, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_AG09, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_PJ3Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_WI5L, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_33N9, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_06YU, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_15CO, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_WGTP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_ZOM5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_PAD9, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMissionPrompt : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionPrompt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionPrompt, _description, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionPrompt, UnknownData_KFSU, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionPrompt, 0x0278);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// class UMissionResult : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionResult, _resultTitleOverlay, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionResult, _resultTitleDescription, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionResult, _resultRewardContainerOverlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionResult, _resultRewardContainer, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionResult, 0x0280);
		}

		// class UMaterialExpressionStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_JB2V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_T1WL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// class UMissionRewardWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionRewardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionRewardWidget, _rewardImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionRewardWidget, _rewardAmount, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionRewardWidget, 0x0270);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_6RKR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_44SV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class AMissionScheduler : public AActor
		TEST_METHOD(Class__ConZ__MissionScheduler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, _missionSchedulerEnabled, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, UnknownData_FO3I, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, _availableMainStoryMissions, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, _availableSideStoryMissions, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, _availableTutorialMissions, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, _missionQueuingInterval, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionScheduler, UnknownData_88HE, 0x031C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionScheduler, 0x03E0);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_AW1Q, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMissionTabWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__MissionTabWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, UnknownData_I9SN, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _tabNameText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _backgroundImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _sizeBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _tabName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _activeTabHeight, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _inactiveTabHeight, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _activeFontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _inactiveFontSize, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _activeBackgroundTexture, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _inactiveBackgroundTexture, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _activeFontColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, _inactiveFontColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTabWidget, UnknownData_9AL7, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionTabWidget, 0x02F0);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_6CIB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_N768, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_2ALU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_FVCU, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_ZZTW, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UModularTooltip : public UUserWidget
		TEST_METHOD(Class__ConZ__ModularTooltip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltip, _sectionClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltip, _descriptionTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltip, _sectionsVerticalBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltip, _advancedDisplayHintTextBlock, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltip, 0x0280);
		}

		// class UModularTooltipElement : public UUserWidget
		TEST_METHOD(Class__ConZ__ModularTooltipElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement, _data, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement, 0x0268);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// class UModularTooltipElement_Value : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_Value)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Value, _nameTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Value, _valueTextBlock, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_Value, 0x0278);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_1MAZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_TLNW, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UModularTooltipElement_Timer : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_Timer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Timer, _remainingTimeProgressBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Timer, _remainingTimeTextBlock, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_Timer, 0x0278);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// class UModularTooltipElement_Modifier : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_Modifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Modifier, _modifierTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Modifier, _remainingTimeSizeBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Modifier, _remainingTimeProgressBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Modifier, _remainingTimeTextBlock, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_Modifier, 0x0288);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_YFV7, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// class UModularTooltipElement_ValueWithModifier : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_ValueWithModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_ValueWithModifier, _nameTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_ValueWithModifier, _currentValueTextBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_ValueWithModifier, _baseValueTextBlock, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_ValueWithModifier, _modifierSignTextBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_ValueWithModifier, _modifierTextBlock, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_ValueWithModifier, 0x0290);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_NAMO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UModularTooltipElement_AffectedBy : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_AffectedBy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_AffectedBy, _sourceTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_AffectedBy, _affectElementOverlay, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_AffectedBy, 0x0278);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_41RF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UModularTooltipElement_Affects : public UModularTooltipElement
		TEST_METHOD(Class__ConZ__ModularTooltipElement_Affects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Affects, _targetTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElement_Affects, _affectElementOverlay, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElement_Affects, 0x0278);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_B66X, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_3218, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UModularTooltipElementData : public UObject
		TEST_METHOD(Class__ConZ__ModularTooltipElementData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData, 0x0028);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_HMZX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_PH5W, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UModularTooltipElementData_Value : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_Value)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_Value, UnknownData_JURB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_Value, 0x0060);
		}

		// class UModularTooltipElementData_Timer : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_Timer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_Timer, UnknownData_BDQB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_Timer, 0x0038);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_LQDW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UModularTooltipElementData_Modifier : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_Modifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_Modifier, UnknownData_VG9P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_Modifier, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UModularTooltipElementData_ValueWithModifier : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_ValueWithModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_ValueWithModifier, UnknownData_KPF5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_ValueWithModifier, 0x0098);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_L9FK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_LC8H, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_1QAV, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_I8IQ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_SVN8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_NUDF, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_F9MR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_EOIS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_16QN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_OO0H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_52QP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_E27Q, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_I9LX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_E67I, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_RSMH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_61EH, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_198I, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_A6YI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_SVIQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_0C81, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_K494, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_98ET, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_PA99, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_9GFD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_7KD2, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_S6F0, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_GPAS, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_ZIMO, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FQKO, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_KROD, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_RXQC, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_7XQ2, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class UModularTooltipElementData_ValueWithModifier_Small : public UModularTooltipElementData_ValueWithModifier
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_ValueWithModifier_Small)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_ValueWithModifier_Small, 0x0098);
		}

		// class UModularTooltipElementData_ValueWithModifier_Large : public UModularTooltipElementData_ValueWithModifier
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_ValueWithModifier_Large)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_ValueWithModifier_Large, 0x0098);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UModularTooltipElementData_AffectedBy : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_AffectedBy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_AffectedBy, UnknownData_7FNP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_AffectedBy, Affect, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_AffectedBy, 0x0048);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UModularTooltipElementData_Affects : public UModularTooltipElementData
		TEST_METHOD(Class__ConZ__ModularTooltipElementData_Affects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_Affects, UnknownData_ZF74, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipElementData_Affects, Affect, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipElementData_Affects, 0x0048);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UModularTooltipSection : public UUserWidget
		TEST_METHOD(Class__ConZ__ModularTooltipSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipSection, _sectionElementsPadding, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipSection, _sectionSeparatorImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipSection, _sectionNameTextBlock, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipSection, _sectionElementsVerticalBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularTooltipSection, UnknownData_2HDW, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularTooltipSection, 0x0290);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class AMoundItem : public AItem
		TEST_METHOD(Class__ConZ__MoundItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, UnknownData_RKJE, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _userProfileId, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _moundItemClass, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _spriteMarkerBillboard, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _distanceBasedDynMat, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _surfaceType, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, UnknownData_8XOR, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _timeToDecay, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _minStartFadeDistance, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _maxStartFadeDistance, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _minEndFadeDistance, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _maxEndFadeDistance, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _startFadeDistance, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _endFadeDistance, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoundItem, _burriedClass, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoundItem, 0x07B0);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UMountable : public UInterface
		TEST_METHOD(Class__ConZ__Mountable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMountable, 0x0028);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_41PM, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_PKCR, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0480);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_0O10, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_D01X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNativeWindowsContent : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__NativeWindowsContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWindowsContent, UnknownData_NOTO, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWindowsContent, 0x0280);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_KMLY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNetworkDataIdAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__NetworkDataIdAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkDataIdAsset, IdToAssetMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkDataIdAsset, AssetToIdMap, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkDataIdAsset, 0x00D0);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNetworkStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__NetworkStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkStatics, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class AClothesItem : public AItem
		TEST_METHOD(Class__ConZ__ClothesItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, FemaleEquippedStaticMesh, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaleEquippedStaticMesh, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, FemaleEquippedSkeletalMesh, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaleEquippedSkeletalMesh, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, FemaleEquippedMaterialsOverride, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaleEquippedMaterialsOverride, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, ClothesType, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, EquipmentLayer, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, UnknownData_B7Z9, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, Warmth, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, Armor, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, CoversBodyArmor, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, CoversWrists, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, HidesHair, 0x07A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, HidesFacialHair, 0x07A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaxFemaleHairLength, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaxMaleHairLength, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, MaxFacialHairLength, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, BellyJiggleMultiplier, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, BreastJiggleMultiplier, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, ProjectileHitEnergyAbsorption, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, ProjectileHitEnergyDamagedAbsorption, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, EnergyThroughputRatio, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, TotalEnergyAbsorption, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, SharpMeleeDamageReduction, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, BluntMeleeDamageReduction, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, CapacityX, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, CapacityY, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, WaterResistance, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, InwardsWaterPropagationFactor, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, OutwardsWaterPropagationFactor, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, CamouflageBonus, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, DamageWhenEquipped, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, DirtinessWhenEquipped, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, ThermalConductivityFactor, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, UnknownData_CSJZ, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, _canBeEquipped, 0x07F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, UnknownData_3QB4, 0x07FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, _dirtiness, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, _smallMaterialDamageLimit, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, _bigMaterialDamageLimit, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, _materialParametersReplicated, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AClothesItem, UnknownData_O36Q, 0x0809);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AClothesItem, 0x0818);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_QXRM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_YAT1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_BIHD, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class ANightVisionGogglesItem : public AClothesItem
		TEST_METHOD(Class__ConZ__NightVisionGogglesItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, EquippedStaticMeshWhenActivated, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, ActivatedSound, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, DeactivatedSound, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, ActivatedChanged, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, UnknownData_QU65, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightVisionGogglesItem, _resourceContainerComponent, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANightVisionGogglesItem, 0x0850);
		}

		// class ANotificationsManager : public AActor
		TEST_METHOD(Class__ConZ__NotificationsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANotificationsManager, _queuedNotifications, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANotificationsManager, UnknownData_Y3LL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANotificationsManager, _notificationTimeout, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANotificationsManager, 0x02C8);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNotificationWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__NotificationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationWidget, UnknownData_LOIT, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotificationWidget, 0x0280);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class UNotificationPanelWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__NotificationPanelWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotificationPanelWidget, 0x0278);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectiveItemWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__ObjectiveItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _objectiveItemText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _bullet, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _bulletCompleted, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _objectiveActiveColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _objectiveCompletedColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, _objectiveFailedColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveItemWidget, UnknownData_GMQ5, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveItemWidget, 0x02D8);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_Q7NC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_SQ3S, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectivesContainerWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__ObjectivesContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesContainerWidget, _mainMissionContainerWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesContainerWidget, _sideMissionContainerWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesContainerWidget, _tutorialMissionContainerWidget, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectivesContainerWidget, 0x0278);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_BN44, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UObjectivesWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__ObjectivesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, _objectiveDescription, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, _amountTracker, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, _currentAmount, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, _totalAmount, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, activeObjectiveFontColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, inctiveObjectiveFontColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, activeObjectiveFontSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, inactiveObjectiveFontSize, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectivesWidget, UnknownData_YV0H, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectivesWidget, 0x02C0);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_LYSI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_TWQ6, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_K5SA, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_9JRX, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UObjectStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ObjectStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectStatics, 0x0028);
		}

		// class UOpenItemAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__OpenItemAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenItemAction, UnknownData_L8LI, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOpenItemAction, 0x00B8);
		}

		// class UInputDataAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__InputDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputDataAsset, ActionMappings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputDataAsset, AxisMappings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDataAsset, 0x0050);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_EI43, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_ZMDL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_K3HT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class UOptionsWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__OptionsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsWidget, UnknownData_LI00, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsWidget, 0x0298);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UOverdoseSickness : public USickness
		TEST_METHOD(Class__ConZ__OverdoseSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverdoseSickness, UnknownData_8YLH, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverdoseSickness, 0x01B8);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_APB8, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_QC7X, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UOvereatingSickness : public USickness
		TEST_METHOD(Class__ConZ__OvereatingSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOvereatingSickness, UnknownData_D289, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOvereatingSickness, 0x01E0);
		}

		// class UPatchWoundsAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__PatchWoundsAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPatchWoundsAction, UnknownData_UK66, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPatchWoundsAction, 0x00B8);
		}

		// class AGameEventManager : public AActor
		TEST_METHOD(Class__ConZ__GameEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, EventHistoryLimit, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, UnknownData_NT7S, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, _announcedGameEvents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, _currentGameEvents, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, _endedGameEvents, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEventManager, _panelWidget, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEventManager, 0x0260);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_IKHD, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class APAX_GameEventManager : public AGameEventManager
		TEST_METHOD(Class__ConZ__PAX_GameEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, EventMarker, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, TimeBetweenEvents, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, ForceJoinOnEventStart, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, UnknownData_STLY, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, ShootingRangeTableClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, ShootingRangeTable, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, ShootingRangeTableOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APAX_GameEventManager, UnknownData_0SCH, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APAX_GameEventManager, 0x02A8);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_7SJD, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_7EVE, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UPerformAnesthesiaAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__PerformAnesthesiaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerformAnesthesiaAction, UnknownData_AAQB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerformAnesthesiaAction, 0x00B0);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_PPQP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UPerformSurgeryAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__PerformSurgeryAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerformSurgeryAction, 0x00A8);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UPhosphorusDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__PhosphorusDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhosphorusDeficiency, 0x01C0);
		}

		// class UPhysicalSurfacesData : public UDataAsset
		TEST_METHOD(Class__ConZ__PhysicalSurfacesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Default, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, grass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, ForrestGroundCoastal, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, ForrestGroundContinental, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Rock, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Stone, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Gravel, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, GravelBeach, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Pebbles, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Snow, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Ice, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Sand, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Asphalt, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Dirt, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Water, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, WaterOcean, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Cloth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Metal, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Aluminium, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Concrete, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Brick, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Wood, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Plastic, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Rubber, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Glass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Foliage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Bark, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Flesh, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, RoofTile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, CeramicTiles, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Scrap, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Trunk, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Leaves, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Fruit, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Cardboard, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Plaster, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, Kevlar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, ForceField, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesData, NoEffect, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalSurfacesData, 0x02A0);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_VCD3, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_WZ3R, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_HQ7F, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_H97N, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UPhysicalSurfacesEffectsData : public UDataAsset
		TEST_METHOD(Class__ConZ__PhysicalSurfacesEffectsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Default, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, grass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, ForrestGroundCoastal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, ForrestGroundContinental, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Rock, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Stone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Gravel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, GravelBeach, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Pebbles, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Snow, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Ice, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Sand, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Asphalt, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Dirt, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Water, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, WaterOcean, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Cloth, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Metal, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Aluminium, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Concrete, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Brick, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Wood, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Plastic, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Rubber, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Glass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Foliage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Bark, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Flesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, RoofTile, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, CeramicTiles, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Scrap, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Trunk, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Leaves, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Fruit, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Cardboard, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Plaster, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, Kevlar, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, ForceField, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalSurfacesEffectsData, NoEffect, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalSurfacesEffectsData, 0x0510);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_6F48, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_NJET, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_308P, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_ULDE, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UPhysicsStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__PhysicsStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsStatics, 0x0028);
		}

		// class UPickupItemAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__PickupItemAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickupItemAction, 0x00A8);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_VI4F, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_GHYD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_Y4AD, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_YXFN, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_HPWK, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2U6O, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_XAQS, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_8GCB, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UPickupItemAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__PickupItemAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickupItemAssetData, Item, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickupItemAssetData, 0x0038);
		}

		// class UPlaceableActorBaseReplicatedState : public UObject
		TEST_METHOD(Class__ConZ__PlaceableActorBaseReplicatedState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableActorBaseReplicatedState, UnknownData_T9U6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceableActorBaseReplicatedState, 0x0050);
		}

		// class APlaceableActorBase : public AActor
		TEST_METHOD(Class__ConZ__PlaceableActorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_E91Q, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _id, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _boxCollisionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_37CG, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _isPlacementAllowed, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_TY7V, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _craftingIndex, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _ingredientMultiplier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_J7ZJ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _rootComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _staticMeshComponent_Main, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _staticMeshComponent_Outline, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _staticMeshComponent_Depth, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _queryStaticMeshComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _directionIndicatorStaticMeshComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _primaryMaterialAllowed, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _primaryMaterialDisallowed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _outlineMaterial, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _depthMaterial, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_Z727, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _numTracesX, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _numTracesY, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _traceHeightFactor, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _maxPlacementAngle, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _widgetHidingDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _fullWidgetHidingDistance, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _widgetSwitchPeriod, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _minDistanceToShowWidget, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _syncPeriod, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _reachabilityMaxDifference, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _directionIndicatorOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _destroyInteractionText, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_IL3Y, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _placementState, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_5G4J, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _replicatedLocation, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _replicatedPlacedLocation, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _replicatedRotation, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, _ingredients, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBase, UnknownData_RJWF, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorBase, 0x0498);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_YEKE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_8VY3, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_7URQ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_N2DO, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_LOC1, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_6ZRP, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_1OW1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_WJLJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0V5L, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_4EF2, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_IRUR, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_YAPL, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_2EAJ, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_4EEH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_QBV0, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HNME, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_CEPK, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_W3UL, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_MAWT, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_W373, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_10TR, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_IM79, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_N0FA, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_V5LD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_5GQQ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_746E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_GG13, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_IZ06, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_4AM5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_1Z9H, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_SRZG, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_DUFQ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_BUZ0, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_K8RV, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_SBQF, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_ZOR0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_450B, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_X0ML, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_K17D, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_S6A9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_I1SE, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_6I0X, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_YCFH, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_VPKT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_0XK7, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_7ESK, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_BDQX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_MFM9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_OG48, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_8UFV, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_UQ84, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_QB1Z, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_1NET, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_S0N1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_76YL, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_XV17, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_XP93, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_38BQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_R6G0, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_XWNA, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_KN55, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_WM6G, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_N8YK, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UPlaceableActorBaseBuildingReplicatedState : public UPlaceableActorBaseReplicatedState
		TEST_METHOD(Class__ConZ__PlaceableActorBaseBuildingReplicatedState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableActorBaseBuildingReplicatedState, UnknownData_1CT4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceableActorBaseBuildingReplicatedState, 0x0070);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class APlaceableActorBaseBuilding : public APlaceableActorBase
		TEST_METHOD(Class__ConZ__PlaceableActorBaseBuilding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxNumberOfTiles, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxHeightDifferenceForTiling, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxTileHeightAdjustionUp, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxTileHeightAdjustionDown, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _tileSnappingAngle, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _sizeVariatedTilesMaxHeightDifference, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxGroundPointDistance, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _groundPointsTraceHeight, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _groundPointsTraceDepth, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _maxPlacementLengthForSizeVariatedTiles, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, UnknownData_XOB9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _tilesData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _flagAreaMeshComponent, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _primaryMaterialFriendlyFlag, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _replicatedFirstPointLocation, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _replicatedFirstPointRotation, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _placementSubState, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _stateFlags, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, UnknownData_3GGF, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, _sizeVariationData, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseBuilding, UnknownData_Y9HT, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorBaseBuilding, 0x0588);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_WRRY, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UPlaceableActorBaseUpgradeReplicatedState : public UPlaceableActorBaseReplicatedState
		TEST_METHOD(Class__ConZ__PlaceableActorBaseUpgradeReplicatedState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceableActorBaseUpgradeReplicatedState, 0x0050);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_EN7F, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class APlaceableActorBaseUpgrade : public APlaceableActorBase
		TEST_METHOD(Class__ConZ__PlaceableActorBaseUpgrade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseUpgrade, _elementToBeUpgraded, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorBaseUpgrade, UnknownData_0A2V, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorBaseUpgrade, 0x04E0);
		}

		// class APlaceableActorFortifications : public APlaceableActorBase
		TEST_METHOD(Class__ConZ__PlaceableActorFortifications)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorFortifications, UnknownData_39OF, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorFortifications, 0x04C8);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class APlaceableActorItems : public APlaceableActorBase
		TEST_METHOD(Class__ConZ__PlaceableActorItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceableActorItems, UnknownData_FI58, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceableActorItems, 0x04A0);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UPlaceableElementWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__PlaceableElementWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableElementWidget, _icon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceableElementWidget, UnknownData_PR2Z, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceableElementWidget, 0x0288);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_A10U, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UPlacedPlaceableWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__PlacedPlaceableWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlacedPlaceableWidget, UnknownData_443F, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlacedPlaceableWidget, _container, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlacedPlaceableWidget, 0x02D0);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_79GM, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_WCEN, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UPlayableInstrument : public UInterface
		TEST_METHOD(Class__ConZ__PlayableInstrument)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayableInstrument, 0x0028);
		}

		// class UPlayEffectsWhenParticleCollides : public UParticleModuleEventSendToGame
		TEST_METHOD(Class__ConZ__PlayEffectsWhenParticleCollides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayEffectsWhenParticleCollides, ImpactEffects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayEffectsWhenParticleCollides, 0x0030);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_UIGY, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UPlayerRpcChannel : public UActorComponent
		TEST_METHOD(Class__ConZ__PlayerRpcChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerRpcChannel, UnknownData_MUI2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerRpcChannel, _referencedServerDataRequests, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerRpcChannel, 0x00D0);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_QXNY, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_4ALS, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_Q4NQ, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_M8AE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_IEUD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_RQT0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_PTN6, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_PJPK, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_SR5L, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_SG4Z, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_CZVB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_EMWX, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_UNLF, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_SO8C, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_9C4E, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UPlayerRpcChannelServerDataRequest : public UObject
		TEST_METHOD(Class__ConZ__PlayerRpcChannelServerDataRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerRpcChannelServerDataRequest, 0x0028);
		}

		// class UPlayerRpcChannelServerDataResponse : public UObject
		TEST_METHOD(Class__ConZ__PlayerRpcChannelServerDataResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerRpcChannelServerDataResponse, 0x0028);
		}

		// class UPotassiumDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__PotassiumDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotassiumDeficiency, 0x01C0);
		}

		// class APracticeLockpickingItem : public AItem
		TEST_METHOD(Class__ConZ__PracticeLockpickingItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APracticeLockpickingItem, UnknownData_4JZV, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APracticeLockpickingItem, _possibleLocks, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APracticeLockpickingItem, UnknownData_ZC8R, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APracticeLockpickingItem, 0x0778);
		}

		// class APracticeTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__PracticeTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APracticeTrapItem, UnknownData_ER7H, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APracticeTrapItem, 0x08A0);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_CDYR, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UPreviousNextSwitchWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__PreviousNextSwitchWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, IndexChanged, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, PreviousButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, NextButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, UnknownData_1DFI, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, _index, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviousNextSwitchWidget, UnknownData_JH1P, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviousNextSwitchWidget, 0x02A8);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_W7NO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_7O46, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_DJ9U, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class APrisoner : public AConZCharacter
		TEST_METHOD(Class__ConZ__Prisoner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_IXUQ, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_NWRW, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LifeComponent, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, SkillComponent, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, InventoryComponent, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeCombatComponent, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactComponent, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PhysicalAnimationComponent, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, InteractionComponent, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, SensingComponent, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, BaseInteractionComponent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, FemaleAnimationInstance, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaleAnimationInstance, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxActorEyesOffsetWhenLeaning, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, NumberOfCrouchStages, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CrouchStagesInterpSpeed, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_U73W, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CrouchViewsAdditionalGlobalOffsetZVsCrouchStage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ProneEyeHeight, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ProneEyeForwardOffset, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, SittingOnGroundEyeHeight, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LyingOnGroundEyeHeight, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, RestingOnGroundBackwardOffset, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DefaultPace, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_ZK5F, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MovementSettings, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, Fatness, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, Leanness, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, IgnoreMovementSettings, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, OverrideAimOffset, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_1QTP, 0x078A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, AimOffsetOverride, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DefaultViewBlendDuration, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_HNRP, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, EyesLookAtTargetOverride, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinEyesRotationYaw, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxEyesRotationYaw, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinEyesRotationPitch, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxEyesRotationPitch, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinEyesRotationPitchCurve, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxEyesRotationPitchCurve, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, EyesRotationSpeed, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DebugEyesRotation, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, OverrideEyesRotation, 0x07CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_2HQY, 0x07CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, EyesYawDeltaOverride, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, EyesPitchDeltaOverride, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ComaAudioEvent, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ComaScreamAudioEvent, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DeathAudioEvent, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DeathScreamAudioEvent, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ColdBreathParticles, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ColdBreathParticlesAttachPointName, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, StandardUndershirtMaterial, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DeluxeUndershirtMaterial, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, JumpAudioEvent, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingImpactSpeedVelocityXYWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingImpactSpeedVelocityZWeight, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingStaminaDrainCurve, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingImpactSpeedModifierCurveForHitReact, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingImpactSpeedModifierCurveForDamage, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingDamageCurve, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingEffects, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingImpactSpeedForRagdoll, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingMinRagdollDuration, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingMaxRagdollDuration, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LandingRagdollDurationPerSpeedUnit, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenIdle, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenIdleInOcean, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenMoving, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenMovingInOcean, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenDiving, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterParticlesWhenDivingAttachPointName, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterContactParticles, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, WaterContactParticlesAttachPointName, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinVelocityZToSpawnWaterContactParticles, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_QO3T, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, BuoyancyMultiplierVsGearWeightLimitDeviation, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, StartedDivingAudioEvent, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, StoppedDivingAudioEvent, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, EndDivingOnPlayAudioEvent, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxHeadWaterWeight, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxUpperBodyWaterWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxLowerBodyWaterWeight, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxFeetWaterWeight, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, OutwardsWaterPropagationFactor, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, InwardsWaterPropagationRate, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, OutwardsWaterPropagationRate, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_IYHK, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, GettingDryRateVsSpeed, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, SmallBleedingEffect, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LargeBleedingEffect, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UrineParticles, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UrineParticlesAttachPointName, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UrineParticlesAttachPointSmallestName, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UrineParticlesAttachPointBiggestName, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UrineParticlesAttachPointFemaleName, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DetectNearbyFoliageRadius, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinLocationDeltaToUpdateNearbyFoliage, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinSpeedToTriggerMovingThroughFoliageEffects, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MinAngularSpeedToTriggerMovingThroughFoliageEffects, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ShouldAutomaticallyBeSeenInFoliageByAIDistance, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_HJQP, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, OpenInventoryAudioEvent, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CloseInventoryAudioEvent, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CharacterDetectionRadiusForIngameMusic, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, BulletFlybyDangerCooldown, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HeadExplodeDamageThreshold, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeDangerCooldown, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeDangerRadius, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeDangerAngle, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PostReviveStateDuration, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, IsFriendly, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_K7X0, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenStanding, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenStandingInCombatMode, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenStandingInCombatModeAndHoldingBlock, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenCrouching, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenProne, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HitReactTypeWhenCaptured, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeAttackCapsulesAttachmentForItemInLHand, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeAttackCapsulesAttachmentForItemInRHand, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeAttackTypes, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeTargetMaxDistance, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeTargetMaxHeightDifference, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeTargetMaxConeHalfAngleVsDistanceToTarget, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, TimeSpanAfterWhichMeleeAttacksBecomeInitial, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CanEverBeKnockedOutByMeleeAttack, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_7X5H, 0x0A4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MeleeHitRagdollImpulseByDamageMagnitudeType, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, DefaultMeleeHitRagdollImpulse, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ThrowModeActivationDelay, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ThrowLaunchLocationSocketName, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ThrowingPathBrightnessFromTimeCurve, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, IslandBoundsCheckInterval, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ShouldOverrideCharacterTemplate, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_D1TH, 0x0ABD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, CharacterTemplateOverride, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LeftHandAttachmentSocket, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, RightHandAttachmentSocket, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LeftShoulderHolsterSocket, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, RightShoulderHolsterSocket, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PhysicalSurfacesData, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_JJ2B, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, TabModeOpened, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, TabModeClosed, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PanelsClosed, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, HoveredActorChanged, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, InteractedWithObject, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_HTZM, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, RespawnOnKill, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_8XW7, 0x0CB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, IKOffsetLeftFoot, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, IKOffsetRightFoot, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_CYHZ, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _deluxeWristwatchClass, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, BorderCrossingPenalty, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_6G40, 0x0CD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, ScopeWidget, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PlaceableActorItemsClass, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PlaceableActorFortificationsClass, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PlaceableActorBaseBuildingClass, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, PlaceableActorBaseUpgradeClass, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, MaxPossiblePlacedBlueprints, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_LED1, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, BorderCrossingPenaltyChange, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_HBCU, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _appearanceDataAsset, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _leavingTheIslandPenaltyTimes, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_ARP6, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gameEventOutOfBoundsDamage, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _itemPlacingMaterialAllowed, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _itemPlacingMaterialDisallowed, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _ikInterpSpeed, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_VM3Y, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _commonParameterCollection, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_AQKY, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _bodySimulationComponent, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _userProfile, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _userId, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _serverUserProfileId, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _userProfileName, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _userFakeName, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_Z67O, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isEnabled, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_WEFS, 0x1091);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _waterParticlesComponentWhenIdle, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _waterParticlesComponentWhenMoving, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _waterParticlesComponentWhenDiving, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_92PY, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _desiredStance, 0x10B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_D4KH, 0x10B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _targetCrouchStage, 0x10C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _desiredPace, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_ASWQ, 0x10C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _freeLookEnabled, 0x10CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _shouldIgnoreHeadTurningAndLeaning, 0x10CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_5K86, 0x10CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _postFreeLookControllerRotationBlendActive, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_VTGD, 0x10F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _repAimOffset, 0x1104);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_7SNK, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _inDanger, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_YZ6K, 0x1121);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lastSafeLocation, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_HO9E, 0x1144);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lastCorpse, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lastEventCorpse, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_TE05, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _targetLeanAmount, 0x1174);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_J2V0, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _meleeTarget, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_BVYR, 0x1928);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _activeMeleeSkill, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_443O, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _rotationTarget, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unarmedCombatInputRedirector, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _skillEventHandler, 0x1958);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_7A2C, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _weaponSocketName, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _weaponHolsterSocketName, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _weapon, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _itemInHands, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_7CVR, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _scopingWithItemInHandsState, 0x19BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_OE9O, 0x19BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _weaponAimingType, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_8A9V, 0x19E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _itemInHandsVisualObstructionDepthRep, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_TR61, 0x1A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapWeapons, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsThrowingItemToWeapon, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsWeaponToThrowingItem, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsNotWeaponToNotWeapon, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsWeaponToWeapon, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsNotWeaponToWeapon, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _swapItemsWeaponToNotWeapon, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _equipRifleStanding, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unequipRifleStanding, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _equipHandgunStanding, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unequipHadgunStanding, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _urinateMaleMontage, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _urinateFemaleMontage, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _urinateMaleForcedMontage, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _urinateFemaleForcedMontage, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defecateMontage, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defecateForcedMontage, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _vomitMontage, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _vomitForcedMontage, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _searchObject, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _searchObjectWhileItemInHands, 0x1AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _searchObjectWhileWeaponInHands, 0x1AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _searchObjectWhenSwimming, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _searchPrisoner, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsStanding, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsCrouching, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsProne, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsStandingEnd, 0x1AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsCrouchingEnd, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _patchWoundsProneEnd, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _eatGeneric, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _eatCan, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _drinkFromBottleStanding, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _drinkFromBottleCrouching, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _drinkInteraction, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defaultLongThrowMontage, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defaultLongThrowLoopMontage, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defaultShortThrowMontage, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _defaultThrowbackGrenadeMontage, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _chopTreeStanding, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _chopTreeStandingEnd, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _chopLogStanding, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _chopLogStandingEnd, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _craftStanding, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _craftCrouching, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _craftProne, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _uncraftStanding, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _uncraftCrouching, 0x1B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _uncraftProne, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _checkTime, 0x1B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _checkTimeWhileItemInHands, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _checkTimeWhileWeaponInHands, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _forceUnlockStanding, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _forceUnlockStandingEnd, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _forceUnlockStandingStop, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _spillMontage, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureShowFinger, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureStandSurrender, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureWaveHi, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureYouAreDead, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureFY, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gesturePoint, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureHeart, 0x1C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureBallpalm, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureFacepalm, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureFingerGun, 0x1C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureLaughing, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureSmellWave, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureSquat, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureCharge, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureChargeCombat, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureFreeze, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureFreezeCombat, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureGetDown, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureGetDownCombat, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureGetUp, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureGetUpCombat, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureHalt, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureHaltCombat, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureHurryUp, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureHurryUpCombat, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gesturePointMe, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gesturePointMeCombat, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gesturePointYou, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gesturePointYouCombat, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureRally, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureRallyCombat, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureThumbsUp, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureThumbsUpCombat, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureThumbsDown, 0x1CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureThumbsDownCombat, 0x1CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureUnderstandNot, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureUnderstandNotCombat, 0x1CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureUnderstandYes, 0x1CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gestureUnderstandYesCombat, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _commitSuicideStanding, 0x1D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _commitSuicideCrouching, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _commitSuicideRareStanding, 0x1D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lockpickRegular, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _whistleMontage, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _tuneBowMontage, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _repairVehicleMontage, 0x1D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _washClothMontage, 0x1D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _buryStandingMontage, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _buryRestStandingMontage, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _buryResumeStandingMontage, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _buryCrouchingMontage, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _buryRestCrouchingMontage, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _sitOnGroundStandingStartMontage, 0x1D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _sitOnGroundStandingEndMontage, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _sitOnGroundCrouchingStartMontage, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _sitOnGroundCrouchingEndMontage, 0x1D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _layOnGroundStandingStartMontage, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _layOnGroundStandingEndMontage, 0x1D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _layOnGroundCrouchingStartMontage, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _layOnGroundCrouchingEndMontage, 0x1DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _sittingOnGroundAnimation, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lyingOnGroundAnimation, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _lightFlareMontage, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _armTrapMontage, 0x1DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _turnMontageDescription, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_DCHE, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _respawnTime, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_T4TF, 0x1EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _appearanceIndex, 0x1EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _tattooIndex, 0x1EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeDesired, 0x1EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeModifier, 0x1EFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizePacked, 0x1F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_FBIA, 0x1F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeDesired, 0x1F04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeModifier, 0x1F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizePacked, 0x1F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_H2TO, 0x1F0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _bellyJiggleAmountCached, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastJiggleAmountCached, 0x1F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_N11V, 0x1F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isInCombatMode, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_9BNZ, 0x1F39);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _minThrowItemSpeed, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _maxThrowItemSpeed, 0x1F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_K3X4, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _minScreenCenterDotOpacityDecreaseDelay, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _maxScreenCenterDotOpacityDecreaseDelay, 0x1F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _screenCenterDotOpacityDecrease, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _screenCenterDotOpacityIncrease, 0x1F5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _shortThrowReductionMultiplier, 0x1F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _throwingObstacleCheckOffset, 0x1F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _throwingObstacleOffset, 0x1F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_DLMP, 0x1F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _focusModeZoomEffectCurve, 0x1FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _focusModeZoomSpeed, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_D2I9, 0x1FB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _leftShoulderHolsteredItemReplicated, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_BKNH, 0x1FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _rightShoulderHolsteredItemReplicated, 0x1FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_QQ0Y, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _selfInteractionSegmentInfo, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_NGH5, 0x2020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _interactDefaultContextMenuTimerHandle, 0x2028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _examinedBy, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _tacticsBlobMaterial, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _bodyPartEffects, 0x2048);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _handsBondage, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _throwingComponent, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_KVES, 0x2068);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _itemDropPlaceholder, 0x2074);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_9ZK3, 0x207C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _currentlyDroppingItem, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _actionsList, 0x2088);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_W1JC, 0x2098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _packedWaterWeight, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_F68U, 0x20CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _wetnessReachableFromSkyChecksInterval, 0x20D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_J2LB, 0x20D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _inventoryDamageOnMeleeAttack, 0x20EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gameEvent, 0x20F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _gameEventLoadout, 0x20F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_Y17Z, 0x2100);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _nearbyFoliageInfo, 0x2110);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _collidingNearbyFoliageInfo, 0x2120);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_QVH3, 0x2130);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _nameWidgetComponent, 0x21F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _chipLightColorIndex, 0x21F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_R0AH, 0x21FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, SaveSpawnLocationTag, 0x2200);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_QIMZ, 0x2208);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isDeluxePlayer, 0x2224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_YO14, 0x2225);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _dedicatedServerHandleFootstepInterval, 0x2228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_BFYX, 0x222C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _examinedPrisoner, 0x2230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _killClaimed, 0x2238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_MONO, 0x2239);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _playingInstrumentState, 0x2258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_Z144, 0x2259);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _carryingItemState, 0x225A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_QIN0, 0x225B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _playInstrumentEventNetworkDelay, 0x2268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_CPAC, 0x226C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _playInstrumentExitStateDuration, 0x2274);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_SYZY, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeMin, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeMax, 0x2294);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeDeluxeModifier, 0x2298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _breastSizeAdminModifier, 0x229C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisLocationLean, 0x22A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisLocationFat, 0x22AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisHandleLocationLean, 0x22B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisHandleLocationFat, 0x22C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisMinSizeHandleZ, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisMaxSizeHandleZ, 0x22D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _shouldShowPenisOverride, 0x22D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_09K7, 0x22D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeMin, 0x22DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeMax, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeDeluxeModifier, 0x22E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _penisSizeAdminModifier, 0x22E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_TJ65, 0x22EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _mountSpeedThreshold, 0x22F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unmountSpeedThreshold, 0x22F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unmountInputVelocityThreshold, 0x22FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _unmountSpeedThresholdForRagdoll, 0x2300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _mountTiltAngleForRagdoll, 0x2304);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_AR9S, 0x2308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _repMount, 0x2320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _midiDeviceController, 0x2330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_H2E0, 0x2338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _rareSuicideAnimationChance, 0x2370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _hasInfiniteAmmo, 0x2374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isInGodMode, 0x2375);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isImmortal, 0x2376);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_6G1H, 0x2377);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _hairLength, 0x2398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _facialHairLength, 0x239C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_4WWI, 0x23A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _hairGrowthTotalTime, 0x23AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _facialHairGrowthTotalTime, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _hairUpdateRate, 0x23B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _characterActionPlayRateMultiplier, 0x23B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _enablePerComponentReplicationFrequency, 0x23BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_NYLN, 0x23BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _componentsReplicationFrequency, 0x23C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_P97N, 0x23D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _maxRestingAngle, 0x2414);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_DP5P, 0x2418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _navigationInvokerComponent, 0x2440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_I4X3, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _genericAcceptanceRadius, 0x248C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _distanceWhereRotationStarts, 0x2490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_D85Z, 0x2494);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, LegsInjuryTag, 0x24A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_ICD6, 0x24A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _isLimping, 0x24FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_XXRM, 0x24FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _vehicleWeaponAimingStance, 0x2514);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_M991, 0x2515);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _vehicleAimingYawReplicated, 0x2540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_7Y47, 0x2544);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, _hasExplodedHead, 0x2550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisoner, UnknownData_N289, 0x2551);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisoner, 0x2560);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_PZIT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_NRRV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_69MC, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_DCAE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_3GIT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_PKU9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_ZJNS, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_6UCR, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_4RBT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_J9MH, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_6VYK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_UAIA, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_8ZZ2, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_SK5V, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ZXOA, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_X3L3, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_43CK, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GBR7, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ZCG3, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NCV4, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ZWYI, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_UR8S, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GUXE, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_XAGV, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06A0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_UIL3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_HACL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_L583, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_2DFS, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_S2VD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_BGB5, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_3H7Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_L63I, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class UBodySetup : public UBodySetupCore
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_UB4L, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_R34W, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_UTMD, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_OUFT, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_5WP6, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_37LL, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_B9ZP, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_4B4F, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_NHYO, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_JY4D, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_KSIR, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_SON5, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_JE7Z, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UPhysicsSettingsCore
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_8E28, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_QUXZ, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_YZ46, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_0MAS, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_AXNR, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_P81F, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_D9BH, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_3Q39, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_PPVV, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_U6OS, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_LU3F, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_C6HP, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_W2P7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_GC09, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B0);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_Q8O0, 0x02E6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_QXH6, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_8KZX, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_QOG1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_MPVO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_M27G, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_M01I, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_7ZZK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_H6JV, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_MN6W, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_0KHP, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_RWG6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_SOXY, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07F0);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_UNWQ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_TX0U, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_CVBE, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_UQX6, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_X20Z, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_JIX1, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class UPrisonerAction : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAction, UnknownData_8CB4, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerAction, 0x0108);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_Q1QU, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_84QD, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_6WEU, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// class UPrisonerActionDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDescription, 0x0030);
		}

		// class UPrisonerActionActivateSlot : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionActivateSlot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionActivateSlot, 0x00F8);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class UPrisonerActionActivateSlotDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionActivateSlotDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionActivateSlotDescription, UnknownData_74TQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionActivateSlotDescription, 0x0038);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_0BYH, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class UPrisonerActionAddWeaponAttachment : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionAddWeaponAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionAddWeaponAttachment, UnknownData_4QMK, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionAddWeaponAttachment, 0x0100);
		}

		// class UPrisonerActionAddWeaponAttachmentDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionAddWeaponAttachmentDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionAddWeaponAttachmentDescription, UnknownData_9HM9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionAddWeaponAttachmentDescription, 0x0040);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_R6VL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_W85Y, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FHBV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7UOC, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0DTP, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZZSE, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9HNC, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_U29D, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TF5F, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_F8MN, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JL7B, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_K4M8, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LZ9N, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0RT4, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FAFU, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MU1B, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_POTV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_L9KC, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5HI3, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GEGH, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_08OZ, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8W73, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OTKQ, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_T65I, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AB0W, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_H9AA, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GH9Y, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3WD9, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// class UPrisonerActionAlignTransform : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionAlignTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionAlignTransform, UnknownData_SM9C, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionAlignTransform, 0x0110);
		}

		// class UPrisonerActionAlignTransformDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionAlignTransformDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionAlignTransformDescription, UnknownData_3Y7B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionAlignTransformDescription, 0x0090);
		}

		// class UPrisonerActionArtificialPerspiration : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionArtificialPerspiration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionArtificialPerspiration, UnknownData_PKII, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionArtificialPerspiration, 0x0100);
		}

		// class UPrisonerActionArtificialPerspirationDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionArtificialPerspirationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionArtificialPerspirationDescription, UnknownData_VEJ3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionArtificialPerspirationDescription, 0x0038);
		}

		// class UPrisonerActionBuryItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionBuryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionBuryItem, UnknownData_OBDH, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionBuryItem, 0x0128);
		}

		// class UUPrisonerActionBuryItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__UPrisonerActionBuryItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUPrisonerActionBuryItemDescription, UnknownData_O7N0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUPrisonerActionBuryItemDescription, 0x0090);
		}

		// class UPrisonerActionChainForExitingVehicle : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChainForExitingVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChainForExitingVehicle, UnknownData_0BLL, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChainForExitingVehicle, 0x0110);
		}

		// class UPrisonerActionChainForExitingVehicleDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChainForExitingVehicleDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChainForExitingVehicleDescription, UnknownData_ETXQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChainForExitingVehicleDescription, 0x0040);
		}

		// class UPrisonerActionChangeStance : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionChangeStance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeStance, UnknownData_7729, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeStance, 0x0108);
		}

		// class UPrisonerActionChangeStanceDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChangeStanceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeStanceDescription, UnknownData_9I4Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeStanceDescription, 0x0038);
		}

		// class UPrisonerActionChangeStanceWaitEndOnOwningClient : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChangeStanceWaitEndOnOwningClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeStanceWaitEndOnOwningClient, UnknownData_9DNN, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeStanceWaitEndOnOwningClient, 0x0118);
		}

		// class UPrisonerActionChangeStanceWaitEndOnOwningClientDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChangeStanceWaitEndOnOwningClientDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeStanceWaitEndOnOwningClientDescription, UnknownData_DFYV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeStanceWaitEndOnOwningClientDescription, 0x0038);
		}

		// class UPrisonerActionChangeVehicleWeaponAimingStance : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChangeVehicleWeaponAimingStance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeVehicleWeaponAimingStance, UnknownData_BTV6, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeVehicleWeaponAimingStance, 0x0110);
		}

		// class UPrisonerActionChangeVehicleWeaponAimingStanceDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChangeVehicleWeaponAimingStanceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeVehicleWeaponAimingStanceDescription, UnknownData_KHLD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeVehicleWeaponAimingStanceDescription, 0x0038);
		}

		// class UPrisonerActionChangeWeaponFiringMode : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionChangeWeaponFiringMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChangeWeaponFiringMode, UnknownData_TFN7, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeWeaponFiringMode, 0x0100);
		}

		// class UPrisonerActionChangeWeaponFiringModeModeDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChangeWeaponFiringModeModeDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChangeWeaponFiringModeModeDescription, 0x0030);
		}

		// class UPrisonerActionChargeVehicleBattery : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChargeVehicleBattery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChargeVehicleBattery, UnknownData_NQEC, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChargeVehicleBattery, 0x0110);
		}

		// class UPrisonerActionChargeVehicleBatteryDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChargeVehicleBatteryDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChargeVehicleBatteryDescription, UnknownData_R35Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChargeVehicleBatteryDescription, 0x0068);
		}

		// class UPrisonerActionCheckChainsawFuelStatus : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionCheckChainsawFuelStatus)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckChainsawFuelStatus, 0x0108);
		}

		// class UPrisonerActionCheckChainsawFuelStatusDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCheckChainsawFuelStatusDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCheckChainsawFuelStatusDescription, UnknownData_Y7IV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckChainsawFuelStatusDescription, 0x0038);
		}

		// class UPrisonerActionCheckTime : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionCheckTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCheckTime, UnknownData_70F0, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckTime, 0x0108);
		}

		// class UPrisonerActionCheckTimeDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCheckTimeDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckTimeDescription, 0x0030);
		}

		// class UPrisonerActionCheckWeaponAmmo : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionCheckWeaponAmmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCheckWeaponAmmo, UnknownData_46LT, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckWeaponAmmo, 0x0118);
		}

		// class UPrisonerActionCheckWeaponAmmoDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCheckWeaponAmmoDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCheckWeaponAmmoDescription, UnknownData_8K6J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckWeaponAmmoDescription, 0x0040);
		}

		// class UPrisonerActionCheckWeaponFiringMode : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionCheckWeaponFiringMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCheckWeaponFiringMode, UnknownData_JIL6, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckWeaponFiringMode, 0x0108);
		}

		// class UPrisonerActionCheckWeaponFiringModeDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCheckWeaponFiringModeDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCheckWeaponFiringModeDescription, 0x0030);
		}

		// class UPrisonerActionChopBaseElement : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChopBaseElement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChopBaseElement, 0x0108);
		}

		// class UPrisonerActionChopBaseElementDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChopBaseElementDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChopBaseElementDescription, UnknownData_KP3V, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChopBaseElementDescription, 0x0080);
		}

		// class UPrisonerActionChopItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionChopItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChopItem, UnknownData_QYOV, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChopItem, 0x0110);
		}

		// class UPrisonerActionChopItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionChopItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionChopItemDescription, UnknownData_72EB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionChopItemDescription, 0x0050);
		}

		// class UPrisonerActionClaimKill : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionClaimKill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClaimKill, 0x0108);
		}

		// class UPrisonerActionClaimKillDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionClaimKillDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionClaimKillDescription, UnknownData_YTF1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClaimKillDescription, 0x0038);
		}

		// class UPrisonerActionClearWeaponMalfunction : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionClearWeaponMalfunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionClearWeaponMalfunction, UnknownData_XF4U, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClearWeaponMalfunction, 0x0108);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_UZUE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UPrisonerActionClearWeaponMalfunctionDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionClearWeaponMalfunctionDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionClearWeaponMalfunctionDescription, UnknownData_YOLG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClearWeaponMalfunctionDescription, 0x0040);
		}

		// class UPrisonerActionClimbOntoLadder : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionClimbOntoLadder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClimbOntoLadder, 0x0108);
		}

		// class UReplayNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_E9AD, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// class UPrisonerActionClimbOntoLadderDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionClimbOntoLadderDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionClimbOntoLadderDescription, UnknownData_B8LV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionClimbOntoLadderDescription, 0x0048);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class UPrisonerActionCommitSuicide : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionCommitSuicide)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCommitSuicide, 0x00F8);
		}

		// class UPrisonerActionCommitSuicideDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCommitSuicideDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCommitSuicideDescription, UnknownData_A4KR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCommitSuicideDescription, 0x0038);
		}

		// class UReplaySubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_EWG3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// class UPrisonerActionCraftItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionCraftItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCraftItem, UnknownData_9AT8, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCraftItem, 0x0110);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UPrisonerActionCraftItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCraftItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCraftItemDescription, UnknownData_RSB3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCraftItemDescription, 0x00B8);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_ARQQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UPrisonerActionCutHair : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionCutHair)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCutHair, 0x00F8);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_LYII, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UPrisonerActionCutHairDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCutHairDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCutHairDescription, UnknownData_MJJ6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCutHairDescription, 0x0048);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_VNUJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_2I9M, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class UPrisonerActionCutObject : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionCutObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCutObject, UnknownData_WONJ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCutObject, 0x0110);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_2VZS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_NEX4, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_HZCJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_WJKG, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_FG11, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_Z42P, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class UPrisonerActionCutObjectDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionCutObjectDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionCutObjectDescription, UnknownData_N98J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionCutObjectDescription, 0x0070);
		}

		// class UPrisonerActionDefecate : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionDefecate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDefecate, UnknownData_K2G5, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDefecate, 0x0108);
		}

		// class UPrisonerActionDefecateDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionDefecateDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDefecateDescription, UnknownData_LUZ6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDefecateDescription, 0x0038);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_66OE, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_5B3B, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_YAHC, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_8SS8, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_CKDI, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// class UPrisonerActionDrainVehicleFuelIntoItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionDrainVehicleFuelIntoItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrainVehicleFuelIntoItem, UnknownData_YE3L, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrainVehicleFuelIntoItem, 0x0110);
		}

		// class UPrisonerActionDrainVehicleFuelIntoItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionDrainVehicleFuelIntoItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrainVehicleFuelIntoItemDescription, UnknownData_E1W4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrainVehicleFuelIntoItemDescription, 0x0068);
		}

		// class UPrisonerActionDrinkFromReplenishableResource : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionDrinkFromReplenishableResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrinkFromReplenishableResource, UnknownData_ARAI, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrinkFromReplenishableResource, 0x0110);
		}

		// class UPrisonerActionDrinkFromReplenishableResourceDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionDrinkFromReplenishableResourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrinkFromReplenishableResourceDescription, UnknownData_CISY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrinkFromReplenishableResourceDescription, ProxyForReplenishableResource, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrinkFromReplenishableResourceDescription, 0x0078);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class UPrisonerActionDrinkInteraction : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionDrinkInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrinkInteraction, 0x00F8);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UPrisonerActionDrinkInteractionDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionDrinkInteractionDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionDrinkInteractionDescription, UnknownData_2MSS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionDrinkInteractionDescription, 0x0038);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class UPrisonerActionEatItem : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionEatItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEatItem, _startEatingAudioEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEatItem, _stopEatingAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEatItem, _itemClass, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEatItem, 0x0110);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_LEO8, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_U5VG, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_60J1, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_PW5T, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_A3C3, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_FR0I, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3Q67, 0x088D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_94DH, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// class UPrisonerActionEatItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionEatItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEatItemDescription, UnknownData_KVV9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEatItemDescription, 0x0040);
		}

		// class UPrisonerActionEnterCombatMode : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionEnterCombatMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEnterCombatMode, 0x00F8);
		}

		// class UPrisonerActionEnterCombatModeDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionEnterCombatModeDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEnterCombatModeDescription, UnknownData_A0LU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEnterCombatModeDescription, 0x0040);
		}

		// class UPrisonerActionEnterVehicle : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionEnterVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEnterVehicle, UnknownData_C843, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEnterVehicle, 0x0128);
		}

		// class UPrisonerActionEnterVehicleDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionEnterVehicleDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEnterVehicleDescription, UnknownData_TR30, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEnterVehicleDescription, 0x0080);
		}

		// class UPrisonerActionEquipWeapon : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionEquipWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEquipWeapon, UnknownData_XSYW, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEquipWeapon, 0x0100);
		}

		// class UPrisonerActionEquipWeaponDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionEquipWeaponDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionEquipWeaponDescription, UnknownData_PNGL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionEquipWeaponDescription, 0x0040);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_FL86, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_NFEM, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// class UPrisonerActionExecuteInteraction : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionExecuteInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionExecuteInteraction, UnknownData_EZNE, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExecuteInteraction, 0x0100);
		}

		// class UPrisonerActionExecuteInteractionDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionExecuteInteractionDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionExecuteInteractionDescription, UnknownData_TND9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExecuteInteractionDescription, 0x00C8);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class UPrisonerActionExitVehicle : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionExitVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionExitVehicle, UnknownData_CTK2, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExitVehicle, 0x0128);
		}

		// class UPrisonerActionExitVehicleDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionExitVehicleDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionExitVehicleDescription, UnknownData_ZB6D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExitVehicleDescription, 0x0038);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_KT5F, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class UPrisonerActionExtinguishFire : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionExtinguishFire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExtinguishFire, 0x00F8);
		}

		// class UPrisonerActionExtinguishFireDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionExtinguishFireDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionExtinguishFireDescription, UnknownData_W7WJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionExtinguishFireDescription, 0x0040);
		}

		// class UPrisonerActionFillGameResourceContainer : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionFillGameResourceContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillGameResourceContainer, UnknownData_AF4V, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillGameResourceContainer, 0x0130);
		}

		// class UPrisonerActionFillGameResourceContainerDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFillGameResourceContainerDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillGameResourceContainerDescription, UnknownData_XEYP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillGameResourceContainerDescription, 0x0078);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_57D8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription : public UPrisonerActionFillGameResourceContainerDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFillGameResourceContainerWithReplenishableResourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription, UnknownData_C4XA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription, ProxyForReplenishableResource, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription, 0x0090);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_VC0O, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_YLLB, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_UCUE, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UPrisonerActionFillVehicleFuelWithItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionFillVehicleFuelWithItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillVehicleFuelWithItem, UnknownData_6AY5, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillVehicleFuelWithItem, 0x0110);
		}

		// class UPrisonerActionFillVehicleFuelWithItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFillVehicleFuelWithItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillVehicleFuelWithItemDescription, UnknownData_2JET, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillVehicleFuelWithItemDescription, 0x0068);
		}

		// class UPrisonerActionFillVehicleFuelWithReplenishableResource : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionFillVehicleFuelWithReplenishableResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillVehicleFuelWithReplenishableResource, UnknownData_9SNY, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillVehicleFuelWithReplenishableResource, 0x0128);
		}

		// class UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFillVehicleFuelWithReplenishableResourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription, UnknownData_90CU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription, 0x0080);
		}

		// class UPrisonerActionFillWater : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionFillWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillWater, UnknownData_XBI4, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillWater, 0x0100);
		}

		// class UPrisonerActionFillWaterDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFillWaterDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFillWaterDescription, UnknownData_FA7Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFillWaterDescription, 0x0058);
		}

		// class UPrisonerActionFixTire : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionFixTire)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFixTire, UnknownData_4Z3B, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFixTire, 0x0118);
		}

		// class UPrisonerActionFixTireDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFixTireDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFixTireDescription, UnknownData_95WJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFixTireDescription, 0x0078);
		}

		// class UPrisonerActionForceUnlock : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionForceUnlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionForceUnlock, UnknownData_7O7B, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionForceUnlock, 0x0110);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_KSRO, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// class UPrisonerActionForceUnlockDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionForceUnlockDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionForceUnlockDescription, UnknownData_VX6U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionForceUnlockDescription, 0x0080);
		}

		// class UPrisonerActionFuelFire : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionFuelFire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFuelFire, 0x00F8);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_89NM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class UPrisonerActionFuelFireDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionFuelFireDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionFuelFireDescription, UnknownData_959M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionFuelFireDescription, 0x0048);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_261K, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_13UP, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_A0IH, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class UPrisonerActionGesture : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionGesture, UnknownData_3JQ7, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionGesture, 0x0100);
		}

		// class UPrisonerActionGestureDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionGestureDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionGestureDescription, UnknownData_TNKB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionGestureDescription, 0x0038);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class UPrisonerActionIgniteFlare : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionIgniteFlare)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionIgniteFlare, 0x00F8);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_CKYF, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class UPrisonerActionLightFlareDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionLightFlareDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionLightFlareDescription, UnknownData_K0BW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionLightFlareDescription, 0x0038);
		}

		// class UPrisonerActionInsertArrow : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionInsertArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionInsertArrow, UnknownData_ZQU0, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionInsertArrow, 0x0108);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class UPrisonerActionInsertArrowDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionInsertArrowDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionInsertArrowDescription, UnknownData_C3V4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionInsertArrowDescription, 0x0038);
		}

		// class UPrisonerActionLootCorpse : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionLootCorpse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionLootCorpse, 0x00F8);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_CTN6, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class UPrisonerActionLootCorpseDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionLootCorpseDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionLootCorpseDescription, UnknownData_C6NU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionLootCorpseDescription, 0x0048);
		}

		// class UPrisonerActionLootPrisoner : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionLootPrisoner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionLootPrisoner, 0x00F8);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_H7DS, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_FYL0, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_SJWU, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// class UPrisonerActionLootPrisonerDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionLootPrisonerDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionLootPrisonerDescription, UnknownData_4BQX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionLootPrisonerDescription, 0x0048);
		}

		// class UPrisonerActionMakeConscious : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionMakeConscious)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMakeConscious, UnknownData_UXB1, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMakeConscious, 0x0100);
		}

		// class UPrisonerActionMakeConsciousDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionMakeConsciousDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMakeConsciousDescription, UnknownData_KY65, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMakeConsciousDescription, 0x0038);
		}

		// class UPrisonerActionManipulateTrap : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionManipulateTrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionManipulateTrap, UnknownData_SFRN, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionManipulateTrap, 0x0100);
		}

		// class UPrisonerActionManipulateTrapDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionManipulateTrapDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionManipulateTrapDescription, UnknownData_B4FW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionManipulateTrapDescription, 0x0050);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_EFPP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UPrisonerActionMedicalDiagnosis : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionMedicalDiagnosis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMedicalDiagnosis, UnknownData_7WRX, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMedicalDiagnosis, 0x0100);
		}

		// class UPrisonerActionMedicalDiagnosisDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionMedicalDiagnosisDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMedicalDiagnosisDescription, UnknownData_TZ18, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMedicalDiagnosisDescription, 0x0040);
		}

		// class UPrisonerActionMinigame : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionMinigame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMinigame, UnknownData_JXCZ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMinigame, 0x0118);
		}

		// class UPrisonerActionMinigameDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionMinigameDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMinigameDescription, MinigameConfiguration, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMinigameDescription, 0x0038);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class UPrisonerActionMoveToLocation : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionMoveToLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMoveToLocation, UnknownData_UD94, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMoveToLocation, 0x0110);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_MXX7, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_EYSE, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_3U55, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_TX1M, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_A5E7, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class UPrisonerActionMoveToLocationDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionMoveToLocationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionMoveToLocationDescription, UnknownData_2FZP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionMoveToLocationDescription, 0x0050);
		}

		// class UPrisonerActionOpenItem : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionOpenItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOpenItem, UnknownData_TJEW, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOpenItem, 0x0100);
		}

		// class UPrisonerActionOpenItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionOpenItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOpenItemDescription, UnknownData_EKB3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOpenItemDescription, 0x0038);
		}

		// class UPrisonerActionOpenOrCloseVehicleDoor : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionOpenOrCloseVehicleDoor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOpenOrCloseVehicleDoor, UnknownData_866O, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOpenOrCloseVehicleDoor, 0x0118);
		}

		// class UPrisonerActionOpenOrCloseVehicleDoorDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionOpenOrCloseVehicleDoorDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOpenOrCloseVehicleDoorDescription, UnknownData_RXND, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOpenOrCloseVehicleDoorDescription, 0x0060);
		}

		// class UPrisonerActionOperateBondage : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionOperateBondage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOperateBondage, UnknownData_KK83, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOperateBondage, 0x0110);
		}

		// class UPrisonerActionOperateBondageDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionOperateBondageDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionOperateBondageDescription, UnknownData_XX4T, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionOperateBondageDescription, 0x0050);
		}

		// class UPrisonerActionPatchWounds : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionPatchWounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPatchWounds, 0x00F8);
		}

		// class UPrisonerActionPatchWoundsDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionPatchWoundsDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPatchWoundsDescription, UnknownData_W45D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPatchWoundsDescription, 0x0048);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class UPrisonerActionPerformAnesthesia : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionPerformAnesthesia)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPerformAnesthesia, UnknownData_IK85, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPerformAnesthesia, 0x0100);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class UPrisonerActionPerformAnesthesiaDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionPerformAnesthesiaDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPerformAnesthesiaDescription, UnknownData_6BM3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPerformAnesthesiaDescription, 0x0040);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class UPrisonerActionPerformSurgery : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionPerformSurgery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPerformSurgery, UnknownData_MHGP, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPerformSurgery, 0x0100);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class UPrisonerActionPerformSurgeryDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionPerformSurgeryDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPerformSurgeryDescription, UnknownData_FRW7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPerformSurgeryDescription, 0x0038);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// class UPrisonerActionPullTooth : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionPullTooth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPullTooth, UnknownData_8TO3, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPullTooth, 0x0100);
		}

		// class UPrisonerActionPullToothDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionPullToothDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionPullToothDescription, UnknownData_CH37, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionPullToothDescription, 0x0038);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class UPrisonerActionReloadWeapon : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionReloadWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionReloadWeapon, UnknownData_JDRQ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionReloadWeapon, 0x0108);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_03QR, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_IWUC, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_GKCH, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_LW1C, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// class UPrisonerActionReloadWeaponDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionReloadWeaponDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionReloadWeaponDescription, UnknownData_P4TX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionReloadWeaponDescription, 0x0068);
		}

		// class UPrisonerActionRemoveItemFromHands : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionRemoveItemFromHands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRemoveItemFromHands, UnknownData_08LK, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRemoveItemFromHands, 0x0108);
		}

		// class UPrisonerActionRemoveItemFromHandsDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRemoveItemFromHandsDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRemoveItemFromHandsDescription, UnknownData_7WNS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRemoveItemFromHandsDescription, 0x0060);
		}

		// class UPrisonerActionRemoveWeaponAttachment : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionRemoveWeaponAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRemoveWeaponAttachment, UnknownData_2AMN, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRemoveWeaponAttachment, 0x0100);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_2X5K, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class UPrisonerActionRemoveWeaponAttachmentDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRemoveWeaponAttachmentDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRemoveWeaponAttachmentDescription, UnknownData_N8EE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRemoveWeaponAttachmentDescription, 0x0040);
		}

		// class UPrisonerActionRepair : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionRepair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRepair, UnknownData_H7F0, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepair, 0x0100);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_G2EE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class UPrisonerActionRepairDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRepairDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRepairDescription, UnknownData_VD3B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairDescription, 0x0048);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_E2IU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class UPrisonerActionRepairBaseElement : public UPrisonerActionRepair
		TEST_METHOD(Class__ConZ__PrisonerActionRepairBaseElement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairBaseElement, 0x0100);
		}

		// class UPrisonerActionRepairBaseElementDescription : public UPrisonerActionRepairDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRepairBaseElementDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRepairBaseElementDescription, UnknownData_RBV3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairBaseElementDescription, 0x0088);
		}

		// class UPrisonerActionRepairItem : public UPrisonerActionRepair
		TEST_METHOD(Class__ConZ__PrisonerActionRepairItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairItem, 0x0100);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_H7U1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class UPrisonerActionRepairItemDescription : public UPrisonerActionRepairDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRepairItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRepairItemDescription, UnknownData_XTZG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairItemDescription, 0x0050);
		}

		// class UPrisonerActionRepairVehicle : public UPrisonerActionRepair
		TEST_METHOD(Class__ConZ__PrisonerActionRepairVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairVehicle, 0x0100);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class UPrisonerActionRepairVehicleDescription : public UPrisonerActionRepairDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRepairVehicleDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRepairVehicleDescription, UnknownData_GLAL, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRepairVehicleDescription, 0x0050);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_YJNK, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class UPrisonerActionResuscitate : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionResuscitate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionResuscitate, UnknownData_4PUK, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionResuscitate, 0x0100);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class UPrisonerActionResuscitateDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionResuscitateDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionResuscitateDescription, UnknownData_Y3BX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionResuscitateDescription, 0x0038);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class UPrisonerActionRevivePatient : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionRevivePatient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRevivePatient, UnknownData_AU86, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRevivePatient, 0x0100);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UPrisonerActionRevivePatientDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionRevivePatientDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionRevivePatientDescription, UnknownData_V403, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionRevivePatientDescription, 0x0038);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_Q4P0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class UPrisonerActionSearchGround : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionSearchGround)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchGround, UnknownData_7DRA, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchGround, 0x0110);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class UPrisonerActionSearchGroundDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionSearchGroundDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchGroundDescription, UnknownData_OMU5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchGroundDescription, 0x0060);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_N6ND, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_TIE6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class UPrisonerActionSearchObject : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionSearchObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchObject, UnknownData_IMUN, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchObject, 0x0118);
		}

		// class UPrisonerActionSearchObjectDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionSearchObjectDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchObjectDescription, UnknownData_Z0IY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchObjectDescription, 0x0060);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_YJPR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class UPrisonerActionSearchPrisoner : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionSearchPrisoner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchPrisoner, UnknownData_JGNZ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchPrisoner, 0x0108);
		}

		// class UPrisonerActionSearchPrisonerDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionSearchPrisonerDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSearchPrisonerDescription, UnknownData_J43K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSearchPrisonerDescription, 0x0038);
		}

		// class UPrisonerActionSpill : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionSpill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSpill, UnknownData_M8WF, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSpill, 0x0138);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class UPrisonerActionSpillDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionSpillDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionSpillDescription, UnknownData_RY41, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionSpillDescription, 0x0048);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_QHEO, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class UPrisonerActionStartCarryingItem : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionStartCarryingItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartCarryingItem, UnknownData_ZV6H, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartCarryingItem, 0x0118);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class UPrisonerActionStartCarryingItemDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStartCarryingItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartCarryingItemDescription, UnknownData_52A3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartCarryingItemDescription, 0x0038);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class UPrisonerActionStartChainsawEngine : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionStartChainsawEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartChainsawEngine, UnknownData_O3EO, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartChainsawEngine, 0x0110);
		}

		// class UPrisonerActionStartChainsawEngineDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStartChainsawEngineDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartChainsawEngineDescription, UnknownData_NZP5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartChainsawEngineDescription, 0x0040);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_SB1L, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_DOV9, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class UPrisonerActionStartPlayingInstrument : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionStartPlayingInstrument)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartPlayingInstrument, 0x0108);
		}

		// class UPrisonerActionStartPlayingInstrumentDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStartPlayingInstrumentDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartPlayingInstrumentDescription, UnknownData_GUC6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartPlayingInstrumentDescription, 0x0038);
		}

		// class UPrisonerActionStartResting : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionStartResting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartResting, UnknownData_BUDR, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartResting, 0x0100);
		}

		// class UPrisonerActionStartRestingDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStartRestingDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStartRestingDescription, UnknownData_ZOKU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStartRestingDescription, 0x00E0);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class UPrisonerActionStopResting : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionStopResting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStopResting, 0x00F8);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_D71N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class UPrisonerActionStopRestingDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStopRestingDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStopRestingDescription, 0x0030);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_5S62, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class UPrisonerActionStoreItem : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionStoreItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStoreItem, UnknownData_ZQJ9, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStoreItem, 0x0100);
		}

		// class UPrisonerActionStoreItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionStoreItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionStoreItemDescription, UnknownData_V4XI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionStoreItemDescription, 0x0050);
		}

		// class UPrisonerActionTakeItemInHands : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionTakeItemInHands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTakeItemInHands, UnknownData_JFAH, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTakeItemInHands, 0x0118);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_CPKE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class UPrisonerActionTakeItemInHandsDescription : public UPrisonerActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionTakeItemInHandsDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTakeItemInHandsDescription, UnknownData_8CN2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTakeItemInHandsDescription, 0x0040);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class UPrisonerActionTakeMedication : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionTakeMedication)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTakeMedication, 0x00F8);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_ZR9X, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_X0H6, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0088);
		}

		// class UPrisonerActionTakeMedicationDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionTakeMedicationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTakeMedicationDescription, UnknownData_H54F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTakeMedicationDescription, 0x0038);
		}

		// class UPrisonerActionThrowItem : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionThrowItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionThrowItem, UnknownData_CVN6, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionThrowItem, 0x0108);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_HBXL, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_JPN1, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// class UPrisonerActionThrowItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionThrowItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionThrowItemDescription, UnknownData_IUUG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionThrowItemDescription, 0x0048);
		}

		// class UPrisonerActionTreatBrokenLimbs : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionTreatBrokenLimbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTreatBrokenLimbs, UnknownData_52LY, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTreatBrokenLimbs, 0x0100);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class UPrisonerActionTreatBrokenLimbsDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionTreatBrokenLimbsDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTreatBrokenLimbsDescription, UnknownData_TXWH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTreatBrokenLimbsDescription, 0x0040);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class UPrisonerActionTreatSickness : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionTreatSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTreatSickness, UnknownData_0JZM, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTreatSickness, 0x0100);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_NQP5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_35QP, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_45Z5, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class UPrisonerActionTreatSicknessDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionTreatSicknessDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTreatSicknessDescription, UnknownData_WS5M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTreatSicknessDescription, 0x0040);
		}

		// class UPrisonerActionTuneBow : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionTuneBow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTuneBow, _tuneBowAudioEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTuneBow, 0x0100);
		}

		// class UPrisonerActionTuneBowDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionTuneBowDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionTuneBowDescription, UnknownData_8K49, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionTuneBowDescription, 0x0040);
		}

		// class UPrisonerActionUncraftItem : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionUncraftItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUncraftItem, UnknownData_STDR, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUncraftItem, 0x0100);
		}

		// class UPrisonerActionUncraftItemDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionUncraftItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUncraftItemDescription, UnknownData_4MXL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUncraftItemDescription, 0x0038);
		}

		// class UPrisonerActionUnequipWeapon : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionUnequipWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUnequipWeapon, UnknownData_PFTI, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUnequipWeapon, 0x0100);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UPrisonerActionUnequipWeaponDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionUnequipWeaponDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUnequipWeaponDescription, 0x0030);
		}

		// class UPrisonerActionUnloadAmmoFromWeapon : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionUnloadAmmoFromWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUnloadAmmoFromWeapon, UnknownData_6BKZ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUnloadAmmoFromWeapon, 0x0108);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class UPrisonerActionUnloadAmmoFromWeaponDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionUnloadAmmoFromWeaponDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUnloadAmmoFromWeaponDescription, UnknownData_YIUS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUnloadAmmoFromWeaponDescription, 0x0048);
		}

		// class UPrisonerActionUrinate : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionUrinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUrinate, UnknownData_RU0J, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUrinate, 0x0108);
		}

		// class UPrisonerActionUrinateDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionUrinateDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionUrinateDescription, UnknownData_2X0S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionUrinateDescription, 0x0038);
		}

		// class UPrisonerActionVomit : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionVomit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionVomit, UnknownData_7WFG, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionVomit, 0x0100);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class UPrisonerActionVomitDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionVomitDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionVomitDescription, UnknownData_FIRJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionVomitDescription, 0x0038);
		}

		// class UPrisonerActionWashCloth : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionWashCloth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionWashCloth, UnknownData_4U6Q, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionWashCloth, 0x0100);
		}

		// class UUPrisonerActionWashClothDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__UPrisonerActionWashClothDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUPrisonerActionWashClothDescription, UnknownData_3BD1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUPrisonerActionWashClothDescription, 0x0050);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_RDMM, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UPrisonerActionWashWithReplenishableResource : public UPrisonerAction
		TEST_METHOD(Class__ConZ__PrisonerActionWashWithReplenishableResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionWashWithReplenishableResource, UnknownData_9UAJ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionWashWithReplenishableResource, 0x0118);
		}

		// class UPrisonerActionWashWithReplenishableResourceDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionWashWithReplenishableResourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionWashWithReplenishableResourceDescription, UnknownData_OBLA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionWashWithReplenishableResourceDescription, ProxyForReplenishableResource, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionWashWithReplenishableResourceDescription, 0x0080);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_ZKYF, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class UPrisonerActionWhistle : public UCharacterAction
		TEST_METHOD(Class__ConZ__PrisonerActionWhistle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerActionWhistle, UnknownData_BIXX, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionWhistle, 0x0100);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_JX6P, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_ZEMJ, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_MH53, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_5GSP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_37PR, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_22VP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// class UPrisonerActionWhistleDescription : public UCharacterActionDescription
		TEST_METHOD(Class__ConZ__PrisonerActionWhistleDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerActionWhistleDescription, 0x0030);
		}

		// class APrisonerAIController : public AAIController
		TEST_METHOD(Class__ConZ__PrisonerAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerAIController, _prisoner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerAIController, _prisonerMovementComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerAIController, UnknownData_MDZP, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisonerAIController, 0x0350);
		}

		// class UPrisonerAnimInstance : public UAnimInstance
		TEST_METHOD(Class__ConZ__PrisonerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, ResponseIdleDescriptions, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, MeleeCombatWalkUsageRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, MeleeExhaustionFactorInterpSpeed, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UpperEyelidsLookLeftFactor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, LowerEyelidsLookLeftFactor, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UpperEyelidsLookRightFactor, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, LowerEyelidsLookRightFactor, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UpperEyelidsLookUpFactor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, LowerEyelidsLookUpFactor, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UpperEyelidsLookDownFactor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, LowerEyelidsLookDownFactor, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, AutoBlinkEnabled, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_7JQ5, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isPrisonerCompletelyInitialized, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isOwnerLocallyControlled, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isOwnerPlayerControlled, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isInFirstPersonView, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldOverrideIsInFirstPersonView, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isInFirstPersonViewOverride, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isAimingWeapon, 0x04EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isAbleToFireWeapon, 0x04EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingType, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_UF33, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _supportingHandIKLocation, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimYaw, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimPitch, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_PrimaryIdleAnimationTP, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_PrimaryIdleAnimationFP, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_TiredIdleAnimationTP, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_TiredIdleAnimationFP, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_WalkingIdleAnimationTP, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_WalkingIdleAnimationFP, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_BlockIdleAnimationTP, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_BlockIdleAnimationFP, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_AimOffsetBlendSpaceTP, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_AimOffsetBlendSpaceFP, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_IdleToBlockBlendDuration, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_BlockToIdleBlendDuration, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meleeSkill_ExhaustionFactor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseUnarmedCombatWalk, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isHoldingBlock, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_TXJK, 0x0566);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _stamina, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _bellyJiggleAmount, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _breastJiggleAmount, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _eyesRotationDelta, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _minEyesRotationPitch, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _maxEyesRotationPitch, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseWeaponAnimationPose, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_9CA5, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldIgnoreSupportingHandIK, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_90AZ, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _firstPersonAimPitch, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _firstPersonAimYawDelta, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldAimDownTheSights, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_3VK3, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _aimingDownTheSightsLocationOffset, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _scopeViewArmDislocationOffset, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _armsLagRotation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _armsLagPitch, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _armsLagYaw, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _stance, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_LPUV, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _crouchStage, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _targetCrouchStage, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isFreeLookEnabled, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldIgnoreHeadTurning, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_ZC6A, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _aimOffset, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leanAmount, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldLookAtMeleeTarget, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_XQZE, 0x06CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _lookAtMeleeTargetAimOffset, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _animationSet, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isInRagdoll, 0x06DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isMovingOnGround, 0x06DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isFalling, 0x06DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isSwimming, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_1HLG, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _acceleration, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToMove, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToMoveHorizontallyOnly, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToMoveVerticallyOnly, 0x06F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToWalk, 0x06F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToJog, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToRun, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_J1C8, 0x06F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _velocity, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_4AK7, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _speed, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _speedXY, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _maxSpeed, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _stoppingDistance, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_A1GU, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandIKAmount, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _desiredCourseAngle, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _desiredCoursePitchAngle, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _actualCourseAngle, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _desiredMovementPace, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _clampedDesiredMovementPace, 0x078D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _movementPaceBeforeGroundStart, 0x078E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_XB9T, 0x078F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _legsPoseBeforeGroundStop, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _movementDirectionBeforeGroundStop, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _movementPaceBeforeGroundStop, 0x0795);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _animationSetBeforeGroundStop, 0x0796);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseLUGroundStopAnimation, 0x0797);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _hitReactState, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useLocomotionAdditiveAnimations, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_UBY7, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _drunkenness, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _drunkennessMultiplier, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isLimping, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldRotateBonesWithFirstPersonAimPitch, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_6MMW, 0x07A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _jumpApex, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _distanceToJumpApex, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _legsPoseBeforeJump, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _movementPaceBeforeJump, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _animationSetBeforeJump, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldJumpGoToFallingLoop, 0x07BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_QGVM, 0x07BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _waterImmersionDepth, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _meshOffsetWhenInWater, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _wantsToDiveIn, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_THQ7, 0x07CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isClimbing, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isClimbingAnchoring, 0x08A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_1LJT, 0x08A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _climbAnchoringAnimation, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _climbAnchoringAnimationTime, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isClimbingLadder, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_BP64, 0x0935);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _ladderClimbingRootBoneOffset, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _ladderClimbingLoopState, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _ladderClimbingLoopStateForPeeking, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _ladderClimbingPeekState, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isClimbingWindow, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isClimbingWindowAnchoring, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_BPF6, 0x0A0A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _windowClimbingAnchoringAnimation, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _windowClimbingAnchoringAnimationTime, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponType, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isDedicatedServer, 0x0A1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_YRTZ, 0x0A1E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandIdle, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandWalk, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandWalkLimping, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandJog, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandJogLimping, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandRun, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchIdle, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchWalk, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchWalkLimping, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonUpperBodyProneIdle, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandIdle, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandWalk, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandWalkLimping, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandJog, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandJogLimping, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandRun, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchIdle, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchWalk, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchWalkLimping, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyProneIdle, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseItemFirstPersonAimOffsets, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_AYYB, 0x0E09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonAimOffsetStanding, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonAimOffsetCrouching, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemFirstPersonAimOffsetProne, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightHandCorrectionPoseStanding, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightHandCorrectionPoseCrouching, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightHandCorrectionPoseProne, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightFistCorrectionPoseStanding, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightFistCorrectionPoseStandingInCombatMode, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightFistCorrectionPoseCrouching, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightFistCorrectionPoseProne, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightHandToIdleBlendAlphaStanding, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _rightHandToIdleBlendAlphaCrouching, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandCorrectionPoseStanding, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandCorrectionPoseCrouching, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandCorrectionPoseProne, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftFistCorrectionPoseStanding, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftFistCorrectionPoseStandingInCombatMode, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftFistCorrectionPoseCrouching, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftFistCorrectionPoseProne, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandToIdleBlendAlphaStanding, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _leftHandToIdleBlendAlphaCrouching, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_VAZZ, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _hasItemInHands, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_GGH9, 0x0EB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsLeftHandLocationInRightHandSpace, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsLeftHandRotationInRightHandSpace, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsObstructionDepth, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsObstructionDepthSmoothed, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isItemInHandsObstructed, 0x0ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isItemInHandsCompletelyObstructed, 0x0ED5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_CUO6, 0x0ED6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsObstructionSide, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_EH5Q, 0x0EDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsLeftObstructedIdleFP, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsRightObstructedIdleFP, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsObstructedIdleTP, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _itemInHandsObstructedIdleProneTP, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isInCombatMode, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseHandCorrections, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUseFistCorrections, 0x0F02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _overrideFingersOnlyInProne, 0x0F03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _ignoreAimOffsets, 0x0F04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _prisonerMontageBlendType, 0x0F05);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isAimingBow, 0x0F06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_X4JT, 0x0F07);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _bowArmsShakeValue, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isScoping, 0x0F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_RLP9, 0x0F0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _shouldUpperBodyBeUsedAsFullBodyInIdle, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isPlayingInstrument, 0x1131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_FR8R, 0x1132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _playingInstrumentIdleAnimation, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _playingInstrumentPlayAnimation, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _playingInstrumentState, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isCarryingItem, 0x1149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_UPPO, 0x114A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _carryingItemIdleFPAnimation, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _carryingItemIdleTPAnimation, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _carryingItemState, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isMounted, 0x1161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _mountType, 0x1162);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_JT9B, 0x1163);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _mountedAnimation, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isVehicleDriver, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_3S3M, 0x1171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverForwardIdleAnimation, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverForwardSteeringAnimation, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverForwardSteeringAnimationFP, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverReverseIdleAnimation, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverReverseSteeringAnimation, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverReverseSteeringAnimationFP, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehiclePassengerIdleAnimation, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleSpeed, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleSpeedKph, 0x11B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleBumpiness, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverSteeringAnimationTime, 0x11BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleDriverSteeringAnimationTimeInterpSpeed, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleThrottleAmount, 0x11C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleBrakeAmount, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleHandbrakeAmount, 0x11CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleSteerAmount, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isSledgeAcceleratingForward, 0x11D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isSledgeAcceleratingBackward, 0x11D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_MJ9M, 0x11D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _sledgeSlidingThresholdSpeed, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isSledgeSliding, 0x11DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_Q8YL, 0x11DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _bowArmsShakeAnimation, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponBreathFactor, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _weaponAimDownTheSightsStillBlendFactor, 0x11EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _areHandsBound, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_88EE, 0x11F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _handsBoundIdleFPAnimation, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _handsBoundIdleTPAnimation, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isResting, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_2MNH, 0x1209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _restingAnimation, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _restingFeetOffset, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _cameraToActorRotationDeltaYaw, 0x121C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _cameraToActorRotationDeltaPitch, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWeaponAimingStance, 0x1224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useMountedFirstPersonWeaponAimingParameters, 0x1225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_94XD, 0x1226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLocationOffsetDefaultStanceFP, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLocationOffsetLeaningStanceFP, 0x1234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useMountedThirdPersonWeaponAimingParameters, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_98V7, 0x1241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPAimOffsetTP, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useVehicleWAPAimOffsetTP, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_J158, 0x1251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPAimOffsetDefaultStanceTP, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useVehicleWAPAimOffsetDefaultStanceTP, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_5287, 0x1261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPAimOffsetLeaningStanceTP, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useVehicleWAPAimOffsetLeaningStanceTP, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useVehicleWAPUpperBodyIdleTP, 0x1271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_LB0X, 0x1272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPUpperBodyIdleRelaxedTP, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPUpperBodyIdleAimingTP, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _useVehicleWAPLowerBodyIdleTP, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_O5QF, 0x1289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedTP, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingTP, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedDefaultTP, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingDefaultTP, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedLeaningTP, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingLeaningTP, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, _isPlayingWAPStanceTransitionMontage, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance, UnknownData_68B9, 0x12C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerAnimInstance, 0x12D0);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_ZLGD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_8HG9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_QTIV, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_J8RU, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_Q5YW, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_NBNF, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UAudioAnalyzerAsset : public UObject
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerAsset, 0x0028);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_LZVJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_ZAMQ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_CQMC, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_RE6U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class UAudioAnalyzerNRTSettings : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRTSettings, 0x0028);
		}

		// class UPrisonerAnimInstance_WheelBarrow : public UAnimInstance
		TEST_METHOD(Class__ConZ__PrisonerAnimInstance_WheelBarrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_1BTW, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _wheelBarrowSpeedKph, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _wheelBarrowBumpiness, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _wheelBarrowRollAngleRelativeToDriver, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _isInCombatMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _isLimping, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _isDriver, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_191I, 0x02CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverIdleAnimation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverWalkJogAnimation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverWalkJogLimpingAnimation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_IWDK, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverLHandGripTransform, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverRHandGripTransform, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineBendAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineBendScale, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineBendAngleInterpSpeed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineLeanAngle, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineLeanScale, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpineLeanAngleInterpSpeed, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverHasFloor, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _isDriverMoving, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_BLM1, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverSpeed, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _driverCourseAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_MHMD, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _passengerIdleAnimation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _useVehicleWAPLowerBodyIdleTP, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_ARE0, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _vehicleWAPLowerBodyIdleAimingTP, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, _vehicleWAPLowerBodyIdleRelaxedTP, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimInstance_WheelBarrow, UnknownData_PXG1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerAnimInstance_WheelBarrow, 0x03A0);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_BR6F, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class UAudioAnalyzerNRT : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, Sound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, DurationInSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, UnknownData_OPNG, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRT, 0x0078);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class UPrisonerAnimNotify_PlayGearSound : public UAnimNotify
		TEST_METHOD(Class__ConZ__PrisonerAnimNotify_PlayGearSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimNotify_PlayGearSound, motionIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAnimNotify_PlayGearSound, UnknownData_4X1K, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerAnimNotify_PlayGearSound, 0x0040);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UPrisonerAppearanceDataAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__PrisonerAppearanceDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, FemaleCharacterData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, MaleCharacterData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, MeshSets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, MaterialSets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, FemaleTattoos, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerAppearanceDataAsset, MaleTattoos, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerAppearanceDataAsset, 0x0110);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_LKOE, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_6I26, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0490);
		}

		// class UPrisonerBodyEffect : public UObject
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect, UnknownData_L01D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect, 0x0050);
		}

		// class UPrisonerBodyEffectInitializer : public UObject
		TEST_METHOD(Class__ConZ__PrisonerBodyEffectInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffectInitializer, UnknownData_L9LW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffectInitializer, 0x0030);
		}

		// class UPrisonerBodyEffect_Unconsciousness : public UPrisonerBodyEffect
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_Unconsciousness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Unconsciousness, _duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Unconsciousness, _elapsedTime, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_Unconsciousness, 0x0058);
		}

		// class UPrisonerBodyEffect_Coma : public UPrisonerBodyEffect_Unconsciousness
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_Coma)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_Coma, 0x0058);
		}

		// class UPrisonerBodyEffect_DamageComa : public UPrisonerBodyEffect_Coma
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_DamageComa)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_DamageComa, 0x0058);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_AFH6, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_EV6E, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// class UPrisonerBodyEffect_Death : public UPrisonerBodyEffect_Unconsciousness
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_Death)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_Death, 0x0058);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// class UPrisonerBodyEffect_HealthComa : public UPrisonerBodyEffect_Coma
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_HealthComa)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_HealthComa, 0x0058);
		}

		// class UPrisonerBodySimulationComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, UnknownData_FNPR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _minHealthAsRatioOfMaxHealth, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, UnknownData_DG78, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _baseHealthRegenerationRate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, UnknownData_08XP, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _repState1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _repState2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _repState3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, UnknownData_5CLG, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _repState4, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, _repBodyEffects, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponent, UnknownData_4N5L, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationComponent, 0x0320);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTarget2DArray : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_TX37, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// class UPrisonerBodyEffectUIData : public UObject
		TEST_METHOD(Class__ConZ__PrisonerBodyEffectUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffectUIData, UnknownData_LUSV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffectUIData, 0x0030);
		}

		// class UPrisonerBodyEffect_UnconsciousnessUIData : public UPrisonerBodyEffectUIData
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_UnconsciousnessUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_UnconsciousnessUIData, UnknownData_OWDO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_UnconsciousnessUIData, 0x0038);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_X10T, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// class UPrisonerBodyEffect_KnockoutUIData : public UPrisonerBodyEffect_UnconsciousnessUIData
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_KnockoutUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_KnockoutUIData, 0x0038);
		}

		// class UPrisonerBodyEffect_Knockout : public UPrisonerBodyEffect_Unconsciousness
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_Knockout)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_Knockout, 0x0058);
		}

		// class UTextureRenderTargetVolume : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_88YI, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// class UPrisonerBodyEffect_UnconsciousnessInitializer : public UPrisonerBodyEffectInitializer
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_UnconsciousnessInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_UnconsciousnessInitializer, UnknownData_TD6F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_UnconsciousnessInitializer, 0x0038);
		}

		// class UPrisonerBodyEffect_KnockoutInitializer : public UPrisonerBodyEffect_UnconsciousnessInitializer
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_KnockoutInitializer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_KnockoutInitializer, 0x0038);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_8H0V, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UPrisonerBodyEffect_TestUIData : public UPrisonerBodyEffectUIData
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_TestUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_TestUIData, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_TestUIData, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_TestUIData, UnknownData_96WJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_TestUIData, 0x0078);
		}

		// class UPrisonerBodyEffect_Test : public UPrisonerBodyEffect
		TEST_METHOD(Class__ConZ__PrisonerBodyEffect_Test)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _uiDataClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _elapsedTime, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _strengthModifierCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, UnknownData_U02D, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _healthChangeRateCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, UnknownData_1366, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _maxHealthModifierCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, UnknownData_CR91, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodyEffect_Test, _bodyStates, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodyEffect_Test, 0x0260);
		}

		// class UPrisonerBodySimulationComponentUIData : public UObject
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationComponentUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationComponentUIData, 0x0028);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_KQMB, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UPrisonerBodySimulationComponentUIDataImpl : public UPrisonerBodySimulationComponentUIData
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationComponentUIDataImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponentUIDataImpl, UnknownData_ZPVR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationComponentUIDataImpl, BodyEffectsUIData, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationComponentUIDataImpl, 0x0090);
		}

		// class UPrisonerBodySimulationInputsProvider : public UInterface
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationInputsProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationInputsProvider, 0x0028);
		}

		// class UPrisonerBodySimulationStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationStatics, 0x0028);
		}

		// class UPrisonerUIDataController : public UObject
		TEST_METHOD(Class__ConZ__PrisonerUIDataController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataController, BodySimulationUIController, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataController, UnknownData_CY2M, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataController, _prisonerUIData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataController, _tooltipCache, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataController, UnknownData_NTVE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIDataController, 0x0060);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_E3DZ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UPrisonerBodySimulationUIController : public UObject
		TEST_METHOD(Class__ConZ__PrisonerBodySimulationUIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBodySimulationUIController, UnknownData_EKD7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBodySimulationUIController, 0x0058);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_3I0T, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_TD5C, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class UPrisonerBuryComponent : public UCharacterActionComponent
		TEST_METHOD(Class__ConZ__PrisonerBuryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBuryComponent, _buryState, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerBuryComponent, UnknownData_X12M, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerBuryComponent, 0x00C8);
		}

		// class ACorpse : public AActor
		TEST_METHOD(Class__ConZ__Corpse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_3K7Y, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, RagdollMeshComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, ChoppingRecipeDataAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, ItemRepresentation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, IterativeChopping, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_TDQW, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, MainBoneName, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_LZYJ, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, RagdollMeshData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, StaticMeshData, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, SkeletalMeshData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, PoseData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, inventory, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, SearchTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, PhysicsPauseDistance, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, StartSearchAudioEvent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, StopSearchAudioEvent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, AutoDestructTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, AutoDestructRadius, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, Attachements, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, AttachementSockets, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_PFL6, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, _sourceCharacter, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_636E, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, _atRest, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorpse, UnknownData_GB4G, 0x03E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACorpse, 0x03F0);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_PZ0G, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_J8SK, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class APrisonerCorpse : public ACorpse
		TEST_METHOD(Class__ConZ__PrisonerCorpse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, StrippedStaticMeshData, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, StrippedSkeletalMeshData, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, StandardStaticMeshData, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, StandardSkeletalMeshData, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, HeadlessChoppingRecipeDataAsset, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, LivingClass, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, GibClass, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, HeadExplosionParticles, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, HeadExplodedMesh, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, HeadExplosionGibMeshes, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, UnknownData_Y9W6, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, PenisMeshData, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, StrippedPenisMeshData, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, CensorMesh, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, CensorMesh2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, CensorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, PenisComponent, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, GenitalsCensorComponent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, PenisCensorComponent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, LeftBreastCensorComponent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, RightBreastCensorComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, Headless, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _gender, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, UnknownData_5ZHX, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _fatness, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _leanness, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _breastSize, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _penisSize, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _appearanceIndex, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _penisLocationLean, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _penisLocationFat, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _penisShowing, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _breastsShowing, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, UnknownData_1G4O, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _hairLength, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _facialHairLength, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, UnknownData_5UXL, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _userProfileName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _serverUserProfileId, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _killerServerUserProfileId, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _killClaimFamePointsReward, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, _killClaimed, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerCorpse, UnknownData_IQ8V, 0x05F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisonerCorpse, 0x0600);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_LP6I, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_TQ3T, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_YU1M, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_GYBG, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_9EQD, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_3JBV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_0YD4, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UPrisonerDebugUI_SkillItem : public UObject
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_SkillItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_SkillItem, UnknownData_6MBM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_SkillItem, 0x0038);
		}

		// class UPrisonerDebugUI_SkillEntryWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_SkillEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_SkillEntryWidget, UnknownData_3FZK, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_SkillEntryWidget, _nameTextBlock, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_SkillEntryWidget, 0x0270);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_YAK6, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// class UPrisonerDebugUI_BodyConditionItem : public UObject
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_BodyConditionItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_BodyConditionItem, UnknownData_TYTH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_BodyConditionItem, 0x0030);
		}

		// class UPrisonerDebugUI_BodyStateItem : public UPrisonerDebugUI_BodyConditionItem
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_BodyStateItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_BodyStateItem, UnknownData_N9OT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_BodyStateItem, 0x0038);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_2TYN, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class UPrisonerDebugUI_BodyEffectItem : public UPrisonerDebugUI_BodyConditionItem
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_BodyEffectItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_BodyEffectItem, UnknownData_ZL0X, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_BodyEffectItem, 0x0038);
		}

		// class UPrisonerDebugUI_BodyConditionEntryWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_BodyConditionEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_BodyConditionEntryWidget, UnknownData_ZEOS, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_BodyConditionEntryWidget, _nameTextBlock, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_BodyConditionEntryWidget, 0x0270);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UPrisonerDebugUI_MainWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__PrisonerDebugUI_MainWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _prisonersComboBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _lifeTimeTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _strengthTextBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _constitutionTextBlock, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _dexterityTextBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _intelligenceTextBlock, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _healthTextBlock, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _skillsListView, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _bodyConditionsListView, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, UnknownData_KA7V, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _data, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _tooltipCache, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, UnknownData_QF70, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _dataRequestTimerInterval, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, UnknownData_0BJX, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerDebugUI_MainWidget, _dataApplyTimerInterval, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerDebugUI_MainWidget, 0x02D0);
		}

		// class UViewportStatsSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_CE7E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class UVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_DSCF, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// class UPrisonerFirstPersonSubviewComponent : public UCameraComponent
		TEST_METHOD(Class__ConZ__PrisonerFirstPersonSubviewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, UnknownData_SML3, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, WeaponFOV, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, WeaponFoveationOffset, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, MinViewPitch, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, MaxViewPitch, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, MinViewYaw, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, MaxViewYaw, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, MinMaxViewPitchByYawAndSpeed, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, LocalSpaceOffsetByYaw, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, LocalSpaceOffsetByPitch, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, ActorSpaceOffsetByYaw, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, ActorSpaceOffsetByPitch, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, LockRotationToSocketAnimationCurveName, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, LockRotationToSocketSocketName, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, ProbeSize, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, ProbeChannel, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, DoCollisionTest, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, UnknownData_OEL5, 0x0826);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingTXCurveName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingTYCurveName, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingTZCurveName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingRYCurveName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingRPCurveName, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingRRCurveName, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingTScale, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationBobbingRScale, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTXCurveName, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTYCurveName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTZCurveName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRYCurveName, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRPCurveName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRRCurveName, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTScale, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRScale, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, _minFactorForPrisonerHiding, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonSubviewComponent, UnknownData_06HT, 0x089C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerFirstPersonSubviewComponent, 0x08A0);
		}

		// class UVirtualTextureBuilder : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_RDO1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UPrisonerFirstPersonVehicleAimingSubviewComponent : public UPrisonerFirstPersonSubviewComponent
		TEST_METHOD(Class__ConZ__PrisonerFirstPersonVehicleAimingSubviewComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerFirstPersonVehicleAimingSubviewComponent, 0x08A0);
		}

		// class UPrisonerViewComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerViewComponent, DefaultSubviewBlendDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerViewComponent, UnknownData_Y3ZF, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerViewComponent, 0x00D0);
		}

		// class UPrisonerFirstPersonViewComponent : public UPrisonerViewComponent
		TEST_METHOD(Class__ConZ__PrisonerFirstPersonViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingToCrouchingSubviewBlendDuration, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingToProneSubviewBlendDuration, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingToStandingMeleeSubviewBlendDuration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, CrouchingToStandingSubviewBlendDuration, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, CrouchingToProneSubviewBlendDuration, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ProneToStandingSubviewBlendDuration, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ProneToCrouchingSubviewBlendDuration, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingMeleeToStandingSubviewBlendDuration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToStandingAimingSubviewBlendDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToCrouchingAimingSubviewBlendDuration, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToProneAimingSubviewBlendDuration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToStandingAimingDownTheSightsSubviewBlendDuration, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToCrouchingAimingDownTheSightsSubviewBlendDuration, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToProneAimingDownTheSightsSubviewBlendDuration, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToClimbingWindowSubviewBlendDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyFromClimbingWindowSubviewBlendDuration, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToMountedSubviewBlendDuration, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyFromMountedSubviewBlendDuration, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToLyingSubviewBlendDuration, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyFromLyingSubviewBlendDuration, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToMountedDefaultStanceAimingSubviewBlendDuration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToMountedLeaningStanceAimingSubviewBlendDuration, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToMountedDefaultStanceAimingDownTheSightsSubviewBlendDuration, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, AnyToMountedLeaningStanceAimingDownTheSightsSubviewBlendDuration, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingSubviewName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, CrouchingSubviewName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ProneSubviewName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingMeleeSubviewName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingAimingSubviewName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, CrouchingAimingSubviewName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ProneAimingSubviewName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, StandingAimingDownTheSightsSubviewName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, CrouchingAimingDownTheSightsSubviewName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ProneAimingDownTheSightsSubviewName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, ClimbingWindowSubviewName, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, MountedSubviewName, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, LyingSubviewName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, MountedDefaultStanceAimingSubviewName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, MountedLeaningStanceAimingSubviewName, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, MountedDefaultStanceAimingDownTheSightsSubviewName, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, MountedLeaningStanceAimingDownTheSightsSubviewName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerFirstPersonViewComponent, UnknownData_NVRY, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerFirstPersonViewComponent, 0x0240);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_FIX3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_BU7I, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_NYPJ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// class UVolumetricCloudComponent : public USceneComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_4WSD, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_MMSS, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_XPFS, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// class APrisonerHUD : public AHUD
		TEST_METHOD(Class__ConZ__PrisonerHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, HudWidget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, DamageDirectionIndicator, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, ShouldDrawCrosshair, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, ShouldDrawScreenCenterDot, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_LIKZ, 0x0322);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, TacticsMaterial, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, LoadingIconWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, SpawnScreenWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, WaypointScreenWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, OnShouldShowExtendedWidgetTooltipChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _HUDFont, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_14AU, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _mapMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _mapTexture, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_HSV2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _mapPropertiesOpacity, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _mapPropertiesColor, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _dronePositionTexture, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _droneDirectionTexture, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _dronePingAnimationTexture, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _myPrisonerPositionTexture, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerPositionTexture, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerHighlightPositionTexture, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _prisonerPositionTextureSize, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _prisonerPingSizeMultiplier, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_1R8G, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerFont, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerTextStackOffset, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerNameColor, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerNameOutlineColor, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerNameHighlightColor, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _otherPlayerNameHighlightOutlineColor, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _customMapBorderWidth, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _customMapBorderColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _prisonerUIDataController, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_3K7S, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _scoreboardWidget, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_0UXP, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _shouldDrawOtherPlayerLocations, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _shouldDrawOtherPlayerInfo, 0x04D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, _isLeftMouseButtonPressed, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHUD, UnknownData_8CIZ, 0x04D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisonerHUD, 0x0508);
		}

		// class AVolumetricCloud : public AInfo
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_JURY, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_4V0K, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// class UPrisonerInventoryComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerInventoryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_74PN, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, ItemEquipped, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, ItemUnequipped, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, CraftingInfoWidgets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, AddSelectionDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, AddSelectionReplicationDelay, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, TickFrequency, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_0TAU, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _startingClothesFemale, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _startingClothesFemaleDeluxe, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _startingClothesMale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _startingClothesMaleDeluxe, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _tournamentStartingItemInHands, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _tournamentStartingEquipment, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _tournamentStartingItems, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_M61L, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _chipMesh, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_6RYC, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _vicinityItems, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_XW3Y, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _clothesPartsToDamageByMeleeAttackCapsuleAttachment, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _inventoryClothes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _inventoryHandsHolsters, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _inventorySelection2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, UnknownData_0RJJ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerInventoryComponent, _quickAccessItems, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerInventoryComponent, 0x02F8);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_FSDY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_XPA5, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class UPrisonerLifeComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerLifeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, GameTimeMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, BCUDataDownloadInterval, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ComputeStamina, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_URZP, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, StaminaMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UpdateFatness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UpdateLeanness, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UpdateHairLength, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UpdateFacialHairLength, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldAgeAffectAttributes, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_OB6L, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, BreathOxygenSaturationRateIdle, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, BreathOxygenSaturationRateMoving, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, BreathOxygenSaturationRechargeRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ChokingOxygenSaturationThreshold, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, MinUnconsciousTimeAfterMeleeCombatKnockout, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, MaxUnconsciousTimeAfterMeleeCombatKnockout, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, DamageDeathThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_HJDA, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, StateAdded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, StateRemoved, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, PrisonerDied, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _BCUDataInitialized, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_WBLY, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_Idle, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_Walking, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_Jogging, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_Running, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_SlowDiving, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_MediumDiving, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_ExtraWhenMovingUphill, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SCR_ExtraWhenMovingDownhill, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SP_Easy, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SP_Demanding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, SP_VeryDemanding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, DexterityModifierVsExcessWeightLoad, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, RestingStaminaMultiplier, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, CaloriesConsumptionModifierWhenMovingUphill, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, CaloriesConsumptionModifierWhenMovingDownhill, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, MeleeDamageModifierWhenStrengthIsMinimal, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, MeleeDamageModifierWhenStrengthIsMaximal, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, AlcoholExcretionRate, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldOverridePulse, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_K8R7, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, OverriddenPulse, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldOverrideSystolicBloodPressure, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_OWWW, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, OverriddenSystolicBloodPressure, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldOverrideDiastolicBloodPressure, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_EESO, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, OverriddenDiastolicBloodPressure, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldOverrideBreathRate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_VMNF, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, OverriddenBreathRate, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, ShouldOverrideBodyTemperature, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_N19B, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, OverriddenBodyTemperature, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, PrisonWalletItems, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, PrisonWalletMilestoneEventItems, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, PrisonWalletMilestoneItemChoiceType, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_9175, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, PrisonerWalletLastMilestone, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, RestHealingSpeedMultiplier, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_AT6V, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialStrength, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialConstitution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialDexterity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialIntelligence, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialAge, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _shouldIgnoreBodyTemperatureChanges, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_S6CZ, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _overrideInitialWeight, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_P6HT, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _initialWeight, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_8PO1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _digestionItems, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_C8KY, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _sicknesses, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _healingItems, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_PRE3, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _forcedUrinationDefecationWarningDelay, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _forcedUrinationDefecationActionDelay, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_4NOC, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedStatus, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_47TF, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedStates, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedBreath, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedBodyTemp, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedEnergy, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedFatnessLeannessHair, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedAgilityNormalized, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedPace, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_XCWX, 0x081D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedHealth, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedStamina, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _replicatedSCR, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, UnknownData_YWXU, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeComponent, _BCUMonitorData, 0x0830);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerLifeComponent, 0x0958);
		}

		// class UPrisonerLifeIndicatorsSprite : public UUserWidget
		TEST_METHOD(Class__ConZ__PrisonerLifeIndicatorsSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeIndicatorsSprite, _breathingBarLungsWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeIndicatorsSprite, UnknownData_M5J6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeIndicatorsSprite, _noiseInstigatedDelay, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLifeIndicatorsSprite, UnknownData_CG5A, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerLifeIndicatorsSprite, 0x0288);
		}

		// class UPrisonerLoadout : public UDataAsset
		TEST_METHOD(Class__ConZ__PrisonerLoadout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, primary, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, primaryAttachments, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, secondary, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, secondaryAttachments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, tertiary, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, tertiaryAttachments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, outfit, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerLoadout, support, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerLoadout, 0x0098);
		}

		// class UPrisonerMovementComponent : public UConZCharacterMovementComponent
		TEST_METHOD(Class__ConZ__PrisonerMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_9XB1, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, CapsuleHalfHeightWhenProne, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, CapsuleHalfHeightWhenSwimming, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UseCustomRotationRate, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RequestedPathMovesForwardOnly, 0x0B15);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_LRF7, 0x0B16);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationInterpolationSpeed, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_EE6E, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxRotationRateCurve, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenStanding, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenCrouched, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenProne, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenSwimming, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenSwimmingAndDiving, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, GroundSlopeAngleForSpeedScalingSmoothingRate, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, GroundSlopeAngleSmoothingRate, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UseSmoothedGroundSlopeAngleForPaceChecks, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_PA8I, 0x0B45);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MinGroundSlopeAngleForJogging, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxGroundSlopeAngleForJogging, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MinGroundSlopeAngleForRunning, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxGroundSlopeAngleForRunning, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MinSpeedModifierWhenMovingUphill, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, BaseJumpZVelocity, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxAbsoluteVelocityZAfterClimb, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, StaminaUnitsToDrainOnJump, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, JumpZVelocityMultiplierVsSpeed, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, JumpZVelocityMultiplierVsGroundSlopeAngle, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ClimbAnimations, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ClimbingStaminaDrainModifier, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ClimbingPlayRateMultiplierWhenRequiredHandIsNotFree, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ClimbingDebuggingEnabled, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_K25Q, 0x0B91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ClimbingDebuggingDrawTime, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, LadderClimbingCapsuleBias, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, LadderClimbingMaxSpeed, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, CanClimbOffLadderUpwardsAutomatically, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, CanClimbOffLadderDownwardsAutomatically, 0x0BA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_1NZP, 0x0BAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxHorzDistanceToLadderForClimbing, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, NumberOfLadderPeekSteps, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, PostLadderClimbingLaunchVelocity, 0x0BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxHeightToJumpOffLadderSafely, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxFallingSpeedAllowedForLadderClimbing, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxGroundSlopeAllowedForLadderClimbing, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_W40X, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, MaxHorzDistanceToWindowForClimbingVsSpeed, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, WindowClimbingAnimations, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, WaterImmersionToStartSwimming, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, WaterImmersionToStopSwimming, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, SwimmingToWalkingDepthTolerance, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, SwimmingToWalkingCapsuleCollisionTolerance, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DesiredWaterImmersion, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DesiredWaterImmersionCorrectionAcceleration, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DesiredWaterImmersionCorrectionAccelerationCurve, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, WaterResurfaceAcceleration, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, OceanWavesAcceleration, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, WaterImmersionAfterWhichRunningIsDisabled, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, ImmersionCorrectionDownMultiplier, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRateMultiplierWhenImmersedInWater, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DiveInAccelerationScale, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DiveInAccelerationTimeout, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, DiveInCollisionCheckOffset, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, BuoyancyWhenDiving, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, BuoyancyWhenNotDiving, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, RotationRatePitchWhenDiving, 0x0C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, _repAccelerationNormal, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_3OSB, 0x0C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, _repBuoyancy, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_7NSM, 0x0DC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, _ladderInfoRepData, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementComponent, UnknownData_LM06, 0x0FA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerMovementComponent, 0x1160);
		}

		// class UPrisonerMovementSettings : public UDataAsset
		TEST_METHOD(Class__ConZ__PrisonerMovementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, Ground, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, Air, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, Water, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, RotationRateMultiplierWhenDexterityIsMinimal, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, RotationRateMultiplierWhenDexterityIsMaximal, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, ClimbingSpeedMultiplierWhenDexterityIsMinimal, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, ClimbingSpeedMultiplierWhenDexterityIsMaximal, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, WindowClimbingSpeedMultiplierWhenDexterityIsMinimal, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, WindowClimbingSpeedMultiplierWhenDexterityIsMaximal, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerMovementSettings, UnknownData_HOK5, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerMovementSettings, 0x0218);
		}

		// class UPrisonerRestingComponent : public UCharacterActionComponent
		TEST_METHOD(Class__ConZ__PrisonerRestingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerRestingComponent, _restingData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerRestingComponent, _restingDataAutonomous, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerRestingComponent, UnknownData_E4QX, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerRestingComponent, 0x0118);
		}

		// class UTeleportUserData : public UObject
		TEST_METHOD(Class__ConZ__TeleportUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportUserData, 0x0028);
		}

		// class UPrisonerTeleportUserData : public UTeleportUserData
		TEST_METHOD(Class__ConZ__PrisonerTeleportUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerTeleportUserData, UnknownData_3XNH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerTeleportUserData, 0x0030);
		}

		// class UPrisonerShotsFiredTrackerComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerShotsFiredTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerShotsFiredTrackerComponent, UnknownData_I81W, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerShotsFiredTrackerComponent, _repNumShotsFired, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerShotsFiredTrackerComponent, UnknownData_4831, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerShotsFiredTrackerComponent, 0x00C0);
		}

		// class UPrisonerSkillComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__PrisonerSkillComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, InitialSkills, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, TickFrequency, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, ReplicatedMedicalDiagnosisDone, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, UnknownData_B6T6, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _skills, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _actions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, UnknownData_TM4Z, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _skillClasses, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _lastSurroundingItems, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, UnknownData_W7KO, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _detectablePrisoners, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, UnknownData_VMCM, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _replicatedMedicalRecord, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _replicatedSkills, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, UnknownData_I8VZ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponent, _replicatedNoiseLevel, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSkillComponent, 0x0270);
		}

		// class UPrisonerSkillComponentUIData : public UObject
		TEST_METHOD(Class__ConZ__PrisonerSkillComponentUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSkillComponentUIData, 0x0028);
		}

		// class UPrisonerSkillComponentUIDataImpl : public UPrisonerSkillComponentUIData
		TEST_METHOD(Class__ConZ__PrisonerSkillComponentUIDataImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponentUIDataImpl, UnknownData_UT41, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillComponentUIDataImpl, SkillsUIData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSkillComponentUIDataImpl, 0x0040);
		}

		// class UPrisonerSkillUIData : public UObject
		TEST_METHOD(Class__ConZ__PrisonerSkillUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillUIData, UnknownData_8BYS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSkillUIData, 0x0030);
		}

		// class UPrisonerSkillUIDataImpl : public UPrisonerSkillUIData
		TEST_METHOD(Class__ConZ__PrisonerSkillUIDataImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSkillUIDataImpl, UnknownData_XEB5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSkillUIDataImpl, 0x0040);
		}

		// class UPrisonerSoundComponent : public UCharacterSoundComponent
		TEST_METHOD(Class__ConZ__PrisonerSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, MinBreathingRateToPostPeriodicInhaleExhaleAudioEvents, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, MaxDistanceToListenerToPostPeriodicInhaleExhaleAudioEvents, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, PeriodicInhaleAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, PeriodicExhaleAudioEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, HoldBreathInhaleAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, HoldBreathExhaleAudioEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, HoldBreathBreathlessExhaleAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, MinHeartRateToPostHeartbeatAudioEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_IH5A, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, HeartbeatAudioEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, FootstepsAudioEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, FootstepsEnhancerAudioEvent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, MovingThroughFoliageGateDuration, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_69XU, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericMovingThroughFoliageAudioEvent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericMovingThroughFoliageAudioEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, GenericOneShotMovingThroughFoliageAudioEvent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, GearNoiseAudioEvent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, GearNoiseAudioEventWhenInWater, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, ItemMotionNoiseTimeToLive, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_7LG6, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericEatItemAudioEvent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericEatItemAudioEvent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericDrinkItemAudioEvent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericDrinkItemAudioEvent, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericDrinkWaterAudioEvent, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericDrinkWaterAudioEvent, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericExamineObjectAudioEvent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericExamineObjectAudioEvent, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericCraftAudioEvent, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericCraftAudioEvent, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericUncraftAudioEvent, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericUncraftAudioEvent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartGenericVehicleRepairAudioEvent, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopGenericVehicleRepairAudioEvent, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartWashClothAudioEvent, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopWashClothAudioEvent, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StartInGameAudioEvent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, StopInGameAudioEvent, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, CalmStateAudioEvent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, IntenseStateAudioEvent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, CombatStateAudioEvent, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, OutOfBoundsSound, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, ChipExplosionSound, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_DKEZ, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, _activeMovingThroughFoliageSounds, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_XJHW, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, _maxNumberOfFootstepsToPlayFootstepEnhancerSound, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, _minNumberOfFootstepsToPlayFootstepEnhancerSound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerSoundComponent, UnknownData_PJMA, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSoundComponent, 0x0298);
		}

		// class UPrisonerSubview : public UInterface
		TEST_METHOD(Class__ConZ__PrisonerSubview)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerSubview, 0x0028);
		}

		// class UPrisonerThirdPersonSubviewComponent : public USpringArmComponent
		TEST_METHOD(Class__ConZ__PrisonerThirdPersonSubviewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_J02S, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, FieldOfView, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UseFieldOfViewForLOD, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, ConstrainAspectRatio, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_JNZK, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, AspectRatio, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MinViewYaw, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MaxViewYaw, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MinViewPitch, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MaxViewPitch, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, LeanOffsetLeft, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, LeanOffsetRight, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, GlobalOffset, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MirrorAroundXZPlane, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_ZX38, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, MaxLocalOffsetWhenColliding, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, ShouldConstrainTraceOriginToOwnerCapsule, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_ONDC, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, OwnerCapsuleContrainBuffer, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, TraceOriginGlobalOffset, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, TraceOriginRelativeOffset, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, LocalOffsetCurvesBlendSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_UCKF, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, LocalOffsetCurves, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, AnimationOffsetTZCurveName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, PostProcessBlendWeight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_3FJK, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, PostProcessSettings, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_W4AL, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, _clippingPreventionOffset, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, _clippingPreventionSweepLength, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, _clippingPreventionAmount, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, _clippingPreventionTraceOffset, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, _minFactorForPrisonerHiding, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonSubviewComponent, UnknownData_Y887, 0x08CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerThirdPersonSubviewComponent, 0x08D0);
		}

		// class UPrisonerThirdPersonViewComponent : public UPrisonerViewComponent
		TEST_METHOD(Class__ConZ__PrisonerThirdPersonViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingToCrouchingSubviewBlendDuration, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingToProneSubviewBlendDuration, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, CrouchingToStandingSubviewBlendDuration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, CrouchingToProneSubviewBlendDuration, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ProneToStandingSubviewBlendDuration, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ProneToCrouchingSubviewBlendDuration, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingMeleeSubviewBlendDuration, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingAimingSubviewBlendDuration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, CrouchingAimingSubviewBlendDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ProneAimingSubviewBlendDuration, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, RagdollToSubviewBlendDuration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, RagdollFromSubviewBlendDuration, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, NarrowLadderSubviewBlendDuration, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, SwimmingSubviewBlendInDuration, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, SwimmingSubviewBlendOutDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DivingSubviewBlendInDuration, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DivingSubviewBlendOutDuration, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ClimbingWindowToSubviewBlendDuration, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ClimbingWindowFromSubviewBlendDuration, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DefecatingToSubviewBlendDuration, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DefecatingFromSubviewBlendDuration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ThrowingToSubviewBlendDuration, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ThrowingFromSubviewBlendDuration, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingSubviewName, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, CrouchingSubviewName, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ProneSubviewName, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingMeleeSubviewName, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, StandingAimingSubviewName, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, CrouchingAimingSubviewName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ProneAimingSubviewName, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, RagdollSubviewName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, NarrowLadderSubviewName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, SwimmingSubviewName, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DivingSubviewName, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ClimbingWindowSubviewName, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, DefecatingSubviewName, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, ThrowingSubviewName, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThirdPersonViewComponent, UnknownData_RR5O, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerThirdPersonViewComponent, 0x0218);
		}

		// class UPrisonerThrowComponent : public UCharacterActionComponent
		TEST_METHOD(Class__ConZ__PrisonerThrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThrowComponent, _throwingState, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThrowComponent, UnknownData_7T3R, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThrowComponent, _itemToThrow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerThrowComponent, UnknownData_Y6NR, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerThrowComponent, 0x00D0);
		}

		// class UPrisonerUIData : public UObject
		TEST_METHOD(Class__ConZ__PrisonerUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIData, 0x0028);
		}

		// class UPrisonerUIDataImpl : public UPrisonerUIData
		TEST_METHOD(Class__ConZ__PrisonerUIDataImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataImpl, UnknownData_I1N8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataImpl, SkillComponentUIData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataImpl, BodySimulationComponentUIData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIDataImpl, 0x0040);
		}

		// class UPrisonerUIDataRequest : public UPlayerRpcChannelServerDataRequest
		TEST_METHOD(Class__ConZ__PrisonerUIDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataRequest, UnknownData_HFU5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIDataRequest, 0x0030);
		}

		// class UPrisonerUIDataResponse : public UPlayerRpcChannelServerDataResponse
		TEST_METHOD(Class__ConZ__PrisonerUIDataResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUIDataResponse, _payload, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIDataResponse, 0x0030);
		}

		// class UPrisonerUIStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__PrisonerUIStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUIStatics, 0x0028);
		}

		// class UPrisonerUITooltipCache : public UObject
		TEST_METHOD(Class__ConZ__PrisonerUITooltipCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonerUITooltipCache, UnknownData_EZB3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonerUITooltipCache, 0x0118);
		}

		// class AProjectile : public AActor
		TEST_METHOD(Class__ConZ__Projectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, StaticMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, RotationFollowsVelocity, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, IsInstantHit, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, AddImpulseOnHit, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_QGFS, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ImpulseMultiplier, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MaxImpulse, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_361W, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ImpactEffects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ProjectileData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleStartLocal, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleRangeLocal, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleMinLocal, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleMaxLocal, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleStart, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleRange, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MeshScaleMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, TraceScaleMultiplier, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, GravityScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, FlyByAudioEvent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ColorMaterialParameterName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, InitialColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, FinalColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, MaxHitCount, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, NoiseLoudnessOnHit, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, IgnoreCallingWeaponsFiringEffects, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_WZDT, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ExperienceMultiplier, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, ShouldForceStopWhenNoVelocity, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, CanEverCollide, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_8VEI, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _useFixedTimestep, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_7HXJ, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _fixedTimestep, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_JTXW, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _zeroRange, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _windage, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _distanceTraveled, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _meshScaleFactor, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_E1VC, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _offsetFromBarrel, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_BNGZ, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _randomSeed, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_VQG4, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _doNotForceInitialReplication, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_1P1M, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _muzzleVelocity, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _createdOnServer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_H48G, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _halfAngle, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_V3W5, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _weaponFiringModeWhenShot, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_0PYF, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, _firedShotDescriptionRep, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile, UnknownData_NE57, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectile, 0x0408);
		}

		// class AProjectileArrow : public AProjectile
		TEST_METHOD(Class__ConZ__ProjectileArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileArrow, _tempSceneComponent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileArrow, _relativeRotationSceneComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileArrow, _projectileArrowData, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileArrow, UnknownData_QLBP, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileArrow, 0x0448);
		}

		// class UProjectileDamageType : public UDamageType
		TEST_METHOD(Class__ConZ__ProjectileDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileDamageType, 0x0040);
		}

		// class AProjectileFlare : public AProjectile
		TEST_METHOD(Class__ConZ__ProjectileFlare)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _particleSystemComponent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _pointLightComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _akFlareComponent, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _hasParachute, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, UnknownData_AZAR, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _parachuteGravityScale, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _parachuteEffectiveBallisticCoefficient, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _parachuteParticlesScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _parachuteParticlesScaleSpeed, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, UnknownData_JZWH, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _burnStart, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _burnEnd, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, _burnTime, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileFlare, UnknownData_4FQQ, 0x0454);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileFlare, 0x0468);
		}

		// class UProjectileImpactEffects : public UDataAsset
		TEST_METHOD(Class__ConZ__ProjectileImpactEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, MinDecalSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, MaxDecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, MinDecalLifetime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, MaxDecalLifetime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, DecalFadeFactor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ParticleEffectsInitialScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ParticleEffectsScaleDistanceStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ParticleEffectsScaleDistanceRange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ParticleEffectsScaleByDistanceFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, UnknownData_JKQ0, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, BulletPenetrationExitParticlesDaytime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, BulletPenetrationExitParticlesNighttime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, DayTimePenetrationDecal, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, NightTimePenetrationDecal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, AudioEvent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Default, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, grass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ForrestGroundCoastal, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ForrestGroundContinental, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Rock, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Stone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Gravel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, GravelBeach, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Pebbles, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Snow, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Ice, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Sand, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Asphalt, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Dirt, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Water, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, WaterOcean, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Cloth, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Metal, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Aluminium, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Concrete, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Brick, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Wood, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Plastic, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Rubber, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Glass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Folliage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Bark, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Flesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, RoofTile, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, CeramicsTiles, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Scrap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Trunk, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Leaves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Cardboard, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Plaster, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, Kevlar, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, ForceField, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileImpactEffects, NoEffect, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileImpactEffects, 0x02E0);
		}

		// class AProjectileShotgun : public AProjectile
		TEST_METHOD(Class__ConZ__ProjectileShotgun)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileShotgun, projectileClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileShotgun, ShotsCount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileShotgun, UnknownData_RQ8A, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileShotgun, 0x0418);
		}

		// class UProjectileStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__ProjectileStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileStatics, 0x0028);
		}

		// class UProteinDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__ProteinDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProteinDeficiency, 0x01C0);
		}

		// class UPsilocybeCyanescensPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__PsilocybeCyanescensPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPsilocybeCyanescensPoisoning, UnknownData_K7MU, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPsilocybeCyanescensPoisoning, 0x01B8);
		}

		// class UPullToothAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__PullToothAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPullToothAction, 0x00A8);
		}

		// class UQuickAccessBarWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__QuickAccessBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessBarWidget, _quickAccessItemContainers, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessBarWidget, UnknownData_52RX, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuickAccessBarWidget, 0x0290);
		}

		// class UQuickAccessItemSwitcher3 : public UInventoryContainerWidget2
		TEST_METHOD(Class__ConZ__QuickAccessItemSwitcher3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, Index, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, UnknownData_YLND, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _nameText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _slotWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _itemWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _throwingModeCheckbox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, UnknownData_CM9X, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _throwingModeCaption, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemSwitcher3, _throwingModeDescription, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuickAccessItemSwitcher3, 0x02E8);
		}

		// class UQuickAccessItemWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__QuickAccessItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, MaxWidth, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, MaxHeight, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, UnknownData_5067, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _imageWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _item, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _itemClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, DefaultWidth, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, DefaultHeight, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, DefaultPosition, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, UnknownData_C6WZ, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _additionalIcon, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _additionalText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, UnknownData_8YT5, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _numberData, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _shouldUpdateVisuals, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, UnknownData_023W, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _lowerLeftBox, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, _additionalIconSizeBox, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickAccessItemWidget, UnknownData_IAZC, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuickAccessItemWidget, 0x0370);
		}

		// class AQuiver : public AClothesItem
		TEST_METHOD(Class__ConZ__Quiver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, AlternativeSkeletalMesh, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, ArrowsBoneName, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, _arrowMeshComponentsArray2, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, _alternativeEquippedMesh, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, UnknownData_Y2TV, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, _containerDepth, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuiver, UnknownData_KAYE, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AQuiver, 0x1BD8);
		}

		// class ARabbit2 : public AAnimal2
		TEST_METHOD(Class__ConZ__Rabbit2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARabbit2, UnknownData_ASW7, 0x08CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARabbit2, 0x08D0);
		}

		// class ASimpleAnimalAIController : public AAIController
		TEST_METHOD(Class__ConZ__SimpleAnimalAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, WanderRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, RunAwayTime, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, MinActionTime, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, MaxActionTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, WalkSpeed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, RunSpeed, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, FleeSegmentDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, AlertStartupTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, MinMoveDistance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, DoNotDespawnTime, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASimpleAnimalAIController, UnknownData_ZA97, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASimpleAnimalAIController, 0x03B8);
		}

		// class ARabbit2AIController : public ASimpleAnimalAIController
		TEST_METHOD(Class__ConZ__Rabbit2AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARabbit2AIController, MoveSegment, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARabbit2AIController, MovementPauseMinTime, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARabbit2AIController, MovementPauseMaxTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARabbit2AIController, AngleOffset, 0x03C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARabbit2AIController, 0x03C8);
		}

		// class URadiationSickness : public UDisease
		TEST_METHOD(Class__ConZ__RadiationSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadiationSickness, UnknownData_M1PW, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadiationSickness, 0x01D8);
		}

		// class URadioComponent : public UAkComponent
		TEST_METHOD(Class__ConZ__RadioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, _currentStationIndex, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, UnknownData_P6SH, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, _isHiFi, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, _isReachableFromSkyWhenMounted, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, UnknownData_V0LR, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, _attenuationScale, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, _turnedOn, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioComponent, UnknownData_NF8Q, 0x03ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioComponent, 0x0410);
		}

		// class ARadioItem : public AItem
		TEST_METHOD(Class__ConZ__RadioItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioItem, _radioComponent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioItem, _resourceContainerComponent, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadioItem, 0x0768);
		}

		// class URadioTrack : public UDataAsset
		TEST_METHOD(Class__ConZ__RadioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioTrack, audio, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioTrack, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioTrack, UnknownData_PXO9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioTrack, 0x0040);
		}

		// class URadioCategory : public UObject
		TEST_METHOD(Class__ConZ__RadioCategory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategory, Tracks, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategory, _index, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategory, UnknownData_9HM8, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioCategory, 0x0040);
		}

		// class URadioCategoryShuffle : public URadioCategory
		TEST_METHOD(Class__ConZ__RadioCategoryShuffle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategoryShuffle, _canTracksRepeat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategoryShuffle, UnknownData_YCQV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioCategoryShuffle, _tracksAlreadyPlayed, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioCategoryShuffle, 0x0058);
		}

		// class URadioProgram : public UObject
		TEST_METHOD(Class__ConZ__RadioProgram)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioProgram, CategoryClasses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioProgram, Categories, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioProgram, _categoryIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioProgram, UnknownData_LYNG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioProgram, 0x0050);
		}

		// class ARadioStation : public AActor
		TEST_METHOD(Class__ConZ__RadioStation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, UnknownData_6YOH, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, _programsData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, _maxTracksToQueue, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, _currentIndex, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, _playlist, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, _elapsedTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadioStation, UnknownData_KP0H, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadioStation, 0x0290);
		}

		// class ARecastNavMesh_Humanoids : public ARecastNavMesh
		TEST_METHOD(Class__ConZ__RecastNavMesh_Humanoids)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh_Humanoids, 0x04D8);
		}

		// class ARecastNavMesh_LargeAnimals : public ARecastNavMesh
		TEST_METHOD(Class__ConZ__RecastNavMesh_LargeAnimals)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh_LargeAnimals, 0x04D8);
		}

		// class ARecastNavMesh_Sentries : public ARecastNavMesh
		TEST_METHOD(Class__ConZ__RecastNavMesh_Sentries)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh_Sentries, 0x04D8);
		}

		// class ARecastNavMesh_SmallAnimals : public ARecastNavMesh
		TEST_METHOD(Class__ConZ__RecastNavMesh_SmallAnimals)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh_SmallAnimals, 0x04D8);
		}

		// class ARegularDoorStatic : public ADoor
		TEST_METHOD(Class__ConZ__RegularDoorStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARegularDoorStatic, _openRotation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARegularDoorStatic, _closedRotation, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARegularDoorStatic, 0x0400);
		}

		// class ARegularDoorDestructible : public ADoor
		TEST_METHOD(Class__ConZ__RegularDoorDestructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARegularDoorDestructible, _openRotation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARegularDoorDestructible, _closedRotation, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARegularDoorDestructible, 0x0400);
		}

		// class UWeaponActionUnloadAmmoSequence : public UWeaponAction
		TEST_METHOD(Class__ConZ__WeaponActionUnloadAmmoSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionUnloadAmmoSequence, Animations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionUnloadAmmoSequence, CanBeInterrupted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponActionUnloadAmmoSequence, UnknownData_LIW7, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponActionUnloadAmmoSequence, 0x0050);
		}

		// class URemoveCartridge : public UWeaponActionUnloadAmmoSequence
		TEST_METHOD(Class__ConZ__RemoveCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveCartridge, MontageEndSectionName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveCartridge, 0x0058);
		}

		// class URemoveMagazineInsertCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__RemoveMagazineInsertCartridge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveMagazineInsertCartridge, 0x0090);
		}

		// class URemoveMagazineInsertMagazine : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__RemoveMagazineInsertMagazine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveMagazineInsertMagazine, 0x0090);
		}

		// class URemoveMagazineInsertMagazineInsertCartridge : public UWeaponActionReloadSequence
		TEST_METHOD(Class__ConZ__RemoveMagazineInsertMagazineInsertCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveMagazineInsertMagazineInsertCartridge, MontageEndSectionName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveMagazineInsertMagazineInsertCartridge, UnknownData_M535, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveMagazineInsertMagazineInsertCartridge, 0x00A0);
		}

		// class URemoveMagazineRemoveCartridge : public UWeaponActionUnloadAmmoSequence
		TEST_METHOD(Class__ConZ__RemoveMagazineRemoveCartridge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveMagazineRemoveCartridge, MontageEndSectionName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveMagazineRemoveCartridge, 0x0058);
		}

		// class URepairableItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__RepairableItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairableItemTag, Params, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepairableItemTag, 0x0068);
		}

		// class URepairStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__RepairStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepairStatics, 0x0028);
		}

		// class URepairToolItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__RepairToolItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairToolItemTag, Params, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepairToolItemTag, 0x0070);
		}

		// class UReplenishableResourceComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__ConZ__ReplenishableResourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceComponent, _replenishableResourceDescription, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceComponent, _replenishableResourceFillItemInteractionData, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceComponent, _replenishableResourceAmountMaterialParameterName, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplenishableResourceComponent, 0x0640);
		}

		// class UReplenishableResourceManager : public UActorComponent
		TEST_METHOD(Class__ConZ__ReplenishableResourceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceManager, UnknownData_2AZ9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceManager, _gameResourceTypeReferences, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceManager, UnknownData_P0S5, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceManager, _maxNumReplenishableResourceReplenishmentsPerTick, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplenishableResourceManager, UnknownData_SU73, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplenishableResourceManager, 0x0220);
		}

		// class AReportingManager : public AActor
		TEST_METHOD(Class__ConZ__ReportingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReportingManager, UnknownData_RWSC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReportingManager, PrisonerWhistled, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReportingManager, UnknownData_TQQU, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReportingManager, 0x0758);
		}

		// class UResistanceSkill : public UConstitutionSkill
		TEST_METHOD(Class__ConZ__ResistanceSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResistanceSkill, 0x00B8);
		}

		// class UResourceIndicatorWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ResourceIndicatorWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceIndicatorWidget, UnknownData_NIZM, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourceIndicatorWidget, 0x0288);
		}

		// class UResourceLockingManager : public UActorComponent
		TEST_METHOD(Class__ConZ__ResourceLockingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceLockingManager, UnknownData_SYWL, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourceLockingManager, 0x01A0);
		}

		// class URespawnSettings : public UDataAsset
		TEST_METHOD(Class__ConZ__RespawnSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URespawnSettings, parameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URespawnSettings, 0x0088);
		}

		// class URespiratoryRateWidget : public UWidget
		TEST_METHOD(Class__ConZ__RespiratoryRateWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, Thickness, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, Periods, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, UnknownData_MXP7, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URespiratoryRateWidget, _prisonerLifeComponent, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URespiratoryRateWidget, 0x01E0);
		}

		// class URestAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__RestAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestAssetData, RestingMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestAssetData, UnknownData_ZWSA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestAssetData, RestingAnimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestAssetData, AdditionalEndRestLocations, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestAssetData, 0x0050);
		}

		// class URestorableMeshInstancesManager : public UActorComponent
		TEST_METHOD(Class__ConZ__RestorableMeshInstancesManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, UnknownData_4X3Z, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, _actorsProcessingDelayOnStreamingLevelLoad, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, _processingBudgetPerTick, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, UnknownData_F320, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, _generateMeshInstancesToRestoreUpdateInterval, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, UnknownData_V15D, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, _minDistanceToPlayerPawnToRestoreMeshInstance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestorableMeshInstancesManager, UnknownData_9866, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestorableMeshInstancesManager, 0x0350);
		}

		// class URevivePatientAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__RevivePatientAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevivePatientAction, 0x00A8);
		}

		// class URewardItemWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__RewardItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URewardItemWidget, _bulletImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URewardItemWidget, _rewardItemText, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URewardItemWidget, 0x0270);
		}

		// class URichTextInlineTextDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__ConZ__RichTextInlineTextDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextInlineTextDecorator, 0x0028);
		}

		// class URiflesSkill : public URangedWeaponsSkill
		TEST_METHOD(Class__ConZ__RiflesSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URiflesSkill, 0x00E0);
		}

		// class URunningSkill : public UConstitutionSkill
		TEST_METHOD(Class__ConZ__RunningSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URunningSkill, NoSkillParameters, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URunningSkill, BasicSkillParameters, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URunningSkill, MediumSkillParameters, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URunningSkill, AdvancedSkillParameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URunningSkill, UnknownData_O241, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URunningSkill, 0x0100);
		}

		// class USafeZoneRegistry : public UActorComponent
		TEST_METHOD(Class__ConZ__SafeZoneRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, UnknownData_ZWYL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, _maxNumOfConfigSaveZones, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, UnknownData_LQ9N, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, _safeZones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, _safeZoneConfigParams, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneRegistry, UnknownData_CPU6, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneRegistry, 0x0128);
		}

		// class USalmonellaDisease : public UDisease
		TEST_METHOD(Class__ConZ__SalmonellaDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USalmonellaDisease, UnknownData_R3H4, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USalmonellaDisease, 0x01B8);
		}

		// class UScopeable : public UInterface
		TEST_METHOD(Class__ConZ__Scopeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScopeable, 0x0028);
		}

		// class UScreenSpaceHealthWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__ScreenSpaceHealthWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenSpaceHealthWidget, 0x0260);
		}

		// class USearchItemDataAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__SearchItemDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, Caption, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, Duration, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, UnknownData_P33M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, SearchData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, StartSearchAudioEvent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, StopSearchAudioEvent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, NoiseLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchItemDataAsset, UnknownData_C824, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchItemDataAsset, 0x0078);
		}

		// class USearchForItemsAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__SearchForItemsAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchForItemsAssetData, SearchAsset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchForItemsAssetData, 0x0038);
		}

		// class ASearchGroundObjective : public AObjective
		TEST_METHOD(Class__ConZ__SearchGroundObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASearchGroundObjective, _itemToSearch, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASearchGroundObjective, _itemAmount, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASearchGroundObjective, UnknownData_LOLK, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASearchGroundObjective, 0x0340);
		}

		// class USeleniumDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__SeleniumDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeleniumDeficiency, 0x01C0);
		}

		// class ASentry2 : public AConZCharacter
		TEST_METHOD(Class__ConZ__Sentry2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_FO1I, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_9FQB, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _obstacleCapsule, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _pelvisBoneName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _eyesViewPointSocketName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _longRangeWeaponSocketName, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_6G6R, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _beginPlayAudioEvent, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _fireBulletAudioEvent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _startHighFireRateAttack, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _endHighFireRateAttack, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _reloadAudioEvent, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _deathAudioEvent, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _freezeWarningAudioEvent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _dropWeaponsRaiseHandsAudioEvent, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _walkAwayAudioEvent, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _beginCombatAudioEvent, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _reloadMontageLongRangeWeapon, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _deathMontage, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _kickMontages, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _projectileClass, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_6JXH, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _sentryMovementComponent, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _hitReactComponent, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_MDA5, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _maxHealth, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_A579, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _projectileDamageMultiplier, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _armorDamageReductionProjectile, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _explosionDamageMultiplier, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _armorDamageReductionExplosion, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _thrownDamageMultiplier, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _armorDamageReductionThrown, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _meleeDamageMultiplier, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _armorDamageReductionMelee, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _dataPerBodyPart, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _sentryStance, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _shouldAimWeapon, 0x08D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_PCC7, 0x08DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _longRangeWeaponFireRate, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _longRangeWeaponHalfAngleDegrees, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _maxAmmunitionLongRangeWeapon, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_SET7, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _maxAmmunitionMediumRangeWeapon, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_WL10, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _longRangeWeaponSpreadHalfAngle, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _mediumRangeWeaponFireRate, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _mediumRangeWeaponHalfAngleDegrees, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _mediumRangeWeaponActivationDistance, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _meleeAttackRate, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _meleeAttackActivationDistance, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_DJ8O, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _guardedAreas, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_YGLV, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _patrolPoints, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _muzzlePS, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _muzzlePSC, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _muzzleEffectsScaleDistanceStart, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _muzzleEffectsScaleDistanceRange, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _muzzleEffectsScaleByDistanceFactor, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_CJKT, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _spotlightLeftMesh, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _spotlightRightMesh, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _spotlight, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _normalLightColor, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _alertedLightColor, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _combatLightColor, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_EWH3, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _spottingPercentage, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_ULXC, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _laserMeshComponent, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _shouldDrawLongRangeWeaponLaser, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_8A59, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _autosaveInterval, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_GMX4, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _shouldSaveAndLoadSentry, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_9PMK, 0x09B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _foe, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, _weaponFocusLocation, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_2V54, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, MaxWalkingSpeed, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, IKOffsetRightFoot, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, IKOffsetLeftFoot, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, LeftFoorHitNormal, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, RightFootHitNormal, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, StompShakeEffectRadius, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, StompCameraShake, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentry2, UnknownData_CDOO, 0x0A18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASentry2, 0x0A20);
		}

		// class ASentryAIController2 : public AAIController
		TEST_METHOD(Class__ConZ__SentryAIController2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _sentry, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_BRD0, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _canHear, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _canSee, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_FNFB, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _currentSightSenseConfig, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _currentHearingSenseConfig, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _sightSenseConfigPatrolling, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _sightSenseConfigAlerted, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _sightSenseConfigCombat, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _hearingSenseConfigPatrolling, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _hearingSenseConfigAlerted, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _hearingSenseConfigCombat, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _spottingTimeDecayMultiplier, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _forgetKnownEnemyTime, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _noiseStimuliBeforeInstantlyLocatingCharacter, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_5B0X, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _specialNoiseTags, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _timeUntilNoiseStimuliCounterReset, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_R1NJ, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _threatLevelAccumulationMultiplier, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _onHearNoiseThreatLevelIncrease, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _onDamageTakeThreatLevelIncrease, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_SWC6, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _switchTargetCharacterTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _detectionDelayTimerData, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _distanceWhenConsideredCharacterEnteredHotZone, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _maxDistanceWhenTemporaryPointIsConsideredTooClose, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _temporaryPatrolPointVisitsUntilDeleted, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_7BIM, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _checkSurroundingsTime, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_HHOV, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _checkSurroundingsAngle, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_KXLP, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _investigatingLocationOverallTime, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_LBRK, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _investigatingLocationTime, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_T6X9, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _investigatingBuildingTime, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_KFF2, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _guardLocationTime, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_YVG0, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _guardLocationSwitchFocusTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_MR22, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _enemySpottedWarningTime, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_SV95, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _maxTolerance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_1Q0H, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _toleranceIncreaseForObedience, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _enemySpottedOutOfSightTimeLimit, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_0LLP, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _distanceWhenConsideredCharacterLeavingHotZone, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _freezeCheckTime, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _freezeCheckToleranceDrainMultiplier, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _numberOfWarningShots, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_KDZV, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _raiseHandsCheckTime, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _raiseHandsCheckToleranceDrainMultiplier, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _walkAwayCheckToleranceDrainMultiplier, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _movingToHotZoneToleranceDrainMultiplier, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _minMovingToHotZoneRange, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _otherToleranceDrainMultiplier, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _minimumAlertedTime, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_5PYV, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _observeEnemyMovementTime, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_AXJ2, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _observeEnemyMovementOpenFireThreshold, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_FU18, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _beginShootingTime, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_71I4, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatSwitchVariationTimeMin, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatSwitchVariationTimeMax, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_P7CN, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _maxFireRateTime, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_K1QI, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _fireRateAccumulationSpeed, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _startingHighFireRate, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _highFireRateSpreadMultiplier, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_1G39, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _highPrecisionShotAimTime, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _highPrecisionShotCooldownTime, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_2DBC, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatMoveCloserDistance, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatDistance, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_7N5E, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _noWeaponLineOfSightTime, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_G7MH, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatNoSightTime, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_7OKZ, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _searchForEnemyAfterLostStimulusTime, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _combatLostSightInvestigateLocationTime, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_M1YI, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _distanceFromActorWhenInvestigationLocationIsChanged, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _relocatingAngle, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _relocatingRadius, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _destroyingVehicleGiveUpTime, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_31N8, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _movingAwayHalfAngleDegrees, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_NKLJ, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _movingTowardsHalfAngleDegrees, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_GBAY, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _acceptanceRadius, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_TYBT, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, _timeToBeConsideredStuck, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryAIController2, UnknownData_V4P5, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASentryAIController2, 0x06C0);
		}

		// class USentryAnimInstance2 : public UAnimInstance
		TEST_METHOD(Class__ConZ__SentryAnimInstance2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_YU99, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, BlendInTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, BlendOutTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, GunsLerpFactor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, RightFootEffectorLocation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, LeftFootEffectorLocation, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, RightFootRotation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, LeftFootRotation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, ShouldUseLUWalkStopAnimation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_BW8E, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, stoppingDistance, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_JHFY, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _sentry, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _sentryMovementComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _isSentryCompletelyInitialized, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _shouldAimWeapon, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _wantsToMove, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _previousWantsToMove, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _movementPace, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_C6MT, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _actualCourseAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _desiredCourseAngle, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _desiredCoursePitchAngle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _angularVelocity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _velocity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _speed, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _forwardVector, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _isFalling, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _isDead, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_9ORJ, 0x037E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _gunsLookAtLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _leanLeftBlendWeight, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, _leanRightBlendWeight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryAnimInstance2, UnknownData_GTU7, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USentryAnimInstance2, 0x03A0);
		}

		// class USentryFirstPersonViewComponent : public UPrisonerViewComponent
		TEST_METHOD(Class__ConZ__SentryFirstPersonViewComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USentryFirstPersonViewComponent, 0x00D0);
		}

		// class ASentryGuardVolume2 : public AVolume
		TEST_METHOD(Class__ConZ__SentryGuardVolume2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryGuardVolume2, UnknownData_HQ83, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryGuardVolume2, _hotZonesLocalLocations, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryGuardVolume2, UnknownData_0F1V, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentryGuardVolume2, _hotZonesBuildings, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASentryGuardVolume2, 0x02A8);
		}

		// class USentryMovementComponent : public UConZCharacterMovementComponent
		TEST_METHOD(Class__ConZ__SentryMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryMovementComponent, MaxRotationRateCurve, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryMovementComponent, RotationInterpolationSpeed, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryMovementComponent, CorrectServerReceivedZ, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryMovementComponent, UnknownData_XDTT, 0x0B15);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USentryMovementComponent, 0x0B40);
		}

		// class ASentrySpawner2 : public AActor
		TEST_METHOD(Class__ConZ__SentrySpawner2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, ActivationDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, UnknownData_Y361, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, SentryClass, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, PatrolPoints, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, GuardedAreas, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, Sprite, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, UnknownData_X5PW, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, _shouldSaveAndLoadSentry, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, UnknownData_TXQ8, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, _autoSaveTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASentrySpawner2, UnknownData_SPO7, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASentrySpawner2, 0x02A0);
		}

		// class USentryThirdPersonViewComponent : public UPrisonerViewComponent
		TEST_METHOD(Class__ConZ__SentryThirdPersonViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryThirdPersonViewComponent, StandingSubviewName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryThirdPersonViewComponent, StandingAimingSubviewName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryThirdPersonViewComponent, UnknownData_SAZD, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USentryThirdPersonViewComponent, 0x0100);
		}

		// class USerializableLayoutWidgetInterface : public UInterface
		TEST_METHOD(Class__ConZ__SerializableLayoutWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USerializableLayoutWidgetInterface, 0x0028);
		}

		// class AServerAnalyticsManager : public AActor
		TEST_METHOD(Class__ConZ__ServerAnalyticsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerAnalyticsManager, UnknownData_7OSK, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerAnalyticsManager, 0x0230);
		}

		// class UServerBrowser : public UUserWidget
		TEST_METHOD(Class__ConZ__ServerBrowser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _currentIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _widgetCount, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverInfos, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _unfilteredServerInfos, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverInfosToPing, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverInfosWithPing, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverInfosLastPlayed, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverInfosFavorites, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _requestingServerList, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, UnknownData_N8PA, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _desiredMaxPing, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _desiredHostName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _desiredMinPlayers, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _desiredMaxPlayers, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _showFullServers, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _showOnlyPasswordProtectedServers, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _currentlyOpenTab, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, UnknownData_P4MZ, 0x02EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, _serverList, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, UnknownData_WTTY, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerBrowser, 0x0388);
		}

		// class AShelterItem : public AItem
		TEST_METHOD(Class__ConZ__ShelterItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShelterItem, _canBeAddedToInventory, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShelterItem, UnknownData_N3JH, 0x0759);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShelterItem, 0x0768);
		}

		// class UShotsFiredTrackerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ShotsFiredTrackerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShotsFiredTrackerWidget, _widgetText, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShotsFiredTrackerWidget, 0x0280);
		}

		// class USicknessClasses : public UObject
		TEST_METHOD(Class__ConZ__SicknessClasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessClasses, UnknownData_B966, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USicknessClasses, 0x0038);
		}

		// class ASilentAlarmTrapItem : public ATrapItem
		TEST_METHOD(Class__ConZ__SilentAlarmTrapItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASilentAlarmTrapItem, _triggerSound, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASilentAlarmTrapItem, _detonationDelay, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASilentAlarmTrapItem, UnknownData_J3E8, 0x08A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASilentAlarmTrapItem, 0x08C0);
		}

		// class USingletonStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__SingletonStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingletonStatics, 0x0028);
		}

		// class USkillClasses : public UObject
		TEST_METHOD(Class__ConZ__SkillClasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillClasses, UnknownData_3RVV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillClasses, 0x0038);
		}

		// class USkillEventHandler : public UObject
		TEST_METHOD(Class__ConZ__SkillEventHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillEventHandler, UnknownData_K798, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillEventHandler, 0x0030);
		}

		// class ASledge : public AItem
		TEST_METHOD(Class__ConZ__Sledge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_4LU6, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _spawnParameters, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_H9M9, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _mountSlots, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_9CY5, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _floorTraceDistance, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _tiltAngleToUnmountMountees, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_SG40, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _accelerationForceMagnitude, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _decelerationForceMagnitude, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _steeringForceMagnitude, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _steeringForceOffset, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _sidewaysBrakingForceMagnitude, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_DZRL, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _dragForceMagnitudeVsSpeed, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _maxSpeedVsGroundSlopeAngle, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _physicsAssetWhenBoarded, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _defaultMovementParticleSystem, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _movementParticleSystems, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _movementParticlesActivationSpeed, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _movementParticlesDeleteDelay, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _rigidBodyStatePositionErrorTolerance, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _rigidBodyStateRotationErrorTolerance, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _distanceErrorToHardSnapToRemoteLocation, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_L8GK, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _sledgeMovementStartAudioEvent, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _sledgeMovementStopAudioEvent, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _velocityUpdateInterval, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _maxSledgeEnterAngle, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _allowedWaterImmersionDepth, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _disallowedWaterImmersionDepth, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _waterImmersionDepthToForceEvictMountees, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _timeToEvictMounteesWhenImmersedIntoWater, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _timeToForceEvictMounteesWhenImmersedIntoWater, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _timeToAutoDestructWhenImmersedIntoWater, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_2WXS, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _controls, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_S5D2, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _movementParticlesPosition, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_SRZF, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, _healthBarCaption, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASledge, UnknownData_WQCS, 0x0970);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASledge, 0x09B8);
		}

		// class UBP_ImprPistol_Driver_OpenChamberInsertBullet_C : public UInsertCartridge
		TEST_METHOD(BlueprintGeneratedClass__BP_ImprPistol_Driver_OpenChamberInsertBullet__BP_ImprPistol_Driver_OpenChamberInsertBullet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ImprPistol_Driver_OpenChamberInsertBullet_C, 0x00A0);
		}

		// class USledgeMountSlot : public UActorComponent
		TEST_METHOD(Class__ConZ__SledgeMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, UnknownData_OFNW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _socketName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _mountAudioEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _mountPriority, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, UnknownData_CCIV, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _entryPoints, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _unmountAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _isReachableFromSky, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _mountingMotionIntensity, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _unmountingMotionIntensity, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, UnknownData_54YK, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _mounteeCenterOfMassOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _minEffectiveMounteeMass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _maxEffectiveMounteeMass, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _mountee, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _reservee, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _canMounteeBeAttackedByMelee, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, UnknownData_R4CI, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeMountSlot, _interactionZoneMaterials, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USledgeMountSlot, 0x0128);
		}

		// class USledgeDriverMountSlot : public USledgeMountSlot
		TEST_METHOD(Class__ConZ__SledgeDriverMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _forwardIdleAnimation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _forwardSteeringAnimation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _forwardSteeringAnimationFP, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _reverseIdleAnimation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _reverseSteeringAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgeDriverMountSlot, _reverseSteeringAnimationFP, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USledgeDriverMountSlot, 0x0158);
		}

		// class USledgePassengerMountSlot : public USledgeMountSlot
		TEST_METHOD(Class__ConZ__SledgePassengerMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USledgePassengerMountSlot, _idleAnimation, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USledgePassengerMountSlot, 0x0130);
		}

		// class USledgeSpringArmComponent : public UConZVehicleSpringArmComponent
		TEST_METHOD(Class__ConZ__SledgeSpringArmComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USledgeSpringArmComponent, 0x02D0);
		}

		// class ASlidingDoorStatic : public ADoor
		TEST_METHOD(Class__ConZ__SlidingDoorStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlidingDoorStatic, ClosedPositionComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlidingDoorStatic, OpenPositionComponent, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlidingDoorStatic, 0x03F8);
		}

		// class ASlidingDoorDestructible : public ADoor
		TEST_METHOD(Class__ConZ__SlidingDoorDestructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlidingDoorDestructible, ClosedPositionComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlidingDoorDestructible, OpenPositionComponent, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlidingDoorDestructible, 0x03F8);
		}

		// class ASmokeGrenadeItem : public AGrenadeItem
		TEST_METHOD(Class__ConZ__SmokeGrenadeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, AudioComponent, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, SmokeStartedAudioEvent, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, SmokeStoppedAudioEvent, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, SmokeSoundDuration, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, UnknownData_0OTJ, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, _smokeParticle, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeGrenadeItem, UnknownData_W6WG, 0x0808);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASmokeGrenadeItem, 0x0810);
		}

		// class USnipingSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__SnipingSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USnipingSkill, UnknownData_EM6L, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USnipingSkill, 0x00A8);
		}

		// class USodiumDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__SodiumDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USodiumDeficiency, 0x01C0);
		}

		// class ASoundEmitter : public AActor
		TEST_METHOD(Class__ConZ__SoundEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundEmitter, AudioEvent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoundEmitter, 0x0228);
		}

		// class USoundReducingItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__SoundReducingItemTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundReducingItemTag, 0x0030);
		}

		// class ASpline : public AActor
		TEST_METHOD(Class__ConZ__Spline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpline, SceneComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpline, SplineComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpline, 0x0230);
		}

		// class ASoundSpline : public ASpline
		TEST_METHOD(Class__ConZ__SoundSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, MinCameraLocationDeltaForUpdate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, WorldStreamedCheckInterval, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, AudioEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, InsideSplineAudioEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, OutsideSplineAudioEvent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundSpline, UnknownData_G5NN, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoundSpline, 0x0280);
		}

		// class USpawnDecalWhenParticleCollides : public UParticleModuleEventSendToGame
		TEST_METHOD(Class__ConZ__SpawnDecalWhenParticleCollides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDecalWhenParticleCollides, Decals, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDecalWhenParticleCollides, 0x0038);
		}

		// class USpawnMenuWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__SpawnMenuWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnMenuWidget, 0x0278);
		}

		// class USpawnScreen : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__SpawnScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnScreen, 0x0278);
		}

		// class USphereProximityTriggerComponent : public UProximityTriggerComponent
		TEST_METHOD(Class__ConZ__SphereProximityTriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereProximityTriggerComponent, SphereCollisionComponent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereProximityTriggerComponent, VisualizationMeshComponent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereProximityTriggerComponent, _triggerRadius, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereProximityTriggerComponent, UnknownData_LC1V, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereProximityTriggerComponent, _visualizationMesh, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereProximityTriggerComponent, 0x0510);
		}

		// class USquadPanelWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__SquadPanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, squadRank, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, squadIndex, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadTopNames, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadTopInformation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadTopEmblems, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadTopScore, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadRankingNames, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadRankingInformation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadRankingEmblems, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, SquadRankingScore, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, MemberUserProfileIds, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, MemberNames, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, MemberRanks, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, MemberFamePoints, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadPanelWidget, MemberOnline, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USquadPanelWidget, 0x0338);
		}

		// class UStaphylococcalPoisoning : public UPoisoning
		TEST_METHOD(Class__ConZ__StaphylococcalPoisoning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaphylococcalPoisoning, UnknownData_HKEY, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaphylococcalPoisoning, 0x01B8);
		}

		// class UStarvationSickness : public USickness
		TEST_METHOD(Class__ConZ__StarvationSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStarvationSickness, UnknownData_LT2E, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStarvationSickness, 0x01B8);
		}

		// class AStaticRadioItem : public ARadioItem
		TEST_METHOD(Class__ConZ__StaticRadioItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticRadioItem, 0x0768);
		}

		// class UStatisticsDetailsWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__StatisticsDetailsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _generalSubcategoryTab, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _foodSubcategoryTab, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _huntingSubcategoryTab, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _travelSubcategoryTab, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _metabolismSubcategoryTab, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _craftingSubcategoryTab, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _combatSubcategoryTab, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _eventsSubcategoryTab, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _subcategorySwitcher, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, UnknownData_S6E7, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _generalStatisticsList, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _foodStatisticsList, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _huntingStatisticsList, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _travelStatisticsList, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _metabolismStatisticsList, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _craftingStatisticsList, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _combatStatisticsList, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsDetailsWidget, _eventsStatisticsList, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticsDetailsWidget, 0x0370);
		}

		// class UStatisticsListRow : public UUserWidget
		TEST_METHOD(Class__ConZ__StatisticsListRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListRow, _statNameTextBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListRow, _statValueTextBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListRow, _statUnitTextBox, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticsListRow, 0x0278);
		}

		// class UStatisticsListWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__StatisticsListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListWidget, _subcategoryName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListWidget, _subcategoryTextBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsListWidget, _scrollBox, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticsListWidget, 0x0288);
		}

		// class UStatisticsPanelWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__StatisticsPanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsPanelWidget, PlayerSurvivalStats, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsPanelWidget, _survivalDetailsWidget, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticsPanelWidget, 0x03A8);
		}

		// class UStatisticsSubcategoryTab : public UUserWidget
		TEST_METHOD(Class__ConZ__StatisticsSubcategoryTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, UnknownData_B2B7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, _subcategoryIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, _tabSelectionImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, _subcategoryImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, _selectedTabTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticsSubcategoryTab, UnknownData_2VPU, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticsSubcategoryTab, 0x02A0);
		}

		// class UStealthSkill : public UDexteritySkill
		TEST_METHOD(Class__ConZ__StealthSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStealthSkill, 0x00A0);
		}

		// class AStorageItem : public AChestItem
		TEST_METHOD(Class__ConZ__StorageItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStorageItem, _inventoryCount, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStorageItem, UnknownData_YOSI, 0x07E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStorageItem, 0x07E8);
		}

		// class UStoreItemAction : public UInteractionAction
		TEST_METHOD(Class__ConZ__StoreItemAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemAction, UnknownData_ZA0C, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemAction, 0x00D8);
		}

		// class USubtitleWidget : public UUserWidget
		TEST_METHOD(Class__ConZ__SubtitleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleWidget, _subtitle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleWidget, _subtitleOverlay, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubtitleWidget, 0x0270);
		}

		// class USunburnSickness : public USickness
		TEST_METHOD(Class__ConZ__SunburnSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USunburnSickness, UnknownData_R0S9, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USunburnSickness, 0x01B8);
		}

		// class USurvivalSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__SurvivalSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, NoSkillParameters, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, BasicSkillParameters, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, MediumSkillParameters, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, AdvancedSkillParameters, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, AboveAdvancedSkillParameters, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalSkill, UnknownData_7TT6, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivalSkill, 0x00A8);
		}

		// class ASurvivalStatsHandler : public AActor
		TEST_METHOD(Class__ConZ__SurvivalStatsHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStatsHandler, UnknownData_S2EE, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalStatsHandler, 0x0298);
		}

		// class USwimmingSkill : public UConstitutionSkill
		TEST_METHOD(Class__ConZ__SwimmingSkill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwimmingSkill, 0x00B8);
		}

		// class ASwitch : public AActor
		TEST_METHOD(Class__ConZ__Switch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitch, UnknownData_OQV4, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitch, Mesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitch, _interactionText, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitch, 0x0258);
		}

		// class UTabElement : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TabElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, CategoryNameWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, maxIndex, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, Index, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, UnknownData_EVFT, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _initialPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _oldPosition, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _newPosition, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _initialSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _oldSize, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _newSize, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _oldAlpha, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _newAlpha, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _interpolationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, _interpolationDuration, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabElement, UnknownData_QLAI, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabElement, 0x02C8);
		}

		// class UTabModeSwitcherWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TabModeSwitcherWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabModeSwitcherWidget, UnknownData_BTB6, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabModeSwitcherWidget, 0x0280);
		}

		// class UTabRowWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TabRowWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabRowWidget, UnknownData_QRVM, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabRowWidget, 0x0290);
		}

		// class UTacticsSkill : public UIntelligenceSkill
		TEST_METHOD(Class__ConZ__TacticsSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, UnknownData_Z6S9, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _updateTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _serverUpdateTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _noSkillDetectionRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _basicDetectionRange, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _mediumDetectionRange, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _advancedDetectionRange, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _aboveAdvancedDetectionRange, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _noSkillDetectionTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _basicDetectionTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _mediumDetectionTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _advancedDetectionTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _aboveAdvancedDetectionTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _fadeOutTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, UnknownData_0Y5B, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _detectionTimeDistanceScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _noSkillExperiencePerSecond, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _basicExperiencePerSecond, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _mediumExperiencePerSecond, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _advancedExperiencePerSecond, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _tacticsDetectionCurveCoefficient1, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _tacticsDetectionCurveCoefficient2, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, _tacticsDetectionCurveCoefficient3, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTacticsSkill, UnknownData_J92P, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTacticsSkill, 0x0150);
		}

		// class UHandsCorrectionsData : public UDataAsset
		TEST_METHOD(Class__ConZ__HandsCorrectionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsCorrectionsData, Corrections, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsCorrectionsData, FirstPersonCorrections, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsCorrectionsData, OverrideFingersOnlyInProne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandsCorrectionsData, UnknownData_UVT3, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandsCorrectionsData, 0x0238);
		}

		// class UTakeInHandsAssetData : public UInteractionAssetData
		TEST_METHOD(Class__ConZ__TakeInHandsAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, AttachmentSocketMountType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, GripSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, SupportingHandIKSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, TakeInHandsMontage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, RemoveFromHandsMontage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, MeleeSkillAnimationsPreset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, HandsCorrectionssData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, FirstPersonAnimationsData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, MovementSpeedModifier, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, SwimmingMovementSpeedModifier, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, DivingMovementSpeedModifier, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, BuoyancyMultiplier, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ShouldActionConstrainStance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ShouldActionConstrainMove, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ShouldActionConstrainTurn, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ShouldActionForceStance, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ActionStance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ActionStanceFlag, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, IsCarried, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, StanceWhileCarrying, 0x0087);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, CarryStanceFlag, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ShouldDropWhenEnteringCombatMode, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, MaxPaceWhileCarrying, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, UnknownData_4E73, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, CarryItemIdleAnimationFP, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, CarryItemIdleAnimationTP, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, PlayerLongThrowMontage, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, PlayerLongThrowLoopMontage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, PlayerShortThrowMontage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, PlayerThrowbackMontage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ThrowingItemToWeaponMontage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, WeaponToThrowingItemMontage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, MaxObstructedDepenetrationDepth, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, MaxObstructedDepenetrationDepthProne, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, LeftObstructedIdleAnimationFP, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, RightObstructedIdleAnimationFP, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ObstructedIdleAnimationTP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTakeInHandsAssetData, ObstructedIdleAnimationProneTP, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTakeInHandsAssetData, 0x00F8);
		}

		// class ATargetObjective : public ARequirementObjective
		TEST_METHOD(Class__ConZ__TargetObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, _targetClasses, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, _specificTarget, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, UnknownData_WN0U, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, _targetMeshes, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, _targetItems, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetObjective, UnknownData_M8Q4, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetObjective, 0x0400);
		}

		// class UTeamDeathmatchParticipantStats : public UGameEventParticipantStats
		TEST_METHOD(Class__ConZ__TeamDeathmatchParticipantStats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeamDeathmatchParticipantStats, 0x0048);
		}

		// class ATeamDeathmatchGameEvent : public AGameEventBase
		TEST_METHOD(Class__ConZ__TeamDeathmatchGameEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchGameEvent, _teamDeathmatchParameters, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchGameEvent, UnknownData_TMBG, 0x058C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeamDeathmatchGameEvent, 0x0598);
		}

		// class ATeamDeathmatchLocationMarker : public AGameEventLocationMarker
		TEST_METHOD(Class__ConZ__TeamDeathmatchLocationMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchLocationMarker, TeamDeathmatchParameters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchLocationMarker, FocusOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchLocationMarker, MinimalRadius, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamDeathmatchLocationMarker, UnknownData_MRYU, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeamDeathmatchLocationMarker, 0x0440);
		}

		// class UTeamInfoWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TeamInfoWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeamInfoWidget, 0x0278);
		}

		// class UTeamInvitationWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TeamInvitationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeamInvitationWidget, InvitationText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeamInvitationWidget, invitor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeamInvitationWidget, invited, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeamInvitationWidget, 0x02A0);
		}

		// class UTeammateNameWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TeammateNameWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeammateNameWidget, 0x0278);
		}

		// class UTeleportComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__TeleportComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportComponent, UnknownData_6U0Q, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportComponent, _repData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportComponent, UnknownData_S34I, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportComponent, 0x00F0);
		}

		// class UTeleportComponentOwner : public UInterface
		TEST_METHOD(Class__ConZ__TeleportComponentOwner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportComponentOwner, 0x0028);
		}

		// class ATeleportStagingLocation : public AActor
		TEST_METHOD(Class__ConZ__TeleportStagingLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeleportStagingLocation, 0x0220);
		}

		// class UTeleportSubject : public UInterface
		TEST_METHOD(Class__ConZ__TeleportSubject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportSubject, 0x0028);
		}

		// class ATempPlayerStart : public APlayerStart
		TEST_METHOD(Class__ConZ__TempPlayerStart)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATempPlayerStart, 0x0250);
		}

		// class UTextStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__TextStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextStatics, 0x0028);
		}

		// class UThieverySkill : public UDexteritySkill
		TEST_METHOD(Class__ConZ__ThieverySkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThieverySkill, _lockpickingDurationModifierCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThieverySkill, _lockpickingStartAngleModifierCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThieverySkill, _lockpickingAngleModifierCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThieverySkill, _lockpickingDurabilityModifierCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThieverySkill, 0x00C0);
		}

		// class UThrowableItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__ThrowableItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowableItemTag, WeaponDesc, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowableItemTag, 0x0068);
		}

		// class UThrowingComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__ConZ__ThrowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, ItemThrowingBehavior, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, UnknownData_KBH3, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, PierceMaxDensity, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, ThrowSpeedMultiplier, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, InitialRotation, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, UpdatedRotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, MinRandomImpactRotation, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, MaxRandomImpactRotation, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, PenetrationDepth, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingComponent, UnknownData_96HD, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingComponent, 0x15C0);
		}

		// class UThrowingDamageType : public UDamageType
		TEST_METHOD(Class__ConZ__ThrowingDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingDamageType, 0x0040);
		}

		// class UThrowingQuickAccessItemWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__ThrowingQuickAccessItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, MaxWidth, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, MaxHeight, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, UnknownData_3JBS, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, _imageWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, _itemClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, DefaultWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, DefaultHeight, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, DefaultPosition, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, UnknownData_MN3E, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, _additionalIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, _additionalText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingQuickAccessItemWidget, UnknownData_S4RD, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingQuickAccessItemWidget, 0x02C0);
		}

		// class UThrowingSkill : public UDexteritySkill
		TEST_METHOD(Class__ConZ__ThrowingSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingSkill, UnknownData_JAFN, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingSkill, _minPlayRate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingSkill, _maxPlayRate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingSkill, UnknownData_R1TX, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingSkill, 0x00B0);
		}

		// class ATimeControllableLight : public ALight
		TEST_METHOD(Class__ConZ__TimeControllableLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableLight, _shouldExistOnDedicatedServer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableLight, UnknownData_951R, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableLight, _intensityVsTimeOfDayCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableLight, _pointLightComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeControllableLight, 0x0248);
		}

		// class ATimeControllableSpotLight : public ALight
		TEST_METHOD(Class__ConZ__TimeControllableSpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableSpotLight, _shouldExistOnDedicatedServer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableSpotLight, UnknownData_VHJO, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableSpotLight, _intensityVsTimeOfDayCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeControllableSpotLight, _pointLightComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeControllableSpotLight, 0x0248);
		}

		// class UTimedTriggerComponent : public UTriggerComponent
		TEST_METHOD(Class__ConZ__TimedTriggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimedTriggerComponent, UnknownData_GWII, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimedTriggerComponent, _countdownStartAudioEvent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimedTriggerComponent, _countdownStopAudioEvent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimedTriggerComponent, _countdownStartTimestmap, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimedTriggerComponent, UnknownData_SUOG, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimedTriggerComponent, 0x04D0);
		}

		// class UTireToSurfaceAudioData : public UDataAsset
		TEST_METHOD(Class__ConZ__TireToSurfaceAudioData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, _maxSoundRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, UnknownData_JXRC, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, _movementStarted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, _movementStopped, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, _noSurface, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, _soundGroups, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireToSurfaceAudioData, UnknownData_011J, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireToSurfaceAudioData, 0x0258);
		}

		// class UToggleCamouflageAction : public USkillAction
		TEST_METHOD(Class__ConZ__ToggleCamouflageAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleCamouflageAction, UnknownData_ABV4, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleCamouflageAction, 0x00A8);
		}

		// class UToothacheSickness : public USickness
		TEST_METHOD(Class__ConZ__ToothacheSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToothacheSickness, UnknownData_YRJM, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToothacheSickness, 0x01B8);
		}

		// class ATournament : public AActor
		TEST_METHOD(Class__ConZ__Tournament)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, UnknownData_HL5B, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, StartAnnouncement, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, SuddenDeathAnnouncement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, EndAnnouncement, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, _inProgress, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, _inSuddenDeath, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, _hasEnded, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, UnknownData_3U9N, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, _stats, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, _scoreboardWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATournament, UnknownData_KXHJ, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATournament, 0x0270);
		}

		// class UTournamentScoreboardWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__TournamentScoreboardWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTournamentScoreboardWidget, 0x0278);
		}

		// class ATrackingMarker2 : public AActor
		TEST_METHOD(Class__ConZ__TrackingMarker2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, UnknownData_Z5ZB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, SceneComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, DirectionArrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, ConeDecal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, Particles, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, TickFrequency, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, UnknownData_N6F0, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, AnimalClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, Duration, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, Direction, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, health, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, BleedingSeverity, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, ShowBleedingInfo, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, ShowWoundInfo, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, ShowBasicWoundInfo, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, MaxSevereBleedTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, MaxHeavyBleedTime, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, MaxModerateBleedTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, MaxLightBleedTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackingMarker2, UnknownData_F9VV, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrackingMarker2, 0x0288);
		}

		// class UTractor4WAnimInstance : public UConZVehicleAnimInstance
		TEST_METHOD(Class__ConZ__Tractor4WAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTractor4WAnimInstance, FLWheelData, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTractor4WAnimInstance, FRWheelData, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTractor4WAnimInstance, UnknownData_Y3M9, 0x0A88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTractor4WAnimInstance, 0x0A90);
		}

		// class UTrapData : public UDataAsset
		TEST_METHOD(Class__ConZ__TrapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapData, SphereProximityTriggerComponentClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapData, BoxProximityTriggerComponentClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapData, LaserTriggerComponentClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapData, TimedTriggerComponentClass, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrapData, 0x0050);
		}

		// class UTrapItemUserData : public UVirtualizedItemUserData
		TEST_METHOD(Class__ConZ__TrapItemUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapItemUserData, OwnerUserProfileId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapItemUserData, IsOwnerUserProfileIdDirty, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapItemUserData, UnknownData_OZ6T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrapItemUserData, 0x0038);
		}

		// class UTrapRefuelItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__TrapRefuelItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapRefuelItemTag, UsesOnRefuel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapRefuelItemTag, UnknownData_UL97, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrapRefuelItemTag, 0x0038);
		}

		// class UTreatBrokenLimbsAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__TreatBrokenLimbsAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreatBrokenLimbsAction, UnknownData_RL1V, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreatBrokenLimbsAction, 0x00B0);
		}

		// class UTreatSicknessAction : public UMedicalAction
		TEST_METHOD(Class__ConZ__TreatSicknessAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreatSicknessAction, UnknownData_FA6D, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreatSicknessAction, 0x00B0);
		}

		// class UTrenchFootDisease : public UDisease
		TEST_METHOD(Class__ConZ__TrenchFootDisease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrenchFootDisease, UnknownData_KE05, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrenchFootDisease, 0x01C0);
		}

		// class UTriggerFailurePenalty : public UFailurePenalty
		TEST_METHOD(Class__ConZ__TriggerFailurePenalty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerFailurePenalty, 0x0030);
		}

		// class UTriggerItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__TriggerItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerItemTag, TriggerType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerItemTag, UnknownData_QETO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerItemTag, 0x0038);
		}

		// class UUIStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__UIStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIStatics, 0x0028);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_RC35, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_I9QX, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_XDHG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_NVRG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_RUC5, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_2TA8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_RUG8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UUnarmedCombatInputRedirector : public UObject
		TEST_METHOD(Class__ConZ__UnarmedCombatInputRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnarmedCombatInputRedirector, UnknownData_GRGG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnarmedCombatInputRedirector, 0x0060);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_HHH7, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_9WTM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class AUnderwaterPostProcessVolume : public APostProcessVolume
		TEST_METHOD(Class__ConZ__UnderwaterPostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUnderwaterPostProcessVolume, 0x07C0);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_N4IA, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UUpdateableNotification : public UBasicNotification
		TEST_METHOD(Class__ConZ__UpdateableNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateableNotification, 0x0030);
		}

		// class UUpdateableNotificationDescription : public UBasicNotificationDescription
		TEST_METHOD(Class__ConZ__UpdateableNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateableNotificationDescription, notificationName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateableNotificationDescription, UnknownData_SQAI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateableNotificationDescription, 0x0070);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_2TZ8, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_FUGL, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// class AUseItemObjective : public AObjective
		TEST_METHOD(Class__ConZ__UseItemObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUseItemObjective, _targetMeshes, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUseItemObjective, UnknownData_DB7R, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUseItemObjective, 0x0378);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_BW6L, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_JL54, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// class UUserManager : public UObject
		TEST_METHOD(Class__ConZ__UserManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserManager, UnknownData_7CHP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserManager, 0x00A0);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UUser : public UObject
		TEST_METHOD(Class__ConZ__User)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, UnknownData_44O7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUser, 0x0110);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_U7YC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_KY24, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_M0QU, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_9ALP, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_V3CU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_2HIR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_P00J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_4KHJ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_XVYT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_SRTG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_1DM8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_KSWM, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_6ZN0, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_L460, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_23P6, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_LPYE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_KFOF, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_ERIS, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_DRUP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_0U0A, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_TZE8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_XLM4, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_1RXY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_BIW4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_XLSX, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_RY8I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_DDCX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UUserProfile : public UObject
		TEST_METHOD(Class__ConZ__UserProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserProfile, UnknownData_HPNI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserProfile, 0x00F0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_3UXT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_1N8V, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_MPON, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_RBRJ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_1COD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_9ROT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UVehicle : public UMountable
		TEST_METHOD(Class__ConZ__Vehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicle, 0x0028);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_Q4L3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_FSBG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_B6BU, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class AVehicleCorpse : public AActor
		TEST_METHOD(Class__ConZ__VehicleCorpse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, UnknownData_EK4E, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _mesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _explosionParticles, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, UnknownData_91DO, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _explosionParticlesTransform, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _explosionAudioEvent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _explosionForceMagnitude, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, UnknownData_ZR8M, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _burningParticles, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, _burningAudioEvent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleCorpse, UnknownData_OEDH, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleCorpse, 0x02A0);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UVehicleHitZoneManager : public UMeshHitZones
		TEST_METHOD(Class__ConZ__VehicleHitZoneManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, _vehicleHitMeshName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, _engineBlock, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, _doors, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, _doorWindows, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, _wheelTires, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleHitZoneManager, UnknownData_AM5I, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleHitZoneManager, 0x0120);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_7QXU, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_PK7K, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_NJYN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_R2H2, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UVehicleHudWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__VehicleHudWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleHudWidget, 0x0278);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_SAF5, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_RVHU, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class AVehicleItemContainer : public AChestItem
		TEST_METHOD(Class__ConZ__VehicleItemContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleItemContainer, 0x07E0);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_BNJ9, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UMountSlot : public UInterface
		TEST_METHOD(Class__ConZ__MountSlot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMountSlot, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_00PL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_CVYI, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0460);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_WCU9, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0480);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_W0GB, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_Y1UZ, 0x0492);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04A0);
		}

		// class UVehicleMountSlot : public UMountSlot
		TEST_METHOD(Class__ConZ__VehicleMountSlot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleMountSlot, 0x0028);
		}

		// class UVehiclePartDescriptionComponent : public UBoxComponent
		TEST_METHOD(Class__ConZ__VehiclePartDescriptionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehiclePartDescriptionComponent, 0x0470);
		}

		// class UVehicleWeaponAimingParameters : public UObject
		TEST_METHOD(Class__ConZ__VehicleWeaponAimingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWeaponAimingParameters, SupportedStance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWeaponAimingParameters, StanceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWeaponAimingParameters, 0x0118);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_IDSC, 0x047A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0480);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class AVehicleSpawner : public AActor
		TEST_METHOD(Class__ConZ__VehicleSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, SpawnerComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleSpawner, 0x0228);
		}

		// class UVehicleSpawnerComponent : public USceneComponent
		TEST_METHOD(Class__ConZ__VehicleSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSpawnerComponent, SpawnerMarkers, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSpawnerComponent, UnknownData_NA9Z, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleSpawnerComponent, 0x0210);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class AVehicleSpawningManager : public AActor
		TEST_METHOD(Class__ConZ__VehicleSpawningManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_GPC4, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _defaultMaxNumSpawnersPerSpawnGroup, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _spawnGroupParentTag, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_FBF7, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _preferredDistanceBetweenSpawners, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _relevantSpawnersUpdateInterval, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_0GQE, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _minVisitorPawnLocationDeltaToUpdateRelevantSpawners, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _vehicleActorCullDistance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _addSpawnerUpdateInterval, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_M0QQ, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _numDaysToKeepSpawnerAliveIfVehicleIsInactive, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _expirableSpawners, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMinHealthAmount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMaxHealthAmount, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMinFuelAmount, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMaxFuelAmount, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMinBatteryAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _newVehicleMaxBatteryAmount, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _autoSaveCheckInterval, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_HSGB, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, _autosaveInterval, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawningManager, UnknownData_E95Q, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleSpawningManager, 0x03F8);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_8RRM, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// class UVehicleSpawnerPreset : public UObject
		TEST_METHOD(Class__ConZ__VehicleSpawnerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSpawnerPreset, SpawnerData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleSpawnerPreset, 0x0040);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_A7UW, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0490);
		}

		// class UVerificationStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__VerificationStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerificationStatics, 0x0028);
		}

		// class UVibrioVulnificusInfection : public UPoisoning
		TEST_METHOD(Class__ConZ__VibrioVulnificusInfection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVibrioVulnificusInfection, UnknownData_21M2, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVibrioVulnificusInfection, 0x01B8);
		}

		// class UVicinityContainer3 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__VicinityContainer3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityContainer3, UnknownData_QSTO, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityContainer3, _container, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityContainer3, UnknownData_LJ9J, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVicinityContainer3, 0x02A0);
		}

		// class UVicinityPanel3 : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__VicinityPanel3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _searchedItemsBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _vicinityBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _vicinityContainersBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _searchedItems, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _vicinityItems, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _vicinityContainers, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, UnknownData_ZA9N, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _filterCheckboxes, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _filterCheckboxesNames, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, _vicinityContainersPadding, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVicinityPanel3, UnknownData_GMQW, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVicinityPanel3, 0x0488);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_4N0P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_HHZ6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_M6I0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UVisionEffectsComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__VisionEffectsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_KPLJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, PostProcessPriority, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_ZAZL, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, FadeOutMaterial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, LowLightVisionMaterial, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, NightVisionMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, NightVisionBlendInDuration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, NightVisionBlendOutDuration, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, AnimalEyesMaterialParameterCollection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, AnimalEyesEmissiveMaterialName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, AnimalEyesEmissiveValueWhenNightVisionIsEnabled, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_XY71, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, FlashbangEffectMaterial, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageMaterialParameterCollection, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageBlurIntensityParameterName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageStainsIntensityParameterName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageVignetteIntensityParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageBlurShapeCurve, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageBlurIntensityCurve, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageBlurDurationCurve, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageStainsShapeCurve, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageStainsIntensityCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageStainsDurationCurve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageVignetteShapeCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageVignetteIntensityCurve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageVignetteDurationCurve, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageMaxChromaticAberration, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_WZ1V, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageCameraShakeClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TakenDamageCameraShakeScaleCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ShouldDesaturateIfHealthIsLow, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_7F17, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, HealthAtWhichDesaturationIsMinimal, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, HealthAtWhichDesaturationIsMaximal, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_KZVD, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, TacticsEffectMaterial, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, FocusModeMaterial, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, DrunkennessMaterial, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, DrunkennessIntensityParameterName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnderwaterBlurMaterial, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnderwaterDivingMaskMaterial, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomMaterial, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomBlendPPParameterName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomBlackoutDensityParameterName, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomChromaticAberrationDampeningParameterName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairBaseScaleParameterName, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairDepthOffsetMultiplierParameterName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairScaleMultiplierParameterName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomDistortionPowerParameterName, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomDistortionScaleParameterName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomEyeDistanceBlackoutMultiplierParameterName, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomGlowIntensityAtNightParameterName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensDepthOffsetMultiplierParameterName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensScaleParameterName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensUIScaleParameterName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensZoomParameterName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomOptimalEyeDistanceParameterName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairCenterScreenOffsetParameterName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensCenterScreenOffsetParameterName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairParameterName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairColorParameterName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairColorAtNightParameterName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomCrosshairGlowColorParameterName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomDirtMaskParameterName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomDirtinessParameterName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomDarkeningParameterName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensNormalMapParameterName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, ScopeZoomLensUIParameterName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _postProcessSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_YJGB, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _drunkennessMaterialInstance, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _headgearOverlayMaterialInstance, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _scopeZoomMaterialInstance, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, UnknownData_GRIH, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _DOFBlurTime, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _DOFClearBlurTime, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _DOFScopingBlurTime, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _DOFBlurDistanceADS, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionEffectsComponent, _DOFFstopADS, 0x0DDC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisionEffectsComponent, 0x0DE0);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_I3NT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_AUOU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_3EU0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_PA64, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_401O, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_CCT4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_064T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_JYAH, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UVisualOverlayItemTag : public UBaseItemTag
		TEST_METHOD(Class__ConZ__VisualOverlayItemTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualOverlayItemTag, OverlayMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualOverlayItemTag, Priority, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualOverlayItemTag, ShouldBeVisibleInFirstPersonView, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualOverlayItemTag, ShouldBeVisibleInThirdPersonView, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualOverlayItemTag, UnknownData_9LQD, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualOverlayItemTag, 0x0040);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_4EG8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class UVitaminADeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminADeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminADeficiency, 0x01C0);
		}

		// class UVitaminB12Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB12Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB12Deficiency, 0x01C0);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class UVitaminB1Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB1Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB1Deficiency, 0x01C0);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UVitaminB2Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB2Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB2Deficiency, 0x01C0);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UVitaminB3Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB3Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB3Deficiency, 0x01C0);
		}

		// class UVitaminB4Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB4Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB4Deficiency, 0x01C0);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_TY3M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UVitaminB5Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB5Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB5Deficiency, 0x01C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_2JRO, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_TNH0, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_HIVE, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UVitaminB6Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB6Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB6Deficiency, 0x01C0);
		}

		// class UVitaminB9Deficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminB9Deficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminB9Deficiency, 0x01C0);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UVitaminCDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminCDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminCDeficiency, 0x01C0);
		}

		// class UVitaminDDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminDDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminDDeficiency, 0x01C0);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_NWTW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UVitaminEDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminEDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminEDeficiency, 0x01C0);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_VI87, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_HVDR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class UVitaminKDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__VitaminKDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitaminKDeficiency, 0x01C0);
		}

		// class UVoiceAudioComponent : public UAudioComponent
		TEST_METHOD(Class__ConZ__VoiceAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, UnknownData_W2CF, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, VoiceDecoder, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, UnknownData_XN89, 0x0870);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceAudioComponent, 0x0880);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UVoiceChatComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__VoiceChatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, UnknownData_IYIY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, MaxVoiceDistance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, ActiveTalker, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, UnknownData_U8MY, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, StopTalkingTimeThreshold, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, UnknownData_G08J, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatComponent, 0x0128);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_LD85, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CYNF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_UI09, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CWHZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_BFRC, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_C1OC, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_J08C, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_HIJQ, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_9UJX, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// class UVoiceDecoder : public UObject
		TEST_METHOD(Class__ConZ__VoiceDecoder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceDecoder, UnknownData_JQ57, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceDecoder, 0x0038);
		}

		// class UVomitingSickness : public USickness
		TEST_METHOD(Class__ConZ__VomitingSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVomitingSickness, UnknownData_N7ZG, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVomitingSickness, 0x01D0);
		}

		// class AVoteSystemManager : public AActor
		TEST_METHOD(Class__ConZ__VoteSystemManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoteSystemManager, VoteTopics, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoteSystemManager, _activeTopicDesc, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoteSystemManager, _activeTopic, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoteSystemManager, UnknownData_LIMT, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVoteSystemManager, 0x02C8);
		}

		// class UVoteTopic : public UObject
		TEST_METHOD(Class__ConZ__VoteTopic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoteTopic, UnknownData_I04S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoteTopic, 0x0048);
		}

		// class UVoteTopic_InitiateCargoDrop : public UVoteTopic
		TEST_METHOD(Class__ConZ__VoteTopic_InitiateCargoDrop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoteTopic_InitiateCargoDrop, 0x0048);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_FEDW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_YJ6Y, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UVoteTopic_SetTimeOfDay : public UVoteTopic
		TEST_METHOD(Class__ConZ__VoteTopic_SetTimeOfDay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoteTopic_SetTimeOfDay, UnknownData_QXW9, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoteTopic_SetTimeOfDay, 0x0050);
		}

		// class UVoteTopic_SetWeather : public UVoteTopic
		TEST_METHOD(Class__ConZ__VoteTopic_SetWeather)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoteTopic_SetWeather, UnknownData_XB1I, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoteTopic_SetWeather, 0x0050);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_ZAZ2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UWarningNotification : public UConZNotification
		TEST_METHOD(Class__ConZ__WarningNotification)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWarningNotification, 0x0030);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_CA48, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UWarningNotificationDescription : public UNotificationDescription
		TEST_METHOD(Class__ConZ__WarningNotificationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWarningNotificationDescription, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWarningNotificationDescription, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWarningNotificationDescription, Color, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWarningNotificationDescription, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_7FZG, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UWashClothesData : public UDataAsset
		TEST_METHOD(Class__ConZ__WashClothesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWashClothesData, WashClothes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWashClothesData, SkillToIncrease, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWashClothesData, SkillIncreaseAmount, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWashClothesData, SkillIncreaseModifier, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWashClothesData, 0x0090);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UWaterSurfaceAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__WaterSurfaceAssetData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterSurfaceAssetData, 0x0028);
		}

		// class AAnimalSpawner2 : public AActor
		TEST_METHOD(Class__ConZ__AnimalSpawner2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, UnknownData_2CS1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, MinSpawnAwayDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, MaxSpawnAwayDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, SpawnInfo, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, SphereComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, _globalSpawner, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, UnknownData_AE92, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimalSpawner2, _animalsData, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimalSpawner2, 0x02C0);
		}

		// class AWaypointGroup : public AAnimalSpawner2
		TEST_METHOD(Class__ConZ__WaypointGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, DebugColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, WaypointTraverseType, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, UnknownData_F2JC, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, MaxSpawnInstancesPerWaypoint, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, WaypointSpawningResetTime, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, Waypoints, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGroup, UnknownData_N9NN, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaypointGroup, 0x0300);
		}

		// class UWaypointScreenWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__WaypointScreenWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointScreenWidget, WaypointClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointScreenWidget, UnknownData_7ETB, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaypointScreenWidget, 0x0290);
		}

		// class UWeaponAccuracyGroup : public UDataAsset
		TEST_METHOD(Class__ConZ__WeaponAccuracyGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalStandFrom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalStandTo, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalCrouchFrom, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalCrouchTo, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalProneFrom, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, NormalProneTo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedStandFrom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedStandTo, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedCrouchFrom, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedCrouchTo, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedProneFrom, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAccuracyGroup, ScopedProneTo, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponAccuracyGroup, 0x0060);
		}

		// class UWeaponActionWornOutFiringConditions : public UWeaponAction
		TEST_METHOD(Class__ConZ__WeaponActionWornOutFiringConditions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponActionWornOutFiringConditions, 0x0028);
		}

		// class UWeaponAmmoDisplayContainerWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__WeaponAmmoDisplayContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayContainerWidget, _ammoDisplayWidgetClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayContainerWidget, _displayList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayContainerWidget, _displayListCentered, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayContainerWidget, UnknownData_OP7D, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponAmmoDisplayContainerWidget, 0x02A0);
		}

		// class UWeaponAmmoDisplayWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__WeaponAmmoDisplayWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayWidget, _ammoCountText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAmmoDisplayWidget, _ammoIcon, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponAmmoDisplayWidget, 0x0288);
		}

		// class UWeaponAnimInstance : public UItemAnimInstance
		TEST_METHOD(Class__ConZ__WeaponAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _owningPrisonerWeaponBreathFactor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _owningPrisonerWeaponAimDownTheSightsStillBlendFactor, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _isOwningPrisonerAimingDownTheSights, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _isChamberOpened, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, UnknownData_I3O2, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _ammoCount, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _shouldPlayChamberOpenedIdle, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _isInGameEvent, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _malfunction, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _useFiringModeBoneRotation, 0x02E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponAnimInstance, _firingModeBoneRotation, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponAnimInstance, 0x02F0);
		}

		// class AWeaponAttachmentBayonet : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentBayonet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentBayonet, 0x0778);
		}

		// class AWeaponAttachmentFlashlight : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentFlashlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentFlashlight, _lightActivatedAudioEvent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentFlashlight, _lightSocketName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentFlashlight, _materialEmissiveParameterName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentFlashlight, UnknownData_VHC3, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentFlashlight, _resourceContainerComponent, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentFlashlight, 0x07A0);
		}

		// class AWeaponAttachmentGhillie : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentGhillie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentGhillie, EquippedSkeletalMeshComponent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentGhillie, WeaponToSkeletalMeshMapping, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentGhillie, 0x07D0);
		}

		// class AWeaponAttachmentMagazine : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentMagazine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, AmmunitionTags, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, RequiresFullCapacityOnLoad, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, UnknownData_P8U0, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, DefaultFillAmmo, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, InitialAmmo, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, UnknownData_AGSK, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, _ammoData, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, _ammoOwnerHelper, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, _capacity, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentMagazine, UnknownData_0YOV, 0x07D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentMagazine, 0x07D8);
		}

		// class AWeaponAttachmentSight : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentSight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSight, ViewCenterSocketName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSight, AimingDownTheSightsLocationOffset, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSight, UnknownData_53KV, 0x078C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentSight, 0x0790);
		}

		// class AWeaponAttachmentScope : public AWeaponAttachmentSight
		TEST_METHOD(Class__ConZ__WeaponAttachmentScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_881K, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ScopeViewOffset, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_Y2R8, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ZoomLevelSettings, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ScopeLensPostProcess, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, LensZoomParameterName, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, FrontFocalPlane, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, HasCrosshairParallax, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_GJHP, 0x07CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ScopingTexture, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ScopeViewMesh, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, ScopeViewLensMesh, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageStandingFP, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageCrouchingFP, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageProneFP, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageStandingTP, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageCrouchingTP, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _montageProneTP, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _scopingStartDelay, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _scopingStopDelay, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _canToggleDownTheSightsMode, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_G08A, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, TextRenderTarget, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, WeaponScopeWidget, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, GlassCenterSocketName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, WindageInitialOffset, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_OCMI, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, WindageClickAudioEvent, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _scopeViewMesh, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _scopeViewLensMesh, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _fakeGlassMinOpacity, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_90CV, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, _displayBrightnessMultiplier, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScope, UnknownData_CH1O, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentScope, 0x0940);
		}

		// class AWeaponAttachmentScopeRail : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentScopeRail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentScopeRail, ScopeSocketName, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentScopeRail, 0x0780);
		}

		// class AWeaponAttachmentSuppressor : public AWeaponAttachment
		TEST_METHOD(Class__ConZ__WeaponAttachmentSuppressor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSuppressor, MuzzleSocketName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSuppressor, NoiseMultiplier, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSuppressor, IsImprovised, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentSuppressor, UnknownData_Y9A6, 0x0785);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentSuppressor, 0x0788);
		}

		// class AWeaponAttachmentUniversalFlashlight : public AWeaponAttachmentFlashlight
		TEST_METHOD(Class__ConZ__WeaponAttachmentUniversalFlashlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponAttachmentUniversalFlashlight, WeaponToStaticMeshMapping, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponAttachmentUniversalFlashlight, 0x07F0);
		}

		// class AWeapon : public AWeaponItem
		TEST_METHOD(Class__ConZ__Weapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AttachmentAdded, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AttachmentRemoved, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_TIQS, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, SkeletalMesh, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponFiringStateType, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_1G1Q, 0x07F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TempWeaponStateFiringAutomatic, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TempWeaponStateFiringSemiAutomatic, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TempWeaponStateFiringManual, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TempWeaponStateFiringBurst, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TempWeaponStateActiveManualFiring, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FiringState, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, SupportedFiringModes, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, CartridgeMeshComponents, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ReloadActionSequenceClasses, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnloadAmmoActionSequenceClasses, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, CheckAmmoActionSequenceClasses, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ReloadActionSequences, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ClearMalfunctionActionSequences, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnloadAmmoActionSequences, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, CheckAmmoActionSequences, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AmmunitionTags, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DefaultAmmunitionItemClass, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, RequiredAmmoForShot, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MaxLoadedAmmo, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, InitialAmmo, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, InternalMagazineCapacity, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, BurstShotsCount, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, IgnoreProceduralDownTheSightFiringAnimation, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_W3BA, 0x08FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FireAnimation, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FireAnimationLastRound, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FireAnimationBody, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonFireAnimationBody, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FireAutomaticAnimationBody, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, BodyWeaponAnimationChamber, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, CheckFiringModeAnimationBody, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ChangeFiringModeAnimationBody, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AttachmentsAnimations, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MuzzleSocketName, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, GripCorrectionSocketName, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsCenterSocketName, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, EjectCasingSocketName, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, IgnoreSupportingHandIK, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_N3O8, 0x09B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, SupportingHandIKSocketName, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, SupportingHandIKLocation, 0x09C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsLocationOffset, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, HolsteredOnPrisonerLocationOffset, 0x09DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, HolsteredOnPrisonerRotationOffset, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UseWeaponFOVWhileScoping, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_EIJK, 0x09F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponFOVWhileScoping, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponCameraOffsetWhileScoping, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, OffsetPerAspectRatioWhileScoping, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, IgnoreZeroRangeChange, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_JPSI, 0x0A91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ZeroRange, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ZeroRangeStep, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ZeroRangeMax, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, InstantHitImpactEffects, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FieldOfView, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DepthOfFieldFocalDistance, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DepthOfFieldFstop, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ObstaclesDetectionOffset, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UseFiringModeBoneRotation, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_8DTL, 0x0AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FiringModeBoneRotations, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, PostProcessSettings, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, RelaxedGripCorrectionAnimationPose, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingHipAnimationPose, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsAnimationPose, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsStillAnimationPose, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsWalkingAnimationPose, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, AimingDownTheSightsLimpingWalkingAnimationPose, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandIdleAnimation, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandWalkAnimation, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandWalkBlendSpace, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyLimpingStandWalkBlendSpace, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandJogAnimation, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandJogBlendSpace, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyLimpingStandJogBlendSpace, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyStandRunAnimation, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyCrouchIdleAnimation, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyCrouchWalkAnimation, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyCrouchWalkBlendSpace, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyLimpingCrouchWalkBlendSpace, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, FirstPersonUpperBodyProneIdleAnimation, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponAimOffsets, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponCategory, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, IgnoreAimingSpread, 0x1191);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UseCustomWeaponSpreadData, 0x1192);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_Y3QU, 0x1193);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponSpreadData, 0x1194);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UseCustomWeaponViewKickData, 0x11D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_XUXX, 0x11D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WeaponViewKickData, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ViewKickMultiplier, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MaxRecoilOffset, 0x11F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, RecoilRecoverySpeed, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MuzzleEffectsScaleDistanceStart, 0x11FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MuzzleEffectsScaleDistanceRange, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MuzzleEffectsScaleByDistanceFactor, 0x1204);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ChamberBulletDelay, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ChamberBulletAutomatically, 0x120C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_J40R, 0x120D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DamagePerShot, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, TestWeapon, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_F0TT, 0x1215);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, WornOutFiringAnimations, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, CanBeInspectedWhenMalfunctioned, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_P5ZU, 0x1229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, InspectModeAnimation, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UseCustomMalfunctionChances, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_YDL2, 0x1239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MalfunctionChances, 0x123C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, StovePipeSocketName, 0x1274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_N3IZ, 0x127C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, StovePipeMesh, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DoubleFeedSocketName, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DoubleFeedMesh, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, ClearMalfunctionSequenceClasses, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, MalfunctionsData, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DTSModeLerpDurationIn, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DTSModeLerpDurationOut, 0x12FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, DownTheSightsModeLerpCurveOverride, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _currentState, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _activeState, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _equippingState, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _unequippingStateDefault, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _unequippingState, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _inactiveState, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _chamberBulletState, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _reloadState2, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _clearMalfunctionState, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _unloadAmmoState, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _checkAmmoState, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _muzzlePS, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _suppressorMuzzlePS, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _muzzlePSC, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _smokeAfterShotFiredPS, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _smokeAfterShotFiredPSC, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _ejectCasingPS, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _ejectLiveRoundPS, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _weaponOwner, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _loadedAmmoData, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_8YRJ, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _shouldOverrideUseMuzzleDirectionForShooting, 0x13B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _useMuzzleDirectionForShootingOverride, 0x13B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _projectileTargetLocationOverride, 0x13B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_F44O, 0x13BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _firingMode, 0x142C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_0J3O, 0x142D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _weaponAttachmentsReplicated, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_31MM, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _internalMagazineAmmoData, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _usedAmmoCount, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_3Q5D, 0x148C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _shouldPlayChamberOpenedIdle, 0x148D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_2VCZ, 0x148E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _isInGameEvent, 0x1499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_HGAW, 0x149A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _fireSingleShotAudioEvent, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _startAutoFireAudioEvent, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _stopAutoFireAudioEvent, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _suppressorFireSingleShotAudioEvent, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _suppressorStartAutoFireAudioEvent, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _suppressorStopAutoFireAudioEvent, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _improvisedSuppressorFireSingleShotAudioEvent, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _improvisedSuppressorStartAutoFireAudioEvent, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _improvisedSuppressorStopAutoFireAudioEvent, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _noAmmoAudioEvent, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _dryFireUncockedAudioEvent, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _zeroRangeClickAudioEvent, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _changeFiringModeAudioEvent, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _onMalfunctionAudioEvent, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _switchADSStateAudioEvent, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _indoorSmallHearingDamageAudioEvent, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _indoorMediumHearingDamageAudioEvent, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _indoorLargeHearingDamageAudioEvent, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _outdoorLargeHearingDamageAudioEvent, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _makeNoiseLoudness, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_LKMS, 0x153C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _staminaDrainMultiplier, 0x155C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _staminaDrainCategory, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_PBGH, 0x1561);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _malfunction, 0x156C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _behaviourMode, 0x156D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_ZXEI, 0x156E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _loadedAmmunitionItemClass, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_IJMZ, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _loadedProjectileClass, 0x15A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _defaultProjectileClass, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_ODY8, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _totalControllerPitchAmountToAdd, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, _controllerPitchAddTimeFrame, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeapon, UnknownData_O45X, 0x15C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeapon, 0x2D48);
		}

		// class AWeaponBow : public AWeapon
		TEST_METHOD(Class__ConZ__WeaponBow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, InsertArrowAnimations, 0x2D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, RemoveArrowAnimations, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnableToDrawAnimations, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, DrawAnimations2, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, DrawWhileAnticipatingDrawAnimations2, 0x2DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, CancelDrawAnimations2, 0x2DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, LooseAnimations2, 0x2E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, LooseLastShotAnimations2, 0x2E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, AimOffsets, 0x2E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, ArmsShakeAnimamtion, 0x2F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, DrawAnimations, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, DrawWhileAnticipatingDrawAnimations, 0x2FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, CancelDrawAnimations, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, LooseAnimations, 0x3000);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, LooseLastShotAnimations, 0x3010);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, WeaponAimingDownTheSightsAnimationPose, 0x3020);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, WeaponAimingDownTheSightsStillAnimationPose, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, AnticipateDrawState2, 0x3030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, DrawState3, 0x3038);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, CancelFiringState, 0x3040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, AnticipateFiringState, 0x3048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, FireState, 0x3050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, FireAndInsertArrowState, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _fireNoArrowAudioEvent, 0x3060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _arrowSocketName, 0x3068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _muzzleVelocity, 0x3070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _drawWeight, 0x3074);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _compoundBowFullDrawHoldTime, 0x3078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _armShakeTimerDecreaseRate, 0x307C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _damageOnUsage, 0x3080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_UM1W, 0x3084);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _bowActiveState2, 0x3088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _bowInsertArrowState, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _bowRemoveArrowState, 0x3098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _bowFiringState2, 0x30A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_YGFE, 0x30A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _bowState, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_12O6, 0x30D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _weaponBowStateDataReplicated, 0x30D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _arrowMeshComponent, 0x30E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _projectileArrowData, 0x30E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_84GH, 0x3108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _isCompound, 0x3158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_BWYB, 0x3159);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _handTriggerMeshComponent, 0x3160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _ignoreArrowStiffness, 0x3168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_TAE9, 0x3169);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _letOff, 0x316C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, _handTriggerBoneName, 0x3170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBow, UnknownData_Q6ER, 0x3178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponBow, 0x31A0);
		}

		// class UWeaponBowAnimInstance : public UWeaponAnimInstance
		TEST_METHOD(Class__ConZ__WeaponBowAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, UnknownData_UDCB, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, _armsShakeValue, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, _useArrowLookAt, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, UnknownData_WQPJ, 0x02FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, _aimingDownTheSightsAnimation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBowAnimInstance, _aimingDownTheSightsStillAnimation, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponBowAnimInstance, 0x0310);
		}

		// class AWeaponCrossbow : public AWeapon
		TEST_METHOD(Class__ConZ__WeaponCrossbow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, FireState, 0x2D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, FireAndInsertArrowState, 0x2D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _muzzleVelocity, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, UnknownData_9TTO, 0x2D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _crossbowFireAnimation, 0x2D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _crossbowFireAudioEvent, 0x2D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _crossbowDryFireAudioEvent, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _crossbowActiveState, 0x2D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, _isCocked, 0x2D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponCrossbow, UnknownData_726M, 0x2D89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponCrossbow, 0x2DA0);
		}

		// class UWeaponCrossbowAnimInstance : public UWeaponAnimInstance
		TEST_METHOD(Class__ConZ__WeaponCrossbowAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponCrossbowAnimInstance, UnknownData_LJMC, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponCrossbowAnimInstance, _isCocked, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponCrossbowAnimInstance, UnknownData_HMZI, 0x02F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponCrossbowAnimInstance, 0x0300);
		}

		// class UWeaponDamageGroup : public UDataAsset
		TEST_METHOD(Class__ConZ__WeaponDamageGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, head, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, Neck, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, Torso, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, ArmUpper, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, Abdomen, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, LegUpper, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, OtherLimbs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponDamageGroup, UnknownData_L94S, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponDamageGroup, 0x0050);
		}

		// class UWeaponDamageStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__WeaponDamageStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponDamageStatics, 0x0028);
		}

		// class AWeaponHolsterItem : public AClothesItem
		TEST_METHOD(Class__ConZ__WeaponHolsterItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, UnknownData_BU8U, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _holsteredWeaponRep, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _maxLocationSocketName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _minLocationSocketName, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _fatLocationSocketName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _leanLocationSocketName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponHolsterItem, _staticMeshSocketName, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponHolsterItem, 0x0850);
		}

		// class UWeaponRecoilGroup : public UDataAsset
		TEST_METHOD(Class__ConZ__WeaponRecoilGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponRecoilGroup, Up, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponRecoilGroup, Down, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponRecoilGroup, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponRecoilGroup, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponRecoilGroup, 0x0040);
		}

		// class UWeaponScopeWidget : public UDesignableUserWidget
		TEST_METHOD(Class__ConZ__WeaponScopeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponScopeWidget, ReticleTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponScopeWidget, TextRenderTarget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponScopeWidget, FadeFactor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponScopeWidget, OnHideDelay, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponScopeWidget, 0x0290);
		}

		// class UItemFirstPersonAnimationsDataAsset : public UDataAsset
		TEST_METHOD(Class__ConZ__ItemFirstPersonAnimationsDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemFirstPersonAnimationsDataAsset, UpperBody, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemFirstPersonAnimationsDataAsset, AimOffsetStanding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemFirstPersonAnimationsDataAsset, AimOffsetCrouching, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemFirstPersonAnimationsDataAsset, AimOffsetProne, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemFirstPersonAnimationsDataAsset, 0x0098);
		}

		// class UWeaponFirstPersonAnimationsDataAsset : public UItemFirstPersonAnimationsDataAsset
		TEST_METHOD(Class__ConZ__WeaponFirstPersonAnimationsDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponFirstPersonAnimationsDataAsset, UpperBodyAimingHip, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponFirstPersonAnimationsDataAsset, 0x00E8);
		}

		// class UWeaponState : public UObject
		TEST_METHOD(Class__ConZ__WeaponState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponState, UnknownData_5PHV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponState, 0x0030);
		}

		// class UWeaponStateActive : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateActive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateActive, 0x0030);
		}

		// class UWeaponStateActiveManualFiring : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateActiveManualFiring)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateActiveManualFiring, 0x0030);
		}

		// class UWeaponStateBowActive : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowActive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowActive, 0x0030);
		}

		// class UWeaponStateBowAnticipateDraw : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowAnticipateDraw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowAnticipateDraw, UnknownData_5WIY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowAnticipateDraw, 0x0040);
		}

		// class UWeaponStateBowAnticipateFiring : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowAnticipateFiring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowAnticipateFiring, UnknownData_DIDI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowAnticipateFiring, 0x0040);
		}

		// class UWeaponStateBowCancelFiring : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowCancelFiring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowCancelFiring, UnknownData_WJ6K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowCancelFiring, 0x0038);
		}

		// class UWeaponStateBowDraw : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowDraw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowDraw, UnknownData_99TO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowDraw, 0x0050);
		}

		// class UWeaponStateFiring : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateFiring)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateFiring, 0x0030);
		}

		// class UWeaponStateBowFire : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateBowFire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowFire, 0x0030);
		}

		// class UWeaponStateBowFireAndInsertArrow : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateBowFireAndInsertArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowFireAndInsertArrow, UnknownData_NXDO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowFireAndInsertArrow, 0x0040);
		}

		// class UWeaponStateBowFiring : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateBowFiring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowFiring, UnknownData_IUYZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowFiring, 0x0040);
		}

		// class UWeaponStateBowInsertArrow : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowInsertArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowInsertArrow, UnknownData_EAU2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowInsertArrow, 0x0038);
		}

		// class UWeaponStateBowRemoveArrow : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateBowRemoveArrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateBowRemoveArrow, UnknownData_9877, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateBowRemoveArrow, 0x0038);
		}

		// class UWeaponStateChamberBullet : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateChamberBullet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateChamberBullet, UnknownData_O9LZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateChamberBullet, 0x0038);
		}

		// class UWeaponStateCheckAmmo : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateCheckAmmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateCheckAmmo, UnknownData_CCWI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateCheckAmmo, 0x0038);
		}

		// class UWeaponStateClearMalfunction : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateClearMalfunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateClearMalfunction, UnknownData_C4IK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateClearMalfunction, 0x0040);
		}

		// class UWeaponStateCrossbowActive : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateCrossbowActive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateCrossbowActive, 0x0030);
		}

		// class UWeaponStateCrossbowFire : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateCrossbowFire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateCrossbowFire, 0x0030);
		}

		// class UWeaponStateCrossbowFireAndInsertArrow : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateCrossbowFireAndInsertArrow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateCrossbowFireAndInsertArrow, 0x0030);
		}

		// class UWeaponStateEquipping : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateEquipping)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateEquipping, 0x0030);
		}

		// class UWeaponStateFiringAutomatic : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateFiringAutomatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateFiringAutomatic, UnknownData_DZ6G, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateFiringAutomatic, 0x0040);
		}

		// class UWeaponStateFiringBurst : public UWeaponStateFiringAutomatic
		TEST_METHOD(Class__ConZ__WeaponStateFiringBurst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateFiringBurst, 0x0040);
		}

		// class UWeaponStateFiringManual : public UWeaponStateFiring
		TEST_METHOD(Class__ConZ__WeaponStateFiringManual)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateFiringManual, UnknownData_T2GY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateFiringManual, 0x0038);
		}

		// class UWeaponStateFiringSemiAutomatic : public UWeaponStateFiringAutomatic
		TEST_METHOD(Class__ConZ__WeaponStateFiringSemiAutomatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateFiringSemiAutomatic, UnknownData_8AT8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateFiringSemiAutomatic, 0x0048);
		}

		// class UWeaponStateInactive : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateInactive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateInactive, 0x0030);
		}

		// class UWeaponStateReload : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateReload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateReload, UnknownData_X6GC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateReload, 0x0068);
		}

		// class UWeaponStateUnEquipping : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateUnEquipping)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateUnEquipping, 0x0030);
		}

		// class UWeaponStateUnloadAmmo : public UWeaponState
		TEST_METHOD(Class__ConZ__WeaponStateUnloadAmmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponStateUnloadAmmo, UnknownData_R6HY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponStateUnloadAmmo, 0x0040);
		}

		// class AWeatherAmbientSounds : public AActor
		TEST_METHOD(Class__ConZ__WeatherAmbientSounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, WeatherRTPCsUpdateInterval, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, TimeOfDayRTPCUpdateInterval, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, TimeOfDayRTPCInterpolationSpeed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, UnknownData_SBHF, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, RainAudioEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, WindAudioEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherAmbientSounds, UnknownData_FTR9, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeatherAmbientSounds, 0x0258);
		}

		// class AWeatherCapture2D : public ASceneCapture2D
		TEST_METHOD(Class__ConZ__WeatherCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherCapture2D, UnknownData_HFC3, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeatherCapture2D, 0x0240);
		}

		// class AWeatherController : public AActor
		TEST_METHOD(Class__ConZ__WeatherController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, UnknownData_GMS2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, TimeOfDay, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, TimeOfDaySpeed, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, Level1_RainStartWhenStormIs, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, Level2_RainStartWhenStormIs, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, Level3_RainStartWhenStormIs, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, WaterTemperature, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, WaterTemperature_Storm, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, WaterTemperatureHeightModifier, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirTemperature, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirTemperature_Storm, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirTemperatureHeightModifier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirPressure, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirPressure_Storm, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, AirPressureHeightModifier, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, RelativeHumidity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, RelativeHumidity_Storm, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, RelativeHumidityHeightModifier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, MaxHeightAboveSeaLevelMeters, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, StormIntensity, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, stormProbabilityMultiplier, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, DarknessIntensityMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, CurrentDarknessIntensityMultiplier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, WindDir, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, WindSpeed_Result, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _nightTimeBegin, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _nightTimeEnd, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _duskTimeBegin, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _dawnTimeEnd, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _autosaveInterval, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, UnknownData_K8KX, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, _shouldSerializeData, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherController, UnknownData_D8RZ, 0x02B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeatherController, 0x02B8);
		}

		// class AWetnessManager : public AActor
		TEST_METHOD(Class__ConZ__WetnessManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, MaxNumberOfActiveWettables, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, MaxWettableLifeTime, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, WeatherAndWettableObjectParametersUpdateInterval, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, UnknownData_8YO3, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, WettingRateFromRainVsRainIntensity, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, WettingRateFromWaterImmersion, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, DryingRate, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, DryingRateModifierVsTemperature, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, DryingRateModifierVsRelativeHumidity, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, AirTemperatureModifierWhenNotExposedToSunlight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWetnessManager, UnknownData_86GW, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWetnessManager, 0x0268);
		}

		// class UWetnessStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__WetnessStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWetnessStatics, 0x0028);
		}

		// class UWettable : public UInterface
		TEST_METHOD(Class__ConZ__Wettable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWettable, 0x0028);
		}

		// class AWheelBarrow : public APawn
		TEST_METHOD(Class__ConZ__WheelBarrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_WN6G, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _meshComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_B4RQ, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxDriveOrBoardAngle, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _speedThresholdToEvictAllMountees, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _vertSpeedThresholdToEvictAllMountees, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_TYD3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _wheelMeshRadius, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _minWheelMeshWobbleAngle, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxWheelMeshWobbleAngle, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_B2ZN, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _mountSlots, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_V8GA, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _spawnParameters, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _physicsDominanceGroup, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_K6Z3, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleRelativeLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleMass, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleLinearDamping, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleAngularDamping, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleConstraintRelativeLocation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleConstraintSwingLimit, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleConstraintTwistLimit, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_1IK2, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverTransformRelativeToCapsule, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _forwardDriveForceMagnitude, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _reverseDriveForceMagnitude, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _steerForceMagnitude, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _steerForceMagnitudeWhenLimping, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _steerRollTorqueMagnitude, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _meshBrakeForceScale, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _meshBrakeForceMagnitudeWhenCloseToMaxSpeed, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _meshSidewaysBrakeForceScale, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleBrakeForceScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleBrakeForceMagnitudeWhenCloseToMaxSpeed, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverCapsuleSidewaysBrakeForceScale, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _physicsMaterialFrictionWhenDriven, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _physicsMaterialRestitutionWhenDriven, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _stickyFrictionEnabled, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_Q5V8, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _stickyFrictionSpeedThreshold, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _stickyFriction, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _startedMovingAudioEvent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _stoppedMovingAudioEvent, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_OUQC, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverActionDifficultyVsSpeed, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverActionDifficultyVsSpeedWhenLimping, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _parametersPerMovementPace, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxSpeedModifierInterpedWithDriverDexterity, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _loadModifierInterpedWithDriverStrength, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _weightLoadFactorVsFloorSlopeAngle, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _pushImpulseMagnitude, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_NHGN, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _pushIntensityCurve, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _pushDirectionRatioBetweenForwardAndUp, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxDistanceToAllowThePush, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxAngularVelocityToAllowThePush, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_MACU, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _maxHealth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_5EMO, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _repairableParams, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _destroyedAudioEvent, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _destroyedParticleSystem, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _healthDrainPerSpeed, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _healthDrainPerLoad, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _healthDrainPerWaterImmersionDepth, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _healthDrainUpdateInterval, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_XCO3, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _hitDamageVsHitImpulse, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _damagedByHitAudioEvent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _itemContainerClass, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _shouldDropItemsWhenDestroyed, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_TY0Z, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _itemContainer, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _allowedWaterImmersionDepth, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_F07W, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverPhysicsCapsuleComponent, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _driverPhysicsConstraintComponent, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_SQ1G, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _physicsMaterialWhenDriven, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_M6LL, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _sendStateFrequency, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, _repState1, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrow, UnknownData_FXSY, 0x0951);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheelBarrow, 0x0960);
		}

		// class AWheelBarrowCraftedItem : public AItem
		TEST_METHOD(Class__ConZ__WheelBarrowCraftedItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheelBarrowCraftedItem, _wheelBarrowClass, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheelBarrowCraftedItem, 0x0760);
		}

		// class UWheelBarrowDriverCapsuleComponent : public UCapsuleComponent
		TEST_METHOD(Class__ConZ__WheelBarrowDriverCapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowDriverCapsuleComponent, UnknownData_1EHM, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelBarrowDriverCapsuleComponent, 0x0490);
		}

		// class UWheelBarrowMountSlot : public UActorComponent
		TEST_METHOD(Class__ConZ__WheelBarrowMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, UnknownData_UOQ8, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _mountAudioEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _mountPriority, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _mountUnmountDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _entryPoints, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _unmountAudioEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _mountingMotionIntensity, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _unmountingMotionIntensity, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, UnknownData_XA2X, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _mountee, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _reservee, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowMountSlot, _interactionZoneMaterials, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelBarrowMountSlot, 0x0108);
		}

		// class UWheelBarrowDriverMountSlot : public UWheelBarrowMountSlot
		TEST_METHOD(Class__ConZ__WheelBarrowDriverMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowDriverMountSlot, _idleAnimation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowDriverMountSlot, _walkJogAnimation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowDriverMountSlot, _walkJogLimpingAnimation, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelBarrowDriverMountSlot, 0x0120);
		}

		// class UWheelBarrowPassengerMountSlot : public UWheelBarrowMountSlot
		TEST_METHOD(Class__ConZ__WheelBarrowPassengerMountSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowPassengerMountSlot, _socketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowPassengerMountSlot, _idleAnimation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheelBarrowPassengerMountSlot, _vehicleWeaponAimingParameters, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelBarrowPassengerMountSlot, 0x0120);
		}

		// class UWindowFortificationsType : public UDataAsset
		TEST_METHOD(Class__ConZ__WindowFortificationsType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowFortificationsType, MeshForFortification, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowFortificationsType, 0x0080);
		}

		// class UWorldCraftingMarkerWidget : public UWaypointWidget
		TEST_METHOD(Class__ConZ__WorldCraftingMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldCraftingMarkerWidget, _craftingInfo, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldCraftingMarkerWidget, 0x0318);
		}

		// class AWorldEventManager : public AActor
		TEST_METHOD(Class__ConZ__WorldEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEventManager, EventTypes, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEventManager, TimeBetweenEventsMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEventManager, TimeBetweenEventsMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEventManager, UnknownData_2GND, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldEventManager, _events, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldEventManager, 0x0250);
		}

		// class UWorldStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__WorldStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldStatics, 0x0028);
		}

		// class AWristwatch : public AActor
		TEST_METHOD(Class__ConZ__Wristwatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, SkeletalMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, TextRenderTarget, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, TimeFont, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, TextScaleX, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, TextScaleY, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, Time, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWristwatch, UnknownData_H8WJ, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWristwatch, 0x0250);
		}

		// class UXMLAttributeMap : public UObject
		TEST_METHOD(Class__ConZ__XMLAttributeMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UXMLAttributeMap, UnknownData_GJHD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXMLAttributeMap, 0x0038);
		}

		// class UXMLStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ConZ__XMLStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXMLStatics, 0x0028);
		}

		// class UZincDeficiency : public UDeficiency
		TEST_METHOD(Class__ConZ__ZincDeficiency)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZincDeficiency, 0x01C0);
		}

		// class AZombie2 : public AConZCharacter
		TEST_METHOD(Class__ConZ__Zombie2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_XZWZ, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_CC5A, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _navigationInvokerComponent, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _hitReactComponent, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _meshVariations, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _relaxedStanceVariations, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _combatStanceVariations, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _turnMontageDescriptions, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _gettingUpMontage, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _intimidateMontages, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _attacks, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _hitReactType, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _throwingDamageMultiplier, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _throwingDamageMultiplierPerBodyPart, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _projectileDamageMultiplier, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _projectileDamageMultiplierPerBodyPart, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _explosionDamageMultiplier, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _ragdollHitImpulseStrengthPerUnitDamage, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _minDynamicMovementBaseSpeedForRagdoll, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _eyeViewPointOffset, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _receivedMeleeDamageMultiplier, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _meleeDamageMultiplierPerBodyPart, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _receivedDamageComboCooldown, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _receivedMeleeHitComboCooldown, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _inflictedMeleeHitComboCooldown, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _minRagdollRecoveryTimeAfterKnockout, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _maxRagdollRecoveryTimeAfterKnockout, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _minLandingImpactSpeedForDamage, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _landingDamagePerImpactSpeed, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _landingImpactSpeedForRagdoll, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _minRagdollRecoveryTimeAfterLanding, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _maxRagdollRecoveryTimeAfterLanding, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_5VJS, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _landingEffects, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _corpseSearchDuration, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _corpseMaxLifeTimeInMinutes, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _destroyCorpseTimerInterval, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _minDistanceToPlayerPawnOrSpectatorToDestroyCorpse, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _packedZombieVariationIndices, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _hitPoints, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _receivedMeleeDamageKnockoutChanceMultiplier, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _inflictedMeleeDamageMultiplier, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _knockoutResistance, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_A69J, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _knockoutChanceIncreasePerHit, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _health, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _isSearched, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_SRCX, 0x08F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _stance, 0x08F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_CLCW, 0x08F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _foe, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_7MBU, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, _inflictedDamageMultiplierConfig, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie2, UnknownData_FFQR, 0x097C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombie2, 0x0980);
		}

		// class AZombieAIController2 : public AAIController
		TEST_METHOD(Class__ConZ__ZombieAIController2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _lyingSightSenseConfig, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _lyingHearingSenseConfig, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _stateMachineTickIntervalWhenInRelaxedState, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldWander, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldWanderAroundWanderOrigin, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_7V3C, 0x033E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxWanderingRadius, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minTimeToRestBeforeWandering, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxTimeToRestBeforeWandering, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldBecomeAlertedBySight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_3FZ8, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minLineOfSightDurationToBecomeAlerted, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxLineOfSightDurationToBecomeAlerted, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldBecomeAlertedByHearing, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_G42M, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minDelayBeforeBecomingAlertedByHearing, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxDelayBeforeBecomingAlertedByHearing, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_93M8, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _relaxedIdleSightSenseConfig, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _relaxedIdleHearingSenseConfig, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _relaxedWanderSightSenseConfig, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _relaxedWanderHearingSenseConfig, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _stateMachineTickIntervalWhenInAlertedState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minObservingForLineOfSightStartDelay, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxObservingForLineOfSightStartDelay, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minInvestigateStimulusDelay, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxInvestigateStimulusDelay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minEnterCombatModeDelay, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxEnterCombatModeDelay, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _distanceAtWhichToIgnoreEnterCombatModeDelay, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _observingCurve, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _observingCurvePeriod, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _observingCurveMaxYaw, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _observingCurveMaxPitch, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_8RK7, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _alertedSightSenseConfig, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _alertedHearingSenseConfig, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _stateMachineTickIntervalWhenInCombatState, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldAttack, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldBackOffIfTooCloseToFoe, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _shouldPredictFoeLocation, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_JV2B, 0x03D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _foeLocationPredictionStrengthVsDistanceToFoe, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _attackDistance, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minNumConsecutiveInflictedMeleeHitsToIntimidate, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxNumConsecutiveInflictedMeleeHitsToIntimidate, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minTimeBeforeFoeIsConsideredUnreachable, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxTimeBeforeFoeIsConsideredUnreachable, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _maxTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _costOfJumpingInPathLength, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _minPathPointDistance, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _detectionDelayTimerData, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_9Z3J, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, _zombie, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieAIController2, UnknownData_4C59, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombieAIController2, 0x0650);
		}

		// class UZombieAnimInstance2 : public UAnimInstance
		TEST_METHOD(Class__ConZ__ZombieAnimInstance2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_CM9D, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, IsStanceAlerted, 0x02BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, IsStanceCombat, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_2121, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, NumRelaxedIdleVariations, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, RelaxedIdleVariationIndex, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, Acceleration, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, WantsToMove, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_2N8X, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, Velocity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, Speed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, SpeedXY, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, WalkStoppingDistance, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, WalkStoppingTime, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, IsFalling, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, IsJumping, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_246G, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, JumpApex, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, JumpDuration, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, AimOffset, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CanStartGoToLoop, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_AH1Y, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, RelaxedWalkLoopAnimation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, RelaxedWalkLoopAnimationPlayRate, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_IH69, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunStartAnimation, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunStartAnimationPlayRate, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_740Z, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunLoopAnimation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunLoopAnimationPlayRate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_IB3A, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunStopAnimation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunStopAnimationStartTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, CombatRunStopAnimationPlayRate, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, MinUpperBodyBlendWeight, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UpperBodyBlendMaxSpeedXY, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UpperBodyBlendWeight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance2, UnknownData_3GDQ, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieAnimInstance2, 0x0370);
		}

		// class UZombieArmorDamageReductionAssetData : public UAssetUserData
		TEST_METHOD(Class__ConZ__ZombieArmorDamageReductionAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieArmorDamageReductionAssetData, ThrowingDamageMultiplierPerBodyPart, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieArmorDamageReductionAssetData, ProjectileDamageMultiplierPerBodyPart, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieArmorDamageReductionAssetData, MeleeDamageMultiplierPerBodyPart, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieArmorDamageReductionAssetData, 0x00B8);
		}

		// class AZombieCorpse : public ACorpse
		TEST_METHOD(Class__ConZ__ZombieCorpse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieCorpse, StrippedMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieCorpse, _isSearched, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombieCorpse, UnknownData_RFMR, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombieCorpse, 0x0400);
		}

		// class UZombieKamikazeComponent : public UActorComponent
		TEST_METHOD(Class__ConZ__ZombieKamikazeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _owningCharacter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _beepingDistance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _explosionDistance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _autoExplosionTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_BKYS, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _baseDamage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minimumDamage, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _damageInnerRadius, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _damageOuterRadius, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _damageFalloff, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_YFRQ, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _explosionAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _beepingStartAudioEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _beepingEndAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_X2AW, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _explosionPS, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _explosionCameraShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _bloodDecal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minBloodDecalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maxBloodDecalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minBloodScalarParamValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maxBloodScalarParamValue, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _bloodScalarParameterValueName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _sootDecal, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minSootDecalSize, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maxSootDecalSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minSootScalarParamValue, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maxSootScalarParamValue, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _sootScalarParameterValueName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _decalsLifeSpan, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _decalFadeFactor, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maximumNumberOfChunksSpawned, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _minVelocityMagnitude, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _maxVelocityMagnitude, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _velocityHalfAngle, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _timeAfterChunksAreDeleted, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_KPJM, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _bodyPartChunks, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_WSA0, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, _shouldExplodeOnDeath, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieKamikazeComponent, UnknownData_X9Z1, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieKamikazeComponent, 0x0198);
		}

		// class UZombieMovementComponent2 : public UConZCharacterMovementComponent
		TEST_METHOD(Class__ConZ__ZombieMovementComponent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieMovementComponent2, UnknownData_Q9ML, 0x0B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieMovementComponent2, 0x0B10);
		}

		// class UZombieSoundComponent2 : public UCharacterSoundComponent
		TEST_METHOD(Class__ConZ__ZombieSoundComponent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, RelaxedStanceEnteredAudioEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, AlertedStanceEnteredAudioEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, CombatStanceEnteredAudioEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, FootstepAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, StopAllAudioEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, DeathAudioEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, StartSearchCorpseAudioEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSoundComponent2, StopSearchCorpseAudioEvent, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieSoundComponent2, 0x0118);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0028);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0028);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_FUIA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_SDPF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_5S20, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_U90A, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_5IVG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_3H1S, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_IZS1, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_EMQE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_Q2V6, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_ZSUF, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_WHN8, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_ALOT, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_RK8E, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_EB1H, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_OFRF, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_ENP6, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_66PH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_5M34, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_GVDL, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_U9K1, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_UU0K, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_XJTS, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_KMWG, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_IU7H, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_IB20, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_HDWX, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_MFT9, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_TS9U, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_H67E, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_KE7V, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_JHI8, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_IG41, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_CJFN, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_K3K5, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_ST7M, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_3UCB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_0ZC4, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_GAWU, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_0QUK, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_7LM8, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_IMOB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_BB9I, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_XJIF, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_V480, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_CIE5, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_0524, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_B4LH, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_W3QZ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_RJS2, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_DVX4, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_VJDZ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_UAUP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_P82D, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0250);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_ABXJ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_FBXL, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_8RRM, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_IRIK, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_8W20, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_U6E1, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_IAQS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_Z4N4, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_M0HZ, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_17VP, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UX17, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_IC3Q, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_DWCU, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_PR8W, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_F5VS, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_A3R6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_50EJ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_78BM, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionInfoUpdated, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0190);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_369T, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_VLET, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_AS8S, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_7J1A, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, notifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_TSPK, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_8QMP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_IOBN, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_3IE2, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_OX85, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_Y1E6, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_F1IZ, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_SUM7, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_T7TD, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, bHearingOcclusionEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_69MH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRangeReductionIfOccluded, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingOcclusionCollisionChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_2G48, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0070);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PointOfViewBackwardOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, NearClippingRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_ITNU, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAddBlackboardSelfKey, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_PHFF, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_93A8, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_KHT4, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_WB1R, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_R7YV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_AILX, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_QD7R, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_O0M4, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0108);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_NFQ8, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_WEM6, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_MDT0, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0298);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_P1TM, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_2F21, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_PEON, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_MFMJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_WWJN, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_X2AT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_A6NT, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_L7FH, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_YHW7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_KD5H, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_Y9XK, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_Y8LV, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, circleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_T1SH, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_6E0A, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, circleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_S0MD, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_PTCP, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_YDOA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_EGYM, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_GMRZ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_9DE7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_BIIP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_0BF4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_E3RG, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_B0TU, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_LWAD, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_6MO6, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_F75Y, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_ZDQZ, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_QKZS, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0480);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_QM53, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_QC1E, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_70BZ, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_Y8LN, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_BT3R, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0560);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_HKES, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0280);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_H09S, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_9RLM, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_TDLW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_O168, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_ZCKG, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_3RLS, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_QCRA, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_G95Q, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_RHGA, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_8O3W, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_ELPI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_EYTC, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_ODQ7, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_BUMB, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_ZXTR, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_J2R2, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_KN23, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_2LI6, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class AARActor : public AActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_IOBL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_URZO, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_SGB7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_4L9B, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_YPXU, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_UCJU, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// class UARPlaneComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// class UARPointComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// class UARFaceComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_0ZFR, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// class UARImageComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// class UARQRCodeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// class UARPoseComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// class UAREnvironmentProbeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// class UARObjectComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// class UARMeshComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// class UARGeoAnchorComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// class UARDependencyHandler : public UObject
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// class UARGeoTrackingSupport : public UObject
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// class UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_E4LA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UGetGeoLocationAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_6X3N, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLifeCycleComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_J6LI, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_XN3A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_VKHE, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_7Q6J, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_PF8F, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_ERU4, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_MIKY, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_5AAG, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_0QZZ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_59PC, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_F3X6, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_AQFP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_5PRS, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_6JIH, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_3XIR, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_FVDK, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_WLD7, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_KGVS, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_1CD3, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0108);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_HAFQ, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_P6OV, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_GQFZ, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_4913, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_VAN2, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// class UARMeshGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshGeometry, UnknownData_K5XM, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// class UARGeoAnchor : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_KQUM, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_8MOQ, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_GWIB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UAnimNotify_AkEvent_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_AkEvent__AnimNotify_AkEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Attach_Name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Event, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Follow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, UnknownData_RV11, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, EventName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AkEvent_C, 0x0068);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_QIWV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FDcxAnalogControlArray
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxAnalogControlArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxAnalogControlArray, Items, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxAnalogControlArray, 0x0010);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_UIDM, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FPerlinLayerProperties
		TEST_METHOD(ScriptStruct__MeshModelingTools__PerlinLayerProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Intensity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerlinLayerProperties, 0x0008);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_3JAZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_N8NN, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FDcxGear
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxGear)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxGear, GearNum, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxGear, 0x0004);
		}

		// struct FDcxMath
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxMath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxMath, UnknownData_IQYO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxMath, 0x0001);
		}

		// struct FDcxVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleAnimInstanceProxy, UnknownData_9VNP, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleAnimInstanceProxy, 0x0770);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_VDB4, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_I249, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FDcxVehicleClutchData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleClutchData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleClutchData, BitePoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleClutchData, Strength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleClutchData, AccuracyMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleClutchData, UnknownData_R526, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleClutchData, EstimateIterations, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleClutchData, 0x0010);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_JFR6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FDcxDrivableSurfaceToTireFrictionPair
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxDrivableSurfaceToTireFrictionPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxDrivableSurfaceToTireFrictionPair, SurfaceMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxDrivableSurfaceToTireFrictionPair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxDrivableSurfaceToTireFrictionPair, UnknownData_6ZDC, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxDrivableSurfaceToTireFrictionPair, 0x0010);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_CICB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FDcxVehicleWheelData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleWheelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, Mass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, DampingRate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, MaxBrakeTorque, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, MaxHandBrakeTorque, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, MaxSteer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelData, ToeAngle, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleWheelData, 0x0020);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_54AM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FDcxVehicleWheelState
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleWheelState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SuspensionLineStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SuspensionLineDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SuspensionLineLength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, bIsInAir, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, UnknownData_KN6M, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireContactActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireSurfaceMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireContactPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireContactNormal, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireFriction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SuspensionJounce, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SuspensionSpringForce, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireLongitudinalDirection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, TireLateralDirection, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, LongitudinalSlip, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, LateralSlip, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, SteerAngle, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelState, UnknownData_DB06, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleWheelState, 0x00B0);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_LLT0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_7T5X, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_YLMW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_3DTA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FDcxVehicleEngineData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, MOI, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, IdleRPM, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, MaxRPM, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, DampingRateFullThrottle, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleEngineData, 0x00A0);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_01EU, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FDcxVehicleGearData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleGearData, 0x000C);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_QBVP, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FDcxVehicleGearboxData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleGearboxData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, UnknownData_S51S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, FinalRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, SwitchTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, UnknownData_780W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, Latency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, NeutralGearUpRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleGearboxData, UnknownData_FDFN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleGearboxData, 0x0030);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_X1KL, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_DLR6, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FDcxVehicleDifferentialData4W
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleDifferentialData4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, UnknownData_BBK4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, CenterBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDifferentialData4W, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleDifferentialData4W, 0x001C);
		}

		// struct FDcxVehicleSuspensionData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleSuspensionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, NaturalFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, SpringDamperRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, MaxCompression, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, MaxDroop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, ForceOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, CamberAtRest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, CamberAtMaxCompression, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleSuspensionData, CamberAtMaxDroop, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleSuspensionData, 0x0020);
		}

		// struct FDcxVehicleWheelConfiguration
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleWheelConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, UnknownData_BY4S, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, CollisionMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, bUsePresetShape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, UnknownData_2B3G, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, WheelData, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, SuspensionData, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, UnknownData_8UQ4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, Tire, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, bIsDriven, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, SweepType, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleWheelConfiguration, UnknownData_5FTM, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleWheelConfiguration, 0x0078);
		}

		// struct FDcxVehicleTireLoadFilterData
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleTireLoadFilterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleTireLoadFilterData, MinNormalizedLoad, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleTireLoadFilterData, MinFilteredNormalizedLoad, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleTireLoadFilterData, MaxNormalizedLoad, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleTireLoadFilterData, MaxFilteredNormalizedLoad, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleTireLoadFilterData, 0x0010);
		}

		// struct FDcxVehicleDriveInputRate
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleDriveInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDriveInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDriveInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleDriveInputRate, 0x0008);
		}

		// struct FDcxVehicleDriveState
		TEST_METHOD(ScriptStruct__DcxVehicle__DcxVehicleDriveState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDriveState, AnalogControls, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDriveState, CurrentGear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDcxVehicleDriveState, TargetGear, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDcxVehicleDriveState, 0x0018);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_7AHS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_2TD0, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_L13I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_EU2R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_MKZK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FDatasmithRetessellationOptions : public FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithRetessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, RetessellationRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, UnknownData_ZKX3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithRetessellationOptions, 0x0014);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_TXT1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_04L6, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_84HC, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_YNNQ, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_PCTA, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_5YVU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_T9D0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_P5Z7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_PWF0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_77JJ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_ACXK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_2C69, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_4QW1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_CH89, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_HX50, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_1KMQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_AO43, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_0C1I, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FPhysicsConvexData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsConvexData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumFaces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, Element, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConvexData, 0x0038);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_EVR3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPhysicsCapsuleData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsCapsuleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, UnknownData_4KCD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsCapsuleData, 0x0070);
		}

		// struct FPhysicsBoxData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsBoxData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Dimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, UnknownData_QR52, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsBoxData, 0x0070);
		}

		// struct FEditPivotTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__EditPivotTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditPivotTarget, 0x0010);
		}

		// struct FTransformMeshesTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__TransformMeshesTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformMeshesTarget, 0x0010);
		}

		// struct FPhysicsSphereData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsSphereData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, UnknownData_Y7YF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsSphereData, 0x0070);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_IUT2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_QXVG, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_TB5F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_YUNB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_8PR4, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_PWDU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_1RXD, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_HRXS, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_TDM3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FVariantDependency
		TEST_METHOD(ScriptStruct__VariantManagerContent__VariantDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, VariantSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, Variant, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, bEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, UnknownData_X2OB, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariantDependency, 0x0058);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_7E32, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Direction, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_SSN5, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Speed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Distance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Angle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0030);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DepthModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FrequencyModulation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FeedbackModulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetModulation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryModulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, SpreadModulation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0078);
		}

		// struct FSourceEffectChorusBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusBaseSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_X6KG, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_QA59, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_882L, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_WN29, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterAudioBusModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterAudioBusModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, AudioBus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerAttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeGainMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, FilterParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, UnknownData_ZZN0, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinFrequencyModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxFrequencyModulation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinResonanceModulation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxResonanceModulation, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterAudioBusModulationSettings, 0x0028);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_KQ5C, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_WA09, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, AudioBusModulation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x0020);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_59IH, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x0008);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_GNOI, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_X79I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_H5QE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, AudioBusModulator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0020);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_PZRA, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_OWB4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_LLWT, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0024);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bBypass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixInputChannelFormatToImpulseResponseFormat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixReverbOutputToOutputChannelFormat, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_IM46, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_LJLM, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_ASI4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_TVXE, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0028);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_BPUS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FDynamicsBandSettings
		TEST_METHOD(ScriptStruct__Synthesis__DynamicsBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, CrossoverTopFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ThresholdDb, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, Ratio, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, KneeBandwidthDb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, InputGainDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, OutputGainDb, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicsBandSettings, 0x0020);
		}

		// struct FSubmixEffectMultibandCompressorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectMultibandCompressorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_VTPV, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bLinkChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bFourPole, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_PQ7T, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, Bands, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectMultibandCompressorSettings, 0x0020);
		}

		// struct FSubmixEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_EV4G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_2ITZ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectStereoDelaySettings, 0x0024);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_7U8N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_EW5G, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_KTT3, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_9M6N, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_FU4O, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_KXB6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_OKEL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_T4OS, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_WWU7, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_C0H1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_QH20, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_OYOB, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_CM45, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_AXXP, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_2TP4, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_A8OA, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_BSGG, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_AYWY, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_FQSE, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_DRVI, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_K4E1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, SampleRateModulation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_LQ9S, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, BitModulation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0030);
		}

		// struct FSourceEffectBitCrusherBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, SampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, BitDepth, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherBaseSettings, 0x0008);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_U2EQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_PXJN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_2MBR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_EO8V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_ICUV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_3INZ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x0008);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Role, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0010);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_FOLQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_EF0P, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_RN1K, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_2A0D, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_WF8H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x0018);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Role, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Settings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_6E1F, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0038);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_AURW, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_SR6N, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_LV96, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0010);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_SIY1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x000C);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_74FQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_KALS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_S01A, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, DetectedFrameRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_RWAF, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_ZK4J, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_OT7Z, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_BM4S, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0058);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_YW14, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_YZY3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_8TG8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FMagicLeapImageTargetState
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, TrackingStatus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, UnknownData_ITSP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetState, 0x001C);
		}

		// struct FMagicLeapImageTargetSettings
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, ImageTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, LongerDimension, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, bIsStationary, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, bIsEnabled, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, UnknownData_VEH8, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetSettings, 0x0020);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_25MD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_JA0J, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_Q8G9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_V05V, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_8G5E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_Y7VQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_UCX7, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_9RIB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_00A1, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_2X1L, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_6H17, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FBodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_GTS3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_Q5MQ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_EH4Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_Y1X8, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_21XP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_G31A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_6XIP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_PDTI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_UF50, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_RCH8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_TDXK, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_DZI1, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_9DES, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_0TH5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_V1R9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_WC9Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_63FO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_CM2W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_1CKY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_RY0M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_XBZF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_W9Y4, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_T2CI, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_KCMQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_2YA2, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_H48H, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_QOYY, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_N5MV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_XK0W, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_5O4S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_UTIU, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_G6IT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_85YC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_IE35, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_158O, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FPhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_S0F7, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_FUVG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_K3KS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_U21G, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_UGP2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_ZFE9, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_XSQK, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_ZCSB, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_5EFI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_LOIB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_GY1H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_53J4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_MAWB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_67XW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// struct FFrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_7W6X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_TABM, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_K2IV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_OQ2Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_UY6V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_XEPD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_UDVJ, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_5IIU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_ZC9B, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_1811, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_K7GD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_QRSP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_DVYG, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_8PES, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_MQEN, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_82PI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_NOEH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_12WO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_TJ61, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_82F3, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_GH6F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_6QOX, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_TATF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_ZUA4, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_GBD1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_ZFOV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_5LWH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_4IE8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FNiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_QN0Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_OMI0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_SU3X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_SNPS, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_59A9, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_F2UC, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// struct FNiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_RBCJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_UIC7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_AJQU, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_93VJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_CYBP, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_U32H, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_EJWN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_2QON, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_KON3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_RPK2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_1RBR, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_F47E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_IG08, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_3E0H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_TXE4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_RTHN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_SEUE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// struct FNiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_8N5U, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FNiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// struct FNiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_9B2Z, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_C6K2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_M0JZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_6Z9G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_TA4J, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FMagicLeapResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, UnknownData_FWDC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, AdditionalInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapResult, 0x0018);
		}

		// struct FNiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_C9TU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_8RW0, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_980L, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, Timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_9AEP, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_PY4Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_LX29, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_HO6F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_EQIO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_FD8N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_66OM, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, Type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_HTR8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_WQHJ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_TK0S, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_1AAP, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_W0JS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_UOW8, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_FRUB, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_WOQF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_P0MH, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_28M9, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_4F58, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_B4P2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_ZIXR, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_UHEJ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_6JYB, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_C3R9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_UY1G, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_6C5M, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_B92R, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_ZN41, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_D0RR, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_3A7T, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_P4CE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_96VT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_Y30E, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_VW7D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_1RYV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_QG88, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_8RVO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_6UZI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_KZQG, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_60TI, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_YEUZ, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_S0S5, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// struct FNiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_CW79, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_3XHV, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_MS6Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_3OK5, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// struct FNiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_4J9I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_SXS6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_E5HQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_QOQF, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_NKAT, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_TF5M, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_W6ZT, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_A7X7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FMIDIDeviceInfo
		TEST_METHOD(ScriptStruct__MIDIDevice__MIDIDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, DeviceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, UnknownData_BI4D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, DeviceName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, bIsAlreadyInUse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, bIsDefaultDevice, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMIDIDeviceInfo, UnknownData_E31Y, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMIDIDeviceInfo, 0x0020);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_ZNA8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FFoundMIDIDevice
		TEST_METHOD(ScriptStruct__MIDIDevice__FoundMIDIDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, DeviceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, UnknownData_O7PR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, DeviceName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, bCanReceiveFrom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, bCanSendTo, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, bIsAlreadyInUse, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, bIsDefaultInputDevice, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, bIsDefaultOutputDevice, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoundMIDIDevice, UnknownData_DJC1, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoundMIDIDevice, 0x0020);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_Y1HN, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_MHHI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_9ZPP, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FPropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_S1AJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// struct FPropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_2G6R, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// struct FPropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// struct FPropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_YZY0, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// struct FPropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_TUKH, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// struct FPropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_AEHW, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// struct FPropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_CXNX, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FGeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_KRHK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// struct FGeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_91MG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_NBKY, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_OG7P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_QSF1, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_26LF, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_J6SV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_53XR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_SYQ1, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_8JGK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_U3L2, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_5O43, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_P0IU, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_1KHR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_7KP0, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_8547, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_GNSL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, Timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_7YCB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_RP4C, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, userName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_FOGS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, userName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, userName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, userName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_NI73, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_6VS7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_VZRT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_UUNP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_JG9N, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_PIG5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0070);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_VAHK, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_C3KA, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_ZOBC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_7CRD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_3B37, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_0OKG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_DBOQ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_3LU9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_WUAP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_26AE, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_NQFI, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_MHDD, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_RDRF, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_D5DV, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_4YMD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_85WE, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_QJP6, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_1958, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_FV89, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_GCSL, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_GULM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_LRLY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_67IG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_MXEU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_39CQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_ZDZ7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_UR8G, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_ULRV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_K5D7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_T9BX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, PinType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, UnknownData_ZJ9K, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0014);
		}

		// struct FMagicLeapARPinQuery
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Types, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, MaxResults, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, TargetPoint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Radius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, bSorted, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, UnknownData_6SI5, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinQuery, 0x0068);
		}

		// struct FMagicLeapARPinObjectIdList
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinObjectIdList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinObjectIdList, ObjectIdList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinObjectIdList, 0x0050);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, vertexcount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FRenderableTriangleVertex
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangleVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, UV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Normal, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Color, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangleVertex, 0x0024);
		}

		// struct FRenderableTriangle
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, UnknownData_A885, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangle, 0x0078);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_OD4J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_UJ7V, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_7OYN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_J4GF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_2IEF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_ZL74, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_EMP6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_N99R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_MPG2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_53KH, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_VXX2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_GOWV, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_VGNT, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_G13R, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FSimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_ALHH, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_GAFK, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_UG9U, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_OP5I, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_TT5G, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_LL4K, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_SMBL, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_6JMT, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_W2M1, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_BFPZ, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_CA6I, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_XNSB, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_1P7M, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_WB3M, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_ZRM7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_ZB8H, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_LDI1, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_5M38, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_PK6T, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_789X, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_TTU6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_PHQ8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_3G0A, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_4D1Y, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_J7HG, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_6XKY, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_AGCZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_K1L7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_FKRT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_3ZD9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_0T7X, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_18RS, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_VRZ1, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_TT03, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_25VK, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_YHN8, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_FKTL, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_5PNR, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_499R, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_VC7D, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_9CBS, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_9BLX, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_9QA3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_MBUN, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_PPHO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_RD58, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_RY11, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_7EJZ, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_AWEA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_1ELY, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_UNQA, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_QSAX, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_OCRL, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_82B6, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_2OVX, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_280P, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_U39H, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_TN2J, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_O45T, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_67C9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_YDZ1, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_J6RC, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_4MKH, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_ATQK, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_VQL1, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_6456, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_2N2D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_VAVF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_M1MC, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_MBEW, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_TBI9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_ON9U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_B1J0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_VZDP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_NK8T, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_VX6Z, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_3IUE, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_624G, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_XLIA, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_FHV9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_CGK7, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_VFSS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_1V6Q, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_PM7G, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_VLFI, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_8JA7, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_RT3B, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_I4T4, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_20PV, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_X04J, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_LQDT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_81TJ, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_D1WS, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_HCLM, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_BF2Z, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_FUIA, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_8RKI, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_K7SP, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_ZQER, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_PWMV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_PS2X, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_YCK4, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_DHZ5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_2A4A, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_GOSD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_U1QE, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_N08L, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_MCRJ, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_OZ2F, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_X8HA, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_BXBP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_Y6SD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_QWV3, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_PNLS, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_PA96, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_SY70, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FXRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_KLCI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_ERHU, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_TDTG, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_93XQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_69T7, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// struct FXRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_M2E5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_P0GO, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_19OV, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FXRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_BBN8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_0RJH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_EUWG, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_L3NP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_EE0Y, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_MQN8, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_GUR4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_94WY, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_5AAT, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_QGV3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_MQR6, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_FH3X, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_4P3L, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0770);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_89ST, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_ET6J, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_15YR, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_5IXD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_C13F, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_PFG5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_JKQO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_0UQJ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_NJVF, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_FKSG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_BA3D, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_6XTZ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_T5DX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_K2NS, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_CRD2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FDonNavigationVoxel
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationVoxel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationVoxel, UnknownData_8LA0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationVoxel, 0x0030);
		}

		// struct FDonNavVoxelY
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavVoxelY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavVoxelY, Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavVoxelY, 0x0010);
		}

		// struct FDonNavigationDynamicCollisionNotifyee
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationDynamicCollisionNotifyee)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationDynamicCollisionNotifyee, Listener, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationDynamicCollisionNotifyee, UnknownData_7KK0, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationDynamicCollisionNotifyee, 0x0048);
		}

		// struct FDonVoxelCollisionProfile
		TEST_METHOD(ScriptStruct__DonAINavigation__DonVoxelCollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonVoxelCollisionProfile, UnknownData_MR4U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonVoxelCollisionProfile, 0x0020);
		}

		// struct FDoNNavigationDebugParams
		TEST_METHOD(ScriptStruct__DonAINavigation__DoNNavigationDebugParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, DrawDebugVolumes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, VisualizeRawPath, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, VisualizeOptimizedPath, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, VisualizeInRealTime, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, LineThickness, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationDebugParams, LineDuration, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoNNavigationDebugParams, 0x000C);
		}

		// struct FBT_FlyToTarget_DebugParams : public FDoNNavigationDebugParams
		TEST_METHOD(ScriptStruct__DonAINavigation__BT_FlyToTarget_DebugParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBT_FlyToTarget_DebugParams, bVisualizePawnAsVoxels, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBT_FlyToTarget_DebugParams, UnknownData_8PQS, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBT_FlyToTarget_DebugParams, 0x0010);
		}

		// struct FDonNavigationTask
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationTask, UnknownData_36AW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationTask, 0x0008);
		}

		// struct FDonNavigationDynamicCollisionTask : public FDonNavigationTask
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationDynamicCollisionTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationDynamicCollisionTask, UnknownData_H19Y, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationDynamicCollisionTask, 0x0150);
		}

		// struct FDonNavigationQueryTask : public FDonNavigationTask
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationQueryTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationQueryTask, UnknownData_TANW, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationQueryTask, ResultHandler, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationQueryTask, DynamicCollisionListener, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationQueryTask, 0x02B8);
		}

		// struct FDonNavVoxelX
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavVoxelX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavVoxelX, Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavVoxelX, 0x0010);
		}

		// struct FDonNavVoxelXYZ
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavVoxelXYZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavVoxelXYZ, X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavVoxelXYZ, 0x0010);
		}

		// struct FDonNavigationDynamicCollisionPayload
		TEST_METHOD(ScriptStruct__DonAINavigation__DonNavigationDynamicCollisionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDonNavigationDynamicCollisionPayload, UnknownData_YV6H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDonNavigationDynamicCollisionPayload, 0x0038);
		}

		// struct FDoNNavigationQueryParams
		TEST_METHOD(ScriptStruct__DonAINavigation__DoNNavigationQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, QueryTimeout, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, bFlexibleOriginGoal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, bSkipOptimizationPass, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, UnknownData_ZBPG, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, MaxOptimizerSweepAttemptsPerNode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, bPreciseDynamicCollisionRepathing, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, bIgnoreDynamicCollisionRepathingForDirectGoals, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, UnknownData_SVQW, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, CollisionShapeInflation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, bForceRescheduleQuery, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryParams, UnknownData_OUTQ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoNNavigationQueryParams, 0x0020);
		}

		// struct FDoNNavigationQueryData
		TEST_METHOD(ScriptStruct__DonAINavigation__DoNNavigationQueryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, CollisionComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, Origin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, Destination, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, QueryParams, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, UnknownData_VWPV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, PathSolutionOptimized, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, QueryStatus, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoNNavigationQueryData, UnknownData_H68Y, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoNNavigationQueryData, 0x0288);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_LH02, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_C2BB, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_1HZS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_A9W9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_VHDB, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_HAJL, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_RF1D, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// struct FHairDecimationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairDecimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, VertexDecimation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairDecimationSettings, 0x0008);
		}

		// struct FHairInterpolationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, UnknownData_XRQR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairInterpolationSettings, 0x000C);
		}

		// struct FHairGroupsInterpolation
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, DecimationSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, InterpolationSettings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsInterpolation, 0x0014);
		}

		// struct FHairGroupCardsTextures
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsTextures)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, DepthTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, CoverageTexture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, TangentTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AttributeTexture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AuxilaryDataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, UnknownData_72F5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsTextures, 0x0030);
		}

		// struct FHairGroupsMeshesSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMeshesSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Textures, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, GroupIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, LODIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMeshKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMeshesSourceDescription, 0x0060);
		}

		// struct FHairBendConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairBendConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, SolveBend, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, ProjectBend, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_5LQ2, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_Q26E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairBendConstraint, 0x0098);
		}

		// struct FHairStretchConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStretchConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, SolveStretch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, ProjectStretch, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_6RMH, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_V6HR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStretchConstraint, 0x0098);
		}

		// struct FHairCollisionConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCollisionConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, SolveCollision, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, ProjectCollision, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, UnknownData_JZXZ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StaticFriction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, KineticFriction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StrandsViscosity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, GridDimension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, CollisionRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, RadiusScale, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCollisionConstraint, 0x00A8);
		}

		// struct FHairMaterialConstraints
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairMaterialConstraints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, BendConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, StretchConstraint, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, CollisionConstraint, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairMaterialConstraints, 0x01D8);
		}

		// struct FHairStrandsParameters
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStrandsParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, UnknownData_X37D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSmoothing, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsThickness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, ThicknessScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStrandsParameters, 0x0098);
		}

		// struct FHairSolverSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, EnableSimulation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, NiagaraSolver, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, UnknownData_YANU, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, CustomSystem, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, SubSteps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, IterationCount, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairSolverSettings, 0x0038);
		}

		// struct FHairExternalForces
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairExternalForces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, GravityVector, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirDrag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairExternalForces, 0x001C);
		}

		// struct FHairGroupsPhysics
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsPhysics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, SolverSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, ExternalForces, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, UnknownData_8SUP, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, MaterialConstraints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, StrandsParameters, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsPhysics, 0x02C8);
		}

		// struct FHairCardsClusterSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsClusterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, ClusterDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, bUseGuide, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, UnknownData_PSHN, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsClusterSettings, 0x0008);
		}

		// struct FHairCardsGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, GenerationType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_UDX3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, CardsCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, ClusterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_7QBL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinSegmentLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, AngularThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinCardsLength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MaxCardsLength, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsGeometrySettings, 0x001C);
		}

		// struct FHairCardsTextureSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsTextureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, AtlasMaxResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, PixelPerCentimeters, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, LengthTextureCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, DensityTextureCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsTextureSettings, 0x0010);
		}

		// struct FHairGroupsProceduralCards
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsProceduralCards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, ClusterSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, GeometrySettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, TextureSettings, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, Version, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsProceduralCards, 0x0038);
		}

		// struct FHairLODSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, VertexDecimation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, AngularThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ScreenSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ThicknessScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, bVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, GeometryType, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, UnknownData_CNAL, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairLODSettings, 0x0018);
		}

		// struct FHairGroupsLOD
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, LODs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterWorldSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterScreenSizeScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsLOD, 0x0018);
		}

		// struct FHairShadowSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairShadowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairShadowDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairRaytracingRadiusScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bUseHairRaytracingGeometry, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bVoxelize, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, UnknownData_XVME, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairShadowSettings, 0x000C);
		}

		// struct FHairGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairRootScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairTipScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairClipScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGeometrySettings, 0x0010);
		}

		// struct FGoomBindingGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__GoomBindingGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenRootCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenLODCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimRootCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimLODCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGoomBindingGroupInfo, 0x0010);
		}

		// struct FHairGroupDesc
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, GuideCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, hairLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth_Override, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_XS4W, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale_Override, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_1ZPH, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale_Override, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_T7QX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength_Override, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_ZMO3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity_Override, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_CLDS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale_Override, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry_Override, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_2RH5, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODBias, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization_Override, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting_Override, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization_Override, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_8O3C, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODForcedIndex, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupDesc, 0x004C);
		}

		// struct FGroomHairGroupPreview
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomHairGroupPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, CurveCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GuideCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, InterpolationSettings, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomHairGroupPreview, 0x0020);
		}

		// struct FGroomBuildSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, UnknownData_55MU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomBuildSettings, 0x000C);
		}

		// struct FGroomConversionSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Scale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomConversionSettings, 0x0018);
		}

		// struct FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurves, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurveVertices, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuideVertices, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfo, 0x0014);
		}

		// struct FHairGroupsMaterial
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, SlotName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMaterial, 0x0010);
		}

		// struct FHairGroupCardsInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCards, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCardVertices, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsInfo, 0x0008);
		}

		// struct FHairGroupsCardsSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsCardsSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, SourceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, UnknownData_M4OC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMeshKey, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Textures, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, GroupIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, LODIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, CardsInfo, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMeshKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsCardsSourceDescription, 0x00C0);
		}

		// struct FHairGroupInfoWithVisibility : public FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfoWithVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, bIsVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, UnknownData_GTAV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfoWithVisibility, 0x0018);
		}

		// struct FHairAdvancedRenderingSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairAdvancedRenderingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bUseStableRasterization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bScatterSceneLighting, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairAdvancedRenderingSettings, 0x0002);
		}

		// struct FHairGroupsRendering
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, GeometrySettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, ShadowSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, AdvancedSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, UnknownData_OFNI, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsRendering, 0x0030);
		}

		// struct FFollicleMaskOptions
		TEST_METHOD(ScriptStruct__HairStrandsCore__FollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Groom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Channel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, UnknownData_7C64, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFollicleMaskOptions, 0x0010);
		}

		// struct FMovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_BYHV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// struct FMovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_RA3B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_E6H1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_E1V8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_INKO, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_EPSO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_89SL, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_ZSXP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_XNJI, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_9MSG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_RTUO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_JICO, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_0LDA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_TZSJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_7SZE, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_SCDU, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_XXVH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// struct FMovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_EI2C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_7KYC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_0AHV, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// struct FMovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_MUFG, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_RHLN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// struct FMovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// struct FMovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_38Q8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_GX3Z, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// struct FMovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_R951, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_71QA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_4Z28, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_C29I, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_XWPA, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_6OKG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_VFKA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_K4MO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_UALL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_GYAB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_A23N, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_42I7, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_ZR1B, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_GFHL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_N13T, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_3CR1, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_QTFG, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_M04Z, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_M02Y, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_TM1L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_59FP, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_I2CD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_I2SX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_SYBR, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_IEYH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_E2NB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_61IK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_ZZ7D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_891B, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_72HD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_U1DW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_30MC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_5HJH, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_PZPR, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_1CJJ, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_H7EZ, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_KN2V, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_LY2H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_DMPH, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_C8XF, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_F2S9, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_MTPA, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_93X0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_WZUG, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_2VOY, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_574E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FSoundVariation
		TEST_METHOD(ScriptStruct__SoundUtilities__SoundVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, SoundWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, ProbabilityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, VolumeRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, PitchRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, UnknownData_3W3P, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundVariation, 0x0020);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_EOT6, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_0OME, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// struct FMovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_C1C8, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_EF3N, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// struct FTrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_9F2K, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// struct FMovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// struct FEasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// struct FMovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_F34D, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_HWXY, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_AXT3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_J0V6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_L3WF, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_EZWN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_B2KL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_49QT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_2G0I, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_6Q46, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_SCX3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_16L7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_V0BK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_542V, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_4230, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// struct FMovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// struct FMovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_QT90, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// struct FMovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_0NNR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_OZ17, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_IWPL, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_5XGH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_Y7JG, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_K5S6, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_T2R0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_7IMU, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_NG3C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_JI1D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_MXUW, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_RIJ8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_1OYU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_BM7F, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, string, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_J4QJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_XCUW, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_WLZG, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FGrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_PEB1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FAKWaapiJsonObject
		TEST_METHOD(ScriptStruct__AkAudio__AKWaapiJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAKWaapiJsonObject, UnknownData_PWB3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAKWaapiJsonObject, 0x0010);
		}

		// struct FAkWaapiSubscriptionId
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiSubscriptionId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiSubscriptionId, UnknownData_65ZK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiSubscriptionId, 0x0008);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FAkAmbSoundCheckpointRecord
		TEST_METHOD(ScriptStruct__AkAudio__AkAmbSoundCheckpointRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAmbSoundCheckpointRecord, bCurrentlyPlaying, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAmbSoundCheckpointRecord, 0x0001);
		}

		// struct FAkSegmentInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkSegmentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, CurrentPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PreEntryDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, ActiveDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PostExitDuration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, RemainingLookAheadTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BeatDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BarDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSegmentInfo, 0x0024);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_CQDL, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_35WL, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiEventBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Chan, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiEventBase, 0x0002);
		}

		// struct FAkMidiProgramChange : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiProgramChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiProgramChange, ProgramNum, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiProgramChange, 0x0003);
		}

		// struct FAkMidiChannelAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiChannelAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiChannelAftertouch, Value, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiChannelAftertouch, 0x0003);
		}

		// struct FAkMidiNoteAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteAftertouch, 0x0004);
		}

		// struct FAkMidiPitchBend : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiPitchBend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueLsb, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueMsb, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, FullValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiPitchBend, 0x0008);
		}

		// struct FAkMidiCc : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiCc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Cc, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiCc, 0x0004);
		}

		// struct FAkMidiNoteOnOff : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteOnOff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Velocity, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteOnOff, 0x0004);
		}

		// struct FAkMidiGeneric : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param2, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiGeneric, 0x0004);
		}

		// struct FAkPoly
		TEST_METHOD(ScriptStruct__AkAudio__AkPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, EnableSurface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, UnknownData_ELPQ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPoly, 0x0010);
		}

		// struct FAkWaapiFieldNames
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiFieldNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiFieldNames, FieldName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiFieldNames, 0x0010);
		}

		// struct FAkWaapiUri
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiUri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiUri, Uri, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiUri, 0x0010);
		}

		// struct FAkAudioEventTrackKey
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioEventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, UnknownData_GXBN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, AkAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, EventName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioEventTrackKey, 0x0020);
		}

		// struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioEventTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioEventTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioEventTemplate, 0x0028);
		}

		// struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioRTPCTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioRTPCTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioRTPCTemplate, 0x0028);
		}

		// struct FMovieSceneTangentDataSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneTangentDataSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, UnknownData_MMZG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentDataSerializationHelper, 0x0014);
		}

		// struct FMovieSceneFloatValueSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatValueSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, UnknownData_INL8, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValueSerializationHelper, 0x001C);
		}

		// struct FMovieSceneFloatChannelSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatChannelSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PreInfinityExtrap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PostInfinityExtrap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_8W5C, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, bHasDefaultValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_RA4Q, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannelSerializationHelper, 0x0030);
		}

		// struct FAkPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPropertyToControl, 0x0010);
		}

		// struct FAkWwiseObjectDetails
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseObjectDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseObjectDetails, 0x0030);
		}

		// struct FAkWwiseItemToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseItemToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPicked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseItemToControl, 0x0040);
		}

		// struct FAkBoolPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkBoolPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkBoolPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkBoolPropertyToControl, 0x0010);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_YKFC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_X39T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_WDUQ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_UNZ0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_NB2B, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_LHLM, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_YB5Q, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_PSUB, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0024);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_JHFM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_L6MX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_NZIF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_55WX, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_W2NQ, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_OCEA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_7PCK, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_M9A3, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_A2A7, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_2CYV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FLevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_E8OY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_KV9A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_NS4J, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_JTEI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_8E43, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_X3UO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_VU5Z, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_RKWS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_B9WK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_JRUB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_JEQP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, eventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_GN1Q, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_1R4D, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_JG5B, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_CMPQ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_XAW0, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_MYOL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_MZGD, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_ZWJV, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_RQYC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_LR29, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_BX38, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_JDVR, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_CAPI, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_AWM0, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_HZXK, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_B78Y, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_XSWE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_BY7D, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_6FW6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_XIYC, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_YJYE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_CQAB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_F632, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_V1NX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_FIME, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_X6E0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_BOSV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_13OC, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_YF92, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_4LVO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_WH9R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_EY3Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_0Q56, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_4YYK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_Y69X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_8JRO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_F5PY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_D23Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_BP46, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_PBK8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_WQT5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_6A3Y, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_1WMH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_JDCC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_CO56, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_75X1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_52LF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_INK8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_BQSP, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_VRT3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FConnectionAlwaysRelevantNodePair
		TEST_METHOD(ScriptStruct__ReplicationGraph__ConnectionAlwaysRelevantNodePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConnectionAlwaysRelevantNodePair, NetConnection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConnectionAlwaysRelevantNodePair, Node, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConnectionAlwaysRelevantNodePair, 0x0010);
		}

		// struct FLastLocationGatherInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__LastLocationGatherInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, LastLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, LastOutOfRangeLocationCheck, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLastLocationGatherInfo, 0x0020);
		}

		// struct FAlwaysRelevantActorInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__AlwaysRelevantActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, LastViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, LastViewTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlwaysRelevantActorInfo, 0x0018);
		}

		// struct FTearOffActorInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__TearOffActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, UnknownData_LWM0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, Actor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, UnknownData_LHUU, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTearOffActorInfo, 0x0018);
		}

		// struct FClassReplicationInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__ClassReplicationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, DistancePriorityScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, StarvationPriorityScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, AccumulatedNetPriorityBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, ReplicationPeriodFrame, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, FastPath_ReplicationPeriodFrame, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, ActorChannelFrameTimeout, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, UnknownData_Q344, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, CullDistance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, CullDistanceSquared, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassReplicationInfo, 0x0070);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_HAPK, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_RJ6G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_P9AS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_P0FE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_YML5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_Q63T, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_4OJ0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_MEJO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_MA9Z, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_0IGX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_QBCB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_B178, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_LEOK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_HIA7, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_JJS8, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_54XR, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_KAZW, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_BUI1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_Q0RB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_UIX2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_5BFD, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_IEOW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_VYWA, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_SQRT, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_MUWH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_MJN5, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_YH0F, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_MSQ9, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_LFL7, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_FHDU, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_26NH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_BE64, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_2E9X, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_UHNN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_6S91, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_XTVI, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_UKC9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_UPWO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_ZFZA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_DQZV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_NDUZ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_C0GU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_PQYD, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_MRZH, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_VX72, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_7J0H, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_M31R, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_LVZN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_GLJS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_3BQT, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_5BYZ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_1GFC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_SILG, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_5N5L, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_EFSH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_E7WU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_ONDC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_DUEG, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_R068, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_0EOQ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_IF3Q, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_FC60, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FHLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_LF7X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_0XXU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_S6ML, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_6GNO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_DQOK, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_S76B, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_1TAU, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_HI88, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_CSID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_W31J, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_12OR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_HXCU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_M1OX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_IK6K, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_LBBY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_A9LZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_1ZGY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_2UUG, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_Z4DG, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_1L8H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_4GYB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_SXU2, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_8M8R, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_V3H0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_K9E5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_IGT3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_48W1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_11YI, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_045Y, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_FL62, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_WG4K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_PX53, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_3ZSB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_PX5E, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_IH4X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_EGER, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_XH94, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_4B8W, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_P9LR, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_94ZF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_CL6N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_51CJ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_ZC8D, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_ONKY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_XKBL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_2BZG, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_UICS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// struct FLODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, Mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_RGM4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_TWCJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_4WR6, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_ZRZX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_XZQY, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FStaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FCustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_CZY5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_4UP4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_48P8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_6SRR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_V61F, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_QVA2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_BPCN, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_SP9J, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_2Y93, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentMaxSlope, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_7UJ7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_K46C, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_2K4O, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_IC3A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_U7G4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_OO12, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_L58Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_HLQL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_2G9D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_EWIJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_320N, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WZPZ, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Z51Z, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OBVV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_JJ15, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_SQFC, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_3DU3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_7VRO, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OCB6, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_RRVC, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_KAPU, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ATON, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_G8B6, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_83L7, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OEXK, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_7VJQ, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LYNM, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_V5RJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_UF3Z, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_VTOJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_KA66, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_G5AC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_8MIR, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_A5MH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_XGP3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_4BDP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_Z5GU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_P8RJ, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_ZY37, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_5POG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_4Z7P, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_LW8F, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_5TA3, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FQuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_G3U0, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// struct FQuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_0I8Y, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// struct FQuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_HSIE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// struct FQuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_89AI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_H59Y, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// struct FQuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_X0KZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_YF2W, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_6I9E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_5ZID, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_Y84R, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_TUAA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_3UF4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_D12Q, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_VDKZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_IBVS, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_Z5HC, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_401G, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_CMEK, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_8XCP, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_WS18, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_7GXF, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_T11C, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_0M9R, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_IIHC, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_YAKA, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_KKT6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_T75N, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_KRAK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_8NQF, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_J2BH, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_MA1V, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_NFX0, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_AHQ6, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FSceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_OW2E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_V2TA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_4RX4, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_Y9FX, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_EX1L, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_5MF2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_5K21, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_86O4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_EW3Y, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FSkinWeightProfileManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_0ON4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_5QOC, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_MCCD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_LO6V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_EGN2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_Q7FU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_KKTT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_GZ80, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_FX7C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_LILC, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_B0KG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_EVXU, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_0ZZV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_ZKTB, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_M79K, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_60SK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_NMXE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_NNW1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_Y5EA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_TCCQ, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_5ZNU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_TSOB, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_VIKJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_N9TT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_9HR1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_5NJS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_BZLD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_A5CN, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_GMDQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_640K, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_AW6K, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_UUSX, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_B314, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_GNNS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_ZJ1H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_NQIT, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_BF79, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_X3F1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_XZUA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_19M9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_O19D, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_4VK1, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_DWJU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_ZQ87, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_V8F6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_E7CW, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_MWAL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_BXEO, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_SUAT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_5MSB, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_AK17, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_ID31, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_UMFY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_1EB2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_B8TD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_7WS5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_6RKK, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_15B7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_I5KN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_EOLG, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_41CQ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_LS9G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_N3VP, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_TKQC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_1W1F, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_RMR0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_D0HQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_U71T, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_I25P, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_MPMO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_7RTW, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_IVJG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_473G, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_TG4O, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_GY6X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_BDJD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_NAU3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_47PU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_RU4X, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_K592, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_XZ1Z, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_BO69, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_DNNI, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_P50S, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_DCUT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_5ZTU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_AQJM, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_TJOP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_TLSF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_9W0R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_VDWX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_VYQC, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_3D7M, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_FRB7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_BZLH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_VQ3N, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_A6FQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_3QFW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_YLV8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_LL0S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_64X0, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_6KTZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3ONG, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_G19A, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_REXD, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_0MR1, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_X6ND, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_6B0R, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_9Z6M, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_JIKR, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_4OSL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_OUJE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_DL1Z, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_E1DJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_G24P, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_TON6, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_D0HZ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_U5YV, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_9OCF, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_FGRA, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_JWGY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_RQ4W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_HFKT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_0HKH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_BBRM, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_E68I, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_WKIW, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_LD8E, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_W1SN, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_3VIK, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_HLSF, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// struct FConstraintInstance : public FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1BB5, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_EGZF, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_V5BV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_D91S, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_S819, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_174H, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_RKLO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_NVMY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_UCN4, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_OM8H, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_QXZZ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_6LY1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_FY5J, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_QA7Y, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FSoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_SP21, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// struct FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_8L2Y, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_OWV6, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_MSLL, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_N7XO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_RW8K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_UKNG, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_A4L2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_BKIN, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_HGU3, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_888N, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_5Q5H, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_ZFNZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_5P2O, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_R7NL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_OG5K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_6AN8, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_VMXN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_YGS7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_B068, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_TWOB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_NA07, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_TAOF, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_NIY0, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_ECUM, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_3S4P, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_985B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_AXRA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_9E23, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_PIJQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_37PI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_4A4M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_M6VJ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FBodyInstance : public FBodyInstanceCore
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_6TBA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_O89R, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_K0LQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_DZ98, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_MBIC, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FQ1K, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_0Z3T, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Y0I6, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// struct FVertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_INL9, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_HJ02, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_UVWP, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_BCFD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_5UN1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_6GMJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_92DI, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_1A9I, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_KMWY, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_B1KR, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_V8KY, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_43T6, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_UWXO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_IKTU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_DKLO, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_8J08, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_E3W5, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_4ZS1, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_J129, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_HOZY, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_IPRI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_U5BY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_WY3L, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_9D25, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_E5GQ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_X385, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_8KZT, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_FD7D, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_YXFY, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_1KCZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_UY43, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_SJRR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_4INX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_K1OY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_AG1R, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_0RIE, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_MLHE, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FCustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_5GLL, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_WX7Q, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_3RBT, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_WKU4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_9G6N, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_QLJO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_8PXL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_MMCI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FBakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_VL5D, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FBakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_F6VK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FBakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// struct FBakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_0ZTS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_S5I1, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_DCO6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_E8QB, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_RCJO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_HINH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_7DPG, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_S4R0, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_467Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_38BN, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_R2XG, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_6AU1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_M0W7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_QU1H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_0XYI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_C0PZ, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_5AM1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_WOS2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_TB5E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_HIWQ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_P265, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_J2MF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_9T9A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_UK23, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_XUD6, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_AS10, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_AGMQ, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_C8JD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_DKQ9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_XLVM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_04V1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_9NSA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_CGGR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_WC3M, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_7SVO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_1NHQ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_GN7O, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_JLU1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_62IH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_F3Z1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_844Z, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_0OWC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_4HT2, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_HBNT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_94BA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HV4H, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_8VV9, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_WZPT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_49AS, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_64LZ, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_3R3P, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_N53K, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_9L4L, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_8E5P, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_IMSD, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_UYCI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_3MKS, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_0QHH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_5UGN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_4TKZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_E17W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_5UF7, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_H600, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_0J83, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_CI59, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_Q464, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_D08Q, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_TXG3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_OJVV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_SSCP, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_MRZB, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_8KYM, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_8CMB, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_2TSZ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_8BN1, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_TYEX, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_8QUL, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_7CSA, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_HS7I, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_BL3C, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_A2BK, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_RA0D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_KR17, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_TT7L, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_K3SO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_5MEK, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_P9UQ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_3H84, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_OFJ2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FAudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_JC4S, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// struct FAudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_PEGT, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_RBK1, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_KRHX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_GCVG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_GPV5, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_H6I9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_OZ5E, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_N674, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_DMEK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_1K6P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_3P2I, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_QZ8Q, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_K7D3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_FPYC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_3TOQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_4PHZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_7GOB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_KKKF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_2MBX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_8939, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_PK31, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_K7NB, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_YH1H, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_B41J, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FCameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_9CV2, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// struct FCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// struct FCameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_6XSU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// struct FCameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_3T96, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_812J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_HU87, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_LZR5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_58BD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_URTJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_AVUZ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// struct FCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_NKAX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_BDUE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_JNPN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_ZGYX, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FForceTriangle
		TEST_METHOD(ScriptStruct__OceanPlugin__ForceTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceTriangle, UnknownData_VIYY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceTriangle, 0x006C);
		}

		// struct FWaveParameter
		TEST_METHOD(ScriptStruct__OceanPlugin__WaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Amplitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Steepness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, TimeScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaveParameter, 0x0014);
		}

		// struct FWaveSetParameters
		TEST_METHOD(ScriptStruct__OceanPlugin__WaveSetParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave01, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave02, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave03, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave04, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave05, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave06, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave07, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave08, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaveSetParameters, 0x00A0);
		}

		// struct FTimeDate
		TEST_METHOD(ScriptStruct__OceanPlugin__TimeDate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Millisecond, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Second, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Minute, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Hour, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Day, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Month, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeDate, Year, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeDate, 0x001C);
		}

		// struct FBuoyancyVertex
		TEST_METHOD(ScriptStruct__OceanPlugin__BuoyancyVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyVertex, UnknownData_WCCK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuoyancyVertex, 0x0010);
		}

		// struct FStructBoneOverride
		TEST_METHOD(ScriptStruct__OceanPlugin__StructBoneOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, Density, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, TestRadius, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructBoneOverride, 0x0010);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_KNEB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_YODM, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FAdminCommandArgumentDescription
		TEST_METHOD(ScriptStruct__ConZ__AdminCommandArgumentDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCommandArgumentDescription, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCommandArgumentDescription, ShowCompletionValuesInHelpText, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCommandArgumentDescription, UnknownData_IK2H, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCommandArgumentDescription, Completion, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCommandArgumentDescription, 0x0020);
		}

		// struct FHitEffects
		TEST_METHOD(ScriptStruct__ConZ__HitEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, SpeedThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, UnknownData_K8S8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, ParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, ParticlesScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, UnknownData_Q2HZ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, AudioEvent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, CameraShake, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, CameraShakeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitEffects, UnknownData_OUYC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitEffects, 0x0038);
		}

		// struct FMeleeHitDetectionMarker
		TEST_METHOD(ScriptStruct__ConZ__MeleeHitDetectionMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, UnknownData_2BOP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, RootMotion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, damageMultiplier, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, SelectionWeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeHitDetectionMarker, UnknownData_KJ0C, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeHitDetectionMarker, 0x0080);
		}

		// struct FRangedWeaponSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__RangedWeaponSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRangedWeaponSkillParametersPerSkillLevel, CrosshairHidingDuration, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRangedWeaponSkillParametersPerSkillLevel, 0x0004);
		}

		// struct FElementSnapMarker
		TEST_METHOD(ScriptStruct__ConZ__ElementSnapMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, Slack, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, ElementTypesMustMatch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, IncreaseLevelOnSnap, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, MaxLevelToSnap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, UnknownData_N34E, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, RequiredElementSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, RequiredElementSizeTolerance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, DestroySnappedElementWhenDestroyed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, UnknownData_H0WF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, OutSocketTypes, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, InSocketTypes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSnapMarker, UnknownData_HGQV, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementSnapMarker, 0x0060);
		}

		// struct FBaseBuildingSizeVariation
		TEST_METHOD(ScriptStruct__ConZ__BaseBuildingSizeVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseBuildingSizeVariation, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseBuildingSizeVariation, UnknownData_FR9U, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseBuildingSizeVariation, 0x0018);
		}

		// struct FRepairableParams
		TEST_METHOD(ScriptStruct__ConZ__RepairableParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, RepairableTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, HealthRepairedPerUse, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, ExperienceAwardedPerHealthRepaired, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, MinRepairDuration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, MaxRepairDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, ShouldRepairZeroHealth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, MinSkillLevelRequired, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairableParams, UnknownData_DP7J, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepairableParams, 0x0038);
		}

		// struct FBaseElementDamageZone
		TEST_METHOD(ScriptStruct__ConZ__BaseElementDamageZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, BoundsMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, BoundsMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, MinDamagePerSecond, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, MaxDamagePerSecond, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, MinSpeedForDamage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDamageZone, MaxSpeedForDamage, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseElementDamageZone, 0x0028);
		}

		// struct FBaseElementDestructionZone
		TEST_METHOD(ScriptStruct__ConZ__BaseElementDestructionZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, Bounds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, DamageToItems, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, FallDamagePerMeter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, MaxFallDamage, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, MustElementBeAboveZone, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, IgnoreElementsThatCantBePlacedOnOtherElements, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementDestructionZone, UnknownData_FWIJ, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseElementDestructionZone, 0x002C);
		}

		// struct FReplenishableResourceDescription
		TEST_METHOD(ScriptStruct__ConZ__ReplenishableResourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, UnknownData_BE8Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, InSocketTypes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, OutSocketTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, InitialAmount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, MaxAmount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, ReplenishInterval, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, ReplenishAmount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceDescription, UnknownData_FQQ0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplenishableResourceDescription, 0x0070);
		}

		// struct FBruisePatch
		TEST_METHOD(ScriptStruct__ConZ__BruisePatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, Layer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, UnknownData_T4O2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, AllowedZones, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, Order, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, UnknownData_OK0M, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, Texture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, Offset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, Mute, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBruisePatch, UnknownData_HHB3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBruisePatch, 0x0038);
		}

		// struct FWindowMarkerModifier
		TEST_METHOD(ScriptStruct__ConZ__WindowMarkerModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarkerModifier, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarkerModifier, IsVaultable, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarkerModifier, IsFortifiable, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarkerModifier, UnknownData_4GCS, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowMarkerModifier, 0x0008);
		}

		// struct FBuildingsArray
		TEST_METHOD(ScriptStruct__ConZ__BuildingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingsArray, _buildings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildingsArray, 0x0010);
		}

		// struct FDbIntegerId
		TEST_METHOD(ScriptStruct__ConZ__DbIntegerId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbIntegerId, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDbIntegerId, 0x0008);
		}

		// struct FFortificationData
		TEST_METHOD(ScriptStruct__ConZ__FortificationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, MarkerIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, UnknownData_6QSO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, FortificationClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, OwnerUserProfileId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, health, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationData, UnknownData_8LX9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortificationData, 0x0020);
		}

		// struct FBuildingData
		TEST_METHOD(ScriptStruct__ConZ__BuildingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingData, IsCleared, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingData, UnknownData_GQEP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingData, WindowMarkerModifiers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingData, Fortifications, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildingData, 0x0028);
		}

		// struct FDoorRepData
		TEST_METHOD(ScriptStruct__ConZ__DoorRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, StateFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, UnknownData_7JM1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, OwningUserProfileId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, Locks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, RemainingNeutralizationAttemptsPerLock, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, DoorAccessLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorRepData, UnknownData_5PTX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoorRepData, 0x0038);
		}

		// struct FBuildingsReplicationHelper
		TEST_METHOD(ScriptStruct__ConZ__BuildingsReplicationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingsReplicationHelper, BuildingsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingsReplicationHelper, UnknownData_Y9MK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingsReplicationHelper, DoorRepData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildingsReplicationHelper, UnknownData_I1F1, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildingsReplicationHelper, 0x00E0);
		}

		// struct FBuryMaterialData
		TEST_METHOD(ScriptStruct__ConZ__BuryMaterialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuryMaterialData, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuryMaterialData, BreachActionParticles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuryMaterialData, BreachActionSound, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuryMaterialData, DumpActionParticles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuryMaterialData, DumpActionSound, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuryMaterialData, 0x0028);
		}

		// struct FCamouflageSkillExperienceAwards
		TEST_METHOD(ScriptStruct__ConZ__CamouflageSkillExperienceAwards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamouflageSkillExperienceAwards, BonusExperience, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCamouflageSkillExperienceAwards, 0x0004);
		}

		// struct FCamouflageSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__CamouflageSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamouflageSkillParametersPerSkillLevel, Modifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamouflageSkillParametersPerSkillLevel, Bonus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamouflageSkillParametersPerSkillLevel, FoliageAIPerceptionOuterRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamouflageSkillParametersPerSkillLevel, FoliageAIPerceptionInnerRadius, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCamouflageSkillParametersPerSkillLevel, 0x0010);
		}

		// struct FCargoDropSpawnerPreset
		TEST_METHOD(ScriptStruct__ConZ__CargoDropSpawnerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCargoDropSpawnerPreset, preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCargoDropSpawnerPreset, ChanceMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCargoDropSpawnerPreset, UnknownData_0ZOU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCargoDropSpawnerPreset, 0x0010);
		}

		// struct FSpawnCharacterAroundInfo
		TEST_METHOD(ScriptStruct__ConZ__SpawnCharacterAroundInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, AvailablePawns, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, MinSpawnRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, MaxSpawnRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, NumOfCharactersToSpawn, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, IgnoreLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterAroundInfo, UnknownData_S00H, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnCharacterAroundInfo, 0x0050);
		}

		// struct FCharacterImpactSounds
		TEST_METHOD(ScriptStruct__ConZ__CharacterImpactSounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterImpactSounds, AudioEvent, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterImpactSounds, 0x0008);
		}

		// struct FCharacterHeadImpactSoundData
		TEST_METHOD(ScriptStruct__ConZ__CharacterHeadImpactSoundData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterHeadImpactSoundData, ImpactSourceCategories, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterHeadImpactSoundData, ImpactTargetCategories, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterHeadImpactSoundData, Sounds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterHeadImpactSoundData, 0x0028);
		}

		// struct FCharacterHeadImpactSoundsData
		TEST_METHOD(ScriptStruct__ConZ__CharacterHeadImpactSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterHeadImpactSoundsData, SoundsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterHeadImpactSoundsData, FallbackSounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterHeadImpactSoundsData, 0x0018);
		}

		// struct FCharacterTorsoImpactSoundData
		TEST_METHOD(ScriptStruct__ConZ__CharacterTorsoImpactSoundData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTorsoImpactSoundData, ImpactSourceCategories, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTorsoImpactSoundData, ImpactTargetCategories, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTorsoImpactSoundData, Sounds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterTorsoImpactSoundData, 0x0028);
		}

		// struct FCharacterTorsoImpactSoundsData
		TEST_METHOD(ScriptStruct__ConZ__CharacterTorsoImpactSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTorsoImpactSoundsData, SoundsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTorsoImpactSoundsData, FallbackSounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterTorsoImpactSoundsData, 0x0018);
		}

		// struct FCharacterArmsImpactSoundData
		TEST_METHOD(ScriptStruct__ConZ__CharacterArmsImpactSoundData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterArmsImpactSoundData, ImpactSourceCategories, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterArmsImpactSoundData, ImpactTargetCategories, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterArmsImpactSoundData, Sounds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterArmsImpactSoundData, 0x0028);
		}

		// struct FCharacterArmsImpactSoundsData
		TEST_METHOD(ScriptStruct__ConZ__CharacterArmsImpactSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterArmsImpactSoundsData, SoundsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterArmsImpactSoundsData, FallbackSounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterArmsImpactSoundsData, 0x0018);
		}

		// struct FCharacterLegsImpactSoundData
		TEST_METHOD(ScriptStruct__ConZ__CharacterLegsImpactSoundData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLegsImpactSoundData, ImpactSourceCategories, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLegsImpactSoundData, ImpactTargetCategories, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLegsImpactSoundData, Sounds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterLegsImpactSoundData, 0x0028);
		}

		// struct FCharacterLegsImpactSoundsData
		TEST_METHOD(ScriptStruct__ConZ__CharacterLegsImpactSoundsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLegsImpactSoundsData, SoundsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLegsImpactSoundsData, FallbackSounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterLegsImpactSoundsData, 0x0018);
		}

		// struct FCharacterSpawnerData2
		TEST_METHOD(ScriptStruct__ConZ__CharacterSpawnerData2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, Character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, AllowedSurfaces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, CharactersPerCell, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, TotalCharacters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, MinElevation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, MaxElevation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData2, UnknownData_793D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpawnerData2, 0x0030);
		}

		// struct FCharacterSpawnerDataBasedOnPreset
		TEST_METHOD(ScriptStruct__ConZ__CharacterSpawnerDataBasedOnPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerDataBasedOnPreset, preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerDataBasedOnPreset, OverrideCharacterClasses, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerDataBasedOnPreset, UnknownData_5LZ8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerDataBasedOnPreset, CharacterClasses, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpawnerDataBasedOnPreset, 0x0020);
		}

		// struct FCharacterSpawnerMarker
		TEST_METHOD(ScriptStruct__ConZ__CharacterSpawnerMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerMarker, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerMarker, Spawner, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpawnerMarker, 0x0050);
		}

		// struct FSpawnedPawnInfo
		TEST_METHOD(ScriptStruct__ConZ__SpawnedPawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedPawnInfo, UnknownData_FRYY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnedPawnInfo, 0x0014);
		}

		// struct FPawnCharacterInfo
		TEST_METHOD(ScriptStruct__ConZ__PawnCharacterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, SpawnablePawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, CharacterPreset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, PoiCharacterIdleThresholdTimeMP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, ExteriorCharacterIdleThresholdTimeMP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, InteriorCharacterIdleThresholdTimeMP, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, PoiCharacterIdleThresholdTimeSP, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, ExteriorCharacterIdleThresholdTimeSP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, InteriorCharacterIdleThresholdTimeSP, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MinShortRangeSpawnDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxShortRangeSpawnDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MinLongRangeSpawnDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxLongRangeSpawnDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, PawnCullDuration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MinWildCharactersPerPawnGroup, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxWildCharactersPerPawnGroup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxExteriorCharactersPerPawnGroup, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxInteriorCharactersPerPawnGroup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, PawnFieldOfView, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, SpawningFieldOfView, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxAllowedPawns, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxAllowedWildPawns, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_6EU5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxAllowedExteriorPawns, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_W9VB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, MaxAllowedInteriorPawns, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_8BOZ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, ExteriorPawnAmountModifier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_WUPN, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, InteriorPawnAmountModifier, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_234J, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, WildPawnAmountModifier, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, UnknownData_22AJ, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnCharacterInfo, SpawnedPawns, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnCharacterInfo, 0x00B8);
		}

		// struct FCharacterSpawnerData
		TEST_METHOD(ScriptStruct__ConZ__CharacterSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawnerData, CharacterClasses, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpawnerData, 0x0010);
		}

		// struct FChoppingIngredient
		TEST_METHOD(ScriptStruct__ConZ__ChoppingIngredient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, MinQuantity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, MaxQuantity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, IsQuantityAffectedByTool, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, UnknownData_AKWX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, InitialDamage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, RandomizeDamage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, OverrideAutoDestructTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, UnknownData_NE7Q, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, AutoDestructTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingIngredient, UnknownData_3R0N, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChoppingIngredient, 0x0028);
		}

		// struct FChoppingTool2
		TEST_METHOD(ScriptStruct__ConZ__ChoppingTool2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, ItemTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, ItemTagClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, ItemClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, OverrideChoppingTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, UnknownData_9CP5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, ChoppingTimeMultiplier, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, OverrideIngredientsQuantity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, UnknownData_ED95, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingTool2, IngredientsQuantityBonus, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChoppingTool2, 0x0030);
		}

		// struct FPossibleChoppingTools
		TEST_METHOD(ScriptStruct__ConZ__PossibleChoppingTools)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleChoppingTools, PossibleTools, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPossibleChoppingTools, 0x0010);
		}

		// struct FExperienceDependentFloat
		TEST_METHOD(ScriptStruct__ConZ__ExperienceDependentFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperienceDependentFloat, ValueWhenExperienceIsMinimal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperienceDependentFloat, ValueWhenExperienceIsMaximal, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperienceDependentFloat, 0x0008);
		}

		// struct FChoppingParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__ChoppingParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingParametersPerSkillLevel, ChoppingTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingParametersPerSkillLevel, IngredientsQuantityBonus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChoppingParametersPerSkillLevel, 0x000C);
		}

		// struct FChoppingRecipe
		TEST_METHOD(ScriptStruct__ConZ__ChoppingRecipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, InteractionCaption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, ChopAudioEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, NoiseLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, ChoppingMontage, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, UnknownData_6SWW, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, Ingredients, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, ToolRequiredToBeInRightHand, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, AdditionalToolsRequired, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, Skill, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, ExperiencePointsAwarded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, NoSkillLevelData, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, BasicLevelData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, MediumLevelData, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, AdvancedLevelData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChoppingRecipe, UnknownData_CM04, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChoppingRecipe, 0x0098);
		}

		// struct FInteractionStruct
		TEST_METHOD(ScriptStruct__ConZ__InteractionStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionStruct, interactionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionStruct, UnknownData_IZST, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionStruct, InteractionCaption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionStruct, UnknownData_Q36V, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionStruct, 0x0078);
		}

		// struct FBodyWeaponAnimation
		TEST_METHOD(ScriptStruct__ConZ__BodyWeaponAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyWeaponAnimation, Body, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyWeaponAnimation, Weapon, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyWeaponAnimation, 0x0010);
		}

		// struct FClearMalfunctionData
		TEST_METHOD(ScriptStruct__ConZ__ClearMalfunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearMalfunctionData, ShouldClearMalfunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearMalfunctionData, UnknownData_LEUN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearMalfunctionData, Animations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClearMalfunctionData, 0x0018);
		}

		// struct FItemSpawningSettings
		TEST_METHOD(ScriptStruct__ConZ__ItemSpawningSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, UseQuadTreeToDetermineRelevantSpawnerGroups, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, UnknownData_WXEN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, RelevantSpawnerGroupsUpdateInterval, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, MinPlayerLocationDeltaToUpdateRelevantSpawnerGroups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SpawnerGroupsCullDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SpawnerGroupsExpirationTimeInMinutes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, ExamineSpawnerExpirationTimeInMinutes, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SpawnerTasksProcessingInterval, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SpawnerTasksProcessingBudgetInMilliseconds, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, MaxNumberOfSpawnerTasksPerUpdate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, ShouldDestroySpawnedItemsIfNoPlayersAround, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, UnknownData_4A7C, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, RarityRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SpawnerProbabilityMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, ExamineSpawnerProbabilityMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, ItemHealthMultiplierWhenUnderwater, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, SaveFileName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, DisableSerialization, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, IgnoreSpawnerProbability, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, IgnoreItemLimit, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, IgnoreItemZone, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, IgnoreItemRarity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, DebugDrawItemSpawnTransforms, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, UnknownData_HB2A, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, DebugDrawItemSpawnTransformsDuration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawningSettings, UnknownData_WECK, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawningSettings, 0x0058);
		}

		// struct FPossibleItemSickness
		TEST_METHOD(ScriptStruct__ConZ__PossibleItemSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItemSickness, Sickness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItemSickness, Probability, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItemSickness, DamageProbability, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPossibleItemSickness, 0x0010);
		}

		// struct FItemSpawnerDataBasedOnPreset
		TEST_METHOD(ScriptStruct__ConZ__ItemSpawnerDataBasedOnPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideItemClasses, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideItemSpawnTypes, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideProbability, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideUseItemZone, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideUseItemRarity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideUseItemSpawnGroup, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideInitialDamage, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideRandomizeDamage, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideInitialUsage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideRandomizeUsage, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideInitialDirtiness, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideRandomizeDirtiness, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideMinAmmoCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideMaxAmmoCount, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverridePossibleSicknesses, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideUseCollisionTraceToAdjustSpawnLocation, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverrideUseCollisionTraceToAdjustSpawnRotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, OverridePostItemsSpawnedActions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UnknownData_YQRH, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, ItemClasses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, ItemSpawnTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, Probability, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UseItemZone, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UseItemRarity, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UseItemSpawnGroup, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UnknownData_VNJK, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, InitialDamage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, RandomizeDamage, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, InitialUsage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, RandomizeUsage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, InitialDirtiness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, RandomizeDirtiness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, MinAmmoCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, MaxAmmoCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, PossibleSicknesses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UseCollisionTraceToAdjustSpawnLocation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UseCollisionTraceToAdjustSpawnRotation, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, UnknownData_RSC6, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerDataBasedOnPreset, PostItemsSpawnedActions, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnerDataBasedOnPreset, 0x0098);
		}

		// struct FItemSpawnerMarker
		TEST_METHOD(ScriptStruct__ConZ__ItemSpawnerMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerMarker, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerMarker, Spawner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerMarker, UnknownData_2NQ3, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnerMarker, 0x00D0);
		}

		// struct FItemLocation
		TEST_METHOD(ScriptStruct__ConZ__ItemLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Coastal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Continantal, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Mountain, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Urban, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Rural, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Industrial, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Police, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, MilitaryBasic, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, MilitaryMedium, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, MilitaryAdvanced, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, MilitaryWW2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Sport, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, Market, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemLocation, GasStation, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemLocation, 0x000E);
		}

		// struct FItemSpawnerData
		TEST_METHOD(ScriptStruct__ConZ__ItemSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, ItemClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, ItemSpawnTypes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, Probability, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UseItemZone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UseItemRarity, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UseItemSpawnGroup, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UnknownData_3K2A, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, InitialDamage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, RandomizeDamage, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, InitialUsage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, RandomizeUsage, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, InitialDirtiness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, RandomizeDirtiness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, MinAmmoCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, MaxAmmoCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, PossibleSicknesses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UseCollisionTraceToAdjustSpawnLocation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UseCollisionTraceToAdjustSpawnRotation, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, UnknownData_RQHY, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnerData, PostItemsSpawnedActions, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnerData, 0x0078);
		}

		// struct FAttachmentSocketDataItem
		TEST_METHOD(ScriptStruct__ConZ__AttachmentSocketDataItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketDataItem, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketDataItem, MountType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketDataItem, MountedItem, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachmentSocketDataItem, 0x0018);
		}

		// struct FAttachmentSocket
		TEST_METHOD(ScriptStruct__ConZ__AttachmentSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocket, Items, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachmentSocket, 0x0010);
		}

		// struct FAttachmentSocketOffset
		TEST_METHOD(ScriptStruct__ConZ__AttachmentSocketOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketOffset, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketOffset, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachmentSocketOffset, Rotation, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachmentSocketOffset, 0x0020);
		}

		// struct FItemMotionNoise
		TEST_METHOD(ScriptStruct__ConZ__ItemMotionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMotionNoise, AudioEvent, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemMotionNoise, 0x0008);
		}

		// struct FItemInventoryHandlingSounds
		TEST_METHOD(ScriptStruct__ConZ__ItemInventoryHandlingSounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemInventoryHandlingSounds, AudioEvent, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemInventoryHandlingSounds, 0x0008);
		}

		// struct FVisibilityReplication
		TEST_METHOD(ScriptStruct__ConZ__VisibilityReplication)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityReplication, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityReplication, UnknownData_ANKC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityReplication, RepHelper, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityReplication, 0x0008);
		}

		// struct FInventoryStackData
		TEST_METHOD(ScriptStruct__ConZ__InventoryStackData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, _stackClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, _approximateCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, _approximateMaxCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, _weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, UnknownData_SDIO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, _data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackData, UnknownData_JUEI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryStackData, 0x0080);
		}

		// struct FCraftingPart
		TEST_METHOD(ScriptStruct__ConZ__CraftingPart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingPart, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingPart, UnknownData_9PDU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingPart, 0x0030);
		}

		// struct FWindowMarker
		TEST_METHOD(ScriptStruct__ConZ__WindowMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, IsVaultable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, IsFortifiable, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, UnknownData_C0NY, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, WindowFortificationsType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, AdditionalMarkerIndicesToModify, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, DidIFailToCorrectlyPlaceWindowMarkers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, UnknownData_UL6R, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, Vertex1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, Vertex2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, FortificationOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, CollisionBoxVertBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, CollisionBoxHorzBias, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowMarker, UnknownData_0GH1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowMarker, 0x0050);
		}

		// struct FDialogueInfo
		TEST_METHOD(ScriptStruct__ConZ__DialogueInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueInfo, VoiceOver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueInfo, Text, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueInfo, Duration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueInfo, DialogType, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueInfo, UnknownData_MSV0, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueInfo, 0x0028);
		}

		// struct FWireDescription
		TEST_METHOD(ScriptStruct__ConZ__WireDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWireDescription, UnknownData_8LIN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWireDescription, 0x000C);
		}

		// struct FSplineDescription
		TEST_METHOD(ScriptStruct__ConZ__SplineDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineDescription, SplineComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineDescription, SplineMeshComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineDescription, SplineStartConnector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineDescription, SplineEndConnector, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineDescription, UnknownData_6FKQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineDescription, 0x0030);
		}

		// struct FLockData
		TEST_METHOD(ScriptStruct__ConZ__LockData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockMinigameClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, FailurePenaltyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, AreFamePointsRequired, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockDifficulty, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, UnknownData_W7QL, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, ExperienceOnSuccess, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, ExperienceOnFailure, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, UnknownData_2RJX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockedMessage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockpickMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockMeshOuter, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockMeshInner, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, RotatingTresholdAngle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, Duration, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, AngleTolerance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, PickBreakingMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, PickBreakingAtNumberOfFailedPushAttempts, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, NumberOfNeutralizationAttempts, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, NumRemainingNeutralizationAttempts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, LockHP, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, GlovePickBreakingModifier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLockData, UnknownData_Q06B, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLockData, 0x0088);
		}

		// struct FConZSquadEmblemElement
		TEST_METHOD(ScriptStruct__ConZ__ConZSquadEmblemElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblemElement, ShapeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblemElement, PrimaryColorIndex, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblemElement, SecondaryColorIndex, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblemElement, TertiaryColorIndex, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZSquadEmblemElement, 0x0004);
		}

		// struct FConZSquadEmblem
		TEST_METHOD(ScriptStruct__ConZ__ConZSquadEmblem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblem, Background, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadEmblem, Symbol, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZSquadEmblem, 0x0008);
		}

		// struct FCharacterActionReplicationHelper
		TEST_METHOD(ScriptStruct__ConZ__CharacterActionReplicationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionReplicationHelper, UnknownData_IUYV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterActionReplicationHelper, 0x0018);
		}

		// struct FPackedLocation
		TEST_METHOD(ScriptStruct__ConZ__PackedLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedLocation, UnknownData_T1Y9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedLocation, 0x0008);
		}

		// struct FPrisonerNearbyFoliageInstanceInfo
		TEST_METHOD(ScriptStruct__ConZ__PrisonerNearbyFoliageInstanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfo, InstancedMeshComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfo, PackedLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfo, TransformZeroOrigin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfo, FoliageAssetData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfo, UnknownData_TFUZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerNearbyFoliageInstanceInfo, 0x0050);
		}

		// struct FPrisonerNearbyFoliageInfo
		TEST_METHOD(ScriptStruct__ConZ__PrisonerNearbyFoliageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInfo, InstancesInfo, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerNearbyFoliageInfo, 0x0010);
		}

		// struct FPrisonerGroundMovementParameters
		TEST_METHOD(ScriptStruct__ConZ__PrisonerGroundMovementParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerGroundMovementParameters, MaxSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerGroundMovementParameters, Acceleration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerGroundMovementParameters, Deceleration, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerGroundMovementParameters, 0x000C);
		}

		// struct FPrisonerWaterMovementParameters
		TEST_METHOD(ScriptStruct__ConZ__PrisonerWaterMovementParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerWaterMovementParameters, MaxSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerWaterMovementParameters, Acceleration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerWaterMovementParameters, Deceleration, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerWaterMovementParameters, 0x000C);
		}

		// struct FSkillTemplate
		TEST_METHOD(ScriptStruct__ConZ__SkillTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, UnknownData_VVT5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, ClassName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, Level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, UnknownData_IBYS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTemplate, Experience, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillTemplate, 0x0038);
		}

		// struct FCharacterTemplate
		TEST_METHOD(ScriptStruct__ConZ__CharacterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Strength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Constitution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Dexterity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Intelligence, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Age, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Gender, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, UnknownData_0BAI, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, AppearanceIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, TattooIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, BreastSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, PenisSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, TeamIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, UnknownData_5DH4, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, BirthDate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, ArrestDate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Skills, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Item0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Item1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterTemplate, Item2, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterTemplate, 0x0088);
		}

		// struct FPrisonerNearbyFoliageInstanceInfoReplicated
		TEST_METHOD(ScriptStruct__ConZ__PrisonerNearbyFoliageInstanceInfoReplicated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfoReplicated, InstancedMeshComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerNearbyFoliageInstanceInfoReplicated, PackedLocation, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerNearbyFoliageInstanceInfoReplicated, 0x0010);
		}

		// struct FCharacterActionAck
		TEST_METHOD(ScriptStruct__ConZ__CharacterActionAck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAck, ActionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAck, SubactionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAck, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAck, EndState, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAck, UnknownData_QSLW, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterActionAck, 0x000C);
		}

		// struct FSkillEventWeapon
		TEST_METHOD(ScriptStruct__ConZ__SkillEventWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeapon, WeaponCategory, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventWeapon, 0x0001);
		}

		// struct FSkillEventWeaponProjectileHitTarget : public FSkillEventWeapon
		TEST_METHOD(ScriptStruct__ConZ__SkillEventWeaponProjectileHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, UnknownData_VYX4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, Target, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, Distance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, EnergyRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, IsHeadShot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, IsKill, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, WasSniping, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, Stance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, WindSpeedCategory, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, UnknownData_5XOW, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, ExperienceMultiplier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponProjectileHitTarget, UnknownData_SRQS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventWeaponProjectileHitTarget, 0x0028);
		}

		// struct FProjectilePointDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__ProjectilePointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, IsHeadUpperShot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, CanCauseHeadExplosion, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, UnknownData_KKZQ, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, EnergyLossPerClothesLayer, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, KillerLocation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, VictimLocation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, projectileClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, WeaponClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, IsFirstHit, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectilePointDamageEvent, UnknownData_SCWN, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectilePointDamageEvent, 0x0100);
		}

		// struct FPrisonerTeleportRequest
		TEST_METHOD(ScriptStruct__ConZ__PrisonerTeleportRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTeleportRequest, UnknownData_VLF7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerTeleportRequest, 0x001C);
		}

		// struct FInventoryPositionDataRepHelper
		TEST_METHOD(ScriptStruct__ConZ__InventoryPositionDataRepHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryPositionDataRepHelper, _dataClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryPositionDataRepHelper, _positionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryPositionDataRepHelper, _owner, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryPositionDataRepHelper, 0x0018);
		}

		// struct FConZBaseElementIdentifier
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseElementIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementIdentifier, BaseId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementIdentifier, ElementID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementIdentifier, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementIdentifier, UnknownData_5ART, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseElementIdentifier, 0x0020);
		}

		// struct FProjectileArrowData
		TEST_METHOD(ScriptStruct__ConZ__ProjectileArrowData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, AmmunitionArrowClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, ItemsHealth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, StiffnessFactor, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, FlightRotationCorrectionSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, DeviationDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, IsPartOfEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArrowData, UnknownData_BARF, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileArrowData, 0x0020);
		}

		// struct FPrisonerMountReplication
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMountReplication)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMountReplication, MountedSlot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMountReplication, _mountFlags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMountReplication, UnknownData_VIJM, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMountReplication, 0x0010);
		}

		// struct FPrisonerTurnMontageDescription
		TEST_METHOD(ScriptStruct__ConZ__PrisonerTurnMontageDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, AnimationL90, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, AnimationR90, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, TurnAngleCurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, BlendInTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, BlendOutTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, BlendOutTriggerTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTurnMontageDescription, PlayRate, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerTurnMontageDescription, 0x0030);
		}

		// struct FPrisonerMeleeAttackTypes
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMeleeAttackTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenNotMoving, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenWalking, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenJogging, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenRunning, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenFalling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenNotMoving, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenWalking, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenJogging, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenRunning, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenFalling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenNotMoving, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenWalking, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenJogging, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenRunning, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenFalling, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, BashMeleeAttackType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMeleeAttackTypes, WeaponBayonetMeleeAttackType, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMeleeAttackTypes, 0x0088);
		}

		// struct FUnlockLocation
		TEST_METHOD(ScriptStruct__ConZ__UnlockLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockLocation, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockLocation, 0x0030);
		}

		// struct FTriggeredEventData
		TEST_METHOD(ScriptStruct__ConZ__TriggeredEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriggeredEventData, UnknownData_WRXS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriggeredEventData, 0x0010);
		}

		// struct FQuickAccessData
		TEST_METHOD(ScriptStruct__ConZ__QuickAccessData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuickAccessData, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuickAccessData, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuickAccessData, IsThrowingMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuickAccessData, UnknownData_L58G, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuickAccessData, 0x0018);
		}

		// struct FClothesPartSet
		TEST_METHOD(ScriptStruct__ConZ__ClothesPartSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothesPartSet, ClothesParts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothesPartSet, 0x0050);
		}

		// struct FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes
		TEST_METHOD(ScriptStruct__ConZ__ExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes, ItemSpawnTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes, MaxNumberOfOccurrences, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes, UnknownData_X4WK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes, 0x0028);
		}

		// struct FExamineItemSpawnerData
		TEST_METHOD(ScriptStruct__ConZ__ExamineItemSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, MinQuantity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, MaxQuantity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, AllowDuplicates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, UnknownData_P2VW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, Spawner, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, MaxOccurrencesPerSpawnTypes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, ExpirationTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineItemSpawnerData, UnknownData_AUFR, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExamineItemSpawnerData, 0x00C0);
		}

		// struct FVirtualizedItemDescription
		TEST_METHOD(ScriptStruct__ConZ__VirtualizedItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualizedItemDescription, Item, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualizedItemDescription, 0x0008);
		}

		// struct FRoomDefinition
		TEST_METHOD(ScriptStruct__ConZ__RoomDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDefinition, RoomDoor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDefinition, Locker, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDefinition, C4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDefinition, UnknownData_GSA4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomDefinition, 0x0020);
		}

		// struct FSpawnerConfiguration
		TEST_METHOD(ScriptStruct__ConZ__SpawnerConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnerConfiguration, Spawner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnerConfiguration, MinimumItemsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnerConfiguration, MaximumItemsCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnerConfiguration, 0x0010);
		}

		// struct FRoomDifficultyConfiguration
		TEST_METHOD(ScriptStruct__ConZ__RoomDifficultyConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDifficultyConfiguration, Locks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDifficultyConfiguration, Zappers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDifficultyConfiguration, IsC4Present, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDifficultyConfiguration, UnknownData_6K8E, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomDifficultyConfiguration, PossibleSpawners, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomDifficultyConfiguration, 0x0038);
		}

		// struct FLadderMarker
		TEST_METHOD(ScriptStruct__ConZ__LadderMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, FirstStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, LastStep, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, UnknownData_3ZF5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, Edge, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, CapsuleBias, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, StepHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, StepWidth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, HitDetectionExtraAboveLastStep, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, HitDetectionExtraBelowFirstStep, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, HitDetectionExtraOnTheSides, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, HasEdge, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, IsNarrow, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, PhysicalSurfaceForSounds, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderMarker, UnknownData_I2K2, 0x0093);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLadderMarker, 0x00A0);
		}

		// struct FLandingDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__LandingDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingDamageEvent, ImpactVelocity, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingDamageEvent, UnknownData_GNSI, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandingDamageEvent, 0x00C0);
		}

		// struct FLandingEffectDataPerSeverity
		TEST_METHOD(ScriptStruct__ConZ__LandingEffectDataPerSeverity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerSeverity, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerSeverity, SpawnParticlesInDirectionOfVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerSeverity, UnknownData_0O5Z, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandingEffectDataPerSeverity, 0x0010);
		}

		// struct FLandingEffectDataPerPhysicalSurface
		TEST_METHOD(ScriptStruct__ConZ__LandingEffectDataPerPhysicalSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerPhysicalSurface, Light, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerPhysicalSurface, Medium, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandingEffectDataPerPhysicalSurface, Heavy, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandingEffectDataPerPhysicalSurface, 0x0030);
		}

		// struct FMedicalRecord
		TEST_METHOD(ScriptStruct__ConZ__MedicalRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, UnknownData_OSCB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, Patient, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, CheckSuccessful, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, UnknownData_V5L3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMedicalRecord, Diagnoses, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMedicalRecord, 0x0028);
		}

		// struct FMeleeAction
		TEST_METHOD(ScriptStruct__ConZ__MeleeAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, ActionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, UnknownData_0LWQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, Montage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, StartDelay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, BlockDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, OrientToTargetSpeedFactor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAction, RegainControlDurationModifier, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeAction, 0x0020);
		}

		// struct FMeleeDodge
		TEST_METHOD(ScriptStruct__ConZ__MeleeDodge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeDodge, UnknownData_5WUJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeDodge, 0x0010);
		}

		// struct FMeleeAttack
		TEST_METHOD(ScriptStruct__ConZ__MeleeAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttack, UnknownData_L7YR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeAttack, 0x0020);
		}

		// struct FMeleeWeaponDesc
		TEST_METHOD(ScriptStruct__ConZ__MeleeWeaponDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, Damage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, DamageAbsorptionMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, Sharpness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, PuppetDamageMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, KnockoutChance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, KnockoutCategory, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, UnknownData_H4T9, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, DamageMagnitudeChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, ImpactSoundCategory, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, UnknownData_QA9Z, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, ImpactEffects, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, HitReact, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, DamageToStructuresMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeWeaponDesc, UnknownData_WQDS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeWeaponDesc, 0x0038);
		}

		// struct FMeleePointDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__MeleePointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, WeaponDesc, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, AttackCapsuleAttachment, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, DetectHitCollisionType, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, UnknownData_K6AK, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, AttackMontage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, DamageMagnitudeType, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, UnknownData_F1MI, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, KnockoutChance, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, HitDirectionType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, UnknownData_26VM, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleePointDamageEvent, Weapon, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleePointDamageEvent, 0x0118);
		}

		// struct FCheckMeleeAttackCapsuleCollisionData
		TEST_METHOD(ScriptStruct__ConZ__CheckMeleeAttackCapsuleCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckMeleeAttackCapsuleCollisionData, UnknownData_T7MT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckMeleeAttackCapsuleCollisionData, 0x00D0);
		}

		// struct FAttackedByMeleeData
		TEST_METHOD(ScriptStruct__ConZ__AttackedByMeleeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackedByMeleeData, attacker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackedByMeleeData, Montage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackedByMeleeData, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackedByMeleeData, Duration, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackedByMeleeData, 0x0018);
		}

		// struct FMeleeSkillExperienceAwards
		TEST_METHOD(ScriptStruct__ConZ__MeleeSkillExperienceAwards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillExperienceAwards, Hit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillExperienceAwards, Kill, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillExperienceAwards, ComboHitMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillExperienceAwards, SkillLevelBonus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeSkillExperienceAwards, 0x0010);
		}

		// struct FMeleeSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__MeleeSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StartDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StartDelayPenaltyPerStrengthShortage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, AnimationPlayRateModifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, AnimationPlayRatePenaltyPerStrengthShortage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, RegainControlDurationModifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, DamageModifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, staminaDrain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaDrainPenaltyPerStrengthShortage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, staminaRecoveryDelay, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaRecoveryDuration, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowLinearity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StartDelayWhenExhausted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, AnimationPlayRateModifierWhenExhausted, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, RegainControlDurationModifierWhenExhausted, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, DamageModifierWhenExhausted, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, StaminaMultiplierPerExcessGearWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillParametersPerSkillLevel, ComboCooldownDuration, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeSkillParametersPerSkillLevel, 0x0098);
		}

		// struct FMeleeSkillAttack
		TEST_METHOD(ScriptStruct__ConZ__MeleeSkillAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, AttackTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, IgnoreReason, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, Montage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, MontageFP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, PitchRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, MaxDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, MinDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, MinStamina, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, OrientToTargetSpeedFactor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, RegainControlDurationMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, StaminaDrainMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, CanBeUsedAsInitialAttack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, CanBeUsedToCloseLargeDistanceToTarget, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, Solo, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, Mute, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, IsAlwaysCandidate, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAttack, UnknownData_FQY6, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeSkillAttack, 0x0078);
		}

		// struct FMeleeSkillDodge
		TEST_METHOD(ScriptStruct__ConZ__MeleeSkillDodge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillDodge, DodgeDirectionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillDodge, UnknownData_L73C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillDodge, Montage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillDodge, RegainControlDurationMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillDodge, UnknownData_RYHQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeSkillDodge, 0x0018);
		}

		// struct FMeleeSkillAnimations
		TEST_METHOD(ScriptStruct__ConZ__MeleeSkillAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, PrimaryIdleAnimationTP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, PrimaryIdleAnimationFP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, TiredIdleAnimationTP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, TiredIdleAnimationFP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, WalkingIdleAnimationTP, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, WalkingIdleAnimationFP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, BlockIdleAnimationTP, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, BlockIdleAnimationFP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, AimOffsetBlendSpaceTP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, AimOffsetBlendSpaceFP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, EnterCombatModeMontage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, LeaveCombatModeMontage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, InactivityIdleAnimations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, IdleToBlockBlendDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, BlockToIdleBlendDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, Attacks, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeSkillAnimations, Dodges, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeSkillAnimations, 0x0098);
		}

		// struct FMeshHitZone
		TEST_METHOD(ScriptStruct__ConZ__MeshHitZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshHitZone, UnknownData_D6AE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshHitZone, 0x001C);
		}

		// struct FMeshInstancesMap
		TEST_METHOD(ScriptStruct__ConZ__MeshInstancesMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancesMap, UnknownData_TJY1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancesMap, 0x0050);
		}

		// struct FMeshInstances
		TEST_METHOD(ScriptStruct__ConZ__MeshInstances)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstances, UnknownData_Q8B5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstances, 0x0050);
		}

		// struct FMeshInstance
		TEST_METHOD(ScriptStruct__ConZ__MeshInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstance, UnknownData_WCOI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstance, 0x0038);
		}

		// struct FMeshInstanceId
		TEST_METHOD(ScriptStruct__ConZ__MeshInstanceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstanceId, UnknownData_VXG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstanceId, 0x0008);
		}

		// struct FMeshItemData
		TEST_METHOD(ScriptStruct__ConZ__MeshItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshItemData, UnknownData_FQDD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshItemData, 0x0058);
		}

		// struct FMissionItemInfo
		TEST_METHOD(ScriptStruct__ConZ__MissionItemInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionItemInfo, ItemLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionItemInfo, ItemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionItemInfo, ShouldRemove, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionItemInfo, UnknownData_4BYW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionItemInfo, TimeToDestroy, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionItemInfo, 0x0038);
		}

		// struct FMissionLevelInfo
		TEST_METHOD(ScriptStruct__ConZ__MissionLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionLevelInfo, UnknownData_VCBV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionLevelInfo, 0x0010);
		}

		// struct FActiveManagers
		TEST_METHOD(ScriptStruct__ConZ__ActiveManagers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveManagers, MissionManagers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveManagers, 0x0010);
		}

		// struct FObjectiveData
		TEST_METHOD(ScriptStruct__ConZ__ObjectiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveData, ObjectiveAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveData, ObjectiveState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveData, UnknownData_WITP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveData, Description, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectiveData, 0x0030);
		}

		// struct FMissionReward
		TEST_METHOD(ScriptStruct__ConZ__MissionReward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionReward, RewardItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionReward, RewardFamePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionReward, RewardReceived, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionReward, UnknownData_8DZR, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionReward, 0x0018);
		}

		// struct FMissionData
		TEST_METHOD(ScriptStruct__ConZ__MissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionCategory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, UnknownData_7ZKB, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionOrdinalNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionState, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionFaction, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, UnknownData_B5BZ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionStartingLocations, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, IntendedNumberOfPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionCooldown, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, UnknownData_96XN, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionAssetId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, ObjectivesData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionReward, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionData, MissionBannerImage, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionData, 0x00B8);
		}

		// struct FObjectiveDataGroup
		TEST_METHOD(ScriptStruct__ConZ__ObjectiveDataGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveDataGroup, RewardItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveDataGroup, RewardFamePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveDataGroup, UnknownData_H4ZF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectiveDataGroup, 0x0018);
		}

		// struct FModularTooltipSectionData
		TEST_METHOD(ScriptStruct__ConZ__ModularTooltipSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularTooltipSectionData, UnknownData_UOIM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularTooltipSectionData, Elements, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularTooltipSectionData, 0x0028);
		}

		// struct FMountSlotEntryPoint
		TEST_METHOD(ScriptStruct__ConZ__MountSlotEntryPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, UnknownData_U1BJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, EntryTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, TransformSnapRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, DoorIndex, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, VehicleOpenDoorMontage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, VehicleCloseDoorMontage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, VehicleMountSlotMontage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, VehicleUnmountSlotMontage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, PrisonerOpenDoorMontage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, PrisonerCloseDoorMontage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, PrisonerMountSlotMontage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, PrisonerUnmountSlotMontage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountSlotEntryPoint, UnknownData_DPRZ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMountSlotEntryPoint, 0x0090);
		}

		// struct FNotificationDescriptionReplicationHelper
		TEST_METHOD(ScriptStruct__ConZ__NotificationDescriptionReplicationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationDescriptionReplicationHelper, UnknownData_I7MM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNotificationDescriptionReplicationHelper, 0x0018);
		}

		// struct FObjectiveTrackableData
		TEST_METHOD(ScriptStruct__ConZ__ObjectiveTrackableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveTrackableData, UnknownData_Q07S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectiveTrackableData, 0x0008);
		}

		// struct FBodyPartInjury
		TEST_METHOD(ScriptStruct__ConZ__BodyPartInjury)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyPartInjury, UnknownData_7C5Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyPartInjury, 0x0008);
		}

		// struct FPhysicalSurfaceData
		TEST_METHOD(ScriptStruct__ConZ__PhysicalSurfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceData, DirtinessFactor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceData, LandingImpactVelocityModifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceData, NoiseLoudnessModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceData, FootstepEnhancerChance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceData, 0x0010);
		}

		// struct FPhysicalSurfaceVehicleEffectsData
		TEST_METHOD(ScriptStruct__ConZ__PhysicalSurfaceVehicleEffectsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleTrail, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleTrailSlipModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleTrailDestructionDelay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleWave, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleWaveSlipModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceVehicleEffectsData, ParticleWaveDestructionDelay, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceVehicleEffectsData, 0x0020);
		}

		// struct FPhysicalSurfaceEffectsData
		TEST_METHOD(ScriptStruct__ConZ__PhysicalSurfaceEffectsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceEffectsData, Vehicle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceEffectsData, 0x0020);
		}

		// struct FReplicatedState
		TEST_METHOD(ScriptStruct__ConZ__ReplicatedState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedState, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedState, PlacedLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedState, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedState, IsPlacementAllowed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedState, UnknownData_7PL2, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedState, 0x0028);
		}

		// struct FPlaceableActorStateReplicationHelper
		TEST_METHOD(ScriptStruct__ConZ__PlaceableActorStateReplicationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableActorStateReplicationHelper, UnknownData_TI9Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlaceableActorStateReplicationHelper, 0x0008);
		}

		// struct FTilesData
		TEST_METHOD(ScriptStruct__ConZ__TilesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTilesData, HISMComponentMain, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTilesData, HISMComponentOutline, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTilesData, HISMComponentDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTilesData, 0x0018);
		}

		// struct FSizeVariatedTilesData : public FTilesData
		TEST_METHOD(ScriptStruct__ConZ__SizeVariatedTilesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSizeVariatedTilesData, UnknownData_214E, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSizeVariatedTilesData, 0x0040);
		}

		// struct FPlaceableIngredient
		TEST_METHOD(ScriptStruct__ConZ__PlaceableIngredient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, SpecificItems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, TagsCraftingTypes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, SpecificItemsCraftingTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, UnknownData_OEAB, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, Required, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, Satisfied, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceableIngredient, UnknownData_S8FZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlaceableIngredient, 0x0050);
		}

		// struct FPlayerRpcChannelServerDataResponseNetSerializer
		TEST_METHOD(ScriptStruct__ConZ__PlayerRpcChannelServerDataResponseNetSerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRpcChannelServerDataResponseNetSerializer, UnknownData_QGKF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRpcChannelServerDataResponseNetSerializer, 0x0008);
		}

		// struct FPlayerRpcChannelServerDataRequestNetSerializer
		TEST_METHOD(ScriptStruct__ConZ__PlayerRpcChannelServerDataRequestNetSerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRpcChannelServerDataRequestNetSerializer, UnknownData_FGJM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRpcChannelServerDataRequestNetSerializer, 0x0008);
		}

		// struct FPrisonerFPWeaponFOVSettings
		TEST_METHOD(ScriptStruct__ConZ__PrisonerFPWeaponFOVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerFPWeaponFOVSettings, UnknownData_M4R7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerFPWeaponFOVSettings, 0x0010);
		}

		// struct FInstrumentEvent
		TEST_METHOD(ScriptStruct__ConZ__InstrumentEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstrumentEvent, UnknownData_XRC2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstrumentEvent, 0x0010);
		}

		// struct FPrisonerAppearanceData
		TEST_METHOD(ScriptStruct__ConZ__PrisonerAppearanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceData, Race, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceData, UnknownData_X14K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceData, MeshSet, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceData, MaterialSet, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerAppearanceData, 0x0014);
		}

		// struct FPrisonerTattooMaterialSet
		TEST_METHOD(ScriptStruct__ConZ__PrisonerTattooMaterialSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTattooMaterialSet, DeluxeOnly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTattooMaterialSet, UnknownData_4EI7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTattooMaterialSet, HeadTattoo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTattooMaterialSet, TorsoTattoo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerTattooMaterialSet, LimbTattoo, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerTattooMaterialSet, 0x0020);
		}

		// struct FPrisonerAppearanceMaterialSet
		TEST_METHOD(ScriptStruct__ConZ__PrisonerAppearanceMaterialSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, HairMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, FacialHairMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, HeadMaterial, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, TorsoMaterial, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, ArmsMaterial, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, HandsMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, LegsMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, FeetMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMaterialSet, PenisMaterial, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerAppearanceMaterialSet, 0x0048);
		}

		// struct FPrisonerAppearanceMeshSet
		TEST_METHOD(ScriptStruct__ConZ__PrisonerAppearanceMeshSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, HairMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, FacialHairMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, HeadMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, TorsoMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, ArmsMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, HandsMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, LegsMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, FeetMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerAppearanceMeshSet, PenisMesh, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerAppearanceMeshSet, 0x0048);
		}

		// struct FWindowClimbingAnimationInfo
		TEST_METHOD(ScriptStruct__ConZ__WindowClimbingAnimationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, AnchorOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, UnknownData_KIYS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, AnchoringAnimation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, AnchoringAnimationTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, AnchoringDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, ClimbingMontage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MinWindowWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MinWindowHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MinSpacingToLeftWindowEdge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MinSpacingToRightWindowEdge, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MinWindowDistanceToFloor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, MaxWindowDistanceToFloor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, staminaDrain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowClimbingAnimationInfo, UnknownData_4LP0, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowClimbingAnimationInfo, 0x0048);
		}

		// struct FWindowInfo
		TEST_METHOD(ScriptStruct__ConZ__WindowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, TransformInverse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, Anchor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, Width, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, Height, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, UnknownData_JZ18, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, AnimationInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, AnimationIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowInfo, UnknownData_5QZI, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowInfo, 0x00D0);
		}

		// struct FWindowDetectionParams
		TEST_METHOD(ScriptStruct__ConZ__WindowDetectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, CharacterHeadLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, CharacterFeetLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, CharacterForwardVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, MaxHorzDistanceToWindow, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, MaxCharacterToWindowAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, HorzHitDetectionBias, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, HitDetectionBiasBelowWindow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowDetectionParams, HitDetectionBiasAboveWindow, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowDetectionParams, 0x0038);
		}

		// struct FLadderInfoRepData
		TEST_METHOD(ScriptStruct__ConZ__LadderInfoRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, LadderTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, CapsuleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, RootBoneOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, StepHeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, PhysicalSurfaceForSounds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, NumberOfSteps, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfoRepData, UnknownData_MZW0, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLadderInfoRepData, 0x0050);
		}

		// struct FLadderInfo
		TEST_METHOD(ScriptStruct__ConZ__LadderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, TransformInverse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, Edge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, CapsuleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, StepHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, StepWidth, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, HasEdge, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, IsNarrow, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, PhysicalSurfaceForSounds, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, UnknownData_KFCE, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, NumberOfSteps, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderInfo, HitStepIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLadderInfo, 0x00B0);
		}

		// struct FLadderDetectionParams
		TEST_METHOD(ScriptStruct__ConZ__LadderDetectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderDetectionParams, RayOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderDetectionParams, RayDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderDetectionParams, MaxHorzDistanceToLadder, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLadderDetectionParams, MaxRayToLadderAngle, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLadderDetectionParams, 0x0020);
		}

		// struct FPrisonerClimbAnimationInfo
		TEST_METHOD(ScriptStruct__ConZ__PrisonerClimbAnimationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, MinEdgeHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, MaxEdgeHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, VaultDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, MaxVaultLandHeightError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, AnchorOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, UnknownData_52JM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, AnchoringAnimation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, AnchoringAnimationTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, AnchoringDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, ClimbingMontage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, staminaDrain, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, RequiresEmptyLHand, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, RequiresEmptyRHand, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerClimbAnimationInfo, UnknownData_3FPG, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerClimbAnimationInfo, 0x0040);
		}

		// struct FClimbableObstacleInfo
		TEST_METHOD(ScriptStruct__ConZ__ClimbableObstacleInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, EdgeLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, EdgeHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, HWallNormal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, VWallNormal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, CapsuleLocationAtAnchor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, CapsuleRotationAtAnchor, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbableObstacleInfo, AnimationInfo, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClimbableObstacleInfo, 0x0080);
		}

		// struct FPrisonerInitialSkillInfo
		TEST_METHOD(ScriptStruct__ConZ__PrisonerInitialSkillInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerInitialSkillInfo, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerInitialSkillInfo, InitialLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerInitialSkillInfo, UnknownData_F3Z8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerInitialSkillInfo, InitialExperiencePoints, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerInitialSkillInfo, 0x0010);
		}

		// struct FPrisonerMovementSettings_Water
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Water)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, Slow, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, Medium, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, Fast, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, DivingSlow, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, DivingMedium, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, MaxSpeedMultiplierWhenDexterityIsMinimal, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, MaxSpeedMultiplierWhenDexterityIsMaximal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, AccelerationMultiplierWhenDexterityIsMinimal, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, AccelerationMultiplierWhenDexterityIsMaximal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, DecelerationMultiplierWhenDexterityIsMinimal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Water, DecelerationMultiplierWhenDexterityIsMaximal, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Water, 0x0054);
		}

		// struct FPrisonerMovementSettings_Air
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Air)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Air, JumpZVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Air, JumpZVelocityMultiplierWhenDexterityIsMinimal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Air, JumpZVelocityMultiplierWhenDexterityIsMaximal, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Air, 0x000C);
		}

		// struct FPrisonerMovementSettings_Ground_Standing_Walking
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Standing_Walking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Walking, Default, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Walking, MeleeCombat, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Walking, WeaponAiming, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Walking, WeaponAimingDownTheSights, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Standing_Walking, 0x0030);
		}

		// struct FPrisonerMovementSettings_Ground_Standing_Jogging
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Standing_Jogging)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Jogging, Default, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Jogging, MeleeCombat, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Jogging, WeaponAiming, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Standing_Jogging, 0x0024);
		}

		// struct FPrisonerMovementSettings_Ground_Standing_Running
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Standing_Running)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing_Running, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Standing_Running, 0x000C);
		}

		// struct FPrisonerMovementSettings_Ground_Standing
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Standing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing, Walking, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing, WalkLimping, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing, Jogging, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing, JogLimping, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Standing, Running, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Standing, 0x00B4);
		}

		// struct FPrisonerMovementSettings_Ground_Crouching_Walking
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Crouching_Walking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching_Walking, Default, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching_Walking, WeaponAiming, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching_Walking, WeaponAimingDownTheSights, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Crouching_Walking, 0x0024);
		}

		// struct FPrisonerMovementSettings_Ground_Crouching
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Crouching)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching, Walking, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching, WalkingFaster, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Crouching, WalkLimping, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Crouching, 0x006C);
		}

		// struct FPrisonerMovementSettings_Ground_Prone_Walking
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Prone_Walking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Prone_Walking, Default, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Prone_Walking, WeaponAiming, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Prone_Walking, WeaponAimingDownTheSights, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Prone_Walking, 0x0024);
		}

		// struct FPrisonerMovementSettings_Ground_Prone
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground_Prone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground_Prone, Walking, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground_Prone, 0x0024);
		}

		// struct FPrisonerMovementSettings_Ground
		TEST_METHOD(ScriptStruct__ConZ__PrisonerMovementSettings_Ground)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, Standing, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, Crouching, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, Prone, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, MaxSpeedMultiplierWhenDexterityIsMinimal, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, MaxSpeedMultiplierWhenDexterityIsMaximal, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, AccelerationMultiplierWhenDexterityIsMinimal, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, AccelerationMultiplierWhenDexterityIsMaximal, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, DecelerationMultiplierWhenDexterityIsMinimal, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, DecelerationMultiplierWhenDexterityIsMaximal, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, MaxSpeedWhenImmersedInWaterAndDexterityIsMinimal, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, MaxSpeedWhenImmersedInWaterAndDexterityIsMaximal, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, AccelerationMultiplierWhenImmersedInWater, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerMovementSettings_Ground, DecelerationMultiplierWhenImmersedInWater, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerMovementSettings_Ground, 0x016C);
		}

		// struct FPrisonerResponseIdleCompatibleAnimationSets
		TEST_METHOD(ScriptStruct__ConZ__PrisonerResponseIdleCompatibleAnimationSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleCompatibleAnimationSets, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleCompatibleAnimationSets, Rifle, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleCompatibleAnimationSets, RifleRelaxed, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleCompatibleAnimationSets, UnarmedCombat, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleCompatibleAnimationSets, Handgun, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerResponseIdleCompatibleAnimationSets, 0x0005);
		}

		// struct FPrisonerResponseIdleDescription
		TEST_METHOD(ScriptStruct__ConZ__PrisonerResponseIdleDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, Montages, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, PreMontageDelay, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, PostMontageDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, CooldownDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, CanBeUsedWhenItemIsInHands, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, CombatibleAnimationsSets, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerResponseIdleDescription, UnknownData_4EYY, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerResponseIdleDescription, 0x0028);
		}

		// struct FPrisonerRestingDataAutonomous
		TEST_METHOD(ScriptStruct__ConZ__PrisonerRestingDataAutonomous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingDataAutonomous, HasDisabledMovement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingDataAutonomous, UnknownData_DCX5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingDataAutonomous, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingDataAutonomous, EulerRotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerRestingDataAutonomous, 0x001C);
		}

		// struct FPrisonerRestingData
		TEST_METHOD(ScriptStruct__ConZ__PrisonerRestingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, IsRestingOnGround, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, HasChangedTransform, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, HasDisabledCapsuleCollision, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, RestingAnimation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingData, FeetIKOffset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerRestingData, 0x0010);
		}

		// struct FPrisonerRestingParameters
		TEST_METHOD(ScriptStruct__ConZ__PrisonerRestingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerRestingParameters, UnknownData_JK47, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerRestingParameters, 0x0060);
		}

		// struct FThrowingItemData
		TEST_METHOD(ScriptStruct__ConZ__ThrowingItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingItemData, UnknownData_ZB7Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThrowingItemData, 0x0010);
		}

		// struct FPrisonerDistanceTravelledContext
		TEST_METHOD(ScriptStruct__ConZ__PrisonerDistanceTravelledContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerDistanceTravelledContext, UnknownData_B4LO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerDistanceTravelledContext, 0x0018);
		}

		// struct FPrisonerViolation
		TEST_METHOD(ScriptStruct__ConZ__PrisonerViolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViolation, UnknownData_SQ15, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerViolation, 0x0010);
		}

		// struct FSkillExperienceChange
		TEST_METHOD(ScriptStruct__ConZ__SkillExperienceChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillExperienceChange, ExperienceChange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillExperienceChange, Time, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillExperienceChange, 0x0008);
		}

		// struct FActiveMovingThroughFoliageSounds
		TEST_METHOD(ScriptStruct__ConZ__ActiveMovingThroughFoliageSounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveMovingThroughFoliageSounds, UnknownData_XLQN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveMovingThroughFoliageSounds, StartAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveMovingThroughFoliageSounds, StopAudioEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveMovingThroughFoliageSounds, UnknownData_QIKR, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveMovingThroughFoliageSounds, 0x0020);
		}

		// struct FLocalOffsetCurves
		TEST_METHOD(ScriptStruct__ConZ__LocalOffsetCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalOffsetCurves, YawIdle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalOffsetCurves, YawMoving, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalOffsetCurves, PitchIdle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalOffsetCurves, PitchMoving, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalOffsetCurves, 0x0020);
		}

		// struct FPrisonerViewInfo : public FMinimalViewInfo
		TEST_METHOD(ScriptStruct__ConZ__PrisonerViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, WeaponFOV, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, WeaponFoveationOffset, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, MinViewYaw, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, MaxViewYaw, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, MinViewPitch, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerViewInfo, MaxViewPitch, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerViewInfo, 0x0600);
		}

		// struct FProjectileData
		TEST_METHOD(ScriptStruct__ConZ__ProjectileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, Caption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, Caliber, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, Weight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, MuzzleVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, BallisticCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, BallisticDragModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, UnknownData_Y4WS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, InitialDamage, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, PenetrationFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, GlancingAngle, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, AllowGlanceOrForceBounce, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, UnknownData_2THR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, BounceAngle, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, DamageType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, ArmorPiercingFactor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, ArmorDamageMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, CanCauseHeadExplosion, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileData, UnknownData_SF4O, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileData, 0x0058);
		}

		// struct FProjectileRadialDamageEvent : public FRadialDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__ProjectileRadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileRadialDamageEvent, ShotDirection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileRadialDamageEvent, UnknownData_MVS7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileRadialDamageEvent, 0x0050);
		}

		// struct FImpactEffectData
		TEST_METHOD(ScriptStruct__ConZ__ImpactEffectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffectData, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffectData, Decal, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactEffectData, 0x0010);
		}

		// struct FFiredShotDescriptionRep
		TEST_METHOD(ScriptStruct__ConZ__FiredShotDescriptionRep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFiredShotDescriptionRep, PackedData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFiredShotDescriptionRep, 0x0004);
		}

		// struct FRadioProgramData
		TEST_METHOD(ScriptStruct__ConZ__RadioProgramData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioProgramData, ProgramClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioProgramData, Program, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioProgramData, Chance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioProgramData, UnknownData_RQU7, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadioProgramData, 0x0018);
		}

		// struct FEngineeringEventData
		TEST_METHOD(ScriptStruct__ConZ__EngineeringEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringEventData, UnknownData_WP9K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineeringEventData, 0x0008);
		}

		// struct FRepairToolItemParams
		TEST_METHOD(ScriptStruct__ConZ__RepairToolItemParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairToolItemParams, RepairableItemTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairToolItemParams, StartRepairSound, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairToolItemParams, StopRepairSound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairToolItemParams, StartRepairMontage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepairToolItemParams, StopRepairMontage, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepairToolItemParams, 0x0040);
		}

		// struct FReplenishableResource
		TEST_METHOD(ScriptStruct__ConZ__ReplenishableResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResource, UnknownData_PCGX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplenishableResource, 0x0088);
		}

		// struct FReplenishableResourceSlotDescription
		TEST_METHOD(ScriptStruct__ConZ__ReplenishableResourceSlotDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplenishableResourceSlotDescription, UnknownData_JWGJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplenishableResourceSlotDescription, 0x001C);
		}

		// struct FRequestSpamFilter
		TEST_METHOD(ScriptStruct__ConZ__RequestSpamFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestSpamFilter, UnknownData_T0EW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestSpamFilter, 0x0014);
		}

		// struct FResourceNetworkGUID
		TEST_METHOD(ScriptStruct__ConZ__ResourceNetworkGUID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceNetworkGUID, UnknownData_7CDC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResourceNetworkGUID, 0x0004);
		}

		// struct FAreaResourceLockNetwork
		TEST_METHOD(ScriptStruct__ConZ__AreaResourceLockNetwork)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaResourceLockNetwork, LockOwnerGUID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaResourceLockNetwork, Area, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaResourceLockNetwork, 0x0020);
		}

		// struct FActorResourceLockNetwork
		TEST_METHOD(ScriptStruct__ConZ__ActorResourceLockNetwork)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorResourceLockNetwork, LockOwnerGUID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorResourceLockNetwork, ResourceGUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorResourceLockNetwork, ResourceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorResourceLockNetwork, 0x000C);
		}

		// struct FMeshInstancesRestoreOptions
		TEST_METHOD(ScriptStruct__ConZ__MeshInstancesRestoreOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancesRestoreOptions, RestoreInterval, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancesRestoreOptions, 0x0004);
		}

		// struct FRestorableMeshInstanceId
		TEST_METHOD(ScriptStruct__ConZ__RestorableMeshInstanceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestorableMeshInstanceId, UnknownData_MO5N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestorableMeshInstanceId, 0x0018);
		}

		// struct FRunningSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__RunningSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunningSkillParametersPerSkillLevel, MaxSpeedMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunningSkillParametersPerSkillLevel, StaminaConsumptionMultiplier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRunningSkillParametersPerSkillLevel, 0x0010);
		}

		// struct FSafeZoneConfigParams
		TEST_METHOD(ScriptStruct__ConZ__SafeZoneConfigParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, X, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, Y, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, Radius, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, BoxingDamageHandlingMethod, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, MeleeWeaponDamageHandlingMethod, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, ThrowingDamageHandlingMethod, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, ProjectileDamageHandlingMethod, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, ExplosiveDamageHandlingMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, DamageToBasesHandlingMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, DamageToVehiclesHandlingMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, PuppetDamageHandlingMethod, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, VehicleDamageHandlingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, PlayerLockpickingHandlingMethod, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, WorldLockpickingHandlingMethod, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneConfigParams, UnknownData_L717, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSafeZoneConfigParams, 0x0028);
		}

		// struct FSafeZoneParameters
		TEST_METHOD(ScriptStruct__ConZ__SafeZoneParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, RadiusSquared, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, Group, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, DamageHandlingMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, PlayerLockpickingHandlingMethod, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, WorldLockpickingHandlingMethod, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSafeZoneParameters, UnknownData_AOAW, 0x002F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSafeZoneParameters, 0x0030);
		}

		// struct FSearchPerItemData
		TEST_METHOD(ScriptStruct__ConZ__SearchPerItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, NeededMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, Probability, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, MinQuantity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, MaxQuantity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchPerItemData, UnknownData_KB39, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchPerItemData, 0x0028);
		}

		// struct FBodyPartData
		TEST_METHOD(ScriptStruct__ConZ__BodyPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyPartData, ProjectileDamageMultiplierPerBodyPart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyPartData, ExplosionDamageMultiplierPerBodyPart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyPartData, BodyPartMaxHealth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyPartData, UnknownData_S8Q9, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyPartData, 0x0014);
		}

		// struct FSentryPatrolPoint
		TEST_METHOD(ScriptStruct__ConZ__SentryPatrolPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSentryPatrolPoint, LocationRelativeToSentry, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSentryPatrolPoint, UnknownData_HCQV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSentryPatrolPoint, 0x0020);
		}

		// struct FServerUsedItem
		TEST_METHOD(ScriptStruct__ConZ__ServerUsedItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, quantity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, usage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, usageWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, CraftingType, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, SpawnHere, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUsedItem, UnknownData_GI4B, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUsedItem, 0x0018);
		}

		// struct FServerCraftableItem
		TEST_METHOD(ScriptStruct__ConZ__ServerCraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, UnknownData_LAFV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, MandatoryItems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, MandatoryParts, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, OptionalItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, OptionalParts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, ToolsNeeded, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, CustomCraftingMontage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, StartCraftingAudioEvent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, StopCraftingAudioEvent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCraftableItem, UnknownData_9V1G, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCraftableItem, 0x0088);
		}

		// struct FServerInfo
		TEST_METHOD(ScriptStruct__ConZ__ServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, Address, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, Port, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, UnknownData_5PVX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, PlayerCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, MaxPlayerCount, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, PasswordProtected, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, UnknownData_S7ZL, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, ping, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, InGameTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, UnknownData_JX4D, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, IsComplete, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, UnknownData_MX7U, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerInfo, 0x0050);
		}

		// struct FMultiplierByClass
		TEST_METHOD(ScriptStruct__ConZ__MultiplierByClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplierByClass, ObjectClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplierByClass, Multiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplierByClass, UnknownData_EDJN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplierByClass, 0x0010);
		}

		// struct FDamageMultipliers
		TEST_METHOD(ScriptStruct__ConZ__DamageMultipliers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageMultipliers, DamageCauserClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageMultipliers, DamageMultipliers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageMultipliers, 0x0018);
		}

		// struct FProjectileImpulseMultiplier
		TEST_METHOD(ScriptStruct__ConZ__ProjectileImpulseMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileImpulseMultiplier, ActorClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileImpulseMultiplier, Multiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileImpulseMultiplier, UnknownData_E16L, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileImpulseMultiplier, 0x0010);
		}

		// struct FSkillEventWeaponClearedMalfunction : public FSkillEventWeapon
		TEST_METHOD(ScriptStruct__ConZ__SkillEventWeaponClearedMalfunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventWeaponClearedMalfunction, malfunction, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventWeaponClearedMalfunction, 0x0002);
		}

		// struct FSkillEventThrownItemHitTarget
		TEST_METHOD(ScriptStruct__ConZ__SkillEventThrownItemHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventThrownItemHitTarget, Target, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventThrownItemHitTarget, 0x0008);
		}

		// struct FSkillEventItemThrown
		TEST_METHOD(ScriptStruct__ConZ__SkillEventItemThrown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventItemThrown, UnknownData_2C4E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventItemThrown, 0x0001);
		}

		// struct FSkillEventWeaponReload : public FSkillEventWeapon
		TEST_METHOD(ScriptStruct__ConZ__SkillEventWeaponReload)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventWeaponReload, 0x0001);
		}

		// struct FSkillEventWeaponFireShot : public FSkillEventWeapon
		TEST_METHOD(ScriptStruct__ConZ__SkillEventWeaponFireShot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventWeaponFireShot, 0x0001);
		}

		// struct FSkillRecord
		TEST_METHOD(ScriptStruct__ConZ__SkillRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, UnknownData_99W8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, ExperiencePoints, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, Level, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, counter, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRecord, UnknownData_BCS0, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillRecord, 0x000C);
		}

		// struct FParticleCollisionDecalData
		TEST_METHOD(ScriptStruct__ConZ__ParticleCollisionDecalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCollisionDecalData, Decal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCollisionDecalData, MinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCollisionDecalData, MaxSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCollisionDecalData, MinLifetime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCollisionDecalData, MaxLifetime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCollisionDecalData, 0x0018);
		}

		// struct FCompassSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__CompassSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompassSkillParametersPerSkillLevel, CompassSkillLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompassSkillParametersPerSkillLevel, 0x0001);
		}

		// struct FHandsPoseCorrections
		TEST_METHOD(ScriptStruct__ConZ__HandsPoseCorrections)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, RightHand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, RightFist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, RightFistInCombatMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, RightHandToIdleBlendAlpha, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, UnknownData_WCH1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, LeftHand, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, LeftFist, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, LeftFistInCombatMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, LeftHandToIdleBlendAlpha, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsPoseCorrections, UnknownData_HF2V, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHandsPoseCorrections, 0x0040);
		}

		// struct FObjectiveItem
		TEST_METHOD(ScriptStruct__ConZ__ObjectiveItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveItem, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectiveItem, UnknownData_35Q4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectiveItem, 0x0010);
		}

		// struct FTeamDeathmatchParameters
		TEST_METHOD(ScriptStruct__ConZ__TeamDeathmatchParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeamDeathmatchParameters, RoundScoreLimit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeamDeathmatchParameters, AreaRestrictionInterval, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeamDeathmatchParameters, AreaRestrictionDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeamDeathmatchParameters, AreaRestrictionStep, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeamDeathmatchParameters, BarrierHeatUpDuration, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeamDeathmatchParameters, 0x0014);
		}

		// struct FTeleportUserDataReplicator
		TEST_METHOD(ScriptStruct__ConZ__TeleportUserDataReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportUserDataReplicator, UserData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeleportUserDataReplicator, 0x0008);
		}

		// struct FTeleportRepData
		TEST_METHOD(ScriptStruct__ConZ__TeleportRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, RequestID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, IsInProgress, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, UnknownData_2F0H, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, Subject, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, TargetLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, TargetRotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, UnknownData_FB3W, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRepData, UserDataReplicator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeleportRepData, 0x0030);
		}

		// struct FThrowingPointDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__ThrowingPointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, ThrownActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, HitVelocity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, IsHeadUpperShot, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, DidPierce, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, UnknownData_W8LJ, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, DamageToStructuresMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrowingPointDamageEvent, UnknownData_OJEA, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThrowingPointDamageEvent, 0x00D0);
		}

		// struct FTireSurfaceAudioEntry
		TEST_METHOD(ScriptStruct__ConZ__TireSurfaceAudioEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireSurfaceAudioEntry, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireSurfaceAudioEntry, RelatedPhysicalSurfaces, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireSurfaceAudioEntry, 0x0018);
		}

		// struct FTournamentStats
		TEST_METHOD(ScriptStruct__ConZ__TournamentStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, UserProfileId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, PlayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, online, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, Alive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, UnknownData_YEPI, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, FamePoints, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, Kills, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, Deaths, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentStats, LastDeathTime, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTournamentStats, 0x0030);
		}

		// struct FTournamentParameters
		TEST_METHOD(ScriptStruct__ConZ__TournamentParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTournamentParameters, UnknownData_P0H0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTournamentParameters, 0x0010);
		}

		// struct FTractor4WAnimWheelData
		TEST_METHOD(ScriptStruct__ConZ__Tractor4WAnimWheelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTractor4WAnimWheelData, RollAngle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTractor4WAnimWheelData, SteerAngle, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTractor4WAnimWheelData, 0x0008);
		}

		// struct FTrapTriggerParams
		TEST_METHOD(ScriptStruct__ConZ__TrapTriggerParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrapTriggerParams, TriggeredActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrapTriggerParams, DeltaTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrapTriggerParams, UnknownData_93FP, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrapTriggerParams, 0x0010);
		}

		// struct FUsableObjectiveItem
		TEST_METHOD(ScriptStruct__ConZ__UsableObjectiveItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUsableObjectiveItem, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUsableObjectiveItem, UnknownData_1URD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUsableObjectiveItem, 0x0010);
		}

		// struct FUserProfileAuthorityInfo
		TEST_METHOD(ScriptStruct__ConZ__UserProfileAuthorityInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, ip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, ResponsePort, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, gameplayPort, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, UserProfileId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserProfileAuthorityInfo, authToken, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserProfileAuthorityInfo, 0x0040);
		}

		// struct FUserServerHistoryItem
		TEST_METHOD(ScriptStruct__ConZ__UserServerHistoryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserServerHistoryItem, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserServerHistoryItem, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserServerHistoryItem, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserServerHistoryItem, UnknownData_HZ6H, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserServerHistoryItem, 0x0028);
		}

		// struct FHeatSourceParameters
		TEST_METHOD(ScriptStruct__ConZ__HeatSourceParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, Temperature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, UnknownData_BH66, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, TemperatureCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, BurningSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, DistanceScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, InnerRadius, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSourceParameters, OuterRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeatSourceParameters, 0x0020);
		}

		// struct FVehicleCorpseBurningParticles
		TEST_METHOD(ScriptStruct__ConZ__VehicleCorpseBurningParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, Particles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, UnknownData_8EUP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, ParticlesTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, HeatSourceParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, HeatSourceId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleCorpseBurningParticles, UnknownData_3YZG, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleCorpseBurningParticles, 0x0070);
		}

		// struct FVehicleHitZoneData
		TEST_METHOD(ScriptStruct__ConZ__VehicleHitZoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, HitMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, UnknownData_GDTV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, SocketName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, HitZoneMaterial, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, DeactivatedHitZoneMaterial, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, UnknownData_Z5HT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, IsHitMeshAttached, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleHitZoneData, UnknownData_4URJ, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleHitZoneData, 0x0030);
		}

		// struct FVehiclePartDescription
		TEST_METHOD(ScriptStruct__ConZ__VehiclePartDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehiclePartDescription, PartType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehiclePartDescription, health, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehiclePartDescription, 0x000C);
		}

		// struct FVehicleTireEffectProperties
		TEST_METHOD(ScriptStruct__ConZ__VehicleTireEffectProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTireEffectProperties, TireLocalOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTireEffectProperties, UnknownData_IARN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTireEffectProperties, 0x0014);
		}

		// struct FVehicleMaterialParameterDescription
		TEST_METHOD(ScriptStruct__ConZ__VehicleMaterialParameterDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleMaterialParameterDescription, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleMaterialParameterDescription, MinValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleMaterialParameterDescription, MaxValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleMaterialParameterDescription, 0x0010);
		}

		// struct FVehicleEngineStallingParameters
		TEST_METHOD(ScriptStruct__ConZ__VehicleEngineStallingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, MinDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, MaxDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, StopEngineChance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ShouldStallingStopOnThrottleOrBreakRelease, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ShouldEngineStopOnThrottleOrBreakRelease, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, UnknownData_GZM1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ThrottleCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ThrottleCurveFrequencyMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, UnknownData_IHO7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, BrakeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, BrakeCurveFrequencyMultiplier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ForceMagnitudeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ForceMagnitudeScaleCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ForceMagnitudeScaleCurveFrequencyMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, ForceDirectionRandomizationAngle, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, AudioEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineStallingParameters, AudioEventTriggerTimeRatios, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineStallingParameters, 0x0058);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_N3GT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_WCA2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FVehicleImpactEffects
		TEST_METHOD(ScriptStruct__ConZ__VehicleImpactEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, HitImpulseThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, UnknownData_ZDG9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, ParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, ParticlesScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, UnknownData_LQ1Q, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, AudioEvent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, CameraShake, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, CameraShakeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleImpactEffects, UnknownData_VZ80, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleImpactEffects, 0x0038);
		}

		// struct FVehicleExhaustParticles
		TEST_METHOD(ScriptStruct__ConZ__VehicleExhaustParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustParticles, AttachSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustParticles, ParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustParticles, UnknownData_YYVR, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleExhaustParticles, 0x0018);
		}

		// struct FVehicleExhaustEffects
		TEST_METHOD(ScriptStruct__ConZ__VehicleExhaustEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, Particles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseMinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseMaxValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseSpeedTermMaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseAttackDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseSustainDuration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ThrottleImpulseReleaseDuration, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, ParticlesDestructionDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffects, UnknownData_HTFO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleExhaustEffects, 0x0048);
		}

		// struct FVehicleExhaustEffectsParameters
		TEST_METHOD(ScriptStruct__ConZ__VehicleExhaustEffectsParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, EngineStartedParticleSystem, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, EngineIdleParticleSystem, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, ThrottlePressedParticleSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, ThrottlePressedAudioEvent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, MinDurationBetweenThrottlePressedEffects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, DeactivationDelay, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleExhaustEffectsParameters, UnknownData_OO5U, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleExhaustEffectsParameters, 0x0070);
		}

		// struct FVehicleDamagedEffectsParameters
		TEST_METHOD(ScriptStruct__ConZ__VehicleDamagedEffectsParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, HealthRatioRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, ParticleSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, StartAudioEvent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, StopAudioEvent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, DeactivationDelay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamagedEffectsParameters, UnknownData_9PNB, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDamagedEffectsParameters, 0x0060);
		}

		// struct FVehicleSpawnerInfo
		TEST_METHOD(ScriptStruct__ConZ__VehicleSpawnerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, DatabaseId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, VehicleAssetId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, VehicleAlias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, UnknownData_QXDO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, VehicleTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, VehicleLastAccessTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerInfo, VehicleActor, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSpawnerInfo, 0x0070);
		}

		// struct FVersion
		TEST_METHOD(ScriptStruct__ConZ__Version)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVersion, Major, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVersion, Minor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVersion, Build, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVersion, Revision, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVersion, 0x0010);
		}

		// struct FWeaponBowDrawData
		TEST_METHOD(ScriptStruct__ConZ__WeaponBowDrawData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowDrawData, UnknownData_EXHJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponBowDrawData, 0x000C);
		}

		// struct FWeaponMalfunctionProbabilityCurves
		TEST_METHOD(ScriptStruct__ConZ__WeaponMalfunctionProbabilityCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionProbabilityCurves, ProbabilityCurve, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponMalfunctionProbabilityCurves, 0x03B8);
		}

		// struct FWeaponTypeAimOffset
		TEST_METHOD(ScriptStruct__ConZ__WeaponTypeAimOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeAimOffset, WeaponType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeAimOffset, UnknownData_800I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeAimOffset, AimOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponTypeAimOffset, 0x0018);
		}

		// struct FWeaponCheckAmmoData
		TEST_METHOD(ScriptStruct__ConZ__WeaponCheckAmmoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponCheckAmmoData, ActionSequenceClass, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponCheckAmmoData, 0x0008);
		}

		// struct FWeaponUnloadAmmoData
		TEST_METHOD(ScriptStruct__ConZ__WeaponUnloadAmmoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponUnloadAmmoData, ActionSequenceClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponUnloadAmmoData, AmmoCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponUnloadAmmoData, UnknownData_RTSK, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponUnloadAmmoData, 0x0010);
		}

		// struct FAmmunitionData
		TEST_METHOD(ScriptStruct__ConZ__AmmunitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmmunitionData, AmmunitionItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmmunitionData, health, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmmunitionData, maxHealth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmmunitionData, DefaultMaxHealth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmmunitionData, UnknownData_RQEG, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAmmunitionData, 0x0018);
		}

		// struct FWeaponSyncData
		TEST_METHOD(ScriptStruct__ConZ__WeaponSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSyncData, LoadedAmmoData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSyncData, InternalMagazineAmmoData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSyncData, LoadedProjectileClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSyncData, IsChamberOpened, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSyncData, UnknownData_VCF8, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponSyncData, 0x0030);
		}

		// struct FWorldEventDrawData
		TEST_METHOD(ScriptStruct__ConZ__WorldEventDrawData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldEventDrawData, UnknownData_O97Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldEventDrawData, 0x0050);
		}

		// struct FZombieRagdollAutoRecovery
		TEST_METHOD(ScriptStruct__ConZ__ZombieRagdollAutoRecovery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRagdollAutoRecovery, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRagdollAutoRecovery, UnknownData_TD64, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRagdollAutoRecovery, Timespan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieRagdollAutoRecovery, 0x0008);
		}

		// struct FSicknessRecord
		TEST_METHOD(ScriptStruct__ConZ__SicknessRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSicknessRecord, Diagnose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSicknessRecord, UnknownData_BAUP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSicknessRecord, Phase, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSicknessRecord, 0x0004);
		}

		// struct FDigestionItemRecord
		TEST_METHOD(ScriptStruct__ConZ__DigestionItemRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, UnknownData_PZJD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, Caption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, ItemClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, RemainingWeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, UnknownData_7RDZ, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, Weight, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, Volume, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, RemainingVolume, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, Water, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, IsWaterFromWorld, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDigestionItemRecord, UnknownData_YC52, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDigestionItemRecord, 0x0038);
		}

		// struct FHealingItemRecord
		TEST_METHOD(ScriptStruct__ConZ__HealingItemRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHealingItemRecord, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHealingItemRecord, UnknownData_IVYJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHealingItemRecord, Caption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHealingItemRecord, quantity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHealingItemRecord, UnknownData_IJ3M, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHealingItemRecord, 0x0020);
		}

		// struct FPrisonerBCUMonitorData
		TEST_METHOD(ScriptStruct__ConZ__PrisonerBCUMonitorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_7MAN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, LifeTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, TeethNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Strength, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Constitution, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Dexterity, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Intelligence, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StrengthGain, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ConstitutionGain, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DexterityGain, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StrengthRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ConstitutionRate, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DexterityRate, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_4KJ3, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Weight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, InitialWeight, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StorageFat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BFP, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_2HWD, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, MuscleMass, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WLTModifier, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_3T4W, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, FoodWeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, MaxFoodWeight, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StomachVolumeOccupied, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StomachVolumeMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StomachWater, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntestineVolumeOccupied, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntestineVolumeMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntestineWater, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ColonVolumeOccupied, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ColonVolumeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BladderVolumeOccupied, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BladderVolumeMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, weightLoad, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WLT, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WLTEasy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WLTDemanding, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WLTVeryDemanding, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BodyTempCategory, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BodyTempIncrease, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Blood, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, MinBlood, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Calories, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyCaloriesIntake, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesUsageSpeed, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_1ZHE, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesIdle, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesWalking, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesJogging, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesRunning, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, EnergyIntake, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, EnergyUsage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, MetabolicCalories, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Water, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_9GHM, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WaterIntake, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WaterUsage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyWaterIntake, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeFat, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeSaturatedFat, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeSugar, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeSodium, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeCarbs, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeFiber, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeProteins, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeAlcohol, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_0YXI, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyFatCalories, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailySugarCalories, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyCarbsCalories, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyProteinsCalories, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DailyAlcoholCalories, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_0W0P, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeVitamins, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, IntakeMinerals, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, MSR, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_0IVF, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CurrentStaminaChange, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, SCRIdle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, SCRWalking, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CurrentWaterConsumption, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WCRIdle, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WCRWalking, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WCRJogging, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WCRRunning, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CurrentCaloriesConsumption, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, HealingSpeed, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ViewRange, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, PerformanceFailure, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, SpeedModifier, 0x00E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StaminaRecoveryModifier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, StaminaConsumptionModifier, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WCRModifier, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, CaloriesBurntModifier, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, HoldingBreathModifier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, HealingSpeedModifier, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, HealthPointsModifier, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, ResistPoisonsModifier, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, Sicknesses, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, DigestionItems, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, HealingItems, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, AirTemp, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, WindSpeed, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, BCUDataInitializedOnServer, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrisonerBCUMonitorData, UnknownData_0GEW, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrisonerBCUMonitorData, 0x0128);
		}

		// struct FAchievementStats
		TEST_METHOD(ScriptStruct__ConZ__AchievementStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementStats, UnknownData_5PEH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAchievementStats, 0x0001);
		}

		// struct FAchievements
		TEST_METHOD(ScriptStruct__ConZ__Achievements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievements, UnknownData_QUWK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAchievements, 0x0001);
		}

		// struct FDetectionDelayTimerData
		TEST_METHOD(ScriptStruct__ConZ__DetectionDelayTimerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectionDelayTimerData, MinDetectionDelayBasedOnDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectionDelayTimerData, MaxDetectionDelayBasedOnDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectionDelayTimerData, MinDetectionDelayBasedOnVisibility, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectionDelayTimerData, MaxDetectionDelayBasedOnVisibility, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectionDelayTimerData, 0x0010);
		}

		// struct FAnimalData
		TEST_METHOD(ScriptStruct__ConZ__AnimalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalData, AnimalClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalData, AliveAnimals, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalData, DeadAnimals, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalData, 0x0028);
		}

		// struct FBaseInteractionEvent
		TEST_METHOD(ScriptStruct__ConZ__BaseInteractionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseInteractionEvent, UnknownData_I8DP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseInteractionEvent, 0x0008);
		}

		// struct FBaseDamageInteractionEvent : public FBaseInteractionEvent
		TEST_METHOD(ScriptStruct__ConZ__BaseDamageInteractionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseDamageInteractionEvent, UnknownData_F59P, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseDamageInteractionEvent, 0x0098);
		}

		// struct FCharacterActionAnimationDescription
		TEST_METHOD(ScriptStruct__ConZ__CharacterActionAnimationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterActionAnimationDescription, UnknownData_3BE5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterActionAnimationDescription, 0x0020);
		}

		// struct FHitByMeleeImpactSoundsInfo
		TEST_METHOD(ScriptStruct__ConZ__HitByMeleeImpactSoundsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitByMeleeImpactSoundsInfo, ImpactSourceSoundCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitByMeleeImpactSoundsInfo, DamageMagnitudeType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitByMeleeImpactSoundsInfo, ImpactBodyPart, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitByMeleeImpactSoundsInfo, UnknownData_20RO, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitByMeleeImpactSoundsInfo, ImpactPoint, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitByMeleeImpactSoundsInfo, 0x0010);
		}

		// struct FCharacterSpawneeInfo
		TEST_METHOD(ScriptStruct__ConZ__CharacterSpawneeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpawneeInfo, UnknownData_IV08, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpawneeInfo, 0x0010);
		}

		// struct FSpawnCharacterGroupInfo
		TEST_METHOD(ScriptStruct__ConZ__SpawnCharacterGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterGroupInfo, AvailablePawns, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterGroupInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterGroupInfo, NumOfCharactersToSpawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterGroupInfo, IgnoreLimit, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnCharacterGroupInfo, UnknownData_9NIM, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnCharacterGroupInfo, 0x0050);
		}

		// struct FCharacterStats
		TEST_METHOD(ScriptStruct__ConZ__CharacterStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, UnknownData_OUAB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, FamePoints, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, FameLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventScore, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventKills, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventTeamKills, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventDeaths, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventSuicides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventAssists, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, EventHeadshots, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, IsBanned, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStats, UnknownData_4X9Q, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterStats, 0x0030);
		}

		// struct FCharacterStatsItem
		TEST_METHOD(ScriptStruct__ConZ__CharacterStatsItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsItem, Rank, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsItem, UnknownData_ZOLH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsItem, PlayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsItem, CharacterStats, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterStatsItem, 0x0048);
		}

		// struct FSelectedChoppingTool
		TEST_METHOD(ScriptStruct__ConZ__SelectedChoppingTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectedChoppingTool, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectedChoppingTool, Tool, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectedChoppingTool, IsRequiredToBeInHands, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectedChoppingTool, UnknownData_YR4Q, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSelectedChoppingTool, 0x0040);
		}

		// struct FCircularSegmentContainer
		TEST_METHOD(ScriptStruct__ConZ__CircularSegmentContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircularSegmentContainer, SegmentWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircularSegmentContainer, SegmentCountOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircularSegmentContainer, Offset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCircularSegmentContainer, 0x0018);
		}

		// struct FCircularLayerData
		TEST_METHOD(ScriptStruct__ConZ__CircularLayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircularLayerData, CenterCutoffPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircularLayerData, Size, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCircularLayerData, 0x0008);
		}

		// struct FRepActionData
		TEST_METHOD(ScriptStruct__ConZ__RepActionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepActionData, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepActionData, IndexParameter, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepActionData, Version, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepActionData, 0x0003);
		}

		// struct FAnimalStationaryRotationRateSettings
		TEST_METHOD(ScriptStruct__ConZ__AnimalStationaryRotationRateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalStationaryRotationRateSettings, RunRotationRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalStationaryRotationRateSettings, TrotRotationRate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalStationaryRotationRateSettings, WalkRotationRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalStationaryRotationRateSettings, SneakRotationRate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalStationaryRotationRateSettings, StandRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalStationaryRotationRateSettings, 0x003C);
		}

		// struct FAnimalPaceSettings
		TEST_METHOD(ScriptStruct__ConZ__AnimalPaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalPaceSettings, RunSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalPaceSettings, TrotSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalPaceSettings, WalkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalPaceSettings, SneakSpeed, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalPaceSettings, 0x0010);
		}

		// struct FTurnMontages
		TEST_METHOD(ScriptStruct__ConZ__TurnMontages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTurnMontages, TurnInPlaceLeft, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTurnMontages, TurnInPlaceRight, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTurnMontages, 0x0010);
		}

		// struct FAnimalActionMontageData
		TEST_METHOD(ScriptStruct__ConZ__AnimalActionMontageData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalActionMontageData, SleepMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalActionMontageData, EatMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalActionMontageData, IntimidateMontage, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalActionMontageData, 0x0018);
		}

		// struct FCloseRangeAttackData
		TEST_METHOD(ScriptStruct__ConZ__CloseRangeAttackData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseRangeAttackData, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseRangeAttackData, RegainControlDurationModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseRangeAttackData, Range, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseRangeAttackData, Angle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseRangeAttackData, HorizontalHalfAngleRange, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloseRangeAttackData, 0x0018);
		}

		// struct FChargeAttackData
		TEST_METHOD(ScriptStruct__ConZ__ChargeAttackData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, RegainControlDurationModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, Range, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, Speed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, Height, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, lengthOverride, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeAttackData, UnknownData_T3U0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChargeAttackData, 0x0020);
		}

		// struct FContainerItemDescriptorData
		TEST_METHOD(ScriptStruct__ConZ__ContainerItemDescriptorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, UnknownData_60R0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, health, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, maxHealth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, quantity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, usage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, TotalWeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, DisplayUpperLeft, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, DisplayAmountLeft, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, DisplayAmountRight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, ShouldDisplayText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, UnknownData_83VW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, Icon, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContainerItemDescriptorData, UniqueItemId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContainerItemDescriptorData, 0x0050);
		}

		// struct FImageAssetToLoad
		TEST_METHOD(ScriptStruct__ConZ__ImageAssetToLoad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageAssetToLoad, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageAssetToLoad, FilePath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageAssetToLoad, 0x0018);
		}

		// struct FBaseElementSpawnParams
		TEST_METHOD(ScriptStruct__ConZ__BaseElementSpawnParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementSpawnParams, Quality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementSpawnParams, UnknownData_Z36P, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementSpawnParams, DoorUpgrades, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseElementSpawnParams, ShelterId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseElementSpawnParams, 0x0020);
		}

		// struct FBaseInteractionVisitor
		TEST_METHOD(ScriptStruct__ConZ__BaseInteractionVisitor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseInteractionVisitor, UnknownData_U92T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseInteractionVisitor, 0x0020);
		}

		// struct FConZBaseRepairAreaDuration
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseRepairAreaDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseRepairAreaDuration, NumberOfBaseElementsTreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseRepairAreaDuration, RepairDuration, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseRepairAreaDuration, 0x0008);
		}

		// struct FConZOnDemandElementData
		TEST_METHOD(ScriptStruct__ConZ__ConZOnDemandElementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZOnDemandElementData, ElementIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZOnDemandElementData, OwnerName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZOnDemandElementData, 0x0030);
		}

		// struct FConZPlacementQueryParams
		TEST_METHOD(ScriptStruct__ConZ__ConZPlacementQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, IsSnapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, MustBePlacedOnFoundations, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, CanEverBePlacedOnFoundations, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, CanBePlacedOnOtherBaseElements, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, UnknownData_PKS1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, User, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, MaxInstancesPerFlagArea, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZPlacementQueryParams, UnknownData_MT0F, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZPlacementQueryParams, 0x0018);
		}

		// struct FConZBaseElementInteractionData
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseElementInteractionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementInteractionData, BaseElementId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementInteractionData, BaseElementLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementInteractionData, RepairValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementInteractionData, InteractionTimestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseElementInteractionData, 0x0020);
		}

		// struct FConZBaseInteractionData
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseInteractionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseInteractionData, BaseId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseInteractionData, BaseLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseInteractionData, UnknownData_XCZF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseInteractionData, 0x0018);
		}

		// struct FConZBaseData
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseLocation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, UnknownData_JW7P, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseOwnerPlayerId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, IsOwnedByPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, UnknownData_XVGU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseBoundsMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, BaseBoundsMax, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseData, UnknownData_OF0D, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseData, 0x00F0);
		}

		// struct FConZFlagElementData
		TEST_METHOD(ScriptStruct__ConZ__ConZFlagElementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZFlagElementData, OvertakeEndTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZFlagElementData, OvertakerId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZFlagElementData, 0x0010);
		}

		// struct FConZBaseElementData
		TEST_METHOD(ScriptStruct__ConZ__ConZBaseElementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, ElementID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, OwnerPlayerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, ElementClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, HealthPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, Quality, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, DoorElementStateFlags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, UnknownData_4OHW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, DoorUpgrades, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, DoorAccessLevel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZBaseElementData, UnknownData_FTPI, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZBaseElementData, 0x0070);
		}

		// struct FConZSquadMember
		TEST_METHOD(ScriptStruct__ConZ__ConZSquadMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, UserProfileId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, Rank, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, online, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, InDanger, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, IsAlive, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadMember, UnknownData_PDP4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZSquadMember, 0x0010);
		}

		// struct FConZSquadPendingMember
		TEST_METHOD(ScriptStruct__ConZ__ConZSquadPendingMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadPendingMember, UserProfileId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZSquadPendingMember, UnknownData_693S, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZSquadPendingMember, 0x0010);
		}

		// struct FConZVehicleFlatTireWheelConfiguration
		TEST_METHOD(ScriptStruct__ConZ__ConZVehicleFlatTireWheelConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleFlatTireWheelConfiguration, FlatTireWheelData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleFlatTireWheelConfiguration, UnknownData_5H6A, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleFlatTireWheelConfiguration, FlatTire, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleFlatTireWheelConfiguration, OriginalTire, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZVehicleFlatTireWheelConfiguration, 0x0050);
		}

		// struct FConZVehicleTireParticleData
		TEST_METHOD(ScriptStruct__ConZ__ConZVehicleTireParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleTireParticleData, MinLateralSlip, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleTireParticleData, MaxLateralSlip, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleTireParticleData, MinLongitudinalSlip, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleTireParticleData, MaxLongitudinalSlip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZVehicleTireParticleData, ParticleScaleModifier, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZVehicleTireParticleData, 0x0014);
		}

		// struct FConZMapLocationProperties
		TEST_METHOD(ScriptStruct__ConZ__ConZMapLocationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConZMapLocationProperties, UnknownData_NGEN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConZMapLocationProperties, 0x0004);
		}

		// struct FCraftingPair
		TEST_METHOD(ScriptStruct__ConZ__CraftingPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingPair, CraftedItem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingPair, CraftingItem, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingPair, 0x0010);
		}

		// struct FPossibleItem
		TEST_METHOD(ScriptStruct__ConZ__PossibleItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, CraftingTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, Item, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, quantity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, usage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, usageWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, CraftingType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, UnknownData_Z0TI, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, QuantityVariation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, WeightVariation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, SpawnHere, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPossibleItem, UnknownData_HWMY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPossibleItem, 0x0030);
		}

		// struct FCraftingItem
		TEST_METHOD(ScriptStruct__ConZ__CraftingItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingItem, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingItem, PossibleItems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingItem, FillSound, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingItem, 0x0028);
		}

		// struct FCraftingSkillLevelData
		TEST_METHOD(ScriptStruct__ConZ__CraftingSkillLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingSkillLevelData, CraftingTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingSkillLevelData, ProcessingTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingSkillLevelData, Points, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingSkillLevelData, Probability_Add, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingSkillLevelData, Probability_Multiply, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingSkillLevelData, 0x0014);
		}

		// struct FRecipeAvailabilityState
		TEST_METHOD(ScriptStruct__ConZ__RecipeAvailabilityState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecipeAvailabilityState, UnknownData_DFVN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecipeAvailabilityState, 0x00C8);
		}

		// struct FRecipeItemState
		TEST_METHOD(ScriptStruct__ConZ__RecipeItemState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecipeItemState, UnknownData_E598, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecipeItemState, 0x001C);
		}

		// struct FItemClassesArray
		TEST_METHOD(ScriptStruct__ConZ__ItemClassesArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemClassesArray, ItemClasses, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemClassesArray, 0x0010);
		}

		// struct FCraftingRecipeCraftableItem
		TEST_METHOD(ScriptStruct__ConZ__CraftingRecipeCraftableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftableItem, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftableItem, EnoughSkill, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftableItem, UnknownData_L8VJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipeCraftableItem, 0x0010);
		}

		// struct FCraftingRecipeCraftingItem
		TEST_METHOD(ScriptStruct__ConZ__CraftingRecipeCraftingItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingItem, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingItem, quantity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingItem, isOptional, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingItem, UnknownData_YZCP, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipeCraftingItem, 0x0010);
		}

		// struct FCraftingRecipeCraftingIngredient
		TEST_METHOD(ScriptStruct__ConZ__CraftingRecipeCraftingIngredient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingIngredient, CraftingItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingIngredient, IsTool, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingIngredient, isOptional, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeCraftingIngredient, UnknownData_JEPA, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipeCraftingIngredient, 0x0018);
		}

		// struct FCraftingRecipe
		TEST_METHOD(ScriptStruct__ConZ__CraftingRecipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, CraftableItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, CraftingIngredients, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, SkillNeeded, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, SkillLevelNeeded, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, UnknownData_B5SQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, CraftableItem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipe, 0x0038);
		}

		// struct FGameEventRewardPoints
		TEST_METHOD(ScriptStruct__ConZ__GameEventRewardPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventRewardPoints, Cash, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventRewardPoints, Score, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventRewardPoints, FamePoints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventRewardPoints, 0x000C);
		}

		// struct FCTFParameters
		TEST_METHOD(ScriptStruct__ConZ__CTFParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, FlagResetDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, AllowReturns, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, UnknownData_YKLB, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, CaptureLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, PointsPerPickup, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, PointsPerCapture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCTFParameters, PointsPerReturn, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCTFParameters, 0x0030);
		}

		// struct FDamageDescription
		TEST_METHOD(ScriptStruct__ConZ__DamageDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageDescription, StructureDamageMultiplier, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageDescription, 0x0004);
		}

		// struct FDeathmatchParameters
		TEST_METHOD(ScriptStruct__ConZ__DeathmatchParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathmatchParameters, RoundScoreLimit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathmatchParameters, AreaRestrictionInterval, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathmatchParameters, AreaRestrictionDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathmatchParameters, AreaRestrictionStep, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathmatchParameters, BarrierHeatUpDuration, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeathmatchParameters, 0x0014);
		}

		// struct FDemolitionSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__DemolitionSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, TrapQuality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, DefuseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, ArmTrapXP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, DisarmOwnedTrapXP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, DisarmEnemyTrapXP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, AddTriggerXP, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, CraftTrapXP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, NumberOfWires, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, GreenWiresNumber, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, RedWiresNumber, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDemolitionSkillParametersPerSkillLevel, NumberOfDefuseAttempts, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDemolitionSkillParametersPerSkillLevel, 0x002C);
		}

		// struct FTooltipPanelData
		TEST_METHOD(ScriptStruct__ConZ__TooltipPanelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, WidgetClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, PanelType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, UnknownData_WNK0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, Layer, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, IsEditorOnly, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTooltipPanelData, UnknownData_Q0AW, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTooltipPanelData, 0x0020);
		}

		// struct FDialogInfoContainer
		TEST_METHOD(ScriptStruct__ConZ__DialogInfoContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogInfoContainer, DialogInfos, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogInfoContainer, 0x0010);
		}

		// struct FDistantLevelDescription
		TEST_METHOD(ScriptStruct__ConZ__DistantLevelDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, MeshStreamingBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, UnknownData_BEB1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, MeshBounds, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, CollisionMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, MeshLODs, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantLevelDescription, UnknownData_0DZV, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistantLevelDescription, 0x00A0);
		}

		// struct FDoorUnlockDataDescription
		TEST_METHOD(ScriptStruct__ConZ__DoorUnlockDataDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorUnlockDataDescription, DoorUnlockData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorUnlockDataDescription, ProbabilityCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorUnlockDataDescription, UnknownData_92HD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoorUnlockDataDescription, 0x0010);
		}

		// struct FDoorUnlockDataCollection
		TEST_METHOD(ScriptStruct__ConZ__DoorUnlockDataCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorUnlockDataCollection, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoorUnlockDataCollection, 0x0010);
		}

		// struct FDrivingSkillExperienceAwards
		TEST_METHOD(ScriptStruct__ConZ__DrivingSkillExperienceAwards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillExperienceAwards, StartEngine, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillExperienceAwards, PointsPerDrivenDistanceInKm, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrivingSkillExperienceAwards, 0x0008);
		}

		// struct FDrivingSkillEngineStallingParameters
		TEST_METHOD(ScriptStruct__ConZ__DrivingSkillEngineStallingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, Chance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, MinDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, MaxDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, StopEngineChance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ThrottleCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ThrottleCurveFrequencyMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, UnknownData_965X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, BrakeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, BrakeCurveFrequencyMultiplier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ForceMagnitudeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ForceMagnitudeScaleCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ForceMagnitudeScaleCurveFrequencyMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillEngineStallingParameters, ForceDirectionRandomizationAngle, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrivingSkillEngineStallingParameters, 0x0040);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_MAW4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_4F1P, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FDrivingSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__DrivingSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStartDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStartFailureChance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStartViaMotionDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStartViaMotionFailureChance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineReadyDelay, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineFailedToStartDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineFailedToStartNoFuelDelay, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineFailedToStartNoBatteryDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStalledDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, MaxSpeedModifier, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, ThrottleModifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, BrakeModifier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, GearboxSwitchTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, GearboxLatency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, SteerRaiseRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, SteerFallRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStallingByAccelerationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStallingByUpShiftParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrivingSkillParametersPerSkillLevel, EngineStallingWhenStartingViaMotion, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrivingSkillParametersPerSkillLevel, 0x0100);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_D0T9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, userName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_KO81, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_E5AS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_N9KC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_O64C, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FDropZoneParameters
		TEST_METHOD(ScriptStruct__ConZ__DropZoneParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, IntroAnnouncementDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, WarmupPhaseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, CrateDropDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, SearchPhaseTimeLimit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, CargoDropDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, CapturePhaseTimeLimit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, CargoOpeningDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, SkipKeyPhase, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, UnknownData_9M5A, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropZoneParameters, PointsPerActivation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropZoneParameters, 0x002C);
		}

		// struct FDummyCollisionCapsuleInfo
		TEST_METHOD(ScriptStruct__ConZ__DummyCollisionCapsuleInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, attachment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, RelativeTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, UnscaledRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, UnscaledHalfHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummyCollisionCapsuleInfo, UnknownData_J0PE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummyCollisionCapsuleInfo, 0x0050);
		}

		// struct FDamageOverTimeUpdateGroup
		TEST_METHOD(ScriptStruct__ConZ__DamageOverTimeUpdateGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageOverTimeUpdateGroup, UpdateInterval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageOverTimeUpdateGroup, UnknownData_LK1D, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageOverTimeUpdateGroup, 0x0018);
		}

		// struct FEnduranceSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__EnduranceSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnduranceSkillParametersPerSkillLevel, StaminaRecoveryMultiplier, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnduranceSkillParametersPerSkillLevel, 0x0008);
		}

		// struct FEngineeringSkillExperienceAwards
		TEST_METHOD(ScriptStruct__ConZ__EngineeringSkillExperienceAwards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillExperienceAwards, RepairExperienceMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillExperienceAwards, FillFuelExperienceMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillExperienceAwards, DrainFuelExperienceMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillExperienceAwards, ChargeBatteryExperienceMultiplier, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineeringSkillExperienceAwards, 0x0010);
		}

		// struct FEngineeringSkillParametersPerSkillLevel
		TEST_METHOD(ScriptStruct__ConZ__EngineeringSkillParametersPerSkillLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, RepairRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, RepairTimeMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, ResultQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, IngredientMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, ToolUsageMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, FillFuelDurationMultiplier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, DrainFuelDurationMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineeringSkillParametersPerSkillLevel, ChargeBatteryDurationMultiplier, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineeringSkillParametersPerSkillLevel, 0x0020);
		}

		// struct FExamineDataPerItemGroup
		TEST_METHOD(ScriptStruct__ConZ__ExamineDataPerItemGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExamineDataPerItemGroup, MaxNumberOfOccurrences, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExamineDataPerItemGroup, 0x0004);
		}

		// struct FExplosionRadialDamageEvent : public FRadialDamageEvent
		TEST_METHOD(ScriptStruct__ConZ__ExplosionRadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionRadialDamageEvent, UnknownData_SPYD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExplosionRadialDamageEvent, 0x0050);
		}

		// struct FFillItemWithReplenishableResourceInteractionData
		TEST_METHOD(ScriptStruct__ConZ__FillItemWithReplenishableResourceInteractionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, InteractionCaptionOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, BaseActionDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, ActionDurationPerAmountFilled, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, PrisonerFillingMontage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, StartItemNoiseAudioEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, StopItemNoiseAudioEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, StartReplenishableResourceNoiseAudioEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFillItemWithReplenishableResourceInteractionData, StopReplenishableResourceNoiseAudioEvent, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFillItemWithReplenishableResourceInteractionData, 0x0048);
		}

		// struct FFishSpawnInfo
		TEST_METHOD(ScriptStruct__ConZ__FishSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFishSpawnInfo, SpawnInstances, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFishSpawnInfo, CurrentlySpawned, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFishSpawnInfo, 0x0008);
		}

		// struct FFoliageAIPerceptionData
		TEST_METHOD(ScriptStruct__ConZ__FoliageAIPerceptionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageAIPerceptionData, CanCoverPrisoner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageAIPerceptionData, MaxUndetectedPrisonerStance, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageAIPerceptionData, 0x0002);
		}

		// struct FFoliageEffectsData
		TEST_METHOD(ScriptStruct__ConZ__FoliageEffectsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageEffectsData, StartMovingThroughFoliageAudioEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageEffectsData, StopMovingThroughFoliageAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageEffectsData, OneShotMovingThroughFoliageAudioEvent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageEffectsData, 0x0018);
		}

		// struct FFoliageGeneralData
		TEST_METHOD(ScriptStruct__ConZ__FoliageGeneralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageGeneralData, CollisionBoundsScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageGeneralData, CollisionBoundsOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageGeneralData, 0x0010);
		}

		// struct FFortificationMarkerParams
		TEST_METHOD(ScriptStruct__ConZ__FortificationMarkerParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, IsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, UnknownData_B8QC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, MarkerIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, Mesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortificationMarkerParams, UnknownData_4SPR, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortificationMarkerParams, 0x0030);
		}

		// struct FGameEventParticipantInfo
		TEST_METHOD(ScriptStruct__ConZ__GameEventParticipantInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, Prisoner, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, State, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, UnknownData_8VP6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, TeamIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, RoundStats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, EventStats, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, HurtBy, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, RepHelper, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParticipantInfo, UnknownData_BSM3, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventParticipantInfo, 0x0070);
		}

		// struct FGameEventParameters
		TEST_METHOD(ScriptStruct__ConZ__GameEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, AnnounceDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, CancelDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, RoundDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, RoundLimit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, WinLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, RespawnDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, TimeoutDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, MinParticipants, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, MaxParticipants, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, AllowRespawn, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, FriendlyFire, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, UnknownData_BFDH, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, TeamLimit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, EntryFee, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerEnemyKill, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerTeamKill, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerDeath, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerSuicide, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerAssist, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerHeadshot, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerRoundWin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsPerRank, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PointsForParticipation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, ScoreToFameConversionFactor, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PossiblePrimaryWeapons, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PossibleSecondaryWeapons, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PossibleTertiaryWeapons, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PossibleOutfits, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PossibleSupportItems, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, MandatoryGear, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, EventName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, EventDescription, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, PrerequisitesText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, WeaponText, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventParameters, RewardsText, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventParameters, 0x0188);
		}

		// struct FSpawnArea
		TEST_METHOD(ScriptStruct__ConZ__SpawnArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnArea, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnArea, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnArea, TeamIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnArea, 0x0014);
		}

		// struct FGameEventTeamColours
		TEST_METHOD(ScriptStruct__ConZ__GameEventTeamColours)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, TeamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, ParticipantStatsDarker, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, ParticipantStatsLighter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, ParticipantStatsHighlighted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, ParticipantStatsDisabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventTeamColours, ParticipantStatsMini, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventTeamColours, 0x0060);
		}

		// struct FGlobalAnimalSpawnInfo
		TEST_METHOD(ScriptStruct__ConZ__GlobalAnimalSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, MaxSpawnInstances, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, RespawnPeriod, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, NumberOfExistingWaypointGroups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, WorldMaxSpawnInstances, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, CurrentlyAssigned, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, CurrentlySpawned, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAnimalSpawnInfo, CurrentlyDead, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGlobalAnimalSpawnInfo, 0x001C);
		}

		// struct FPlayerPawnBirdInfo
		TEST_METHOD(ScriptStruct__ConZ__PlayerPawnBirdInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPawnBirdInfo, CoastalBirdsinProximity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPawnBirdInfo, ContinetalBirdsinProximity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPawnBirdInfo, VirtualAssignedCoastalBirds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPawnBirdInfo, VirtualAssignedContinentalBirds, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerPawnBirdInfo, 0x0010);
		}

		// struct FHeatSource
		TEST_METHOD(ScriptStruct__ConZ__HeatSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, UnknownData_TL8S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, parameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, FuelDuration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, FuelCapacity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, TimesUpdatedWithoutMoving, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeatSource, UnknownData_AQ5L, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeatSource, 0x0040);
		}

		// struct FPhysicalHitReactData
		TEST_METHOD(ScriptStruct__ConZ__PhysicalHitReactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalHitReactData, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalHitReactData, PelvisBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalHitReactData, InitialStrengthMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalHitReactData, BlendDuration, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalHitReactData, 0x0018);
		}

		// struct FHitReactLandingData
		TEST_METHOD(ScriptStruct__ConZ__HitReactLandingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, MinImpactSpeedToReact, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, UnknownData_IRI1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, MontageToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, RegainControlDurationMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, CanEverGoToRagdoll, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, UnknownData_X1Q4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, MinImpactSpeedForRagdoll, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, MinRagdollDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, MaxRagdollDuration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactLandingData, RagdollDurationPerSpeedUnit, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactLandingData, 0x0028);
		}

		// struct FHitReactBodyPartDataItem
		TEST_METHOD(ScriptStruct__ConZ__HitReactBodyPartDataItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, MontageToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, MontageToRespondTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, WeaponsToRespondTo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, FollowupMontage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, RegainControlDurationMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactBodyPartDataItem, UnknownData_25TE, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactBodyPartDataItem, 0x0040);
		}

		// struct FHitReactDirectionData
		TEST_METHOD(ScriptStruct__ConZ__HitReactDirectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, FrontHit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, LeftHit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, BackHit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, RightHit, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, RegainControlDurationMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactDirectionData, UnknownData_NJUJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactDirectionData, 0x0048);
		}

		// struct FHitReactMagnitudeData
		TEST_METHOD(ScriptStruct__ConZ__HitReactMagnitudeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactMagnitudeData, SmallHit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactMagnitudeData, MediumHit, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactMagnitudeData, LargeHit, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactMagnitudeData, KnockoutHit, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactMagnitudeData, 0x0120);
		}

		// struct FHitReactResult
		TEST_METHOD(ScriptStruct__ConZ__HitReactResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactResult, MontageToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactResult, FollowupMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactResult, RegainControlDurationMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactResult, UnknownData_Z13F, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactResult, 0x0018);
		}

		// struct FPhysicalAnimationDesc
		TEST_METHOD(ScriptStruct__ConZ__PhysicalAnimationDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationDesc, UnknownData_709T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationDesc, 0x0034);
		}

		// struct FInstanceManager
		TEST_METHOD(ScriptStruct__ConZ__InstanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceManager, UnknownData_QZ2P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstanceManager, 0x0058);
		}

		// struct FSpawnedItems
		TEST_METHOD(ScriptStruct__ConZ__SpawnedItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedItems, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedItems, Operation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedItems, UnknownData_9I5S, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedItems, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnedItems, 0x0018);
		}

		// struct FInteractionQueryParameters
		TEST_METHOD(ScriptStruct__ConZ__InteractionQueryParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionQueryParameters, InteractionLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionQueryParameters, IsInDroneMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionQueryParameters, UnknownData_GXIS, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionQueryParameters, 0x0010);
		}

		// struct FInventoryItemPositionPair
		TEST_METHOD(ScriptStruct__ConZ__InventoryItemPositionPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemPositionPair, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemPositionPair, Item, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryItemPositionPair, 0x0020);
		}

		// struct FInventoryContainer2DRepData
		TEST_METHOD(ScriptStruct__ConZ__InventoryContainer2DRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, ItemsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, Parent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, SizeX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, SizeY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, RepCounter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainer2DRepData, UnknownData_9OBA, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryContainer2DRepData, 0x0028);
		}

		// struct FInventoryContainerClothesData
		TEST_METHOD(ScriptStruct__ConZ__InventoryContainerClothesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerClothesData, ItemsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerClothesData, Parent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerClothesData, RepCounter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerClothesData, UnknownData_G34E, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryContainerClothesData, 0x0020);
		}

		// struct FInventoryContainerHandsHolstersData
		TEST_METHOD(ScriptStruct__ConZ__InventoryContainerHandsHolstersData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerHandsHolstersData, ItemsData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerHandsHolstersData, Parent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerHandsHolstersData, RepCounter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerHandsHolstersData, UnknownData_KGYD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryContainerHandsHolstersData, 0x0020);
		}

		// struct FInventoryContainerSelectionRepData
		TEST_METHOD(ScriptStruct__ConZ__InventoryContainerSelectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerSelectionRepData, Items, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerSelectionRepData, ItemsData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryContainerSelectionRepData, Parent, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryContainerSelectionRepData, 0x0028);
		}

		// struct FInventoryStackMemberData
		TEST_METHOD(ScriptStruct__ConZ__InventoryStackMemberData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackMemberData, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStackMemberData, Size, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryStackMemberData, 0x0008);
		}

		// struct FInventoryNodeWidgetData
		TEST_METHOD(ScriptStruct__ConZ__InventoryNodeWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, Slot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, UnknownData_3ILP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, NumberData, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, TextData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, IconData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, VisibilityData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryNodeWidgetData, UnknownData_24F6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryNodeWidgetData, 0x0038);
		}

		// struct FItemContainersArray
		TEST_METHOD(ScriptStruct__ConZ__ItemContainersArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemContainersArray, _itemContainers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemContainersArray, 0x0010);
		}

		// struct FItemContainerRepData
		TEST_METHOD(ScriptStruct__ConZ__ItemContainerRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemContainerRepData, Locks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemContainerRepData, RemainingNeutralizationAttemptsPerLock, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemContainerRepData, 0x0020);
		}

		// struct FItemContainersReplicationHelper
		TEST_METHOD(ScriptStruct__ConZ__ItemContainersReplicationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemContainersReplicationHelper, ItemContainerData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemContainersReplicationHelper, UnknownData_ZM4S, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemContainersReplicationHelper, 0x0070);
		}

		// struct FWeaponTypeMontage
		TEST_METHOD(ScriptStruct__ConZ__WeaponTypeMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeMontage, WeaponType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeMontage, UnknownData_4DKK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeMontage, Montage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponTypeMontage, SupportedYawAngles, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponTypeMontage, 0x0018);
		}

		// struct FVehicleWeaponAimingStanceTransitionMontages
		TEST_METHOD(ScriptStruct__ConZ__VehicleWeaponAimingStanceTransitionMontages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionMontages, Stance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionMontages, UnknownData_EHYD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionMontages, WeaponTypeMontages, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleWeaponAimingStanceTransitionMontages, 0x0018);
		}

		// struct FVehicleWeaponAimingStanceTransitionCurves
		TEST_METHOD(ScriptStruct__ConZ__VehicleWeaponAimingStanceTransitionCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionCurves, Stance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionCurves, UnknownData_J0FY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceTransitionCurves, SupportedYawAngles, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleWeaponAimingStanceTransitionCurves, 0x0010);
		}

		// struct FFirstPersonViewParameters
		TEST_METHOD(ScriptStruct__ConZ__FirstPersonViewParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirstPersonViewParameters, MinMaxViewPitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirstPersonViewParameters, MinMaxViewYaw, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirstPersonViewParameters, MinMaxViewYawIfBlocked, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirstPersonViewParameters, MinMaxViewPitchByYaw, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFirstPersonViewParameters, 0x0020);
		}

		// struct FVehicleWeaponAimingFirstPersonData
		TEST_METHOD(ScriptStruct__ConZ__VehicleWeaponAimingFirstPersonData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingFirstPersonData, ViewParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingFirstPersonData, LocationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingFirstPersonData, UnknownData_60AT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingFirstPersonData, LocationOffsetByYaw, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingFirstPersonData, LocationOffsetByPitch, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleWeaponAimingFirstPersonData, 0x0040);
		}

		// struct FBasePoseAimOffsetPair
		TEST_METHOD(ScriptStruct__ConZ__BasePoseAimOffsetPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePoseAimOffsetPair, UpperBodyPose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePoseAimOffsetPair, LowerBodyPose, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePoseAimOffsetPair, AimOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasePoseAimOffsetPair, 0x0018);
		}

		// struct FVehicleThirdPersonWeaponTypeData
		TEST_METHOD(ScriptStruct__ConZ__VehicleThirdPersonWeaponTypeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleThirdPersonWeaponTypeData, WeaponType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleThirdPersonWeaponTypeData, alwaysIgnorePreMountAimOffsets, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleThirdPersonWeaponTypeData, UnknownData_9PR1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleThirdPersonWeaponTypeData, IdlePoseAndAimOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleThirdPersonWeaponTypeData, 0x0038);
		}

		// struct FVehicleWeaponAimingThirdPersonData
		TEST_METHOD(ScriptStruct__ConZ__VehicleWeaponAimingThirdPersonData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingThirdPersonData, WeaponTypeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleWeaponAimingThirdPersonData, 0x0010);
		}

		// struct FVehicleWeaponAimingStanceData
		TEST_METHOD(ScriptStruct__ConZ__VehicleWeaponAimingStanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceData, StanceTransitionMontages, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceData, SupportedAnglesForTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceData, FirstPerson, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleWeaponAimingStanceData, ThirdPerson, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleWeaponAimingStanceData, 0x0070);
		}

		// struct FVehicleSpawnerDataBasedOnPreset
		TEST_METHOD(ScriptStruct__ConZ__VehicleSpawnerDataBasedOnPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, OverrideVehicleAssets, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, OverrideProbability, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, UnknownData_MPDB, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, VehicleAssets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, Probability, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerDataBasedOnPreset, UnknownData_B906, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSpawnerDataBasedOnPreset, 0x0028);
		}

		// struct FVehicleSpawnerMarker
		TEST_METHOD(ScriptStruct__ConZ__VehicleSpawnerMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerMarker, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerMarker, Spawner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerMarker, UnknownData_EO7I, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSpawnerMarker, 0x0060);
		}

		// struct FExpirableVehicleSpawner
		TEST_METHOD(ScriptStruct__ConZ__ExpirableVehicleSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpirableVehicleSpawner, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpirableVehicleSpawner, ExpirationTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpirableVehicleSpawner, quantity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpirableVehicleSpawner, VehicleAssetId, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpirableVehicleSpawner, UnknownData_6JIT, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpirableVehicleSpawner, 0x0028);
		}

		// struct FVehicleSpawnerData
		TEST_METHOD(ScriptStruct__ConZ__VehicleSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerData, VehicleAssets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerData, Probability, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnerData, UnknownData_C9BI, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSpawnerData, 0x0018);
		}

		// struct FClassesArray
		TEST_METHOD(ScriptStruct__ConZ__ClassesArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassesArray, Classes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassesArray, ProhibitedClasses, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassesArray, 0x0020);
		}

		// struct FWashItemData
		TEST_METHOD(ScriptStruct__ConZ__WashItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWashItemData, CleanItem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWashItemData, WashItemUsage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWashItemData, UnknownData_SF00, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWashItemData, 0x0010);
		}

		// struct FAnimalSpawnInfo
		TEST_METHOD(ScriptStruct__ConZ__AnimalSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalSpawnInfo, MaxSpawnInstances, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalSpawnInfo, SpawnProbability, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalSpawnInfo, 0x0008);
		}

		// struct FAnimalManagementData
		TEST_METHOD(ScriptStruct__ConZ__AnimalManagementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalManagementData, AnimalClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalManagementData, AliveAnimals, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalManagementData, DeadAnimals, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalManagementData, VirtualAnimalAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimalManagementData, UnknownData_WGEO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimalManagementData, 0x0030);
		}

		// struct FWaypoint
		TEST_METHOD(ScriptStruct__ConZ__Waypoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, UnknownData_I2GK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, Center, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, Radius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, ID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, AnimalsSpawnedNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, UnknownData_SNZG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypoint, SpawnedAnimals, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaypoint, 0x0030);
		}

		// struct FMeshMaterialPair
		TEST_METHOD(ScriptStruct__ConZ__MeshMaterialPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialPair, SkeletalMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialPair, EquippedMaterialOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMaterialPair, 0x0010);
		}

		// struct FScopeZoomLevelSettings
		TEST_METHOD(ScriptStruct__ConZ__ScopeZoomLevelSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScopeZoomLevelSettings, Magnification, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScopeZoomLevelSettings, DisplayedMagnification, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScopeZoomLevelSettings, UnknownData_0KBM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScopeZoomLevelSettings, PostProcessSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScopeZoomLevelSettings, 0x0560);
		}

		// struct FWeaponAttachmentAnimations
		TEST_METHOD(ScriptStruct__ConZ__WeaponAttachmentAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAttachmentAnimations, Add, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAttachmentAnimations, Remove, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponAttachmentAnimations, 0x0020);
		}

		// struct FWeaponSpreadItem
		TEST_METHOD(ScriptStruct__ConZ__WeaponSpreadItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadItem, Idle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadItem, Moving, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadItem, SpeedTarget, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponSpreadItem, 0x000C);
		}

		// struct FWeaponSpreadData
		TEST_METHOD(ScriptStruct__ConZ__WeaponSpreadData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadData, ByStance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadData, IncrementPerShot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadData, IncrementFromShotsMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadData, IncrementSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSpreadData, DecrementSpeed, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponSpreadData, 0x0040);
		}

		// struct FWeaponViewKickData
		TEST_METHOD(ScriptStruct__ConZ__WeaponViewKickData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, PitchMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, PitchMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, YawMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, YawMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, PitchDecrementSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponViewKickData, YawDecrementSpeed, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponViewKickData, 0x0018);
		}

		// struct FFireAnimationData
		TEST_METHOD(ScriptStruct__ConZ__FireAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, BodyWeaponAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, TimeBetweenShots, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, UnknownData_V4F6, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, BodyWeaponAnimationChamber, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, TimeForChamber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, UnknownData_KLKW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, Conditions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireAnimationData, ProbabilityWeightCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFireAnimationData, 0x00C0);
		}

		// struct FWeaponMalfunctionChances
		TEST_METHOD(ScriptStruct__ConZ__WeaponMalfunctionChances)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionChances, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponMalfunctionChances, 0x0038);
		}

		// struct FWeaponMalfunctionData
		TEST_METHOD(ScriptStruct__ConZ__WeaponMalfunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionData, UseCustomProbabilityCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionData, UnknownData_GXOB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionData, ProbabilityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionData, ClearMalfunctionSequence, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionData, ClearMalfunctionSequences, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponMalfunctionData, 0x00A8);
		}

		// struct FWeaponBowAimOffsets
		TEST_METHOD(ScriptStruct__ConZ__WeaponBowAimOffsets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowAimOffsets, DrawPercentage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponBowAimOffsets, 0x0018);
		}

		// struct FWeaponBowArmsShake
		TEST_METHOD(ScriptStruct__ConZ__WeaponBowArmsShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowArmsShake, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowArmsShake, FirstPerson, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponBowArmsShake, 0x0030);
		}

		// struct FWeaponBowStateDataReplicated
		TEST_METHOD(ScriptStruct__ConZ__WeaponBowStateDataReplicated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowStateDataReplicated, BowDrawPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowStateDataReplicated, UnknownData_KUDQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowStateDataReplicated, HoldTimeInFullDraw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowStateDataReplicated, WeaponBowState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponBowStateDataReplicated, UnknownData_156W, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponBowStateDataReplicated, 0x000C);
		}

		// struct FCharacterAndItemAnimation
		TEST_METHOD(ScriptStruct__ConZ__CharacterAndItemAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAndItemAnimation, CharacterMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAndItemAnimation, ItemMontage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterAndItemAnimation, 0x0010);
		}

		// struct FItemFirstPersonUpperBodyAnimationsData
		TEST_METHOD(ScriptStruct__ConZ__ItemFirstPersonUpperBodyAnimationsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandIdle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandWalk, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandWalkLimping, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandJog, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandJogLimping, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, StandRun, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, CrouchIdle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, CrouchWalk, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, CrouchWalkLimping, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemFirstPersonUpperBodyAnimationsData, ProneIdle, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemFirstPersonUpperBodyAnimationsData, 0x0050);
		}

		// struct FVehicleSpawnParameters
		TEST_METHOD(ScriptStruct__ConZ__VehicleSpawnParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnParameters, SpawnGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnParameters, MinSpawnLocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnParameters, MaxSpawnLocationOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSpawnParameters, AdminSpawnLocationOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSpawnParameters, 0x002C);
		}

		// struct FWheelBarrowParametersPerMovementPace
		TEST_METHOD(ScriptStruct__ConZ__WheelBarrowParametersPerMovementPace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, IsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, UnknownData_IVMX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, BaseMaxForwardSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, BaseMaxForwardSpeedLimping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, CanReverse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, UnknownData_NI1I, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, BaseMaxReverseSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, BaseMaxReverseSpeedLimping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, BaseMaxLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelBarrowParametersPerMovementPace, MinPrisonerStrength, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelBarrowParametersPerMovementPace, 0x0020);
		}

		// struct FZombieMeshVariation2
		TEST_METHOD(ScriptStruct__ConZ__ZombieMeshVariation2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieMeshVariation2, DressedMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieMeshVariation2, StrippedMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieMeshVariation2, 0x0010);
		}

		// struct FZombieRelaxedStanceAnimations
		TEST_METHOD(ScriptStruct__ConZ__ZombieRelaxedStanceAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceAnimations, WalkLoopAnimation, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieRelaxedStanceAnimations, 0x0008);
		}

		// struct FZombieRelaxedStanceVariation2
		TEST_METHOD(ScriptStruct__ConZ__ZombieRelaxedStanceVariation2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, Animations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, WalkAcceleration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, WalkDeceleration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, WalkSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, WalkSpeedInAnimation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, WalkTurnRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieRelaxedStanceVariation2, UnknownData_ZMFD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieRelaxedStanceVariation2, 0x0020);
		}

		// struct FZombieCombatStanceAnimations
		TEST_METHOD(ScriptStruct__ConZ__ZombieCombatStanceAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceAnimations, RunStartAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceAnimations, RunLoopAnimation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceAnimations, RunStopAnimation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieCombatStanceAnimations, 0x0018);
		}

		// struct FZombieCombatStanceVariation2
		TEST_METHOD(ScriptStruct__ConZ__ZombieCombatStanceVariation2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, Animations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, RunAcceleration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, RunDeceleration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, RunSpeed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, RunSpeedInAnimation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, RunTurnRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieCombatStanceVariation2, UnknownData_E7AA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieCombatStanceVariation2, 0x0030);
		}

		// struct FZombieTurnMontageDescription
		TEST_METHOD(ScriptStruct__ConZ__ZombieTurnMontageDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieTurnMontageDescription, MontageL90, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieTurnMontageDescription, MontageL180, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieTurnMontageDescription, MontageR90, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieTurnMontageDescription, MontageR180, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieTurnMontageDescription, TurnAngleCurveName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieTurnMontageDescription, 0x0028);
		}

		// struct FZombieAttackDescription
		TEST_METHOD(ScriptStruct__ConZ__ZombieAttackDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, PitchRange, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, MinDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, MaxDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, RegainControlMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieAttackDescription, UnknownData_O5Z6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieAttackDescription, 0x0020);
		}

		// struct FCorpseSkeletalMeshRepData
		TEST_METHOD(ScriptStruct__ConZ__CorpseSkeletalMeshRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, Mesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, Materials, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, UnknownData_0QSS, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, Transform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, AttachSocket, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseSkeletalMeshRepData, UnknownData_MLKW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCorpseSkeletalMeshRepData, 0x0070);
		}

		// struct FCorpseStaticMeshRepData
		TEST_METHOD(ScriptStruct__ConZ__CorpseStaticMeshRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, Mesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, Materials, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, UnknownData_D1CG, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, Transform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, AttachSocket, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpseStaticMeshRepData, UnknownData_7QT0, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCorpseStaticMeshRepData, 0x0070);
		}

		// struct FCorpsePoseData
		TEST_METHOD(ScriptStruct__ConZ__CorpsePoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, LinearVelocity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, AngularVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, Transforms, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, LinearVelocities, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, AngularVelocities, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCorpsePoseData, UnknownData_91UN, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCorpsePoseData, 0x0080);
		}

		// struct FItemObstructionTestCapsule
		TEST_METHOD(ScriptStruct__ConZ__ItemObstructionTestCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemObstructionTestCapsule, UnknownData_ZSXW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemObstructionTestCapsule, 0x0050);
		}

		// struct FWidgetDisplayInfo
		TEST_METHOD(ScriptStruct__ConZ__WidgetDisplayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetDisplayInfo, DisplayType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetDisplayInfo, UnknownData_P588, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetDisplayInfo, First, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetDisplayInfo, Second, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetDisplayInfo, 0x000C);
		}

		// struct FInteractionData
		TEST_METHOD(ScriptStruct__ConZ__InteractionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, IntegerData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, UnknownData_FVVP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, PointerData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, BoolData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, UnknownData_4G8J, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, TextData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, InteractionLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionData, VectorData, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionData, 0x0048);
		}

		// struct FCharacterCreationMenuContext
		TEST_METHOD(ScriptStruct__ConZ__CharacterCreationMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, IsPreferringMultiplayer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, UnknownData_BGU9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, ServerIp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, ServerResponsePort, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, ServerGameplayPort, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreationMenuContext, ServerAuthToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCreationMenuContext, 0x0030);
		}

		// struct FCommonMapNames
		TEST_METHOD(ScriptStruct__ConZ__CommonMapNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommonMapNames, MainMenu, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommonMapNames, CharacterCreationMenu, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommonMapNames, Singleplayer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommonMapNames, 0x0018);
		}

		// struct FGameplayRules
		TEST_METHOD(ScriptStruct__ConZ__GameplayRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowFirstperson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowThirdperson, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowCrosshair, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowGlobalChat, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowLocalChat, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowSquadChat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowMapScreen, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, UnknownData_RAFR, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, TimeToRemainInGameAfterLeaveGameRequest, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, TimeToRemainInGameAfterLeaveGameRequestWhileCaptured, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, LimitSquadMembers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowComa, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowVoting, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowTraps, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, HideKillNotification, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, AllowKillClaiming, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayRules, UnknownData_XZRH, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayRules, 0x0018);
		}

		// struct FPlayerLoginInfo
		TEST_METHOD(ScriptStruct__ConZ__PlayerLoginInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, UserId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, UserProfileId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, UserProfileName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, IsUserAdmin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, IsDeluxeUser, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, PlayAsDrone, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, UnknownData_HOFA, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, ServerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, ServerResponsePort, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, UnknownData_M82H, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, ServerUserProfileId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoginInfo, GameplayRules, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerLoginInfo, 0x0068);
		}

		// struct FEventsRankingStats
		TEST_METHOD(ScriptStruct__ConZ__EventsRankingStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, UnknownData_7MHO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, FamePoints, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, FameLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventScore, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventKills, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventTeamKills, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventDeaths, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventSuicides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventAssists, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, EventHeadshots, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, IsBanned, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStats, UnknownData_MBQZ, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsRankingStats, 0x0030);
		}

		// struct FEventsRankingStatsItem
		TEST_METHOD(ScriptStruct__ConZ__EventsRankingStatsItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStatsItem, Rank, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStatsItem, UnknownData_V2Z6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStatsItem, PlayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsRankingStatsItem, CharacterStats, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsRankingStatsItem, 0x0048);
		}

		// struct FSurvivalStats
		TEST_METHOD(ScriptStruct__ConZ__SurvivalStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, UnknownData_7IEZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HighestPositiveFamePoints, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DoorsClaimed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, AnimalsKilled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MinutesSurvived, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Kills, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Deaths, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LocksPicked, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, PuppetsKilled, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, GunsCrafted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, AmmoCrafted, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, BulletsCrafted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ArrowsCrafted, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ClothingCrafted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LongestKillDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MeleeKills, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ArcheryKills, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, PlayersKnockedOut, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, TotalDefecations, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, TotalUrinations, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LightsFired, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ContainersLooted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ItemsPutIntoContainers, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DeathsByPrisoners, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, AnimalsSkinned, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, FoodEaten, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DistanceTravelledByFoot, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, WoundsPatched, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ItemsPickedUp, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LiquidDrank, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, TeethLost, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, TotalCaloriesIntake, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ShotsFired, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ShotsHit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, RangeWeaponAccuracy, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Headshots, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MeleeWeaponSwings, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MeleeWeaponHits, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MeleeWeaponAccuracy, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MeleeWeaponsCrafted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DroneKills, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, SentryKills, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, PrisonerKills, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, PuppetsKnockedOut, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Diarrheas, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Vomits, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DistanceTravelledInVehicle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, MushroomsEaten, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HighestMuscleMass, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HighestFat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HeartAttacks, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Overdose, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, Starvation, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HighestDamageTaken, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HighestWeightCarried, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventsWon, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventsLost, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LowestNegativeFamePoints, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DistanceTravelledSwimming, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventsEnemyKills, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventsDeaths, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, FlagCaptures, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, CrowsKilled, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, SeagullsKilled, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, HorsesKilled, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, BoarsKilled, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, BearsKilled, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, GoatsKilled, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DeersKilled, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, ChickensKilled, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, RabbitsKilled, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, DonkeysKilled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, TimesMauledByABear, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, LongestAnimalKillDistance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventTeamKills, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, KillDeathRatio, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, EventsKillDeathRatio, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, AlcoholDrank, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivalStats, FoliageCut, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivalStats, 0x0140);
		}

		// struct FRespawnParameters
		TEST_METHOD(ScriptStruct__ConZ__RespawnParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, RandomLocationPrice, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SectorLocationPrice, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, ShelterLocationPrice, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SquadLocationPrice, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, RandomPriceModifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SectorPriceModifier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, HomePriceModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, RandomInitialTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SectorInitialTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, ShelterInitialTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SquadInitialTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, RandomCooldownTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SectorCooldownTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, ShelterCooldownTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SquadCooldownTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, RandomCooldownResetMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SectorCooldownResetMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, ShelterCooldownResetMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, SquadCooldownResetMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, CommitSuicideInitialTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, CommitSuicideCooldownTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRespawnParameters, CommitSuicideCooldownResetMultiplier, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRespawnParameters, 0x0058);
		}

		// struct FTeleportRequest
		TEST_METHOD(ScriptStruct__ConZ__TeleportRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRequest, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRequest, TargetLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRequest, TargetRotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportRequest, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeleportRequest, 0x0028);
		}

		// struct FWeaponReloadData
		TEST_METHOD(ScriptStruct__ConZ__WeaponReloadData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, IsQuick, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, UnknownData_R6U6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, Item, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, Item2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, count, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, UnknownData_CFNA, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, ReloadSequenceClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, AnimationPlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponReloadData, UnknownData_CYVE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponReloadData, 0x0030);
		}

		// struct FWeaponLoadStateSyncData
		TEST_METHOD(ScriptStruct__ConZ__WeaponLoadStateSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, ZeroRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, UnknownData_NHDR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, LoadedAmmoData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, InternalMagazineAmmoData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, LoadedAmmunitionItemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, LoadedProjectileClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, FiringMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, UnknownData_5K0D, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponLoadStateSyncData, malfunction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponLoadStateSyncData, 0x0040);
		}

		// struct FWeaponMalfunctionProbability
		TEST_METHOD(ScriptStruct__ConZ__WeaponMalfunctionProbability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionProbability, malfunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionProbability, UnknownData_B3NS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionProbability, Probability, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponMalfunctionProbability, 0x0008);
		}

		// struct FWeaponMalfunctionEventDescription
		TEST_METHOD(ScriptStruct__ConZ__WeaponMalfunctionEventDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponMalfunctionEventDescription, UnknownData_F7PH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponMalfunctionEventDescription, 0x0008);
		}

		// struct FFireShotDescription
		TEST_METHOD(ScriptStruct__ConZ__FireShotDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotDescription, UnknownData_7C6L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFireShotDescription, 0x0008);
		}

		// struct FFireShotProjectileData
		TEST_METHOD(ScriptStruct__ConZ__FireShotProjectileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, shootDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, ZeroRange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, Windage, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, RandomFactor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireShotProjectileData, ConeHalfAngle, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFireShotProjectileData, 0x0028);
		}

		// struct FEnvironmentDescription
		TEST_METHOD(ScriptStruct__ConZ__EnvironmentDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentDescription, EnvironmentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentDescription, IsUnderground, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvironmentDescription, 0x0002);
		}

		// struct FMeleeAttackCapsule
		TEST_METHOD(ScriptStruct__ConZ__MeleeAttackCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, attachment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, RelativeTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, UnscaledRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, UnscaledHalfHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsule, WeaponDesc, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeAttackCapsule, 0x0080);
		}

		// struct FMeleeAttackCapsuleHitInfo
		TEST_METHOD(ScriptStruct__ConZ__MeleeAttackCapsuleHitInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsuleHitInfo, MeleeAttackCapsule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsuleHitInfo, HitResult, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsuleHitInfo, DamageMagnitudeType, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeleeAttackCapsuleHitInfo, UnknownData_GNRD, 0x010D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeleeAttackCapsuleHitInfo, 0x0110);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_K1Y0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_9WOW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_XC24, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_JG0S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_F0SK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_33G1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FActorPerceptionUpdateInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, TargetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Target, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Stimulus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionUpdateInfo, 0x0048);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_M3SZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_W2IW, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_WIQG, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_B4IX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_LXAV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_BIBM, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_FGYS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_W7E8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_EIU6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_KZHK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_23RO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_LY9I, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_AKTT, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_6DON, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_OKNV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_6VD9, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_M7PS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_OACC, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_MPHC, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_UQSO, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_M1JL, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_2QCT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_2ETA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_TAXE, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_WT0B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_K1F5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_1ZMS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_3WNX, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_YECX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_I7ZG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_ZUA6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_GQRV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_LFWU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_T2SF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_JBLD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_VUWN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_9FGG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FTrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// struct FARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_SOJZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// struct FARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_06WY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_FAMZ, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// struct FARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_IR5I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_07BC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// struct FARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// struct FAREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// struct FARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// struct FARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_B2Z4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_RBRZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// struct FARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_5X5I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// struct FARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_M6MN, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// struct FARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_H81V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// struct FARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_OWPA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_DXGC, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_0N2M, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_P7SV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_JMCE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_YD0S, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_A8GF, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}
	};
}
