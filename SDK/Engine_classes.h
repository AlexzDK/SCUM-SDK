#pragma once

// Name: S, Version: N


/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.Player
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData_MY3S[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           PlayerController;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurrentNetSpeed;                                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfiguredInternetSpeed;                                   // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfiguredLanSpeed;                                        // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_46X5[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Player"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetConnection
// 0x1AA8 (FullSize[0x1AF0] - InheritedSize[0x0048])
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                  // 0x0048(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UNetDriver*                                  Driver;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PackageMapClass;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackageMap*                                 PackageMap;                                                // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UChannel*>                            OpenChannels;                                              // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              SentTemporaries;                                           // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                      ViewTarget;                                                // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      OwningActor;                                               // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPacket;                                                 // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      InternalAck : 1;                                           // 0x00A4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IVUG[0xBB];                                    // 0x00A5(0x00BB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FUniqueNetIdRepl                            PlayerId;                                                  // 0x0160(0x0028) (HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9V49[0x48];                                    // 0x0188(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastReceiveTime;                                           // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QZ4Z[0x1340];                                  // 0x01D8(0x1340) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UChannel*>                            ChannelsToTick;                                            // 0x1518(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YSV3[0x5C8];                                   // 0x1528(0x05C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NetConnection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetDriver
// 0x0720 (FullSize[0x0748] - InheritedSize[0x0028])
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData_1ZRQ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NetConnectionClassName;                                    // 0x0030(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ReplicationDriverClassName;                                // 0x0040(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDownloadSize;                                           // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClampListenServerTickRate : 1;                            // 0x0054(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I151[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NetServerMaxTickRate;                                      // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxNetTickRate;                                            // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxInternetClientRate;                                     // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxClientRate;                                             // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerTravelPause;                                         // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpawnPrioritySeconds;                                      // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RelevantTimeout;                                           // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KeepAliveTime;                                             // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialConnectTimeout;                                     // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConnectionTimeout;                                         // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                     // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNoTimeouts;                                               // 0x0084(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeverApplyNetworkEmulationSettings;                       // 0x0085(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6F9J[0x2];                                     // 0x0086(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              ServerConnection;                                          // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNetConnection*>                      ClientConnections;                                         // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VY1Y[0x60];                                    // 0x00A0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RecentlyDisconnectedTrackingTime;                          // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2QAG[0x3C];                                    // 0x0104(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      World;                                                     // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                                    WorldPackage;                                              // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K2BF[0x20];                                    // 0x0150(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      NetConnectionClass;                                        // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ReplicationDriverClass;                                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EOAN[0x10];                                    // 0x0180(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       NetDriverName;                                             // 0x0190(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChannelDefinition>                  ChannelDefinitions;                                        // 0x0198(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FChannelDefinition>      ChannelDefinitionMap;                                      // 0x01A8(0x0050) (NativeAccessSpecifierPublic)
	TArray<class UChannel*>                            ActorChannelPool;                                          // 0x01F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DHD0[0x8];                                     // 0x0208(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Time;                                                      // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X1AP[0x4D4];                                   // 0x0214(0x04D4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UReplicationDriver*                          ReplicationDriver;                                         // 0x06E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_FF8M[0x58];                                    // 0x06F0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NetDriver"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintFunctionLibrary : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintFunctionLibrary"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintAsyncActionBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UBlueprintAsyncActionBase : public UObject
{
public:
	unsigned char                                      UnknownData_ICZ8[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintAsyncActionBase"));
		return ptr;
	}



	void Activate();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.OnlineBlueprintCallProxyBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Actor
// 0x01F8 (FullSize[0x0220] - InheritedSize[0x0028])
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                          // 0x0028(0x0030) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      bNetTemporary : 1;                                         // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetStartup : 1;                                           // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                  // 0x0058(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysRelevant : 1;                                       // 0x0058(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicateMovement : 1;                                    // 0x0058(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHidden : 1;                                               // 0x0058(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bTearOff : 1;                                              // 0x0058(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bExchangedRoles : 1;                                       // 0x0058(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetLoadOnClient : 1;                                      // 0x0059(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                 // 0x0059(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelevantForNetworkReplays : 1;                            // 0x0059(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelevantForLevelBounds : 1;                               // 0x0059(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplayRewindable : 1;                                     // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                             // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                              // 0x0059(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bCanBeDamaged : 1;                                         // 0x0059(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bBlockInput : 1;                                           // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideWhenPlacing : 1;                                   // 0x005A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                    // 0x005A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;            // 0x005A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoresOriginShifting : 1;                                // 0x005A(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableAutoLODGeneration : 1;                              // 0x005A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsEditorOnlyActor : 1;                                    // 0x005A(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActorSeamlessTraveled : 1;                                // 0x005A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicates : 1;                                           // 0x005B(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bCanBeInCluster : 1;                                       // 0x005B(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;               // 0x005B(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_N7GY : 5;                                      // 0x005B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_CMAK : 2;                                      // 0x005C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bActorEnableCollision : 1;                                 // 0x005C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bActorIsBeingDestroyed : 1;                                // 0x005C(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	Engine_EActorUpdateOverlapsMethod                  UpdateOverlapsMethodDuringLevelStreaming;                  // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	Engine_EActorUpdateOverlapsMethod                  DefaultUpdateOverlapsMethodDuringLevelStreaming;           // 0x005E(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ENetRole>                       RemoteRole;                                                // 0x005F(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRepMovement                                ReplicatedMovement;                                        // 0x0060(0x0034) (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	float                                              InitialLifeSpan;                                           // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CustomTimeDilation;                                        // 0x0098(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6LOA[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRepAttachment                              AttachmentReplication;                                     // 0x00A0(0x0040) (Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class AActor*                                      Owner;                                                     // 0x00E0(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       NetDriverName;                                             // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_ENetRole>                       Role;                                                      // 0x00F0(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ENetDormancy>                   NetDormancy;                                               // 0x00F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ESpawnActorCollisionHandlingMethod          SpawnCollisionHandlingMethod;                              // 0x00F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoReceiveInput;                                          // 0x00F3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InputPriority;                                             // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputComponent*                             InputComponent;                                            // 0x00F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetCullDistanceSquared;                                    // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NetTag;                                                    // 0x0104(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetUpdateFrequency;                                        // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinNetUpdateFrequency;                                     // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetPriority;                                               // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_86O1[0x4];                                     // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       Instigator;                                                // 0x0118(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                              Children;                                                  // 0x0120(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class USceneComponent*                             RootComponent;                                             // 0x0130(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                  // 0x0138(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_3GPG[0x8];                                     // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Layers;                                                    // 0x0150(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                           // 0x0160(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_WW3P[0x8];                                     // 0x0168(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Tags;                                                      // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakeAnyDamage;                                           // 0x0180(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakePointDamage;                                         // 0x0181(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakeRadialDamage;                                        // 0x0182(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorBeginOverlap;                                       // 0x0183(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorEndOverlap;                                         // 0x0184(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnBeginCursorOver;                                         // 0x0185(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndCursorOver;                                           // 0x0186(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnClicked;                                                 // 0x0187(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnReleased;                                                // 0x0188(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchBegin;                                         // 0x0189(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnd;                                           // 0x018A(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnter;                                         // 0x018B(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchLeave;                                         // 0x018C(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorHit;                                                // 0x018D(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnDestroyed;                                               // 0x018E(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndPlay;                                                 // 0x018F(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CEDX[0x60];                                    // 0x0190(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UActorComponent*>                     InstanceComponents;                                        // 0x01F0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                // 0x0200(0x0010) (ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ASRX[0x10];                                    // 0x0210(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Actor"));
		return ptr;
	}



	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetNetDormancy(TEnumAsByte<Engine_ENetDormancy> NewDormancy);
	void SetLifeSpan(float InLifespan);
	void SetAutoDestroyWhenFinished(bool bVal);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	TArray<class UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule);
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<Engine_ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	TEnumAsByte<Engine_ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByInterface(class UClass* Interface);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors, bool bResetArray);
	void GetAllChildActors(TArray<class AActor*>* ChildActors, bool bIncludeDescendants);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent, bool bIncludeFromChildActors);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform);
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponentByClass(class UClass* Class, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish);
	bool ActorHasTag(const struct FName& Tag);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.OnlineEngineInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UOnlineEngineInterface : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.OnlineEngineInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.OnlineSession
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UOnlineSession : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.OnlineSession"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorComponent
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData_GOWL[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                      // 0x0030(0x0030) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ComponentTags;                                             // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_XADZ[0x4];                                     // 0x0080(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UCSSerializationIndex;                                     // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_GQDI : 3;                                      // 0x0088(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNetAddressable : 1;                                       // 0x0088(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bReplicates : 1;                                           // 0x0088(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RTQ4 : 3;                                      // 0x0088(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_4HMD : 7;                                      // 0x0089(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoActivate : 1;                                         // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsActive : 1;                                             // 0x008A(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEditableWhenInherited : 1;                                // 0x008A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CILY : 1;                                      // 0x008A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanEverAffectNavigation : 1;                              // 0x008A(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7KG6 : 1;                                      // 0x008A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsEditorOnly : 1;                                         // 0x008A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YY3E[0x1];                                     // 0x008B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EComponentCreationMethod                    CreationMethod;                                            // 0x008C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentActivated;                                      // 0x008D(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentDeactivated;                                    // 0x008E(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UJ5H[0x1];                                     // 0x008F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                     // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_OJOK[0x10];                                    // 0x00A0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ActorComponent"));
		return ptr;
	}



	void ToggleActive();
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickIntervalAndCooldown(float TickInterval);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneComponent
// 0x0148 (FullSize[0x01F8] - InheritedSize[0x00B0])
class USceneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_5D2M[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                             // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             AttachParent;                                              // 0x00C0(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       AttachSocketName;                                          // 0x00C8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                     AttachChildren;                                            // 0x00D0(0x0010) (ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                    // 0x00E0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DYG4[0x2C];                                    // 0x00F0(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RelativeLocation;                                          // 0x011C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                                    RelativeRotation;                                          // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                     RelativeScale3D;                                           // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                     ComponentVelocity;                                         // 0x0140(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComponentToWorldUpdated : 1;                              // 0x014C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_6UAD : 1;                                      // 0x014C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAbsoluteLocation : 1;                                     // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAbsoluteRotation : 1;                                     // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAbsoluteScale : 1;                                        // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bVisible : 1;                                              // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldBeAttached : 1;                                     // 0x014C(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldSnapLocationWhenAttached : 1;                       // 0x014C(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldSnapRotationWhenAttached : 1;                       // 0x014D(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                            // 0x014D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHiddenInGame : 1;                                         // 0x014D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;             // 0x014D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAttachParentBound : 1;                                 // 0x014D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JHKW[0x1];                                     // 0x014E(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EComponentMobility>             Mobility;                                                  // 0x014F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    PhysicsVolumeChangedDelegate;                              // 0x0151(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_36VW[0xA6];                                    // 0x0152(0x00A6) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneComponent"));
		return ptr;
	}



	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetMobility(TEnumAsByte<Engine_EComponentMobility> NewMobility);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule, bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundBase
// 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
class USoundBase : public UObject
{
public:
	unsigned char                                      UnknownData_B3FO[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundClass*                                 SoundClassObject;                                          // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDebug : 1;                                                // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideConcurrency : 1;                                  // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOutputToBusOnly : 1;                                      // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasDelayNode : 1;                                         // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasConcatenatorNode : 1;                                  // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBypassVolumeScaleForPriority : 1;                         // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EVirtualizationMode                         VirtualizationMode;                                        // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UABN[0x56];                                    // 0x003A(0x0056) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ConcurrencySet[0x50];                                      // 0x003A(0x0050) UNKNOWN PROPERTY: SetProperty
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                                      // 0x00E0(0x0028) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              Duration;                                                  // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistance;                                               // 0x010C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalSamples;                                              // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Priority;                                                  // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundModulationDefaultRoutingSettings      ModulationSettings;                                        // 0x0120(0x0048) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                            SoundSubmixObject;                                         // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSendInfo>                SoundSubmixSends;                                          // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                         // 0x0180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>             BusSends;                                                  // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>             PreEffectBusSends;                                         // 0x0198(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x01A8(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Brush
// 0x0038 (FullSize[0x0258] - InheritedSize[0x0220])
class ABrush : public AActor
{
public:
	TEnumAsByte<Engine_EBrushType>                     BrushType;                                                 // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5S22[0x3];                                     // 0x0221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      BrushColor;                                                // 0x0224(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PolyFlags;                                                 // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bColored : 1;                                              // 0x022C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSolidWhenSelected : 1;                                    // 0x022C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                            // 0x022C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNotForClientOrServer : 1;                                 // 0x022C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WHM8[0x3];                                     // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UModel*                                      Brush;                                                     // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrushComponent*                             BrushComponent;                                            // 0x0238(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bInManipulation : 1;                                       // 0x0240(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_59J9[0x7];                                     // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGeomSelection>                      SavedSelections;                                           // 0x0248(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Brush"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Volume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class AVolume : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Volume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.World
// 0x0760 (FullSize[0x0788] - InheritedSize[0x0028])
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData_WV80[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      PersistentLevel;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                                  NetDriver;                                                 // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         PersistentLineBatcher;                                     // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                     // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameNetworkManager*                         NetworkManager;                                            // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                   // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                             ExtraReferencedObjects;                                    // 0x0068(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UObject*>                             PerModuleDataObjects;                                      // 0x0078(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                           // 0x0088(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FStreamingLevelsToConsider                  StreamingLevelsToConsider;                                 // 0x0098(0x0028) (Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	struct FString                                     StreamingLevelsPrefix;                                     // 0x00C0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                      CurrentLevelPendingVisibility;                             // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevel*                                      CurrentLevelPendingInvisibility;                           // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDemoNetDriver*                              DemoNetDriver;                                             // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AParticleEventManager*                       MyParticleEventManager;                                    // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                      // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_00DX[0x16];                                    // 0x00F8(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_4QMZ : 2;                                      // 0x010E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAreConstraintsDirty : 1;                                  // 0x010E(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8O2I[0x1];                                     // 0x010F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNavigationSystemBase*                       NavigationSystem;                                          // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameModeBase*                               AuthorityGameMode;                                         // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameStateBase*                              GameState;                                                 // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAISystemBase*                               AISystem;                                                  // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAvoidanceManager*                           AvoidanceManager;                                          // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULevel*>                              Levels;                                                    // 0x0138(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FLevelCollection>                    LevelCollections;                                          // 0x0148(0x0010) (ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_JP9D[0x28];                                    // 0x0158(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameInstance*                               OwningGameInstance;                                        // 0x0180(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x0188(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UCanvas*                                     CanvasForRenderingToTarget;                                // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                       // 0x01A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_8KEP[0x50];                                    // 0x01A8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ComponentsThatNeedPreEndOfFrameSync[0x50];                 // 0x01A8(0x0050) UNKNOWN PROPERTY: SetProperty
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                        // 0x0248(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;           // 0x0258(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DV6Q[0x370];                                   // 0x0268(0x0370) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorldComposition*                           WorldComposition;                                          // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MJRF[0x88];                                    // 0x05E0(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWorldPSCPool                               PSCPool;                                                   // 0x0668(0x0058) (ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YFJ8[0xC8];                                    // 0x06C0(0x00C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.World"));
		return ptr;
	}



	class AWorldSettings* K2_GetWorldSettings();
	void HandleTimelineScrubbed();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrack
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData_QUII[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        SubTracks;                                                 // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                      TrackInstClass;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETrackActiveCondition>          ActiveCondition;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ROY7[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TrackTitle;                                                // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnePerGroup : 1;                                          // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDirGroupOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableTrack : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsSelected : 1;                                           // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsAnimControlTrack : 1;                                   // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubTrackOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisible : 1;                                              // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRecording : 1;                                          // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9EXA[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrack"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                               // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EEB8[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                                // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MJ1U[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInst
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInst : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInst"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraShakeBase
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class UCameraShakeBase : public UObject
{
public:
	bool                                               bSingleInstance;                                           // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OOYA[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShakeScale;                                                // 0x002C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                        CameraManager;                                             // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_MTJW[0x60];                                    // 0x0038(0x0060) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraShakeBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Pawn
// 0x0060 (FullSize[0x0280] - InheritedSize[0x0220])
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData_C17W[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseControllerRotationPitch : 1;                           // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerRotationYaw : 1;                             // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerRotationRoll : 1;                            // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                        // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O4YE[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseEyeHeight;                                             // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoPossessPlayer;                                         // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAutoPossessAI                              AutoPossessAI;                                             // 0x0231(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RemoteViewPitch;                                           // 0x0232(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FKG9[0x5];                                     // 0x0233(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AIControllerClass;                                         // 0x0238(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                                PlayerState;                                               // 0x0240(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_FR9S[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 LastHitBy;                                                 // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                                 Controller;                                                // 0x0258(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YY0H[0x4];                                     // 0x0260(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ControlInputVector;                                        // 0x0264(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LastControlInputVector;                                    // 0x0270(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_FDQD[0x4];                                     // 0x027C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Pawn"));
		return ptr;
	}



	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsPlayerControlled();
	bool IsPawnControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	bool IsBotControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrimitiveComponent
// 0x0248 (FullSize[0x0440] - InheritedSize[0x01F8])
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_D7VI[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	float                                              MinDrawDistance;                                           // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LDMaxDrawDistance;                                         // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CachedMaxDrawDistance;                                     // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       DepthPriorityGroup;                                        // 0x020C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       ViewOwnerDepthPriorityGroup;                               // 0x020D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EIndirectLightingCacheQuality>  IndirectLightingCacheQuality;                              // 0x020E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ELightmapType                               LightmapType;                                              // 0x020F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaxLODAsImposter : 1;                                  // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBatchImpostersAsInstances : 1;                            // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNeverDistanceCull : 1;                                    // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QDID : 4;                                      // 0x0210(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                             // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateOverlapEvents : 1;                                // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bMultiBodyOverlap : 1;                                     // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTraceComplexOnMove : 1;                                   // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReturnMaterialOnMove : 1;                                 // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                       // 0x0211(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowCullDistanceVolume : 1;                              // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                          // 0x0211(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                          // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisibleInRealTimeSkyCaptures : 1;                         // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisibleInRayTracing : 1;                                  // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderInMainPass : 1;                                     // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderInDepthPass : 1;                                    // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReceivesDecals : 1;                                       // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOwnerNoSee : 1;                                           // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyOwnerSee : 1;                                         // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                        // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAsOccluder : 1;                                        // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectable : 1;                                           // 0x0213(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMipStreaming : 1;                                    // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                             // 0x0213(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastShadow : 1;                                            // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                          // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDynamicShadow : 1;                                    // 0x0213(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                      // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastContactShadow : 1;                                    // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelfShadowOnly : 1;                                       // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastFarShadow : 1;                                        // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastInsetShadow : 1;                                      // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCinematicShadow : 1;                                  // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastHiddenShadow : 1;                                     // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLightAsIfStatic : 1;                                      // 0x0215(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                              // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExcludeFromLightAttachmentGroup : 1;                      // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReceiveMobileCSMShadows : 1;                              // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;               // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                  // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreRadialForce : 1;                                    // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyImpulseOnDamage : 1;                                 // 0x0216(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicatePhysicsToAutonomousProxy : 1;                    // 0x0216(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFillCollisionUnderneathForNavmesh : 1;                    // 0x0216(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AlwaysLoadOnClient : 1;                                    // 0x0216(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AlwaysLoadOnServer : 1;                                    // 0x0216(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseEditorCompositing : 1;                                 // 0x0216(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderCustomDepth : 1;                                    // 0x0216(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EHasCustomNavigableGeometry>    bHasCustomNavigableGeometry;                               // 0x0217(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0YE9[0x1];                                     // 0x0218(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECanBeCharacterBase>            CanCharacterStepUpOn;                                      // 0x0219(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                           LightingChannels;                                          // 0x021A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	Engine_ERendererStencilMask                        CustomDepthStencilWriteMask;                               // 0x021B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CustomDepthStencilValue;                                   // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomPrimitiveData                        CustomPrimitiveData;                                       // 0x0220(0x0010) (Edit, AdvancedDisplay, NativeAccessSpecifierPrivate)
	struct FCustomPrimitiveData                        CustomPrimitiveDataInternal;                               // 0x0230(0x0010) (Transient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_4GW5[0x8];                                     // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TranslucencySortPriority;                                  // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VisibilityId;                                              // 0x024C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                    // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureLodBias;                                     // 0x0260(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureCullMips;                                    // 0x0261(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureMinCoverage;                                 // 0x0262(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ERuntimeVirtualTextureMainPassType          VirtualTextureRenderPassType;                              // 0x0263(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NT2T[0x4];                                     // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LpvBiasMultiplier;                                         // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LZNA[0x8];                                     // 0x026C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BoundsScale;                                               // 0x0274(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SLNQ[0x10];                                    // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              MoveIgnoreActors;                                          // 0x0288(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                      // 0x0298(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NIO4[0x10];                                    // 0x02A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               BodyInstance;                                              // 0x02B8(0x0158) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentHit;                                            // 0x0410(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentBeginOverlap;                                   // 0x0411(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentEndOverlap;                                     // 0x0412(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentWake;                                           // 0x0413(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentSleep;                                          // 0x0414(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EIJG[0x1];                                     // 0x0415(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMulticastSparseDelegate                    OnBeginCursorOver;                                         // 0x0416(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndCursorOver;                                           // 0x0417(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnClicked;                                                 // 0x0418(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnReleased;                                                // 0x0419(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchBegin;                                         // 0x041A(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnd;                                           // 0x041B(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnter;                                         // 0x041C(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchLeave;                                         // 0x041D(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TUE6[0x1A];                                    // 0x041E(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimitiveComponent*                         LODParentPrimitive;                                        // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PrimitiveComponent"));
		return ptr;
	}



	bool WasRecentlyRendered(float Tolerance);
	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetReceivesDecals(bool bNewReceivesDecals);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLinearDamping(float InDamping);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);
	void SetEnableGravity(bool bGravityEnabled);
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value);
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);
	void SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);
	void SetCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value);
	void SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);
	void SetCustomDepthStencilWriteMask(Engine_ERendererStencilMask WriteMaskBit);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<Engine_EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel, TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName, bool bUpdateOverlaps);
	void SetCollisionObjectType(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<Engine_ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetCastInsetShadow(bool bInCastInsetShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllUseCCD(bool InUseCCD);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AActor* Other);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocityInRadians(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	int GetNumMaterials();
	class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex);
	class UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(const struct FName& BoneName);
	bool GetGenerateOverlapEvents();
	TEnumAsByte<Engine_ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<Engine_ECollisionChannel> GetCollisionObjectType();
	TEnumAsByte<Engine_ECollisionEnabled> GetCollisionEnabled();
	float GetClosestPointOnCollision(const struct FVector& Point, struct FVector* OutPointOnBody, const struct FName& BoneName);
	struct FVector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial, const struct FName& OptionalName);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class APawn* Pawn);
	void AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshComponent
// 0x0028 (FullSize[0x0468] - InheritedSize[0x0440])
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                         // 0x0440(0x0010) (Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M533[0x10];                                    // 0x0450(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableMaterialParameterCaching : 1;                       // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NUCC[0x7];                                     // 0x0461(0x0007) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MeshComponent"));
		return ptr;
	}



	void SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue);
	void SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue);
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName);
	TArray<struct FName> GetMaterialSlotNames();
	TArray<class UMaterialInterface*> GetMaterials();
	int GetMaterialIndex(const struct FName& MaterialSlotName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkinnedMeshComponent
// 0x0228 (FullSize[0x0690] - InheritedSize[0x0468])
class USkinnedMeshComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_1MGI[0x8];                                     // 0x0468(0x0008) Fix Super Size
	class USkeletalMesh*                               SkeletalMesh;                                              // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                       // 0x0478(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<Engine_ESkinCacheUsage>                     SkinCacheUsage;                                            // 0x0480(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVertexOffsetUsage>                  VertexOffsetUsage;                                         // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6WTM[0xF8];                                    // 0x04A0(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsAsset*                               PhysicsAssetOverride;                                      // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ForcedLodModel;                                            // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinLodModel;                                               // 0x05A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q7HL[0x8];                                     // 0x05A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StreamingDistanceMultiplier;                               // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JVS3[0xC];                                     // 0x05B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                   // 0x05C0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K2E9[0x24];                                    // 0x05D0(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EVisibilityBasedAnimTickOption              VisibilityBasedAnimTickOption;                             // 0x05F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BSV2[0x1];                                     // 0x05F5(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_35L4 : 3;                                      // 0x05F6(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOverrideMinLod : 1;                                       // 0x05F6(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                     // 0x05F6(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceWireframe : 1;                                       // 0x05F6(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisplayBones : 1;                                         // 0x05F6(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMorphTarget : 1;                                   // 0x05F6(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHideSkin : 1;                                             // 0x05F7(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPerBoneMotionBlur : 1;                                    // 0x05F7(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                          // 0x05F7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                           // 0x05F7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSyncAttachParentLOD : 1;                                  // 0x05F7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanHighlightSelectedSections : 1;                         // 0x05F7(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecentlyRendered : 1;                                     // 0x05F7(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCapsuleDirectShadow : 1;                              // 0x05F7(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                            // 0x05F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCPUSkinning : 1;                                          // 0x05F8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableUpdateRateOptimizations : 1;                        // 0x05F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations : 1;                  // 0x05F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderStatic : 1;                                         // 0x05F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMasterPoseComponentLOD : 1;                         // 0x05F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0REM : 2;                                      // 0x05F8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCachedLocalBoundsUpToDate : 1;                            // 0x05F9(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_ZCAD : 1;                                      // 0x05F9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceMeshObjectUpdate : 1;                                // 0x05F9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_B826[0x2];                                     // 0x05FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CapsuleIndirectShadowMinVisibility;                        // 0x05FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AJVW[0x10];                                    // 0x0600(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBoxSphereBounds                            CachedWorldSpaceBounds;                                    // 0x0610(0x001C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_XZV7[0x4];                                     // 0x062C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMatrix                                     CachedWorldToLocalTransform;                               // 0x0630(0x0040) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7923[0x20];                                    // 0x0670(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkinnedMeshComponent"));
		return ptr;
	}



	void UnloadSkinWeightProfile(const struct FName& InProfileName);
	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);
	void ShowAllMaterialSections(int LODIndex);
	void SetVertexOffsetUsage(int LODIndex, int usage);
	void SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors);
	bool SetSkinWeightProfile(const struct FName& InProfileName);
	void SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void SetRenderStatic(bool bNewValue);
	void SetPreSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets);
	void SetPostSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int InNewMinLOD);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);
	void SetForcedLOD(int InNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);
	bool IsUsingSkinWeightProfile();
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption);
	int GetVertexOffsetUsage(int LODIndex);
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FVector GetRefPosePosition(int BoneIndex);
	struct FName GetParentBone(const struct FName& BoneName);
	int GetNumLODs();
	int GetNumBones();
	int GetForcedLOD();
	struct FTransform GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName);
	struct FName GetCurrentSkinWeightProfileName();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	struct FName FindClosestBone_K2(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);
	void ClearVertexColorOverride(int LODIndex);
	void ClearSkinWeightProfile();
	void ClearSkinWeightOverride(int LODIndex);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshComponent
// 0x0840 (FullSize[0x0ED0] - InheritedSize[0x0690])
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                               // 0x0690(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AnimClass;                                                 // 0x0698(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                               AnimScriptInstance;                                        // 0x06A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                               PostProcessAnimInstance;                                   // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData                    AnimationData;                                             // 0x06B0(0x0018) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VN4H[0x10];                                    // 0x06C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RootBoneTranslation;                                       // 0x06D8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LineCheckBoundsScale;                                      // 0x06E4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8DL9[0x30];                                    // 0x06F0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAnimInstance*>                       LinkedInstances;                                           // 0x0720(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                 // 0x0730(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                            // 0x0740(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_IDUJ[0x150];                                   // 0x0750(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalAnimRateScale;                                       // 0x08A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                                  // 0x08A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EPhysicsTransformUpdateMode>    PhysicsTransformUpdateMode;                                // 0x08A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QT8L[0x1];                                     // 0x08A6(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationMode>                 AnimationMode;                                             // 0x08A7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_23YS[0x1];                                     // 0x08A8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDisablePostProcessBlueprint : 1;                          // 0x08A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RJED : 1;                                      // 0x08A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUpdateOverlapsOnAnimationFinalize : 1;                    // 0x08A9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V4HQ : 1;                                      // 0x08A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasValidBodies : 1;                                       // 0x08A9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBlendPhysics : 1;                                         // 0x08A9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                       // 0x08A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                            // 0x08A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableClothSimulation : 1;                               // 0x08AA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LIIT[0x5];                                     // 0x08AB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_IA1G : 1;                                      // 0x08B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisableRigidBodyAnimNode : 1;                             // 0x08B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAllowAnimCurveEvaluation : 1;                             // 0x08B0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bDisableAnimCurves : 1;                                    // 0x08B0(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_BOMO : 3;                                      // 0x08B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCollideWithEnvironment : 1;                               // 0x08B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideWithAttachedChildren : 1;                          // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLocalSpaceSimulation : 1;                                 // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bResetAfterTeleport : 1;                                   // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WGY1 : 1;                                      // 0x08B1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDeferKinematicBoneUpdate : 1;                             // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoSkeletonUpdate : 1;                                     // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseAnims : 1;                                           // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRefPoseOnInitAnim : 1;                                 // 0x08B1(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x08B2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceRefpose : 1;                                         // 0x08B2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyAllowAutonomousTickPose : 1;                          // 0x08B2(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsAutonomousTickPose : 1;                                 // 0x08B2(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOldForceRefPose : 1;                                      // 0x08B2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowPrePhysBones : 1;                                     // 0x08B2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequiredBonesUpToDate : 1;                                // 0x08B2(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAnimTreeInitialised : 1;                                  // 0x08B2(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;                   // 0x08B3(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                            // 0x08B3(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseBendingElements : 1;                                   // 0x08B3(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTetrahedralConstraints : 1;                            // 0x08B3(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseThinShellVolumeConstraints : 1;                        // 0x08B3(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSelfCollisions : 1;                                    // 0x08B3(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseContinuousCollisionDetection : 1;                      // 0x08B3(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPropagateCurvesToSlaves : 1;                              // 0x08B3(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipKinematicUpdateWhenInterpolating : 1;                 // 0x08B4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipBoundsUpdateWhenInterpolating : 1;                    // 0x08B4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GP19 : 2;                                      // 0x08B4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched : 1;                      // 0x08B4(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_0WBJ[0x1];                                     // 0x08B5(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint16_t                                           CachedAnimCurveUidVersion;                                 // 0x08B6(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EClothMassMode                              MassMode;                                                  // 0x08B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TM2Q[0x3];                                     // 0x08B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UniformMass;                                               // 0x08BC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalMass;                                                 // 0x08C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Density;                                                   // 0x08C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinPerParticleMass;                                        // 0x08C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClothBlendWeight;                                          // 0x08CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdgeStiffness;                                             // 0x08D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BendingStiffness;                                          // 0x08D4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AreaStiffness;                                             // 0x08D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeStiffness;                                           // 0x08DC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StrainLimitingStiffness;                                   // 0x08E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShapeTargetStiffness;                                      // 0x08E4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWaitForParallelClothTask;                                 // 0x08E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RR87[0x7];                                     // 0x08E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               DisallowedAnimCurves;                                      // 0x08F0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBodySetup*                                  BodySetup;                                                 // 0x0900(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QFDH[0x8];                                     // 0x0908(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0910(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UClass*                                      ClothingSimulationFactory;                                 // 0x0920(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D6ZG[0xD0];                                    // 0x0928(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TeleportDistanceThreshold;                                 // 0x09F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              TeleportRotationThreshold;                                 // 0x09FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DOE2[0x8];                                     // 0x0A00(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           LastPoseTickFrame;                                         // 0x0A08(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_XOSX[0x54];                                    // 0x0A0C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClothingSimulationInteractor*               ClothingInteractor;                                        // 0x0A60(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_LYIQ[0xC8];                                    // 0x0A68(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAnimInitialized;                                         // 0x0B30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M9RY[0x390];                                   // 0x0B40(0x0390) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshComponent"));
		return ptr;
	}



	void UnlinkAnimClassLayers(class UClass* InClass);
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void ToggleDisablePostProcessBlueprint();
	void TermBodiesBelow(const struct FName& ParentBoneName);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(struct FPoseSnapshot* Snapshot);
	void SetUpdateClothInEditor(bool NewUpdateState);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetTeleportRotationThreshold(float Threshold);
	void SetTeleportDistanceThreshold(float Threshold);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void SetAnimClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<Engine_EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);
	void SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow);
	void SetAllowAnimCurveEvaluation(bool bInAllow);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAnimInstanceDynamics(Engine_ETeleportType InTeleportType);
	void ResetAllowedAnimCurveEvaluation();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(const struct FName& BoneName);
	bool HasValidAnimationInstance();
	float GetTeleportRotationThreshold();
	float GetTeleportDistanceThreshold();
	bool GetStringAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, struct FString* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	bool GetStringAttribute(const struct FName& BoneName, const struct FName& AttributeName, const struct FString& DefaultValue, struct FString* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	struct FVector GetSkeletalCenterOfMass();
	class UAnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances);
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	bool GetIntegerAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, int* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	bool GetIntegerAttribute(const struct FName& BoneName, const struct FName& AttributeName, int DefaultValue, int* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	bool GetFloatAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, float* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	bool GetFloatAttribute(const struct FName& BoneName, const struct FName& AttributeName, float DefaultValue, float* OutValue, Engine_ECustomBoneAttributeLookup LookupType);
	bool GetDisablePostProcessBlueprint();
	bool GetDisableAnimCurves();
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	class UClothingSimulationInteractor* GetClothingSimulationInteractor();
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UAnimInstance* GetAnimInstance();
	class UClass* GetAnimClass();
	TEnumAsByte<Engine_EAnimationMode> GetAnimationMode();
	bool GetAllowRigidBodyAnimNode();
	bool GetAllowedAnimCurveEvaluate();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	struct FName FindConstraintBoneName(int ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void BindClothToMasterPoseComponent();
	void AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow);
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimInstance
// 0x0290 (FullSize[0x02B8] - InheritedSize[0x0028])
class UAnimInstance : public UObject
{
public:
	class USkeleton*                                   CurrentSkeleton;                                           // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionMode>                RootMotionMode;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMultiThreadedAnimationUpdate : 1;                      // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsingCopyPoseFromMesh : 1;                                // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q4BW : 2;                                      // 0x0031(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReceiveNotifiesFromLinkedInstances : 1;                   // 0x0031(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPropagateNotifiesToLinkedInstances : 1;                   // 0x0031(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bQueueMontageEvents : 1;                                   // 0x0031(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UPDV[0x6];                                     // 0x0032(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                      // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                          // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                            // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAllMontageInstancesEnded;                                // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_786E[0x88];                                    // 0x0078(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAnimNotifyQueue                            NotifyQueue;                                               // 0x0100(0x0070) (Transient, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                     // 0x0170(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LG7X[0x138];                                   // 0x0180(0x0138) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimInstance"));
		return ptr;
	}



	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	void UnlinkAnimClassLayers(class UClass* InClass);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SnapshotPose(struct FPoseSnapshot* Snapshot);
	void SetRootMotionMode(TEnumAsByte<Engine_ERootMotionMode> Value);
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);
	void SetPropagateNotifiesToLinkedInstances(bool bSet);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	void SavePoseSnapshot(const struct FName& SnapshotName);
	void ResetDynamics(Engine_ETeleportType InTeleportType);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_StopGroupByName(float InBlendOutTime, const struct FName& GroupName);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	void Montage_Resume(class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, Engine_EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage);
	bool Montage_IsActive(class UAnimMontage* Montage);
	float Montage_GetPosition(class UAnimMontage* Montage);
	float Montage_GetPlayRate(class UAnimMontage* Montage);
	bool Montage_GetIsStopped(class UAnimMontage* Montage);
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	float Montage_GetBlendTime(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	bool IsAnyMontagePlaying();
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	bool GetReceiveNotifiesFromLinkedInstances();
	bool GetPropagateNotifiesToLinkedInstances();
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	void GetLinkedAnimLayerInstancesByGroup(const struct FName& InGroup, TArray<class UAnimInstance*>* OutLinkedInstances);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(const struct FName& InGroup, class UClass* InClass);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances);
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceMachineWeight(int MachineIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	class UAnimMontage* GetCurrentActiveMontage();
	void GetAllCurveNames(TArray<struct FName>* OutNames);
	void GetActiveCurveNames(Engine_EAnimCurveType CurveType, TArray<struct FName>* OutNames);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintPostEvaluateAnimation();
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MovementComponent
// 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                          // 0x00B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                          // 0x00B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MPZF[0x4];                                     // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     Velocity;                                                  // 0x00C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PlaneConstraintNormal;                                     // 0x00D0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     PlaneConstraintOrigin;                                     // 0x00DC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                 // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                           // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTickBeforeOwner : 1;                                      // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                         // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConstrainToPlane : 1;                                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                   // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoRegisterPhysicsVolumeUpdates : 1;                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComponentShouldUpdatePhysicsVolume : 1;                   // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P58Z[0x2];                                     // 0x00E9(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EPlaneConstraintAxisSetting                 PlaneConstraintAxisSetting;                                // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_U5HN[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MovementComponent"));
		return ptr;
	}



	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(Engine_EPlaneConstraintAxisSetting NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	Engine_EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavMovementComponent
// 0x0040 (FullSize[0x0130] - InheritedSize[0x00F0])
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x00F0(0x0030) (Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FixedPathBrakingDistance;                                  // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                    // 0x0124(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUseAccelerationForPaths : 1;                              // 0x0124(0x0001) BIT_FIELD (Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;                      // 0x0124(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMovementProperties                         MovementState;                                             // 0x0125(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3OWT[0x2];                                     // 0x0126(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UObject*                                     PathFollowingComp;                                         // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavMovementComponent"));
		return ptr;
	}



	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PawnMovementComponent
// 0x0008 (FullSize[0x0138] - InheritedSize[0x0130])
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                 // 0x0130(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PawnMovementComponent"));
		return ptr;
	}



	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataAsset
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UDataAsset : public UObject
{
public:
	class UClass*                                      NativeClass;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DataAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetImportData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAssetImportData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetImportData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FXSystemComponent
// 0x0000 (FullSize[0x0440] - InheritedSize[0x0440])
class UFXSystemComponent : public UPrimitiveComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.FXSystemComponent"));
		return ptr;
	}



	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetUseAutoManageAttachment(bool bAutoManage);
	void SetIntParameter(const struct FName& ParameterName, int Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBoolParameter(const struct FName& ParameterName, bool Param);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void ReleaseToPool();
	class UFXSystemAsset* GetFXSystemAsset();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FXSystemAsset
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UFXSystemAsset : public UObject
{
public:
	uint32_t                                           MaxPoolSize;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PoolPrimeSize;                                             // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.FXSystemAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData_CWX2[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify"));
		return ptr;
	}



	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FString GetNotifyName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UAnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData_KTZE[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState"));
		return ptr;
	}



	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAssetUserData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetUserData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshComponent
// 0x0068 (FullSize[0x04D0] - InheritedSize[0x0468])
class UStaticMeshComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_D983[0x4];                                     // 0x0468(0x0004) Fix Super Size
	int                                                PreviousLODLevel;                                          // 0x046C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinLOD;                                                    // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubDivisionStepSize;                                       // 0x0474(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                                 StaticMesh;                                                // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                      WireframeColorOverride;                                    // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEvaluateWorldPositionOffset : 1;                          // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideWireframeColor : 1;                               // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideMinLod : 1;                                       // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideNavigationExport : 1;                             // 0x0484(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNavigationObstacle : 1;                              // 0x0484(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                         // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                    // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideLightMapRes : 1;                                  // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDistanceFieldIndirectShadow : 1;                      // 0x0485(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDistanceFieldSelfShadowBias : 1;                  // 0x0485(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSubDivisions : 1;                                      // 0x0485(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseDefaultCollision : 1;                                  // 0x0485(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReverseCulling : 1;                                       // 0x0485(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0QTL[0x2];                                     // 0x0486(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OverriddenLightMapRes;                                     // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldIndirectShadowMinVisibility;                  // 0x048C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldSelfShadowBias;                               // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StreamingDistanceMultiplier;                               // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                   // 0x0498(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                                      // 0x04A8(0x0010) (ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x04B8(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshComponent"));
		return ptr;
	}



	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetReverseCulling(bool ReverseCulling);
	void SetForcedLodModel(int NewForcedLodModel);
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);
	void SetDistanceFieldSelfShadowBias(float NewValue);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Controller
// 0x0078 (FullSize[0x0298] - InheritedSize[0x0220])
class AController : public AActor
{
public:
	unsigned char                                      UnknownData_62HI[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerState*                                PlayerState;                                               // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T3PS[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                     // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FName                                       StateName;                                                 // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                       Pawn;                                                      // 0x0250(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_TODV[0x8];                                     // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  Character;                                                 // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             TransformComponent;                                        // 0x0268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YDL2[0x18];                                    // 0x0270(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    ControlRotation;                                           // 0x0288(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      bAttachToPawn : 1;                                         // 0x0294(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SV79[0x3];                                     // 0x0295(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Controller"));
		return ptr;
	}



	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerController
// 0x02D8 (FullSize[0x0570] - InheritedSize[0x0298])
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                    // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                       AcknowledgedPawn;                                          // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                   // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHUD*                                        MyHUD;                                                     // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                        PlayerCameraManager;                                       // 0x02B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerCameraManagerClass;                                  // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoManageActiveCameraTarget;                             // 0x02C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VYX5[0x3];                                     // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    TargetViewRotation;                                        // 0x02CC(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QLHY[0xC];                                     // 0x02D8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SmoothTargetViewRotationSpeed;                             // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BY58[0x8];                                     // 0x02E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              HiddenActors;                                              // 0x02F0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenPrimitiveComponents;                                 // 0x0300(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WMMQ[0x4];                                     // 0x0310(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastSpectatorStateSynchTime;                               // 0x0314(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LastSpectatorSyncLocation;                                 // 0x0318(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    LastSpectatorSyncRotation;                                 // 0x0324(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ClientCap;                                                 // 0x0330(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CJDS[0x4];                                     // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCheatManager*                               CheatManager;                                              // 0x0338(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      CheatClass;                                                // 0x0340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInput*                                PlayerInput;                                               // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                                // 0x0350(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CIRG[0x70];                                    // 0x0360(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_MS58 : 4;                                      // 0x03D0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPlayerIsWaiting : 1;                                      // 0x03D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YQ1T[0x3];                                     // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      NetPlayerIndex;                                            // 0x03D4(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V02J[0x3B];                                    // 0x03D5(0x003B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              PendingSwapConnection;                                     // 0x0410(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                              NetConnection;                                             // 0x0418(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NIB1[0xC];                                     // 0x0420(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InputYawScale;                                             // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InputPitchScale;                                           // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InputRollScale;                                            // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowMouseCursor : 1;                                      // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableClickEvents : 1;                                    // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTouchEvents : 1;                                    // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMouseOverEvents : 1;                                // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTouchOverEvents : 1;                                // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceFeedbackEnabled : 1;                                 // 0x0438(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OGUG[0x3];                                     // 0x0439(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceFeedbackScale;                                        // 0x043C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                                ClickEventKeys;                                            // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EMouseCursor>              DefaultMouseCursor;                                        // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EMouseCursor>              CurrentMouseCursor;                                        // 0x0451(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              DefaultClickTraceChannel;                                  // 0x0452(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              CurrentClickTraceChannel;                                  // 0x0453(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitResultTraceDistance;                                    // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16_t                                           SeamlessTravelCount;                                       // 0x0458(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16_t                                           LastCompletedSeamlessTravelCount;                          // 0x045A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GL2H[0x74];                                    // 0x045C(0x0074) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInputComponent*                             InactiveStateInputComponent;                               // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_26KF : 2;                                      // 0x04D8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldPerformFullTickWhenPaused : 1;                      // 0x04D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_U24L[0x17];                                    // 0x04D9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTouchInterface*                             CurrentTouchInterface;                                     // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_IV84[0x50];                                    // 0x04F8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ASpectatorPawn*                              SpectatorPawn;                                             // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HZ2G[0x4];                                     // 0x0550(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsLocalPlayerController;                                  // 0x0554(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_V3NK[0x3];                                     // 0x0555(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     SpawnLocation;                                             // 0x0558(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8UOE[0xC];                                     // 0x0564(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerController"));
		return ptr;
	}



	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& Filename);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect(InputCore_EControllerHand Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetMouseLocation(int X, int Y);
	void SetMouseCursorWidget(TEnumAsByte<CoreUObject_EMouseCursor> Cursor, class UUserWidget* CursorWidget);
	void SetHapticsByValue(float Frequency, float Amplitude, InputCore_EControllerHand Hand);
	void SetDisableHaptics(bool bNewDisabled);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerExecRPC(const struct FString& Msg);
	void ServerExec(const struct FString& Msg);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, InputCore_EControllerHand Hand, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& URL);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	bool IsInputKeyDown(const struct FKey& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);
	void ClientStartCameraShake(class UClass* Shake, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason);
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, Engine_ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StreamableRenderAsset
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UStreamableRenderAsset : public UObject
{
public:
	unsigned char                                      UnknownData_V9WJ[0x18];                                    // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ForceMipLevelsToBeResidentTimestamp;                       // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumCinematicMipLevels;                                     // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StreamingIndex;                                            // 0x004C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CachedCombinedLODBias;                                     // 0x0050(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      NeverStream : 1;                                           // 0x0054(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                     // 0x0054(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStreamingUpdatePending : 1;                            // 0x0054(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                           // 0x0054(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                               // 0x0054(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCinematicMipLevels : 1;                                // 0x0054(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_2TDJ[0xB];                                     // 0x0055(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StreamableRenderAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMesh
// 0x0338 (FullSize[0x0398] - InheritedSize[0x0060])
class USkeletalMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_LEKG[0x20];                                    // 0x0060(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            ImportedBounds;                                            // 0x0088(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBoxSphereBounds                            ExtendedBounds;                                            // 0x00A4(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                     PositiveBoundsExtension;                                   // 0x00C0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     NegativeBoundsExtension;                                   // 0x00CC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMaterial>                   Materials;                                                 // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                           // 0x00E8(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                   // 0x00F8(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DVSX[0x50];                                    // 0x0108(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPerPlatformInt                             MinLOD;                                                    // 0x0158(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                               // 0x015C(0x0001) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorAxis;                                            // 0x015D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorFlipAxis;                                        // 0x015E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                  // 0x015F(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseHighPrecisionTangentBasis : 1;                         // 0x015F(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasBeenSimplified : 1;                                    // 0x015F(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasVertexColors : 1;                                      // 0x015F(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AVLU : 1;                                      // 0x015F(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x015F(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               PhysicsAsset;                                              // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                        // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                           // 0x0178(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMorphTarget*>                        MorphTargets;                                              // 0x0188(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LZTZ[0x178];                                   // 0x0198(0x0178) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PostProcessAnimBlueprint;                                  // 0x0310(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                        // 0x0318(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSkeletalMeshSamplingInfo                   SamplingInfo;                                              // 0x0328(0x0030) (Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0358(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0368(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_CX79[0x10];                                    // 0x0378(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkinWeightProfileInfo>              SkinWeightProfiles;                                        // 0x0388(0x0010) (Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMesh"));
		return ptr;
	}



	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);
	void SetDefaultAnimatingRig();
	int NumSockets();
	TArray<struct FString> K2_GetAllMorphTargetNames();
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	class USkeletalMeshSocket* GetSocketByIndex(int Index);
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);
	struct FBoxSphereBounds GetImportedBounds();
	void GetDefaultAnimatingRig();
	struct FBoxSphereBounds GetBounds();
	class USkeletalMeshSocket* FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex);
	class USkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Character
// 0x0248 (FullSize[0x04C8] - InheritedSize[0x0280])
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                      // 0x0280(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*                 CharacterMovement;                                         // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBasedMovementInfo                          BasedMovement;                                             // 0x0298(0x0030) (NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                   // 0x02C8(0x0030) (Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                              AnimRootMotionTranslationScale;                            // 0x02F8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     BaseTranslationOffset;                                     // 0x02FC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_K6XF[0x8];                                     // 0x0308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FQuat                                       BaseRotationOffset;                                        // 0x0310(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;              // 0x0320(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ReplayLastTransformUpdateTimeStamp;                        // 0x0324(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      ReplicatedMovementMode;                                    // 0x0328(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bInBaseReplication;                                        // 0x0329(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_F7TV[0x2];                                     // 0x032A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedEyeHeight;                                         // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsCrouched : 1;                                           // 0x0330(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NTUH[0x3];                                     // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ReplicatedCrouchedStateAndCapsuleHalfHeight;               // 0x0334(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bProxyIsJumpForceApplied : 1;                              // 0x0338(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPressedJump : 1;                                          // 0x0338(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientUpdating : 1;                                       // 0x0338(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientWasFalling : 1;                                     // 0x0338(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientResimulateRootMotion : 1;                           // 0x0338(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientResimulateRootMotionSources : 1;                    // 0x0338(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSimGravityDisabled : 1;                                   // 0x0338(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                   // 0x0338(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                           // 0x0339(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWasJumping : 1;                                           // 0x0339(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LGD1[0x2];                                     // 0x033A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              JumpKeyHoldTime;                                           // 0x033C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpForceTimeRemaining;                                    // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProxyJumpForceStartedTime;                                 // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpMaxHoldTime;                                           // 0x0348(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpMaxCount;                                              // 0x034C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpCurrentCount;                                          // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpCurrentCountPreJump;                                   // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O8TE[0x8];                                     // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                         // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QH0Y[0x10];                                    // 0x0370(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                               // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                                // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                           // 0x03A0(0x0038) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2BU1[0x8];                                     // 0x03D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                    // 0x03E0(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                        // 0x0420(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRepRootMotionMontage                       RepRootMotion;                                             // 0x0430(0x0098) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Character"));
		return ptr;
	}



	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags, float InCrouchedHalfHeight);
	void ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, float InCrouchedHalfHeight);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, float InCrouchedHalfHeight);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight);
	void ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight);
	void RootMotionDebugClientPrintOnScreen(const struct FString& inString);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedCrouchedStateAndCapsuleHalfHeight();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	bool HasAnyRootMotion();
	class UAnimMontage* GetCurrentMontage();
	struct FVector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool bClientSimulation);
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float Timestamp);
	bool CanJumpInternal();
	bool CanJump();
	bool CanCrouch();
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineComponent
// 0x0100 (FullSize[0x0540] - InheritedSize[0x0440])
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                               SplineCurves;                                              // 0x0440(0x0070) (Edit, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          SplineInfo;                                                // 0x04B0(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                            SplineRotInfo;                                             // 0x04C8(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          SplineScaleInfo;                                           // 0x04E0(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                           SplineReparamTable;                                        // 0x04F8(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowSplineEditingPerInstance;                            // 0x0510(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y41A[0x3];                                     // 0x0511(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ReparamStepsPerSegment;                                    // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Duration;                                                  // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStationaryEndpoints;                                      // 0x051C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSplineHasBeenEdited;                                      // 0x051D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bModifiedByConstructionScript;                             // 0x051E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInputSplinePointsToConstructionScript;                    // 0x051F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebug;                                                // 0x0520(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClosedLoop;                                               // 0x0521(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bLoopPositionOverride;                                     // 0x0522(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_I5ZT[0x1];                                     // 0x0523(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LoopPosition;                                              // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                     DefaultUpVector;                                           // 0x0528(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X90Q[0xC];                                     // 0x0534(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SplineComponent"));
		return ptr;
	}



	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetTangentColor(const struct FLinearColor& TangentColor);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<Engine_ESplinePointType> Type, bool bUpdateSpline);
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetScaleAtSplinePoint(int PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline);
	void SetRotationAtSplinePoint(int PointIndex, const struct FRotator& InRotation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int Index, bool bUpdateSpline);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetVectorPropertyAtSplinePoint(int Index, const struct FName& PropertyName);
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<Engine_ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int PointIndex);
	struct FVector GetScaleAtSplineInputKey(float InKey);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplineSegments();
	int GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* Location, struct FVector* Tangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	struct FVector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetFloatPropertyAtSplinePoint(int Index, const struct FName& PropertyName);
	float GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDefaultUpVector(TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(const struct FVector& position);
	void AddSplinePointAtIndex(const struct FVector& position, int Index, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(const struct FVector& position, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct FVector& position);
	void AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline);
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioComponent
// 0x0668 (FullSize[0x0860] - InheritedSize[0x01F8])
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                     // 0x01F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                        // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class USoundClass*                                 SoundClassOverride;                                        // 0x0210(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x0218(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x0218(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                          // 0x0218(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowSpatialization : 1;                                  // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSubtitlePriority : 1;                             // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsUISound : 1;                                            // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLowPassFilter : 1;                                  // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverridePriority : 1;                                     // 0x0219(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x0219(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BAF1 : 6;                                      // 0x0219(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_L7G7 : 4;                                      // 0x021A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoManageAttachment : 1;                                 // 0x021A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S9YV[0x5];                                     // 0x021B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       AudioComponentUserID;                                      // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchModulationMin;                                        // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchModulationMax;                                        // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeModulationMin;                                       // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeModulationMax;                                       // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerAttackTime;                                // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerReleaseTime;                               // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Priority;                                                  // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_53TV[0x4];                                     // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                         // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LowPassFilterFrequency;                                    // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HS5U[0x8];                                     // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x0270(0x03A0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundConcurrency*                           ConcurrencySettings;                                       // 0x0610(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ConcurrencySet[0x50];                                      // 0x0618(0x0050) UNKNOWN PROPERTY: SetProperty
	unsigned char                                      UnknownData_E3VB[0xC];                                     // 0x0668(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EAttachmentRule                             AutoAttachLocationRule;                                    // 0x0674(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachRotationRule;                                    // 0x0675(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachScaleRule;                                       // 0x0676(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LROW[0x1];                                     // 0x0677(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoundModulationDefaultRoutingSettings      ModulationRouting;                                         // 0x0678(0x0048) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAudioPlayStateChanged;                                   // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YZX8[0x18];                                    // 0x06D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioVirtualizationChanged;                              // 0x06E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_99X3[0x18];                                    // 0x06F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioFinished;                                           // 0x0710(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQKX[0x18];                                    // 0x0720(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                                    // 0x0738(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GG2F[0x18];                                    // 0x0748(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioSingleEnvelopeValue;                                // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IMNL[0x18];                                    // 0x0770(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioMultiEnvelopeValue;                                 // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A3A7[0x18];                                    // 0x0798(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptDelegate                             OnQueueSubtitles;                                          // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                          // 0x07C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AutoAttachSocketName;                                      // 0x07C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4DBH[0x90];                                    // 0x07D0(0x0090) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AudioComponent"));
		return ptr;
	}



	void StopDelayed(float DelayTime);
	void Stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetIntParameter(const struct FName& InName, int inInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);
	void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float SourceBusSendLevel);
	void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle** InClockHandle, struct FQuartzQuantizationBoundary* InQuantizationBoundary, const struct FScriptDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, Engine_EAudioFaderCurve InFadeCurve);
	void Play(float StartTime);
	bool IsVirtualized();
	bool IsPlaying();
	bool HasCookedFFTData();
	bool HasCookedAmplitudeEnvelopeData();
	Engine_EAudioComponentPlayState GetPlayState();
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData);
	bool GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData);
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData);
	bool GetCookedEnvelopeData(float* OutEnvelopeData);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, Engine_EAudioFaderCurve FadeCurve);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, Engine_EAudioFaderCurve FadeCurve);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, Engine_EAudioFaderCurve FadeCurve);
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SaveGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USaveGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SaveGame"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Info
// 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
class AInfo : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Info"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameModeBase
// 0x00A0 (FullSize[0x02C0] - InheritedSize[0x0220])
class AGameModeBase : public AInfo
{
public:
	struct FString                                     OptionsString;                                             // 0x0220(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameSessionClass;                                          // 0x0230(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameStateClass;                                            // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerControllerClass;                                     // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerStateClass;                                          // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      HUDClass;                                                  // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultPawnClass;                                          // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      SpectatorClass;                                            // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                      // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ServerStatReplicatorClass;                                 // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameSession*                                GameSession;                                               // 0x0278(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateBase*                              GameState;                                                 // 0x0280(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AServerStatReplicator*                       ServerStatReplicator;                                      // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       DefaultPlayerName;                                         // 0x0290(0x0018) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSeamlessTravel : 1;                                    // 0x02A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartPlayersAsSpectators : 1;                             // 0x02A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bPauseable : 1;                                            // 0x02A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YZVU[0x17];                                    // 0x02A9(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameModeBase"));
		return ptr;
	}



	void StartPlay();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	bool ShouldReset(class AActor* ActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class APlayerController* Player);
	bool MustSpectate(class APlayerController* NewPlayerController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);
	class AActor* K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	bool HasMatchStarted();
	bool HasMatchEnded();
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	int GetNumSpectators();
	int GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	class AActor* ChoosePlayerStart(class AController* Player);
	void ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameMode
// 0x0048 (FullSize[0x0308] - InheritedSize[0x02C0])
class AGameMode : public AGameModeBase
{
public:
	struct FName                                       MatchState;                                                // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bDelayedStart : 1;                                         // 0x02C8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JAER[0x3];                                     // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumSpectators;                                             // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumPlayers;                                                // 0x02D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumBots;                                                   // 0x02D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinRespawnDelay;                                           // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTravellingPlayers;                                      // 0x02DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EngineMessageClass;                                        // 0x02E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                        InactivePlayerArray;                                       // 0x02E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              InactivePlayerStateLifeSpan;                               // 0x02F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxInactivePlayers;                                        // 0x02FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHandleDedicatedServerReplays;                             // 0x0300(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_1WVJ[0x7];                                     // 0x0301(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameMode"));
		return ptr;
	}



	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameStateBase
// 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
class AGameStateBase : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                             // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeBase*                               AuthorityGameMode;                                         // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      SpectatorClass;                                            // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                        PlayerArray;                                               // 0x0238(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                               bReplicatedHasBegunPlay;                                   // 0x0248(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NL9Q[0x3];                                     // 0x0249(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReplicatedWorldTimeSeconds;                                // 0x024C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerWorldTimeSecondsDelta;                               // 0x0250(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                     // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_3JG0[0x18];                                    // 0x0258(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameStateBase"));
		return ptr;
	}



	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasMatchEnded();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class AController* Controller);
	float GetPlayerRespawnDelay(class AController* Controller);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameState
// 0x0020 (FullSize[0x0290] - InheritedSize[0x0270])
class AGameState : public AGameStateBase
{
public:
	struct FName                                       MatchState;                                                // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       PreviousMatchState;                                        // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                ElapsedTime;                                               // 0x0280(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R3GN[0xC];                                     // 0x0284(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameState"));
		return ptr;
	}



	void OnRep_MatchState();
	void OnRep_ElapsedTime();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ApplicationLifecycleComponent
// 0x0090 (FullSize[0x0140] - InheritedSize[0x00B0])
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                  // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;               // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTemperatureChangeDelegate;                               // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLowPowerModeDelegate;                                    // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ApplicationLifecycleComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CharacterMovementComponent
// 0x09C8 (FullSize[0x0B00] - InheritedSize[0x0138])
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData_EJ35[0x10];                                    // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  CharacterOwner;                                            // 0x0148(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              GravityScale;                                              // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxStepHeight;                                             // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpZVelocity;                                             // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpOffJumpZFactor;                                        // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WalkableFloorAngle;                                        // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              WalkableFloorZ;                                            // 0x0164(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_EMovementMode>                  MovementMode;                                              // 0x0168(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CustomMovementMode;                                        // 0x0169(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENetworkSmoothingMode                       NetworkSmoothingMode;                                      // 0x016A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J875[0x1];                                     // 0x016B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GroundFriction;                                            // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_63UZ[0x1C];                                    // 0x0170(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxWalkSpeed;                                              // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxWalkSpeedCrouched;                                      // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSwimSpeed;                                              // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxFlySpeed;                                               // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxCustomMovementSpeed;                                    // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAcceleration;                                           // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinAnalogWalkSpeed;                                        // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingFrictionFactor;                                     // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingFriction;                                           // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingSubStepTime;                                        // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationWalking;                                // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationFalling;                                // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationSwimming;                               // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationFlying;                                 // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControl;                                                // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlBoostMultiplier;                                 // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlBoostVelocityThreshold;                          // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FallingLateralFriction;                                    // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CrouchedHalfHeight;                                        // 0x01D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Buoyancy;                                                  // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerchRadiusThreshold;                                      // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerchAdditionalHeight;                                     // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationRate;                                              // 0x01E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                           // 0x01F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyGravityWhileJumping : 1;                             // 0x01F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerDesiredRotation : 1;                         // 0x01F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientRotationToMovement : 1;                             // 0x01F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSweepWhileNavWalking : 1;                                 // 0x01F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D0GC : 1;                                      // 0x01F0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMovementInProgress : 1;                                   // 0x01F0(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                          // 0x01F0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableServerDualMoveScopedMovementUpdates : 1;            // 0x01F1(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMaxAccel : 1;                                        // 0x01F1(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRunPhysicsWithNoController : 1;                           // 0x01F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNextFloorCheck : 1;                                  // 0x01F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShrinkProxyCapsule : 1;                                   // 0x01F1(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanWalkOffLedges : 1;                                     // 0x01F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                        // 0x01F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QL4H : 1;                                      // 0x01F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_X644 : 1;                                      // 0x01F2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;                // 0x01F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;       // 0x01F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                             // 0x01F2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePhysicsInteraction : 1;                             // 0x01F2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTouchForceScaledToMass : 1;                               // 0x01F2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPushForceScaledToMass : 1;                                // 0x01F2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPushForceUsingZOffset : 1;                                // 0x01F2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScalePushForceToVelocity : 1;                             // 0x01F3(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RBC6[0x4];                                     // 0x01F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             DeferredUpdatedMoveComponent;                              // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOutOfWaterStepHeight;                                   // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutofWaterZ;                                               // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Mass;                                                      // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandingDownwardForceScale;                                // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialPushForceFactor;                                    // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PushForceFactor;                                           // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PushForcePointZOffsetFactor;                               // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TouchForceFactor;                                          // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTouchForce;                                             // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTouchForce;                                             // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RepulsionForce;                                            // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     Acceleration;                                              // 0x022C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SELW[0x8];                                     // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FQuat                                       LastUpdateRotation;                                        // 0x0240(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                     LastUpdateLocation;                                        // 0x0250(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LastUpdateVelocity;                                        // 0x025C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastTransformUpdateTimeStamp;                        // 0x0268(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastClientGoodMoveAckTime;                           // 0x026C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastClientAdjustmentTime;                            // 0x0270(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     PendingImpulseToApply;                                     // 0x0274(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     PendingForceToApply;                                       // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AnalogInputModifier;                                       // 0x028C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Z0BA[0xC];                                     // 0x0290(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSimulationTimeStep;                                     // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxJumpApexAttemptsPerSimulation;                          // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithGeometry;                              // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithGeometryAsProxy;                       // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithPawn;                                  // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithPawnAsProxy;                           // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkSimulatedSmoothLocationTime;                        // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkSimulatedSmoothRotationTime;                        // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;            // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;            // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetProxyShrinkRadius;                                      // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetProxyShrinkHalfHeight;                                  // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMaxSmoothUpdateDistance;                            // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkNoSmoothUpdateDistance;                             // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                   // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAdjustments;                    // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;     // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkLargeClientCorrectionDistance;                      // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LedgeCheckThreshold;                                       // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpOutOfWaterPitch;                                       // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindFloorResult                            CurrentFloor;                                              // 0x02F0(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  DefaultLandMovementMode;                                   // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  DefaultWaterMovementMode;                                  // 0x0389(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  GroundMovementMode;                                        // 0x038A(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                     // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityX : 1;                                  // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityY : 1;                                  // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                  // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                            // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bJustTeleported : 1;                                       // 0x038B(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkUpdateReceived : 1;                                // 0x038B(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkMovementModeChanged : 1;                           // 0x038B(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;         // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bServerAcceptClientAuthoritativePosition : 1;              // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNotifyApex : 1;                                           // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCheatFlying : 1;                                          // 0x038C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWantsToCrouch : 1;                                        // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                          // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreBaseRotation : 1;                                   // 0x038C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFastAttachedMove : 1;                                     // 0x038C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysCheckFloor : 1;                                     // 0x038D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                            // 0x038D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPerformingJumpOff : 1;                                    // 0x038D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                               // 0x038D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRVOAvoidance : 1;                                      // 0x038D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                         // 0x038D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UVE6 : 1;                                      // 0x038D(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWasSimulatingRootMotion : 1;                              // 0x038D(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;             // 0x038E(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasRequestedVelocity : 1;                                 // 0x038E(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                            // 0x038E(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                  // 0x038E(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_77MB : 2;                                      // 0x038E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bProjectNavMeshWalking : 1;                                // 0x038E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                    // 0x038E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_JG0H[0x11];                                    // 0x038F(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AvoidanceConsiderationRadius;                              // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RequestedVelocity;                                         // 0x03A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AvoidanceUID;                                              // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                            // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                             // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                            // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                              AvoidanceWeight;                                           // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PendingLaunchVelocity;                                     // 0x03C4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GTKQ[0xA4];                                    // 0x03D0(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NavMeshProjectionInterval;                                 // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionTimer;                                    // 0x0478(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionInterpSpeed;                              // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionHeightScaleUp;                            // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionHeightScaleDown;                          // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavWalkingFloorDistTolerance;                              // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VLV5[0x4];                                     // 0x048C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                   // 0x0490(0x0030) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T7O9[0x18];                                    // 0x04C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTimeBetweenTimeStampResets;                             // 0x04D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FBK7[0x4AC];                                   // 0x04DC(0x04AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                         // 0x0988(0x0038) (Transient, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                      ServerCorrectionRootMotion;                                // 0x09C0(0x0038) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q8UI[0x98];                                    // 0x09F8(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   RootMotionParams;                                          // 0x0A90(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     AnimRootMotionVelocity;                                    // 0x0AD0(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O9FS[0x24];                                    // 0x0ADC(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CharacterMovementComponent"));
		return ptr;
	}



	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeightWithJumpTime();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	struct FVector GetLastUpdateVelocity();
	struct FRotator GetLastUpdateRotation();
	struct FVector GetLastUpdateLocation();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClearAccumulatedForces();
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& force);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Subsystem
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class USubsystem : public UObject
{
public:
	unsigned char                                      UnknownData_104N[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Subsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DynamicSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDynamicSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DynamicSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEngineSubsystem : public UDynamicSubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundEffectPreset
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class USoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData_ULBW[0x40];                                    // 0x0028(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectPreset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundEffectSourcePreset
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSourcePreset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundEffectSubmixPreset
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSubmixPreset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightComponentBase
// 0x0034 (FullSize[0x022C] - InheritedSize[0x01F8])
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                 // 0x01F8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Brightness;                                                // 0x0208(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Intensity;                                                 // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      LightColor;                                                // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectsWorld : 1;                                         // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastShadows : 1;                                           // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastStaticShadows : 1;                                     // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastDynamicShadows : 1;                                    // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectTranslucentLighting : 1;                            // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTransmission : 1;                                         // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastVolumetricShadow : 1;                                 // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDeepShadow : 1;                                       // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastRaytracedShadow : 1;                                  // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectReflection : 1;                                     // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectGlobalIllumination : 1;                             // 0x0215(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OP5O[0x2];                                     // 0x0216(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DeepShadowLayerDistribution;                               // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IndirectLightingIntensity;                                 // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricScatteringIntensity;                             // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SamplesPerPixel;                                           // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_96QO[0x4];                                     // 0x0228(0x0004) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightComponentBase"));
		return ptr;
	}



	void SetSamplesPerPixel(int NewValue);
	void SetCastVolumetricShadow(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetCastRaytracedShadow(bool bNewValue);
	void SetCastDeepShadow(bool bNewValue);
	void SetAffectReflection(bool bNewValue);
	void SetAffectGlobalIllumination(bool bNewValue);
	struct FLinearColor GetLightColor();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightComponent
// 0x0100 (FullSize[0x032C] - InheritedSize[0x022C])
class ULightComponent : public ULightComponentBase
{
public:
	float                                              MaxDrawDistance;                                           // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistanceFadeRange;                                      // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTemperature : 1;                                       // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_681C[0x3];                                     // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ShadowMapChannel;                                          // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2TTL[0x4];                                     // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinRoughness;                                              // 0x0240(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpecularScale;                                             // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowResolutionScale;                                     // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowBias;                                                // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowSlopeBias;                                           // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowSharpen;                                             // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ContactShadowLength;                                       // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ContactShadowLengthInWS : 1;                               // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      InverseSquaredFalloff : 1;                                 // 0x025C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastTranslucentShadows : 1;                                // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                  // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceCachedShadowsForMovablePrimitives : 1;               // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QCWM[0x3];                                     // 0x025D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightingChannels                           LightingChannels;                                          // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N26P[0x7];                                     // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          LightFunctionMaterial;                                     // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LightFunctionScale;                                        // 0x0270(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_73MD[0x4];                                     // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureLightProfile*                        IESTexture;                                                // 0x0280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseIESBrightness : 1;                                     // 0x0288(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FWUZ[0x3];                                     // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IESBrightnessScale;                                        // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightFunctionFadeDistance;                                 // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DisabledBrightness;                                        // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLightShaftBloom : 1;                                // 0x0298(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JAF6[0x3];                                     // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BloomScale;                                                // 0x029C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BloomThreshold;                                            // 0x02A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BloomMaxBrightness;                                        // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      BloomTint;                                                 // 0x02A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseRayTracedDistanceFieldShadows;                         // 0x02AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XGGK[0x3];                                     // 0x02AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RayStartOffsetDepthScale;                                  // 0x02B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MXFN[0x78];                                    // 0x02B4(0x0078) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightComponent"));
		return ptr;
	}



	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetUseIESBrightness(bool bNewValue);
	void SetTransmission(bool bNewValue);
	void SetTemperature(float NewTemperature);
	void SetSpecularScale(float NewValue);
	void SetShadowSlopeBias(float NewValue);
	void SetShadowBias(float NewValue);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetIESBrightnessScale(float NewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetBloomMaxBrightness(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalLightComponent
// 0x0014 (FullSize[0x0340] - InheritedSize[0x032C])
class ULocalLightComponent : public ULightComponent
{
public:
	float                                              Radius;                                                    // 0x032C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AttenuationRadius;                                         // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPointLightSettings                LightmassSettings;                                         // 0x0334(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LocalLightComponent"));
		return ptr;
	}



	void SetIntensityUnits(Engine_ELightUnits NewIntensityUnits);
	void SetAttenuationRadius(float NewRadius);
	float GetUnitsConversionFactor(Engine_ELightUnits SrcUnits, Engine_ELightUnits TargetUnits, float CosHalfConeAngle);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PointLightComponent
// 0x001C (FullSize[0x035C] - InheritedSize[0x0340])
class UPointLightComponent : public ULocalLightComponent
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                             // 0x0340(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DK71[0x3];                                     // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LightFalloffExponent;                                      // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceRadius;                                              // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SoftSourceRadius;                                          // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceLength;                                              // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GO6S[0x8];                                     // 0x0354(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PointLightComponent"));
		return ptr;
	}



	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetSoftSourceRadius(float bNewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetManager
// 0x0430 (FullSize[0x0458] - InheritedSize[0x0028])
class UAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData_SLH0[0x298];                                   // 0x0028(0x0298) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             ObjectReferenceList;                                       // 0x02C0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               bIsGlobalAsyncScanEnvironment;                             // 0x02D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldGuessTypeAndName;                                   // 0x02D1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldUseSynchronousLoad;                                 // 0x02D2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsLoadingFromPakFiles;                                    // 0x02D3(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldAcquireMissingChunksOnLoad;                         // 0x02D4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bOnlyCookProductionAssets;                                 // 0x02D5(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsBulkScanning;                                           // 0x02D6(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsPrimaryAssetDirectoryCurrent;                           // 0x02D7(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsManagementDatabaseCurrent;                              // 0x02D8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUpdateManagementDatabaseAfterScan;                        // 0x02D9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIncludeOnlyOnDiskAssets;                                  // 0x02DA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHasCompletedInitialScan;                                  // 0x02DB(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumberOfSpawnedNotifications;                              // 0x02DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YP53[0x178];                                   // 0x02E0(0x0178) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetManager"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerCameraManager
// 0x2590 (FullSize[0x27B0] - InheritedSize[0x0220])
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                   // 0x0220(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                             TransformComponent;                                        // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QVH6[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultFOV;                                                // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9SVP[0x4];                                     // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultOrthoWidth;                                         // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1AKX[0x4];                                     // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultAspectRatio;                                        // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WF9Z[0x44];                                    // 0x024C(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCache;                                               // 0x0290(0x05F0) (Transient, NativeAccessSpecifierPublic)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                      // 0x0880(0x05F0) (Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                                ViewTarget;                                                // 0x0E70(0x0600) (Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                                PendingViewTarget;                                         // 0x1470(0x0600) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9680[0x30];                                    // 0x1A70(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCachePrivate;                                        // 0x1AA0(0x05F0) (Transient, NativeAccessSpecifierPrivate)
	struct FCameraCacheEntry                           LastFrameCameraCachePrivate;                               // 0x2090(0x05F0) (Transient, NativeAccessSpecifierPrivate)
	TArray<class UCameraModifier*>                     ModifierList;                                              // 0x2680(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UClass*>                              DefaultModifiers;                                          // 0x2690(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                              FreeCamDistance;                                           // 0x26A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     FreeCamOffset;                                             // 0x26A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ViewTargetOffset;                                          // 0x26B0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z18X[0x4];                                     // 0x26BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioFadeChangeEvent;                                    // 0x26C0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FHG3[0x10];                                    // 0x26D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                         // 0x26E0(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                      // 0x26F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                         // 0x26F8(0x0040) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                     // 0x2738(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_P8AA[0x10];                                    // 0x2748(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                               // 0x2758(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                 // 0x2768(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class ACameraActor*                                AnimCameraActor;                                           // 0x2778(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bIsOrthographic : 1;                                       // 0x2780(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultConstrainAspectRatio : 1;                          // 0x2780(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7974 : 4;                                      // 0x2780(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bClientSimulatingViewTarget : 1;                           // 0x2780(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                           // 0x2780(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1J8T : 2;                                      // 0x2781(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bGameCameraCutThisFrame : 1;                               // 0x2781(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3WJC[0x2];                                     // 0x2782(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ViewPitchMin;                                              // 0x2784(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewPitchMax;                                              // 0x2788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewYawMin;                                                // 0x278C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewYawMax;                                                // 0x2790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewRollMin;                                               // 0x2794(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewRollMax;                                               // 0x2798(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XYE1[0x4];                                     // 0x279C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ServerUpdateCameraTimeout;                                 // 0x27A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UR4G[0xC];                                     // 0x27A4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerCameraManager"));
		return ptr;
	}



	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();
	void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	class UMatineeCameraShake* StartMatineeCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UMatineeCameraShake* StartMatineeCameraShake(class UClass* ShakeClass, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraShakeBase* StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraShakeBase* StartCameraShake(class UClass* ShakeClass, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	void SetGameCameraCutThisFrame();
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameInstance
// 0x0180 (FullSize[0x01A8] - InheritedSize[0x0028])
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData_M6L4[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULocalPlayer*>                        LocalPlayers;                                              // 0x0038(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UOnlineSession*                              OnlineSession;                                             // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0050(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8WR8[0x18];                                    // 0x0060(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnPawnControllerChangedDelegates;                          // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7YX5[0x120];                                   // 0x0088(0x0120) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameInstance"));
		return ptr;
	}



	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(TEnumAsByte<Engine_ETravelFailure> FailureType);
	void HandleNetworkError(TEnumAsByte<Engine_ENetworkFailure> FailureType, bool bIsServer);
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameSession
// 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                             // 0x0220(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPlayers;                                                // 0x0224(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPartySize;                                              // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MaxSplitscreensPerConnection;                              // 0x022C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRequiresPushToTalk;                                       // 0x022D(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IW8A[0x2];                                     // 0x022E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SessionName;                                               // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameSession"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerState
// 0x0100 (FullSize[0x0320] - InheritedSize[0x0220])
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                     // 0x0220(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerId;                                                  // 0x0224(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ping;                                                      // 0x0228(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9CDH[0x1];                                     // 0x0229(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldUpdateReplicatedPing : 1;                           // 0x022A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsSpectator : 1;                                          // 0x022A(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlySpectator : 1;                                        // 0x022A(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsABot : 1;                                               // 0x022A(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JJBM : 1;                                      // 0x022A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsInactive : 1;                                           // 0x022A(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFromPreviousLevel : 1;                                    // 0x022A(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y6S7[0x1];                                     // 0x022B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StartTime;                                                 // 0x022C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EngineMessageClass;                                        // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WTPK[0x8];                                     // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SavedNetworkAddress;                                       // 0x0240(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                            UniqueId;                                                  // 0x0250(0x0028) (Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UCOL[0x8];                                     // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       PawnPrivate;                                               // 0x0280(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HOA7[0x78];                                    // 0x0288(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerNamePrivate;                                         // 0x0300(0x0010) (Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_B1DI[0x10];                                    // 0x0310(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerState"));
		return ptr;
	}



	void ReceiveOverrideWith(class APlayerState* OldPlayerState);
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	struct FString GetPlayerName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DefaultPawn
// 0x0028 (FullSize[0x02A8] - InheritedSize[0x0280])
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                              // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BaseLookUpRate;                                            // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                      MovementComponent;                                         // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                            CollisionComponent;                                        // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                        MeshComponent;                                             // 0x0298(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAddDefaultMovementBindings : 1;                           // 0x02A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NNPN[0x7];                                     // 0x02A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DefaultPawn"));
		return ptr;
	}



	void TurnAtRate(float Rate);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpectatorPawn
// 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
class ASpectatorPawn : public ADefaultPawn
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawn"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpringArmComponent
// 0x0088 (FullSize[0x0280] - InheritedSize[0x01F8])
class USpringArmComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_O7MS[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	struct FVector                                     SocketOffset;                                              // 0x01FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     TargetOffset;                                              // 0x0208(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProbeSize;                                                 // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              ProbeChannel;                                              // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BKG1[0x3];                                     // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDoCollisionTest : 1;                                      // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritPitch : 1;                                         // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritYaw : 1;                                           // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritRoll : 1;                                          // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCameraLag : 1;                                      // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCameraRotationLag : 1;                              // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCameraLagSubstepping : 1;                              // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                  // 0x021D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7Y7H[0x2];                                     // 0x021E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraLagSpeed;                                            // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraRotationLagSpeed;                                    // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraLagMaxTimeStep;                                      // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraLagMaxDistance;                                      // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XAC8[0x50];                                    // 0x0230(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SpringArmComponent"));
		return ptr;
	}



	bool IsCollisionFixApplied();
	struct FVector GetUnfixedCameraPosition();
	struct FRotator GetTargetRotation();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WorldSettings
// 0x0180 (FullSize[0x03A0] - InheritedSize[0x0220])
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData_GELH[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VisibilityCellSize;                                        // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVisibilityAggressiveness>      VisibilityAggressiveness;                                  // 0x022C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrecomputeVisibility : 1;                                 // 0x022D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                      // 0x022D(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                              // 0x022D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableNavigationSystem : 1;                               // 0x022D(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bEnableAISystem : 1;                                       // 0x022D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldComposition : 1;                               // 0x022D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;                   // 0x022D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                            // 0x022D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWorldGravitySet : 1;                                      // 0x022E(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalGravitySet : 1;                                     // 0x022E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMinimizeBSPSections : 1;                                  // 0x022E(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                           // 0x022E(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHighPriorityLoading : 1;                                  // 0x022E(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                             // 0x022E(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDefaultBroadphaseSettings : 1;                    // 0x022E(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZCUY[0x1];                                     // 0x022F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                    // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                            // 0x0238(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              WorldToMeters;                                             // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KillZ;                                                     // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      KillZDamageType;                                           // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WorldGravityZ;                                             // 0x0250(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalGravityZ;                                            // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultPhysicsVolumeClass;                                 // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultGameMode;                                           // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameNetworkManagerClass;                                   // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PackedLightAndShadowMapTextureSize;                        // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     DefaultColorScale;                                         // 0x027C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                  // 0x0288(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalDistanceFieldViewDistance;                           // 0x028C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;              // 0x0290(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_49O7[0x4];                                     // 0x0294(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             DefaultReverbSettings;                                     // 0x0298(0x0020) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                                // 0x02B8(0x0024) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MonoCullingDistance;                                       // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMix*                                   DefaultBaseSoundMix;                                       // 0x02E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeDilation;                                              // 0x02E8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MatineeTimeDilation;                                       // 0x02EC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DemoPlayTimeDilation;                                      // 0x02F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinGlobalTimeDilation;                                     // 0x02F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGlobalTimeDilation;                                     // 0x02F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinUndilatedFrameTime;                                     // 0x02FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxUndilatedFrameTime;                                     // 0x0300(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                         BroadphaseSettings;                                        // 0x0304(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F1LC[0x4];                                     // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerState*                                Pauser;                                                    // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetViewer>                          ReplicationViewers;                                        // 0x0350(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0360(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class APlayerState*                                PauserPlayerState;                                         // 0x0370(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxNumberOfBookmarks;                                      // 0x0378(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_XHMD[0x4];                                     // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultBookmarkClass;                                      // 0x0380(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBookmarkBase*>                       BookmarkArray;                                             // 0x0388(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class UClass*                                      LastBookmarkClass;                                         // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.WorldSettings"));
		return ptr;
	}



	void OnRep_WorldGravityZ();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraActor
// 0x0580 (FullSize[0x07A0] - InheritedSize[0x0220])
class ACameraActor : public AActor
{
public:
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoActivateForPlayer;                                     // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HM3Y[0x7];                                     // 0x0221(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraComponent*                            CameraComponent;                                           // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             SceneComponent;                                            // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HI8Y[0x8];                                     // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x0240(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_5F0L[0x3];                                     // 0x0241(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AspectRatio;                                               // 0x0244(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              FOVAngle;                                                  // 0x0248(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              PostProcessBlendWeight;                                    // 0x024C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0250(0x0550) (Deprecated, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraActor"));
		return ptr;
	}



	int GetAutoActivatePlayerIndex();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ShapeComponent
// 0x0018 (FullSize[0x0458] - InheritedSize[0x0440])
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                            // 0x0440(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AreaClass;                                                 // 0x0448(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      ShapeColor;                                                // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                   // 0x0454(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                             // 0x0454(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDynamicObstacle : 1;                                      // 0x0454(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_567K[0x3];                                     // 0x0455(0x0003) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ShapeComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CapsuleComponent
// 0x0008 (FullSize[0x0460] - InheritedSize[0x0458])
class UCapsuleComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_PJIE[0x4];                                     // 0x0458(0x0004) Fix Super Size
	float                                              CapsuleRadius;                                             // 0x045C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CapsuleComponent"));
		return ptr;
	}



	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DamageType
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                        // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleMomentumByMass : 1;                                  // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRadialDamageVelChange : 1;                                // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KQWK[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamageImpulse;                                             // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleImpulse;                                       // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleDamageSpreadScale;                             // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageFalloff;                                             // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FXD5[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DamageType"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedStaticMeshComponent
// 0x00B0 (FullSize[0x0580] - InheritedSize[0x04D0])
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                         // 0x04D0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic, CPF_SkipSerialization)
	int                                                NumCustomDataFloats;                                       // 0x04E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bKeepInstanceBufferCPUAccess;                              // 0x04E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QMLK[0x3];                                     // 0x04E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      PerInstanceSMCustomData;                                   // 0x04E8(0x0010) (Edit, EditFixedSize, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic, CPF_SkipSerialization)
	int                                                InstancingRandomSeed;                                      // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InstanceStartCullDistance;                                 // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InstanceEndCullDistance;                                   // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EP8F[0x4];                                     // 0x0504(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        InstanceReorderTable;                                      // 0x0508(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TBIP[0x48];                                    // 0x0518(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPendingLightmaps;                                       // 0x0560(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Z94S[0x4];                                     // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                            // 0x0568(0x0010) (ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_F824[0x8];                                     // 0x0578(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InstancedStaticMeshComponent"));
		return ptr;
	}



	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace);
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	TArray<int> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);
	int GetInstanceCount();
	void ClearInstances();
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	TArray<int> AddInstances(TArray<struct FTransform> InstanceTransforms, bool bShouldReturnIndices);
	int AddInstance(const struct FTransform& InstanceTransform);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00E8 (FullSize[0x0668] - InheritedSize[0x0580])
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_6IQW[0x8];                                     // 0x0580(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        SortedInstances;                                           // 0x0588(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                NumBuiltInstances;                                         // 0x0598(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AQKK[0x4];                                     // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        BuiltInstanceBounds;                                       // 0x05A0(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                        UnbuiltInstanceBounds;                                     // 0x05BC(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                 // 0x05D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableDensityScaling : 1;                                 // 0x05E8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_37MU[0x7];                                     // 0x05E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OcclusionLayerNumNodes;                                    // 0x05F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                   // 0x05F4(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bDisableCollision;                                         // 0x0610(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5IZK[0x3];                                     // 0x0611(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                InstanceCountToRender;                                     // 0x0614(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L2Z5[0x50];                                    // 0x0618(0x0050) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HierarchicalInstancedStaticMeshComponent"));
		return ptr;
	}



	bool RemoveInstances(TArray<int> InstancesToRemove);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HUD
// 0x00F0 (FullSize[0x0310] - InheritedSize[0x0220])
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                               // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLostFocusPaused : 1;                                      // 0x0228(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowHUD : 1;                                              // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowDebugInfo : 1;                                        // 0x0228(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IGXV[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrentTargetIndex;                                        // 0x022C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                  // 0x0230(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowOverlays : 1;                                         // 0x0230(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableDebugTextShadow : 1;                                // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1DJH[0x7];                                     // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              PostRenderedActors;                                        // 0x0238(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YEFC[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               DebugDisplay;                                              // 0x0250(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ToggledDebugCategories;                                    // 0x0260(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UCanvas*                                     Canvas;                                                    // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                                     DebugCanvas;                                               // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                             // 0x0280(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UClass*                                      ShowDebugTargetDesiredClass;                               // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                      ShowDebugTargetActor;                                      // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_6S47[0x70];                                    // 0x02A0(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HUD"));
		return ptr;
	}



	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void PreviousDebugTarget();
	void NextDebugTarget();
	void GetTextSize(const struct FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerBase
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                        // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TriggerBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerBox
// 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
class ATriggerBox : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TriggerBox"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UParticleModuleEventSendToGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventSendToGame"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraComponent
// 0x05C8 (FullSize[0x07C0] - InheritedSize[0x01F8])
class UCameraComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_ZQFR[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              OrthoWidth;                                                // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoNearClipPlane;                                        // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoFarClipPlane;                                         // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AspectRatio;                                               // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                 // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockToHmd : 1;                                            // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionMode;                                            // 0x020D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZP2G[0x32];                                    // 0x020E(0x0032) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PostProcessBlendWeight;                                    // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M05D[0x2C];                                    // 0x0244(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0270(0x0550) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraComponent"));
		return ptr;
	}



	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<Engine_ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject);
	void OnCameraMeshHiddenChanged();
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ProjectileMovementComponent
// 0x00E0 (FullSize[0x01D0] - InheritedSize[0x00F0])
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                              // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSpeed;                                                  // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationFollowsVelocity : 1;                              // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationRemainsVertical : 1;                              // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBounce : 1;                                         // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                          // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSimulationEnabled : 1;                                    // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSweepCollision : 1;                                       // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsHomingProjectile : 1;                                   // 0x00F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                           // 0x00F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSliding : 1;                                            // 0x00F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpMovement : 1;                                       // 0x00F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpRotation : 1;                                       // 0x00F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BD35[0x2];                                     // 0x00FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PreviousHitTime;                                           // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PreviousHitNormal;                                         // 0x0100(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProjectileGravityScale;                                    // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Buoyancy;                                                  // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Bounciness;                                                // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Friction;                                                  // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BounceVelocityStopSimulatingThreshold;                     // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinFrictionFraction;                                       // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JO00[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                        // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                          // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              HomingAccelerationMagnitude;                               // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                     // 0x014C(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSimulationTimeStep;                                     // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BounceAdditionalIterations;                                // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationTime;                                        // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpRotationTime;                                        // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationMaxLagDistance;                              // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationSnapToTargetDistance;                        // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ODUF[0x60];                                    // 0x0170(0x0060) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ProjectileMovementComponent"));
		return ptr;
	}



	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void SetInterpolatedComponent(class USceneComponent* Component);
	void ResetInterpolation();
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
	bool IsVelocityUnderSimulationThreshold();
	bool IsInterpolationComplete();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PostProcessVolume
// 0x0568 (FullSize[0x07C0] - InheritedSize[0x0258])
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_B8X9[0x8];                                     // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        Settings;                                                  // 0x0260(0x0550) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              Priority;                                                  // 0x07B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendRadius;                                               // 0x07B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendWeight;                                               // 0x07B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x07BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUnbound : 1;                                              // 0x07BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_340B[0x3];                                     // 0x07BD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PostProcessVolume"));
		return ptr;
	}



	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxComponent
// 0x0018 (FullSize[0x0470] - InheritedSize[0x0458])
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                                     BoxExtent;                                                 // 0x0458(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LineThickness;                                             // 0x0464(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Z7NP[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoxComponent"));
		return ptr;
	}



	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCapture
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                  // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             SceneComponent;                                            // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCapture2D
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture2D"));
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyLight
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                            // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0228(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7NMU[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkyLight"));
		return ptr;
	}



	void OnRep_bEnabled();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture
// 0x0078 (FullSize[0x00D8] - InheritedSize[0x0060])
class UTexture : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_HPEU[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       LightingGuid;                                              // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                LODBias;                                                   // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureCompressionSettings>    CompressionSettings;                                       // 0x007C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureFilter>                 Filter;                                                    // 0x007D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ETextureMipLoadOptions                      MipLoadOptions;                                            // 0x007E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureGroup>                  LODGroup;                                                  // 0x007F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                           Downscale;                                                 // 0x0080(0x0004) (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	Engine_ETextureDownscaleOptions                    DownscaleOptions;                                          // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      SRGB : 1;                                                  // 0x0085(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoTiling : 1;                                             // 0x0085(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      VirtualTextureStreaming : 1;                               // 0x0085(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CompressionYCoCg : 1;                                      // 0x0085(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNotOfflineProcessed : 1;                                  // 0x0085(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                   // 0x0085(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_O5VG[0x2];                                     // 0x0086(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0088(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_03VY[0x40];                                    // 0x0098(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Texture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureCube
// 0x0058 (FullSize[0x0130] - InheritedSize[0x00D8])
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData_ELBD[0x58];                                    // 0x00D8(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureCube"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshActor
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bStaticMeshReplicateMovement;                              // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENavDataGatheringMode                       NavigationGeometryGatheringMode;                           // 0x0229(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3218[0x6];                                     // 0x022A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshActor"));
		return ptr;
	}



	void SetMobility(TEnumAsByte<Engine_EComponentMobility> InMobility);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInterface
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData_20BV[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USubsurfaceProfile*                          SubsurfaceProfile;                                         // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NERV[0x10];                                    // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                         // 0x0050(0x0010) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                                      // 0x0060(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_UIMW[0x8];                                     // 0x0080(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialInterface"));
		return ptr;
	}



	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);
	class UPhysicalMaterialMask* GetPhysicalMaterialMask();
	class UPhysicalMaterial* GetPhysicalMaterialFromMap(int Index);
	class UPhysicalMaterial* GetPhysicalMaterial();
	struct FMaterialParameterInfo GetParameterInfo(TEnumAsByte<Engine_EMaterialParameterAssociation> Association, const struct FName& ParameterName, class UMaterialFunctionInterface* LayerFunction);
	class UMaterial* GetBaseMaterial();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstance
// 0x02D8 (FullSize[0x0360] - InheritedSize[0x0088])
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                  // 0x0090(0x0040) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          Parent;                                                    // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStaticPermutationResource : 1;                         // 0x00D8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                            // 0x00D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GB8W[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                      // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                     // 0x0130(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_05ZI[0x10];                                    // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStaticParameterSet                         StaticParameters;                                          // 0x0148(0x0040) (NativeAccessSpecifierPrivate)
	struct FMaterialCachedParameters                   CachedLayerParameters;                                     // 0x0188(0x01A0) (NativeAccessSpecifierPrivate)
	TArray<class UObject*>                             CachedReferencedTextures;                                  // 0x0328(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RHOM[0x28];                                    // 0x0338(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceConstant
// 0x0008 (FullSize[0x0368] - InheritedSize[0x0360])
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                          // 0x0360(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceConstant"));
		return ptr;
	}



	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineCustomTimeStep
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineCustomTimeStep : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineCustomTimeStep"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TimecodeProvider
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UTimecodeProvider : public UObject
{
public:
	float                                              FrameDelay;                                                // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TU24[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TimecodeProvider"));
		return ptr;
	}



	struct FTimecode GetTimecode();
	Engine_ETimecodeProviderSynchronizationState GetSynchronizationState();
	struct FQualifiedFrameTime GetQualifiedFrameTime();
	struct FFrameRate GetFrameRate();
	struct FTimecode GetDelayedTimecode();
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime();
	bool FetchTimecode(struct FQualifiedFrameTime* OutFrameTime);
	void FetchAndUpdate();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DynamicBlueprintBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDynamicBlueprintBinding : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DynamicBlueprintBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintGeneratedClass
// 0x00F8 (FullSize[0x0328] - InheritedSize[0x0230])
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                   // 0x0230(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasNativizedParent : 1;                                   // 0x0234(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasCookedComponentInstancingData : 1;                     // 0x0234(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YF8T[0x3];                                     // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                     // 0x0238(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x0248(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0258(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                   // 0x0268(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructProperty*                             UberGraphFramePointerProperty;                             // 0x0288(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0GT7[0x8];                                     // 0x0290(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFunction*                                   UberGraphFunction;                                         // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                             // 0x02A0(0x0050) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_64YJ[0x38];                                    // 0x02F0(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintGeneratedClass"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundWave
// 0x01B8 (FullSize[0x0370] - InheritedSize[0x01B8])
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                        // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StreamingPriority;                                         // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	AudioPlatformConfiguration_ESoundwaveSampleRateSettings SampleRateQuality;                                         // 0x01C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5RJH[0x1];                                     // 0x01C1(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESoundGroup>                    SoundGroup;                                                // 0x01C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x01C3(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStreaming : 1;                                            // 0x01C3(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSeekableStreaming : 1;                                    // 0x01C3(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ESoundWaveLoadingBehavior                   LoadingBehavior;                                           // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NNXO : 6;                                      // 0x01C5(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMature : 1;                                               // 0x01C5(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bManualWordWrap : 1;                                       // 0x01C5(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSingleLine : 1;                                           // 0x01C6(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsAmbisonics : 1;                                         // 0x01C6(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QE68[0x1];                                     // 0x01C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      FrequenciesToAnalyze;                                      // 0x01C8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveSpectralTimeData>          CookedSpectralTimeData;                                    // 0x01D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveEnvelopeTimeData>          CookedEnvelopeTimeData;                                    // 0x01E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                InitialChunkSize;                                          // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V8W4[0x44];                                    // 0x01FC(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Volume;                                                    // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Pitch;                                                     // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumChannels;                                               // 0x025C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SampleRate;                                                // 0x0260(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_QNLW[0xC];                                     // 0x0264(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x0270(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                                 Curves;                                                    // 0x0280(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                                 InternalCurves;                                            // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_2GJD[0xE0];                                    // 0x0290(0x00E0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundWave"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundWaveProcedural
// 0x0050 (FullSize[0x03C0] - InheritedSize[0x0370])
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData_ZKVR[0x50];                                    // 0x0370(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundWaveProcedural"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintCore
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GeneratedClass;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLegacyNeedToPurgeSkelRefs;                                // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UQUR[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       BlueprintGuid;                                             // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RC9J[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintCore"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Blueprint
// 0x0050 (FullSize[0x00A0] - InheritedSize[0x0050])
class UBlueprint : public UBlueprintCore
{
public:
	class UClass*                                      ParentClass;                                               // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlueprintType>                 BlueprintType;                                             // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecompileOnLoad : 1;                                      // 0x0059(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasBeenRegenerated : 1;                                   // 0x0059(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                 // 0x0059(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BHZB[0x2];                                     // 0x005A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlueprintSystemVersion;                                    // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x0068(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0078(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                   // 0x0088(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Blueprint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Model
// 0x0230 (FullSize[0x0258] - InheritedSize[0x0028])
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData_Q7B2[0x230];                                   // 0x0028(0x0230) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Model"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Channel
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8G4A[0x40];                                    // 0x0030(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Channel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorChannel
// 0x0228 (FullSize[0x0298] - InheritedSize[0x0070])
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C9UD[0xE8];                                    // 0x0078(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             CreateSubObjects;                                          // 0x0160(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I2HT[0x128];                                   // 0x0170(0x0128) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ActorChannel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimationAsset
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData_GX3H[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_K6G3[0x20];                                    // 0x0040(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAnimMetaData*>                       MetaData;                                                  // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimationAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpaceBase
// 0x00C8 (FullSize[0x0148] - InheritedSize[0x0080])
class UBlendSpaceBase : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData_7C9N[0x8];                                     // 0x0080(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bRotationBlendInMeshSpace;                                 // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2FTQ[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AnimLength;                                                // 0x008C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                   // 0x0090(0x0018) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TargetWeightInterpolationSpeedPerSec;                      // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENotifyTriggerMode>             NotifyTriggerMode;                                         // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0M7H[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                              // 0x00B0(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                SampleIndexWithMarkers;                                    // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_KIUO[0x4];                                     // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBlendSample>                        SampleData;                                                // 0x00C8(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FEditorElement>                      GridSamples;                                               // 0x00D8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBlendParameter                             BlendParameters[0x3];                                      // 0x00E8(0x0060) (Edit, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlendSpaceBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpace
// 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<Engine_EBlendSpaceAxis>                AxisToScaleAnimation;                                      // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YP4M[0x7];                                     // 0x0149(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AimOffsetBlendSpace
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class UAimOffsetBlendSpace : public UBlendSpace
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpace1D
// 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                           // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3ZJI[0x7];                                     // 0x0149(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace1D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace1D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AISystemBase
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                              AISystemClassName;                                         // 0x0028(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       AISystemModuleName;                                        // 0x0040(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_XHEH[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bInstantiateAISystemOnClient;                              // 0x0050(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_94UI[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AISystemBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AmbientSound
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                            // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AmbientSound"));
		return ptr;
	}



	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimationSettings
// 0x0098 (FullSize[0x00D0] - InheritedSize[0x0038])
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                 // 0x0038(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RSAM[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                             // 0x0040(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               ForceRecompression;                                        // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceBelowThreshold;                                      // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                     // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRaiseMaxErrorToExisting;                                  // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePerformanceLog;                                     // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStripAnimationDataOnDedicatedServer;                      // 0x0055(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bTickAnimationOnSkeletalMeshInit;                          // 0x0056(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S0PC[0x1];                                     // 0x0057(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCustomAttributeSetting>             BoneCustomAttributesNames;                                 // 0x0058(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             BoneNamesWithCustomAttributes;                             // 0x0068(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<struct FName, Engine_ECustomAttributeBlendType> AttributeBlendModes;                                       // 0x0078(0x0050) (Edit, Config, NativeAccessSpecifierPublic)
	Engine_ECustomAttributeBlendType                   DefaultAttributeBlendMode;                                 // 0x00C8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C01C[0x7];                                     // 0x00C9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimationSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBlueprint
// 0x0028 (FullSize[0x00C8] - InheritedSize[0x00A0])
class UAnimBlueprint : public UBlueprint
{
public:
	unsigned char                                      UnknownData_T6GV[0x8];                                     // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   TargetSkeleton;                                            // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimGroupInfo>                      Groups;                                                    // 0x00B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bUseMultiThreadedAnimationUpdate;                          // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWarnAboutBlueprintUsage;                                  // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XQ6S[0x6];                                     // 0x00C2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBlueprintGeneratedClass
// 0x0288 (FullSize[0x05B0] - InheritedSize[0x0328])
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData_YL0C[0x8];                                     // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x0330(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                                   TargetSkeleton;                                            // 0x0340(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x0348(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                                // 0x0358(0x0050) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8DI3[0x80];                                    // 0x03A8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               SyncGroupNames;                                            // 0x0428(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                                // 0x0438(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                               // 0x0448(0x0050) (NativeAccessSpecifierPublic)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                         // 0x0498(0x0050) (NativeAccessSpecifierPublic)
	struct FPropertyAccessLibrary                      PropertyAccessLibrary;                                     // 0x04E8(0x00C8) (NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprintGeneratedClass"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBoneCompressionCodec
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAnimBoneCompressionCodec : public UObject
{
public:
	struct FString                                     Description;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimBoneCompressionCodec"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBoneCompressionSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                    // 0x0028(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimBoneCompressionSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimClassData
// 0x0308 (FullSize[0x0330] - InheritedSize[0x0028])
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData_TQF8[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                                   TargetSkeleton;                                            // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                                // 0x0058(0x0050) (NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunction>              AnimBlueprintFunctions;                                    // 0x00A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunctionData>          AnimBlueprintFunctionData;                                 // 0x00B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      AnimNodeProperties[0x10];                                  // 0x00C8(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_36R6[0x10];                                    // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LinkedAnimGraphNodeProperties[0x10];                       // 0x00D8(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_657T[0x10];                                    // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LinkedAnimLayerNodeProperties[0x10];                       // 0x00F8(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_J6VJ[0x10];                                    // 0x0118(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      PreUpdateNodeProperties[0x10];                             // 0x0118(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_8OG2[0x10];                                    // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      DynamicResetNodeProperties[0x10];                          // 0x0138(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_CNP6[0x10];                                    // 0x0158(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      StateMachineNodeProperties[0x10];                          // 0x0158(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_CPJN[0x10];                                    // 0x0178(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InitializationNodeProperties[0x10];                        // 0x0178(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_OJ9D[0x10];                                    // 0x0198(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                                     // 0x01A8(0x0050) (NativeAccessSpecifierPublic)
	TArray<struct FName>                               SyncGroupNames;                                            // 0x01F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                                // 0x0208(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                         // 0x0218(0x0050) (NativeAccessSpecifierPublic)
	struct FPropertyAccessLibrary                      PropertyAccessLibrary;                                     // 0x0268(0x00C8) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimClassData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimClassInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimClassInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimClassInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSequenceBase
// 0x0028 (FullSize[0x00A8] - InheritedSize[0x0080])
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                  // 0x0080(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              SequenceLength;                                            // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RateScale;                                                 // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawCurveTracks                             RawCurveData;                                              // 0x0098(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimSequenceBase"));
		return ptr;
	}



	float GetPlayLength();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompositeBase
// 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
class UAnimCompositeBase : public UAnimSequenceBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompositeBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimComposite
// 0x0010 (FullSize[0x00B8] - InheritedSize[0x00A8])
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                            // 0x00A8(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimComposite"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	unsigned char                                      bNeedsSkeleton : 1;                                        // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TNFB[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x003D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x003E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L284[0x1];                                     // 0x003F(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_BitwiseCompressOnly"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_LeastDestructive"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxEffectorDiff;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinEffectorDiff;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EffectorDiffSocket;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentKeyScale;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRetarget : 1;                                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_907R[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveLinearKeys"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_PerTrackCompression
// 0x0078 (FullSize[0x00D8] - InheritedSize[0x0060])
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPosDiffBitwise;                                         // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiffBitwise;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiffBitwise;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedRotationFormats;                                    // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedTranslationFormats;                                 // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedScaleFormats;                                       // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bResampleAnimation : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8TXB[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResampledFramerate;                                        // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinKeysForResampling;                                      // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAdaptiveError : 1;                                     // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                           // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F4OD[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TrackHeightBias;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentingDivisor;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentingDivisorExponent;                                  // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAdaptiveError2 : 1;                                    // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2T5M[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RotationErrorSourceRatio;                                  // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslationErrorSourceRatio;                               // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScaleErrorSourceRatio;                                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxErrorPerTrackRatio;                                     // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerturbationProbeSize;                                     // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CGH8[0x4];                                     // 0x00D4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_PerTrackCompression"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                   // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartAtSecondKey : 1;                                     // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C5WT[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveEverySecondKey"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ASHU[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveTrivialKeys"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCurveCompressionCodec
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimCurveCompressionCodec : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCurveCompressionCodec"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCurveCompressionCodec_CompressedRichCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCurveCompressionCodec_UniformIndexable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCurveCompressionCodec_UniformlySampled"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCurveCompressionSettings
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                     // 0x0028(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimCurveCompressionSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimLayerInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimLayerInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimLayerInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimMetaData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimMetaData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimMetaData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimMontage
// 0x0128 (FullSize[0x01D0] - InheritedSize[0x00A8])
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                                 BlendIn;                                                   // 0x00A8(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BlendInTime;                                               // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SL28[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAlphaBlend                                 BlendOut;                                                  // 0x00E0(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BlendOutTime;                                              // 0x0110(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendOutTriggerTime;                                       // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SyncGroup;                                                 // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SyncSlotIndex;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q83L[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMarkerSyncData                             MarkerData;                                                // 0x0128(0x0020) (NativeAccessSpecifierPublic)
	TArray<struct FCompositeSection>                   CompositeSections;                                         // 0x0148(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                            // 0x0158(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                           // 0x0168(0x0010) (ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotionTranslation;                              // 0x0178(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotionRotation;                                 // 0x0179(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAutoBlendOut;                                       // 0x017A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x017B(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EZOA[0x4];                                     // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                     // 0x0180(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int>                                        BranchingPointStateNotifyIndices;                          // 0x0190(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimeStretchCurve                           TimeStretchCurve;                                          // 0x01A0(0x0028) (Edit, NativeAccessSpecifierPublic)
	struct FName                                       TimeStretchCurveName;                                      // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimMontage"));
		return ptr;
	}



	float GetDefaultBlendOutTime();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_PauseClothingSimulation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocationOffset;                                            // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffset;                                            // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     Scale;                                                     // 0x0058(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8XII[0x1C];                                    // 0x0064(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      Attached : 1;                                              // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PTFW[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SocketName;                                                // 0x0084(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MK3Z[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_PlayParticleEffect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_PlaySound
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                                  Sound;                                                     // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFollow : 1;                                               // 0x0048(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1FIG[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       AttachName;                                                // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4V87[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_PlaySound"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_ResetClothingSimulation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_ResetDynamics"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_ResumeClothingSimulation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_DisableRootMotion"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SocketName;                                                // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocationOffset;                                            // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffset;                                            // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bDestroyAtEnd;                                             // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BVAV[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_TimedParticleEffect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState_Trail
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       FirstSocketName;                                           // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SecondSocketName;                                          // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETrailWidthMode>                WidthScaleMode;                                            // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5Y53[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       WidthScaleCurve;                                           // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecycleSpawnedSystems : 1;                                // 0x0054(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9Z5[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_Trail"));
		return ptr;
	}



	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSequence
// 0x0108 (FullSize[0x01B0] - InheritedSize[0x00A8])
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SG8V[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                   // 0x00B0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_6UZR[0x10];                                    // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                   // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                  // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AF9Z[0x70];                                    // 0x00E0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAdditiveAnimationType>         AdditiveAnimType;                                          // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAdditiveBasePoseType>          RefPoseType;                                               // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MWK4[0x6];                                     // 0x0152(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               RefPoseSeq;                                                // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RefFrameIndex;                                             // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       RetargetSource;                                            // 0x0164(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAnimInterpolationType                      Interpolation;                                             // 0x016C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotion;                                         // 0x016D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x016E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceRootLock;                                            // 0x016F(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNormalizedRootMotionScale;                             // 0x0170(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRootMotionSettingsCopiedFromMontage;                      // 0x0171(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SUIG[0x6];                                     // 0x0172(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                                       // 0x0178(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F527[0x18];                                    // 0x0188(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBakedCustomAttributePerBoneData>    BakedPerBoneCustomAttributeData;                           // 0x01A0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimSequence"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSet
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_08WX[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TrackBoneNames;                                            // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                               // 0x0040(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                    // 0x0050(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                   // 0x0060(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FName>                               UseTranslationBoneNames;                                   // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                             // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FName                                       PreviewSkelMeshName;                                       // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BestRatioSkelMeshName;                                     // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B67U[0x50];                                    // 0x00A0(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimSet"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSingleNodeInstance
// 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                              // 0x02B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                     // 0x02C0(0x0010) (ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimSingleNodeInstance"));
		return ptr;
	}



	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
	class UAnimationAsset* GetAnimationAsset();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimStateMachineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimStateMachineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimStateMachineTypes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimStreamable
// 0x0038 (FullSize[0x00E0] - InheritedSize[0x00A8])
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAnimInterpolationType                      Interpolation;                                             // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TO8R[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       RetargetSource;                                            // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OKRS[0x10];                                    // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                   // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                  // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotion;                                         // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceRootLock;                                            // 0x00DA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNormalizedRootMotionScale;                             // 0x00DB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_URBK[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AnimStreamable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ArrowComponent
// 0x0020 (FullSize[0x0460] - InheritedSize[0x0440])
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                                // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ArrowSize;                                                 // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ArrowLength;                                               // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScreenSize;                                                // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsASprite : 1;                                       // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F0LV[0xF];                                     // 0x0451(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ArrowComponent"));
		return ptr;
	}



	void SetArrowColor(const struct FLinearColor& NewColor);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetExportTask
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UAssetExportTask : public UObject
{
public:
	class UObject*                                     Object;                                                    // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExporter*                                   Exporter;                                                  // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Filename;                                                  // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSelected;                                                 // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReplaceIdentical;                                         // 0x0049(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPrompt;                                                   // 0x004A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutomated;                                                // 0x004B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseFileArchive;                                           // 0x004C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWriteEmptyFiles;                                          // 0x004D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8FZB[0x2];                                     // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             IgnoreObjectList;                                          // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                     Options;                                                   // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             Errors;                                                    // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetExportTask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetManagerSettings
// 0x00C8 (FullSize[0x0100] - InheritedSize[0x0038])
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>               PrimaryAssetTypesToScan;                                   // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                      DirectoriesToExclude;                                      // 0x0048(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesOverride>          PrimaryAssetRules;                                         // 0x0058(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesCustomOverride>    CustomPrimaryAssetRules;                                   // 0x0068(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               bOnlyCookProductionAssets;                                 // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldManagerDetermineTypeAndName;                        // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldGuessTypeAndNameInEditor;                           // 0x007A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldAcquireMissingChunksOnLoad;                         // 0x007B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KTG5[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetIdRedirects;                                   // 0x0080(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetTypeRedirects;                                 // 0x0090(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>               AssetPathRedirects;                                        // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      MetaDataTagsForAssetRegistry[0x50];                        // 0x00B0(0x0050) UNKNOWN PROPERTY: SetProperty


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetManagerSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetMappingTable
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                              // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AssetMappingTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionHandleSaveGame
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_43P9[0x20];                                    // 0x0040(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USaveGame*                                   SaveGameObject;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionHandleSaveGame"));
		return ptr;
	}



	class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, const struct FString& SlotName, int UserIndex);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	unsigned char                                      UnknownData_FDFN[0x48];                                    // 0x0030(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionLoadPrimaryAssetBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionLoadPrimaryAsset"));
		return ptr;
	}



	class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionLoadPrimaryAssetClass"));
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionLoadPrimaryAssetList"));
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionLoadPrimaryAssetClassList"));
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    completed;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AsyncActionChangePrimaryAssetBundles"));
		return ptr;
	}



	class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles);
	class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AtmosphericFog
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                   // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFog"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AtmosphericFogComponent
// 0x0108 (FullSize[0x0300] - InheritedSize[0x01F8])
class UAtmosphericFogComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_G9NP[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              FogMultiplier;                                             // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DensityMultiplier;                                         // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DensityOffset;                                             // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceScale;                                             // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AltitudeScale;                                             // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceOffset;                                            // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GroundOffset;                                              // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartDistance;                                             // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SunDiscScale;                                              // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultBrightness;                                         // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      DefaultLightColor;                                         // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableSunDisk : 1;                                       // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAtmosphereAffectsSunIlluminance : 1;                      // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableGroundScattering : 1;                              // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OO5O[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                          // 0x022C(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                                  TransmittanceTexture;                                      // 0x0258(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  IrradianceTexture;                                         // 0x0260(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RTOP[0x98];                                    // 0x0268(0x0098) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFogComponent"));
		return ptr;
	}



	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioBus
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UAudioBus : public UObject
{
public:
	Engine_EAudioBusChannels                           AudioBusChannels;                                          // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAutomatic;                                              // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ETAT[0x6];                                     // 0x002A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AudioBus"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioSettings
// 0x0110 (FullSize[0x0148] - InheritedSize[0x0038])
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                             DefaultSoundClassName;                                     // 0x0038(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultMediaSoundClassName;                                // 0x0050(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultSoundConcurrencyName;                               // 0x0068(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBaseSoundMix;                                       // 0x0080(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             VoiPSoundClass;                                            // 0x0098(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             MasterSubmix;                                              // 0x00B0(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             ReverbSubmix;                                              // 0x00C8(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             EQSubmix;                                                  // 0x00E0(0x0018) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EVoiceSampleRate                            VoiPSampleRate;                                            // 0x00F8(0x0001) ELEMENT_SIZE_MISMATCH (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2NKC[0x3];                                     // 0x00F8(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              DefaultReverbSendLevel;                                    // 0x00FC(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaximumConcurrentStreams;                                  // 0x0100(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalMinPitchScale;                                       // 0x0104(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalMaxPitchScale;                                       // 0x0108(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B330[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                             // 0x0110(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowPlayWhenSilent : 1;                                  // 0x0120(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMasterEQ : 1;                                      // 0x0120(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowCenterChannel3DPanning : 1;                          // 0x0120(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0KO2[0x3];                                     // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           NumStoppingSources;                                        // 0x0124(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EPanningMethod                              PanningMethod;                                             // 0x0128(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMonoChannelUpmixMethod                     MonoChannelUpmixMethod;                                    // 0x0129(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D9V3[0x6];                                     // 0x012A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DialogueFilenameFormat;                                    // 0x0130(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UM80[0x8];                                     // 0x0140(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AudioSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioVolume
// 0x0070 (FullSize[0x02C8] - InheritedSize[0x0258])
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                  // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_4HXQ[0x3];                                     // 0x025D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             Settings;                                                  // 0x0260(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInteriorSettings                           AmbientZoneSettings;                                       // 0x0280(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_TESY[0x4];                                     // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAudioVolumeSubmixSendSettings>      SubmixSendSettings;                                        // 0x02A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAudioVolumeSubmixOverrideSettings>  SubmixOverrideSettings;                                    // 0x02B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AudioVolume"));
		return ptr;
	}



	void SetSubmixSendSettings(TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings);
	void SetSubmixOverrideSettings(TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings);
	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WorldSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UWorldSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.WorldSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutoDestroySubsystem
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UAutoDestroySubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData_RMI4[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              ActorsToPoll;                                              // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AutoDestroySubsystem"));
		return ptr;
	}



	void OnActorEndPlay(class AActor* Actor, TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutomationTestSettings
// 0x0318 (FullSize[0x0340] - InheritedSize[0x0028])
class UAutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             EngineTestModules;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             EditorTestModules;                                         // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             AutomationTestmap;                                         // 0x0048(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                 // 0x0060(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                     AssetsToOpen;                                              // 0x0070(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             MapsToPIETest;                                             // 0x0080(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                        // 0x0090(0x01F0) (Edit, Config, NativeAccessSpecifierPublic)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                               // 0x0280(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                               // 0x02B0(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                              // 0x02C0(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             TestLevelFolders;                                          // 0x02F0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                             // 0x0300(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                               // 0x0310(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                          // 0x0320(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FIntPoint                                   DefaultScreenshotResolution;                               // 0x0330(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PIETestDuration;                                           // 0x0338(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OQH0[0x4];                                     // 0x033C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AutomationTestSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AvoidanceManager
// 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData_V2N3[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultTimeToLive;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockTimeAfterAvoid;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockTimeAfterClean;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DeltaTimeToPredict;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ArtificialRadiusExpansion;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TestHeightDifference;                                      // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightCheckMargin;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IR4Q[0x94];                                    // 0x004C(0x0094) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.AvoidanceManager"));
		return ptr;
	}



	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BandwidthTestActor
// 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
class ABandwidthTestActor : public AActor
{
public:
	struct FBandwidthTestGenerator                     BandwidthGenerator;                                        // 0x0220(0x0020) (Net, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BandwidthTestActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BillboardComponent
// 0x0020 (FullSize[0x0460] - InheritedSize[0x0440])
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                    // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0448(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0F7H[0x3];                                     // 0x0449(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              U;                                                         // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UL;                                                        // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              V;                                                         // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VL;                                                        // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BillboardComponent"));
		return ptr;
	}



	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendableInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlendableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlendableInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Skeleton
// 0x0340 (FullSize[0x0368] - InheritedSize[0x0028])
class USkeleton : public UObject
{
public:
	unsigned char                                      UnknownData_UXEX[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBoneNode>                           BoneTree;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                          RefLocalPoses;                                             // 0x0048(0x0010) (ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_L7IO[0x118];                                   // 0x0058(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       VirtualBoneGuid;                                           // 0x0170(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVirtualBone>                        VirtualBones;                                              // 0x0180(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0190(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZSUU[0x50];                                    // 0x01A0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSmartNameContainer                         SmartNames;                                                // 0x01F0(0x0050) (Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_HQMP[0x30];                                    // 0x0240(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UBlendProfile*>                       BlendProfiles;                                             // 0x0270(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                                // 0x0280(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_3QBT[0xC8];                                    // 0x0290(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0358(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Skeleton"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendProfile
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData_HHF6[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   OwningSkeleton;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                            // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlendProfile"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlockingVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ABlockingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlockingVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintExtension
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintExtension : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintExtension"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintMapLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintMapLibrary"));
		return ptr;
	}



	void SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value);
	void Map_Values(TMap<int, int> TargetMap, TArray<int>* Values);
	bool Map_Remove(TMap<int, int> TargetMap, int Key);
	int Map_Length(TMap<int, int> TargetMap);
	void Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys);
	bool Map_Find(TMap<int, int> TargetMap, int Key, int* Value);
	bool Map_Contains(TMap<int, int> TargetMap, int Key);
	void Map_Clear(TMap<int, int> TargetMap);
	void Map_Add(TMap<int, int> TargetMap, int Key, int Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintPathsLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintPathsLibrary"));
		return ptr;
	}



	struct FString VideoCaptureDir();
	void ValidatePath(const struct FString& InPath, bool* bDidSucceed, struct FText* OutReason);
	void Split(const struct FString& InPath, struct FString* PathPart, struct FString* FilenamePart, struct FString* ExtensionPart);
	struct FString SourceConfigDir();
	bool ShouldSaveToUserDir();
	struct FString ShaderWorkingDir();
	void SetProjectFilePath(const struct FString& NewGameProjectFilePath);
	struct FString SetExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString ScreenShotDir();
	struct FString SandboxesDir();
	struct FString RootDir();
	void RemoveDuplicateSlashes(const struct FString& InPath, struct FString* OutPath);
	struct FString ProjectUserDir();
	struct FString ProjectSavedDir();
	struct FString ProjectPluginsDir();
	struct FString ProjectPersistentDownloadDir();
	struct FString ProjectModsDir();
	struct FString ProjectLogDir();
	struct FString ProjectIntermediateDir();
	struct FString ProjectDir();
	struct FString ProjectContentDir();
	struct FString ProjectConfigDir();
	struct FString ProfilingDir();
	void NormalizeFilename(const struct FString& InPath, struct FString* OutPath);
	void NormalizeDirectoryName(const struct FString& InPath, struct FString* OutPath);
	struct FString MakeValidFileName(const struct FString& inString, const struct FString& InReplacementChar);
	void MakeStandardFilename(const struct FString& InPath, struct FString* OutPath);
	void MakePlatformFilename(const struct FString& InPath, struct FString* OutPath);
	bool MakePathRelativeTo(const struct FString& InPath, const struct FString& InRelativeTo, struct FString* OutPath);
	struct FString LaunchDir();
	bool IsSamePath(const struct FString& PathA, const struct FString& PathB);
	bool IsRestrictedPath(const struct FString& InPath);
	bool IsRelative(const struct FString& InPath);
	bool IsProjectFilePathSet();
	bool IsDrive(const struct FString& InPath);
	bool HasProjectPersistentDownloadDir();
	TArray<struct FString> GetToolTipLocalizationPaths();
	TArray<struct FString> GetRestrictedFolderNames();
	struct FString GetRelativePathToRoot();
	TArray<struct FString> GetPropertyNameLocalizationPaths();
	struct FString GetProjectFilePath();
	struct FString GetPath(const struct FString& InPath);
	struct FString GetInvalidFileSystemChars();
	TArray<struct FString> GetGameLocalizationPaths();
	struct FString GetExtension(const struct FString& InPath, bool bIncludeDot);
	TArray<struct FString> GetEngineLocalizationPaths();
	TArray<struct FString> GetEditorLocalizationPaths();
	struct FString GetCleanFilename(const struct FString& InPath);
	struct FString GetBaseFilename(const struct FString& InPath, bool bRemovePath);
	struct FString GeneratedConfigDir();
	struct FString GameUserDeveloperDir();
	struct FString GameSourceDir();
	struct FString GameDevelopersDir();
	struct FString GameAgnosticSavedDir();
	bool FileExists(const struct FString& InPath);
	struct FString FeaturePackDir();
	struct FString EnterprisePluginsDir();
	struct FString EnterpriseFeaturePackDir();
	struct FString EnterpriseDir();
	struct FString EngineVersionAgnosticUserDir();
	struct FString EngineUserDir();
	struct FString EngineSourceDir();
	struct FString EngineSavedDir();
	struct FString EnginePluginsDir();
	struct FString EngineIntermediateDir();
	struct FString EngineDir();
	struct FString EngineContentDir();
	struct FString EngineConfigDir();
	bool DirectoryExists(const struct FString& InPath);
	struct FString DiffDir();
	struct FString CreateTempFilename(const struct FString& Path, const struct FString& prefix, const struct FString& Extension);
	struct FString ConvertToSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString ConvertRelativePathToFull(const struct FString& InPath, const struct FString& InBasePath);
	struct FString ConvertFromSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString Combine(TArray<struct FString> InPaths);
	bool CollapseRelativeDirectories(const struct FString& InPath, struct FString* OutPath);
	struct FString CloudDir();
	struct FString ChangeExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString BugItDir();
	struct FString AutomationTransientDir();
	struct FString AutomationLogDir();
	struct FString AutomationDir();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformGameInstance
// 0x00D0 (FullSize[0x0278] - InheritedSize[0x01A8])
class UPlatformGameInstance : public UGameInstance
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                  // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;               // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;       // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;         // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;             // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;              // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlatformGameInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintPlatformLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintPlatformLibrary"));
		return ptr;
	}



	int ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const struct FString& ActivationEvent);
	int ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FString& ActivationEvent);
	int ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate);
	TEnumAsByte<Engine_EScreenOrientation> GetDeviceOrientation();
	void ClearAllLocalNotifications();
	void CancelLocalNotificationById(int NotificationId);
	void CancelLocalNotification(const struct FString& ActivationEvent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintSetLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BlueprintSetLibrary"));
		return ptr;
	}



	void SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void Set_Union();
	void Set_ToArray(TArray<int>* Result);
	void Set_RemoveItems(TArray<int> Items);
	bool Set_Remove(int Item);
	int Set_Length();
	void Set_Intersection();
	void Set_Difference();
	bool Set_Contains(int ItemToFind);
	void Set_Clear();
	void Set_AddItems(TArray<int> NewItems);
	void Set_Add(int NewItem);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoneMaskFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                                // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoneMaskFilter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BookmarkBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBookmarkBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BookmarkBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BookMark
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBookMark : public UBookmarkBase
{
public:
	struct FVector                                     Location;                                                  // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    Rotation;                                                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HiddenLevels;                                              // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BookMark"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BookMark2D
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBookMark2D : public UBookmarkBase
{
public:
	float                                              Zoom2D;                                                    // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                                   Location;                                                  // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R8NA[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BookMark2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoundsCopyComponent
// 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
class UBoundsCopyComponent : public UActorComponent
{
public:
	unsigned char                                      BoundsSourceActor[0x28];                                   // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
	bool                                               bUseCollidingComponentsForSourceBounds;                    // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bKeepOwnBoundsScale;                                       // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCollidingComponentsForOwnBounds;                       // 0x00DA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z9XT[0x5];                                     // 0x00DB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  PostTransform;                                             // 0x00E0(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bCopyXBounds;                                              // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCopyYBounds;                                              // 0x0111(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCopyZBounds;                                              // 0x0112(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_905T[0xD];                                     // 0x0113(0x000D) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoundsCopyComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReflectionCapture
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                          // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCapture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxReflectionCapture
// 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
class ABoxReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCapture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReflectionCaptureComponent
// 0x0078 (FullSize[0x0270] - InheritedSize[0x01F8])
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                    // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EReflectionSourceType                       ReflectionSourceType;                                      // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMobileReflectionCompression                MobileReflectionCompression;                               // 0x0201(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9YKF[0x6];                                     // 0x0202(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                Cubemap;                                                   // 0x0208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceCubemapAngle;                                        // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Brightness;                                                // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AffectedBySkyLight;                                        // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bModifyMaxValueRGBM;                                       // 0x021C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CCQL[0x3];                                     // 0x021D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxValueRGBM;                                              // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CaptureOffset;                                             // 0x0224(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       MapBuildDataId;                                            // 0x0230(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OOCI[0x10];                                    // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                CachedEncodedHDRCubemap;                                   // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_C7ZN[0x18];                                    // 0x0258(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCaptureComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (FullSize[0x0290] - InheritedSize[0x0270])
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                     // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FDJP[0x4];                                     // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBoxComponent*                               PreviewInfluenceBox;                                       // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PM4Q[0x8];                                     // 0x0288(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCaptureComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Breakpoint
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_EF5D[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UEdGraphNode*                                Node;                                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce : 1;                                             // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                       // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                              // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_2A69[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Breakpoint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushBuilder
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                            // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ToolTip;                                                   // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      NotifyBadParams : 1;                                       // 0x0048(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6FAY[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             Vertices;                                                  // 0x0050(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuilderPoly>                        Polys;                                                     // 0x0060(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FName                                       Layer;                                                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      MergeCoplanars : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_60CJ[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BrushBuilder"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushComponent
// 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                     // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BrushBodySetup;                                            // 0x0448(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BrushComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushShape
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ABrushShape : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BrushShape"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ButtonStyleAsset
// 0x0278 (FullSize[0x02A0] - InheritedSize[0x0028])
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                               // 0x0028(0x0278) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ButtonStyleAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraAnim
// 0x0598 (FullSize[0x05C0] - InheritedSize[0x0028])
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                         // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimLength;                                                // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                        BoundingBox;                                               // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bRelativeToInitialTransform : 1;                           // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelativeToInitialFOV : 1;                                 // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BYB3[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseFOV;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4GGI[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        BasePostProcessSettings;                                   // 0x0060(0x0550) (NativeAccessSpecifierPublic)
	float                                              BasePostProcessBlendWeight;                                // 0x05B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VKH4[0xC];                                     // 0x05B4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraAnim"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraAnimInst
// 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpGroupInst*                            InterpGroupInst;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_1WWO[0x18];                                    // 0x0038(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlayRate;                                                  // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8582[0x14];                                    // 0x0054(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpTrackMove*                            MoveTrack;                                                 // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstMove*                        MoveInst;                                                  // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ECameraShakePlaySpace                       PlaySpace;                                                 // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H614[0x97];                                    // 0x0079(0x0097) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraAnimInst"));
		return ptr;
	}



	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraBlockingVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ACameraBlockingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraBlockingVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraModifier
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                                // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExclusive : 1;                                            // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LTFP[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      Priority;                                                  // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PSTZ[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerCameraManager*                        CameraOwner;                                               // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaInTime;                                               // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaOutTime;                                              // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Alpha;                                                     // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_9VNG[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier"));
		return ptr;
	}



	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraModifier_CameraShake
// 0x0068 (FullSize[0x00B0] - InheritedSize[0x0048])
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>              ActiveShakes;                                              // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class UClass*, struct FPooledCameraShakes>    ExpiredPooledShakesMap;                                    // 0x0058(0x0050) (Protected, NativeAccessSpecifierProtected)
	float                                              SplitScreenShakeScale;                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_BN12[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier_CameraShake"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeCameraShake
// 0x00E8 (FullSize[0x0180] - InheritedSize[0x0098])
class UMatineeCameraShake : public UCameraShakeBase
{
public:
	unsigned char                                      UnknownData_HW93[0x4];                                     // 0x0098(0x0004) Fix Super Size
	float                                              OscillationBlendInTime;                                    // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OscillationBlendOutTime;                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FROscillator                                RotOscillation;                                            // 0x00A4(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVOscillator                                LocOscillation;                                            // 0x00C8(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFOscillator                                FOVOscillation;                                            // 0x00EC(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              AnimPlayRate;                                              // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimScale;                                                 // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimBlendInTime;                                           // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimBlendOutTime;                                          // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAnimSegmentDuration;                                 // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3OJY[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraAnim*                                 Anim;                                                      // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRandomAnimSegment : 1;                                    // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SZ1K[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OscillatorTimeRemaining;                                   // 0x011C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnimInst*                             AnimInst;                                                  // 0x0120(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PEL3[0x58];                                    // 0x0128(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MatineeCameraShake"));
		return ptr;
	}



	void ReceiveStopShake(bool bImmediately);
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraShakeSourceActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ACameraShakeSourceActor : public AActor
{
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraShakeSourceActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraShakeSourceComponent
// 0x0028 (FullSize[0x0220] - InheritedSize[0x01F8])
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_NRG5[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              InnerAttenuationRadius;                                    // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OuterAttenuationRadius;                                    // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_817H[0x4];                                     // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CameraShake;                                               // 0x0208(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoStart;                                                // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DFCA[0xF];                                     // 0x0211(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CameraShakeSourceComponent"));
		return ptr;
	}



	void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);
	void StopAllCameraShakes(bool bImmediately);
	void StartCameraShake(class UClass* InCameraShake, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void Start();
	float GetAttenuationFactor(const struct FVector& Location);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Canvas
// 0x02A8 (FullSize[0x02D0] - InheritedSize[0x0028])
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                      // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrgY;                                                      // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClipX;                                                     // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClipY;                                                     // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      DrawColor;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCenterX : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCenterY : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoSmooth : 1;                                             // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZNEC[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SizeX;                                                     // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5EYR[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPlane                                      ColorModulate;                                             // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  GradientTexture0;                                          // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReporterGraph*                              ReporterGraph;                                             // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q15A[0x258];                                   // 0x0078(0x0258) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Canvas"));
		return ptr;
	}



	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTarget
// 0x0008 (FullSize[0x00E0] - InheritedSize[0x00D8])
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                               // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GV02[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTarget2D
// 0x0028 (FullSize[0x0108] - InheritedSize[0x00E0])
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x00E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00FA(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00FA(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGPUSharedFlag : 1;                                        // 0x00FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureRenderTargetFormat>     RenderTargetFormat;                                        // 0x00FB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoGenerateMips : 1;                                     // 0x00FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureFilter>                 MipsSamplerFilter;                                         // 0x00FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                MipsAddressU;                                              // 0x00FE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                MipsAddressV;                                              // 0x00FF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3T27[0x7];                                     // 0x0101(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CanvasRenderTarget2D
// 0x0020 (FullSize[0x0128] - InheritedSize[0x0108])
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                                // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                       World;                                                     // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                   // 0x0120(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_ET03[0x7];                                     // 0x0121(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CanvasRenderTarget2D"));
		return ptr;
	}



	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CheatManager
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DebugCameraControllerClass;                                // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1BHX[0x40];                                    // 0x0038(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CheatManager"));
		return ptr;
	}



	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void UpdateSafeArea();
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void SpawnServerStatReplicator();
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const struct FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CheckBoxStyleAsset
// 0x0580 (FullSize[0x05A8] - InheritedSize[0x0028])
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                             // 0x0028(0x0580) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CheckBoxStyleAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ChildActorComponent
// 0x0038 (FullSize[0x0230] - InheritedSize[0x01F8])
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                           // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      ChildActor;                                                // 0x0200(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      ChildActorTemplate;                                        // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_B1YS[0x20];                                    // 0x0210(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ChildActorComponent"));
		return ptr;
	}



	void SetChildActorClass(class UClass* InClass);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ChildConnection
// 0x0008 (FullSize[0x1AF8] - InheritedSize[0x1AF0])
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                    // 0x1AF0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ChildConnection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformInterfaceBase
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                              // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CloudStorageBase
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                           // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressDelegateCalls : 1;                                // 0x0048(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DEWZ[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CloudStorageBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CollisionProfile
// 0x0138 (FullSize[0x0170] - InheritedSize[0x0038])
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                  // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                   // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomProfile>                      EditProfiles;                                              // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                         ProfileRedirects;                                          // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                 // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_2CHN[0xE8];                                    // 0x0088(0x00E8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CollisionProfile"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ComponentDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ComponentDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorComponentInstanceDataTransientOuter
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UActorComponentInstanceDataTransientOuter : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ActorComponentInstanceDataTransientOuter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveTable
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData_6G3I[0x78];                                    // 0x0028(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CompositeCurveTable
// 0x0028 (FullSize[0x00C8] - InheritedSize[0x00A0])
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                         ParentTables;                                              // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UCurveTable*>                         OldParentTables;                                           // 0x00B0(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_W4IF[0x8];                                     // 0x00C0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CompositeCurveTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataTable
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UK08[0x50];                                    // 0x0030(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bStripFromClientBuilds : 1;                                // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreExtraFields : 1;                                    // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMissingFields : 1;                                  // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A9BH[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ImportKeyField;                                            // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4QZ6[0x18];                                    // 0x0098(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DataTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CompositeDataTable
// 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                          ParentTables;                                              // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UDataTable*>                          OldParentTables;                                           // 0x00C0(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_V77V[0x8];                                     // 0x00D0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CompositeDataTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Engine
// 0x0DB8 (FullSize[0x0DE0] - InheritedSize[0x0028])
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData_9KV5[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFont*                                       TinyFont;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             TinyFontName;                                              // 0x0038(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       SmallFont;                                                 // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             SmallFontName;                                             // 0x0058(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       MediumFont;                                                // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             MediumFontName;                                            // 0x0078(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       LargeFont;                                                 // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             LargeFontName;                                             // 0x0098(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       SubtitleFont;                                              // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             SubtitleFontName;                                          // 0x00B8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFont*>                               AdditionalFonts;                                           // 0x00D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FString>                             AdditionalFontNames;                                       // 0x00E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UClass*                                      ConsoleClass;                                              // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              ConsoleClassName;                                          // 0x00F8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameViewportClientClass;                                   // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameViewportClientClassName;                               // 0x0118(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      LocalPlayerClass;                                          // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              LocalPlayerClassName;                                      // 0x0138(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      WorldSettingsClass;                                        // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              WorldSettingsClassName;                                    // 0x0158(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              NavigationSystemClassName;                                 // 0x0170(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NavigationSystemClass;                                     // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              NavigationSystemConfigClassName;                           // 0x0190(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NavigationSystemConfigClass;                               // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AvoidanceManagerClassName;                                 // 0x01B0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AvoidanceManagerClass;                                     // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AIControllerClassName;                                     // 0x01D0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              PhysicsCollisionHandlerClassName;                          // 0x01F0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameUserSettingsClassName;                                 // 0x0208(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameUserSettingsClass;                                     // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameUserSettings*                           GameUserSettings;                                          // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      LevelScriptActorClass;                                     // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              LevelScriptActorClassName;                                 // 0x0238(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              DefaultBlueprintBaseClassName;                             // 0x0250(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameSingletonClassName;                                    // 0x0268(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     GameSingleton;                                             // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AssetManagerClassName;                                     // 0x0288(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetManager*                               AssetManager;                                              // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture;                                            // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultTextureName;                                        // 0x02B0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                                    DefaultDiffuseTexture;                                     // 0x02C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultDiffuseTextureName;                                 // 0x02D0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                   // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBSPVertexTextureName;                               // 0x02F0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                 // 0x0308(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             HighFrequencyNoiseTextureName;                             // 0x0310(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBokehTexture;                                       // 0x0328(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBokehTextureName;                                   // 0x0330(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBloomKernelTexture;                                 // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBloomKernelTextureName;                             // 0x0350(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   WireframeMaterial;                                         // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     WireframeMaterialName;                                     // 0x0370(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   DebugMeshMaterial;                                         // 0x0380(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DebugMeshMaterialName;                                     // 0x0388(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   EmissiveMeshMaterial;                                      // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             EmissiveMeshMaterialName;                                  // 0x03A8(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   LevelColorationLitMaterial;                                // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LevelColorationLitMaterialName;                            // 0x03C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   LevelColorationUnlitMaterial;                              // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LevelColorationUnlitMaterialName;                          // 0x03E0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   LightingTexelDensityMaterial;                              // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LightingTexelDensityName;                                  // 0x03F8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                          // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ShadedLevelColorationLitMaterialName;                      // 0x0410(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                        // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                    // 0x0428(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   RemoveSurfaceMaterial;                                     // 0x0438(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             RemoveSurfaceMaterialName;                                 // 0x0440(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorMaterial;                                       // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorMaterialName;                                   // 0x0460(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                     // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                 // 0x0478(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                  // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;              // 0x0490(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                       // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                   // 0x04A8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                     // 0x04B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                 // 0x04C0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                      // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                  // 0x04D8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DebugEditorMaterialName;                                   // 0x04E8(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   ConstraintLimitMaterial;                                   // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                  // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                              // 0x0510(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                  // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                              // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                  // 0x0528(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                              // 0x0530(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                          // 0x0538(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                           // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             InvalidLightmapSettingsMaterialName;                       // 0x0548(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                           // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             PreviewShadowsIndicatorMaterialName;                       // 0x0568(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                                   ArrowMaterial;                                             // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                       // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             ArrowMaterialName;                                         // 0x0590(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightingOnlyBrightness;                                    // 0x05A8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                    // 0x05B8(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                      // 0x05C8(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        LightComplexityColors;                                     // 0x05D8(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                              // 0x05E8(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        LODColorationColors;                                       // 0x05F8(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        HLODColorationColors;                                      // 0x0608(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                   // 0x0618(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	float                                              MaxPixelShaderAdditiveComplexityCount;                     // 0x0628(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                  // 0x062C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinLightMapDensity;                                        // 0x0630(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdealLightMapDensity;                                      // 0x0634(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxLightMapDensity;                                        // 0x0638(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                       // 0x063C(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2U3R[0x3];                                     // 0x063D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RenderLightMapDensityGrayscaleScale;                       // 0x0640(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RenderLightMapDensityColorScale;                           // 0x0644(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                          // 0x0648(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightMapDensitySelectedColor;                              // 0x0658(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                         // 0x0668(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                       // 0x0678(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultPhysMaterialName;                                   // 0x0680(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                   // 0x0698(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                      // 0x06A8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                     // 0x06B8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                     // 0x06C8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                              // 0x06D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             PreIntegratedSkinBRDFTextureName;                          // 0x06E0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  BlueNoiseTexture;                                          // 0x06F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             BlueNoiseTextureName;                                      // 0x0700(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  MiniFontTexture;                                           // 0x0718(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             MiniFontTextureName;                                       // 0x0720(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                                    WeightMapPlaceholderTexture;                               // 0x0738(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             WeightMapPlaceholderTextureName;                           // 0x0740(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  LightMapDensityTexture;                                    // 0x0758(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             LightMapDensityTextureName;                                // 0x0760(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6FLG[0x8];                                     // 0x0778(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         GameViewport;                                              // 0x0780(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             DeferredCommands;                                          // 0x0788(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              NearClipPlane;                                             // 0x0798(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubtitlesEnabled : 1;                                     // 0x079C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubtitlesForcedOff : 1;                                   // 0x079C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AJVH[0x3];                                     // 0x079D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaximumLoopIterationCount;                                 // 0x07A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                           // 0x07A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;            // 0x07A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate : 1;                    // 0x07A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                          // 0x07A4(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DJUE : 1;                                      // 0x07A4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSmoothFrameRate : 1;                                      // 0x07A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixedFrameRate : 1;                                    // 0x07A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R0C5[0x3];                                     // 0x07A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FixedFrameRate;                                            // 0x07A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                                 SmoothedFrameRateRange;                                    // 0x07AC(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_85RE[0x4];                                     // 0x07BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UEngineCustomTimeStep*                       CustomTimeStep;                                            // 0x07C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_ZLW4[0x20];                                    // 0x07C8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              CustomTimeStepClassName;                                   // 0x07E8(0x0018) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimecodeProvider*                           TimecodeProvider;                                          // 0x0800(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_W52Z[0x20];                                    // 0x0808(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              TimecodeProviderClassName;                                 // 0x0828(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGenerateDefaultTimecode;                                  // 0x0840(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J1LD[0x3];                                     // 0x0841(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FFrameRate                                  GenerateDefaultTimecodeFrameRate;                          // 0x0844(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GenerateDefaultTimecodeFrameDelay;                         // 0x084C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                 // 0x0850(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OF50[0x3];                                     // 0x0851(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                        // 0x0854(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                    // 0x0858(0x0001) BIT_FIELD (Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_US8K[0x3];                                     // 0x0859(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      C_WorldBox;                                                // 0x085C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_BrushWire;                                               // 0x0860(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_AddWire;                                                 // 0x0864(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_SubtractWire;                                            // 0x0868(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_SemiSolidWire;                                           // 0x086C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_NonSolidWire;                                            // 0x0870(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_WireBackground;                                          // 0x0874(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_ScaleBoxHi;                                              // 0x0878(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_VolumeCollision;                                         // 0x087C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_BSPCollision;                                            // 0x0880(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_OrthoBackground;                                         // 0x0884(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_Volume;                                                  // 0x0888(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      C_BrushShape;                                              // 0x088C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StreamingDistanceFactor;                                   // 0x0890(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SDNS[0x4];                                     // 0x0894(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FDirectoryPath                              GameScreenshotSaveDirectory;                               // 0x0898(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	Engine_ETransitionType                             TransitionType;                                            // 0x08A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9YAX[0x7];                                     // 0x08A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TransitionDescription;                                     // 0x08B0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     TransitionGameMode;                                        // 0x08C0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMatureLanguage : 1;                                  // 0x08D0(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2Q3V[0x3];                                     // 0x08D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraRotationThreshold;                                   // 0x08D4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraTranslationThreshold;                                // 0x08D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrimitiveProbablyVisibleTime;                              // 0x08DC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOcclusionPixelsFraction;                                // 0x08E0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                   // 0x08E4(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JBUV[0x3];                                     // 0x08E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxParticleResize;                                         // 0x08E8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxParticleResizeWarn;                                     // 0x08EC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                       // 0x08F0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                              NetClientTicksPerSecond;                                   // 0x0900(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DisplayGamma;                                              // 0x0904(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDesiredFrameRate;                                       // 0x0908(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DefaultSelectedMaterialColor;                              // 0x090C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectedMaterialColor;                                     // 0x091C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectionOutlineColor;                                     // 0x092C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SubduedSelectionOutlineColor;                              // 0x093C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectedMaterialColorOverride;                             // 0x094C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bIsOverridingSelectedColor;                                // 0x095C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_SQTF[0x3];                                     // 0x095D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                          // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                   // 0x0960(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressMapWarnings : 1;                                  // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableAILogging : 1;                                     // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q57L[0x3];                                     // 0x0961(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           bEnableVisualLogRecordingOnStart;                          // 0x0964(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ScreenSaverInhibitorSemaphore;                             // 0x0968(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bLockReadOnlyLevels : 1;                                   // 0x096C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8R0L[0x3];                                     // 0x096D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ParticleEventManagerClassPath;                             // 0x0970(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelectionHighlightIntensity;                               // 0x0980(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BSPSelectionHighlightIntensity;                            // 0x0984(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelectionHighlightIntensityBillboards;                     // 0x0988(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4MLP[0x26C];                                   // 0x098C(0x026C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                      // 0x0BF8(0x0010) (ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ServerActors;                                              // 0x0C08(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             RuntimeServerActors;                                       // 0x0C18(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              NetErrorLogInterval;                                       // 0x0C28(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartedLoadMapMovie : 1;                                  // 0x0C2C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7GWV[0x1B];                                    // 0x0C2D(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NextWorldContextHandle;                                    // 0x0C48(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7E58[0x194];                                   // 0x0C4C(0x0194) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Engine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ScriptViewportClient
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData_804M[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ScriptViewportClient"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameViewportClient
// 0x0328 (FullSize[0x0360] - InheritedSize[0x0038])
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData_VKID[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UConsole*                                    ViewportConsole;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                           // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_934X[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxSplitscreenPlayers;                                     // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FCUS[0xC];                                     // 0x006C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      World;                                                     // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameInstance*                               GameInstance;                                              // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7Y2P[0x2D8];                                   // 0x0088(0x02D8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameViewportClient"));
		return ptr;
	}



	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Console
// 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData_FNYD[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULocalPlayer*                                ConsoleTargetPlayer;                                       // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture_Black;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture_White;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VUKL[0x18];                                    // 0x0050(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             HistoryBuffer;                                             // 0x0068(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7ENH[0xB8];                                    // 0x0078(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Console"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ControlChannel
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_EHQD[0x18];                                    // 0x0070(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ControlChannel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StreamingSettings
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                             // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                               // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_B17W[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeLimitExceededMultiplier;                               // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TimeLimitExceededMinTime;                                  // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MinBulkDataSizeForAsyncLoading;                            // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                           // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                          // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_W4RO[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AsyncLoadingTimeLimit;                                     // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PriorityAsyncLoadingExtraTime;                             // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelStreamingActorsUpdateTimeLimit;                       // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;               // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LevelStreamingComponentsRegistrationGranularity;           // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;               // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LevelStreamingComponentsUnregistrationGranularity;         // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      FlushStreamingOnExit : 1;                                  // 0x0068(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                              // 0x0068(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_TSZB[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StreamingSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GarbageCollectionSettings
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                      // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      FlushStreamingOnGC : 1;                                    // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AllowParallelGC : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      IncrementalBeginDestroyEnabled : 1;                        // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      MultithreadedDestructionEnabled : 1;                       // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      CreateGCClusters : 1;                                      // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AssetClusteringEnabled : 1;                                // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      ActorClusteringEnabled : 1;                                // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      BlueprintClusteringEnabled : 1;                            // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UseDisregardForGCOnDedicatedServers : 1;                   // 0x003D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_TD9P[0x2];                                     // 0x003E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinGCClusterSize;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumRetriesBeforeForcingGC;                                 // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsNotConsideredByGC;                               // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SizeOfPermanentObjectPool;                                 // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsInGame;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsInEditor;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GarbageCollectionSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CullDistanceVolume
// 0x0018 (FullSize[0x0270] - InheritedSize[0x0258])
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                             // 0x0258(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PD8K[0x7];                                     // 0x0269(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CullDistanceVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData_ZCU3[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveBase"));
		return ptr;
	}



	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveEdPresetCurve
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UCurveEdPresetCurve : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveEdPresetCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveFloat
// 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                                // 0x0030(0x0080) (NativeAccessSpecifierPublic)
	bool                                               bIsEventCurve;                                             // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RQID[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveFloat"));
		return ptr;
	}



	float GetFloatValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveLinearColor
// 0x0220 (FullSize[0x0250] - InheritedSize[0x0030])
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                          // 0x0030(0x0200) (NativeAccessSpecifierPublic)
	float                                              AdjustHue;                                                 // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustSaturation;                                          // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustBrightness;                                          // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustBrightnessCurve;                                     // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustVibrance;                                            // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustMinAlpha;                                            // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustMaxAlpha;                                            // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G0YR[0x4];                                     // 0x024C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveLinearColor"));
		return ptr;
	}



	struct FLinearColor GetLinearColorValue(float InTime);
	struct FLinearColor GetClampedLinearColorValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture2D
// 0x0028 (FullSize[0x0100] - InheritedSize[0x00D8])
class UTexture2D : public UTexture
{
public:
	int                                                LevelIndex;                                                // 0x00D8(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FirstResourceMemMip;                                       // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                          // 0x00E0(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VTN5[0x1];                                     // 0x00E3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FIntPoint                                   ImportedSize;                                              // 0x00E4(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_J18X[0x14];                                    // 0x00EC(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Texture2D"));
		return ptr;
	}



	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveLinearColorAtlas
// 0x0018 (FullSize[0x0118] - InheritedSize[0x0100])
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32_t                                           TextureSize;                                               // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SJV6[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCurveLinearColor*>                   GradientCurves;                                            // 0x0108(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveLinearColorAtlas"));
		return ptr;
	}



	bool GetCurvePosition(class UCurveLinearColor* InCurve, float* position);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveSourceInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UCurveSourceInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveSourceInterface"));
		return ptr;
	}



	float GetCurveValue(const struct FName& CurveName);
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues);
	struct FName GetBindingName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveVector
// 0x0180 (FullSize[0x01B0] - InheritedSize[0x0030])
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                          // 0x0030(0x0180) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.CurveVector"));
		return ptr;
	}



	struct FVector GetVectorValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataTableFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DataTableFunctionLibrary"));
		return ptr;
	}



	void GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);
	bool GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	TArray<struct FString> GetDataTableColumnAsString(class UDataTable* DataTable, const struct FName& PropertyName);
	void EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY, const struct FString& ContextString);
	bool DoesDataTableRowExist(class UDataTable* Table, const struct FName& RowName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugCameraController
// 0x0108 (FullSize[0x0678] - InheritedSize[0x0570])
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                     // 0x0570(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFrozenRendering : 1;                                    // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsOrbitingSelectedActor : 1;                              // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrbitPivotUseCenter : 1;                                  // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableBufferVisualization : 1;                            // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableBufferVisualizationFullMode : 1;                    // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBufferVisualizationInputSetup : 1;                      // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLastDisplayEnabled : 1;                                   // 0x0570(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VI0R[0x7];                                     // 0x0571(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0578(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      SelectedActor;                                             // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                         SelectedComponent;                                         // 0x0588(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                                  SelectedHitPoint;                                          // 0x0590(0x008C) (IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CFGK[0x4];                                     // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           OriginalControllerRef;                                     // 0x0620(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayer*                                     OriginalPlayer;                                            // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedScale;                                                // 0x0630(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialMaxSpeed;                                           // 0x0634(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialAccel;                                              // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialDecel;                                              // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H1Z8[0x38];                                    // 0x0640(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraController"));
		return ptr;
	}



	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);
	void ReceiveOnActivate(class APlayerController* OriginalPC);
	class AActor* GetSelectedActor();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugCameraControllerSettings
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraControllerSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugCameraHUD
// 0x0000 (FullSize[0x0310] - InheritedSize[0x0310])
class ADebugCameraHUD : public AHUD
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraHUD"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugDrawService
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DebugDrawService"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DecalActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                     // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DecalActor"));
		return ptr;
	}



	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DecalComponent
// 0x0048 (FullSize[0x0240] - InheritedSize[0x01F8])
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                             // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                sortOrder;                                                 // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeScreenSize;                                            // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeStartDelay;                                            // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeDuration;                                              // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInDuration;                                            // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInStartDelay;                                          // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                                // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q6E4[0x3];                                     // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     DecalSize;                                                 // 0x021C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1DI8[0x18];                                    // 0x0228(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DecalComponent"));
		return ptr;
	}



	void SetSortOrder(int Value);
	void SetFadeScreenSize(float NewFadeScreenSize);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetFadeIn(float StartDelay, float Duaration);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeInStartDelay();
	float GetFadeInDuration();
	float GetFadeDuration();
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsVolume
// 0x0010 (FullSize[0x0268] - InheritedSize[0x0258])
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                          // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Priority;                                                  // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FluidFriction;                                             // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWaterVolume : 1;                                          // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPhysicsOnContact : 1;                                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZOQB[0x3];                                     // 0x0265(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DefaultPhysicsVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoNetConnection
// 0x0070 (FullSize[0x1B60] - InheritedSize[0x1AF0])
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData_FZRU[0x70];                                    // 0x1AF0(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DemoNetConnection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoNetDriver
// 0x0B78 (FullSize[0x12C0] - InheritedSize[0x0748])
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData_CGJA[0xF8];                                    // 0x0748(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                                  // 0x0840(0x0050) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KC0V[0x15C];                                   // 0x0890(0x015C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CheckpointSaveMaxMSPerFrame;                               // 0x09EC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_URAF[0x20];                                    // 0x09F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMulticastRecordOptions>             MulticastRecordOptions;                                    // 0x0A10(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	bool                                               bIsLocalReplay;                                            // 0x0A20(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PT4P[0x7];                                     // 0x0A21(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APlayerController*>                   SpectatorControllers;                                      // 0x0A28(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_50PQ[0x888];                                   // 0x0A38(0x0888) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DemoNetDriver"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PendingNetGame
// 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData_CHAK[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetDriver*                                  NetDriver;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                              DemoNetDriver;                                             // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PZC2[0x80];                                    // 0x0040(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PendingNetGame"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoPendingNetGame
// 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
class UDemoPendingNetGame : public UPendingNetGame
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DemoPendingNetGame"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DestructibleInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDestructibleInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DestructibleInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureLODSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureLODSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeviceProfile
// 0x0070 (FullSize[0x00A8] - InheritedSize[0x0038])
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                                // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     BaseProfileName;                                           // 0x0048(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     Parent;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WX5B[0x28];                                    // 0x0060(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             CVars;                                                     // 0x0088(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C500[0x10];                                    // 0x0098(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfile"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeviceProfileFragment
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UDeviceProfileFragment : public UObject
{
public:
	unsigned char                                      UnknownData_3N3L[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfileFragment"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeviceProfileManager
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_22OO[0x78];                                    // 0x0038(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfileManager"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueSoundWaveProxy
// 0x0018 (FullSize[0x01D0] - InheritedSize[0x01B8])
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData_JBS5[0x18];                                    // 0x01B8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DialogueSoundWaveProxy"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueVoice
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<Engine_EGrammaticalGender>             Gender;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EGrammaticalNumber>             Plurality;                                                 // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A76Y[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       LocalizationGUID;                                          // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_19S1[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DialogueVoice"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueWave
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                               // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_SubtitleOverride : 1;                            // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AYWZ[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SubtitleOverride;                                          // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                           // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                       LocalizationGUID;                                          // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DialogueWave"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Light
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                            // 0x0220(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0228(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8BHY[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Light"));
		return ptr;
	}



	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DirectionalLight
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class ADirectionalLight : public ALight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLight"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DirectionalLightComponent
// 0x00C4 (FullSize[0x03F0] - InheritedSize[0x032C])
class UDirectionalLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData_LTMH[0x4];                                     // 0x032C(0x0004) Fix Super Size
	float                                              OcclusionMaskDarkness;                                     // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionDepthRange;                                       // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LightShaftOverrideDirection;                               // 0x0338(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WholeSceneDynamicShadowRadius;                             // 0x0344(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicShadowDistanceMovableLight;                         // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicShadowDistanceStationaryLight;                      // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DynamicShadowCascades;                                     // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CascadeDistributionExponent;                               // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CascadeTransitionFraction;                                 // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowDistanceFadeoutFraction;                             // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                     // 0x0360(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H7WY[0x3];                                     // 0x0361(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FarShadowCascadeCount;                                     // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FarShadowDistance;                                         // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldShadowDistance;                               // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightSourceAngle;                                          // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightSourceSoftAngle;                                      // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowSourceAngleFactor;                                   // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceDistance;                                             // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                             // 0x0380(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6JZ5[0x3];                                     // 0x0381(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AtmosphereSunLightIndex;                                   // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                AtmosphereSunDiskColorScale;                               // 0x0388(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPerPixelAtmosphereTransmittance : 1;                      // 0x0398(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowsOnClouds : 1;                                  // 0x0398(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowsOnAtmosphere : 1;                              // 0x0398(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCloudShadows : 1;                                     // 0x0398(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_81IJ[0x3];                                     // 0x0399(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CloudShadowStrength;                                       // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowOnAtmosphereStrength;                           // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowOnSurfaceStrength;                              // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowDepthBias;                                      // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowExtent;                                         // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowMapResolutionScale;                             // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudShadowRaySampleCountScale;                            // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                CloudScatteredLuminanceScale;                              // 0x03B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                         // 0x03C8(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bCastModulatedShadows : 1;                                 // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JARD[0x3];                                     // 0x03D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      ModulatedShadowColor;                                      // 0x03DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowAmount;                                              // 0x03E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7GGM[0xC];                                     // 0x03E4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLightComponent"));
		return ptr;
	}



	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetShadowAmount(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
	void SetAtmosphereSunLightIndex(int NewValue);
	void SetAtmosphereSunLight(bool bNewValue);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Distribution
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData_0NDG[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Distribution"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloat
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YSWW : 1;                                      // 0x0030(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBakedDataSuccesfully : 1;                                 // 0x0030(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_UHJV[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloat"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatConstant
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SETA[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstant"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatConstantCurve
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstantCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatParameterBase
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinInput;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxInput;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinOutput;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOutput;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamMode;                                                 // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0JFQ[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParameterBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParticleParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatUniform
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Max;                                                       // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniform"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatUniformCurve
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniformCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVector
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsDirty : 1;                                              // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBakedDataSuccesfully : 1;                                 // 0x0030(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_IR27[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorConstant
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_30MD[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K1Q6[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstant"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorConstantCurve
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7KOO[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TU1K[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstantCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorParameterBase
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MinInput;                                                  // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MaxInput;                                                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MinOutput;                                                 // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MaxOutput;                                                 // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamModes[0x3];                                           // 0x0088(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W992[0x5];                                     // 0x008B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParameterBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParticleParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorUniform
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                       // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     Min;                                                       // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HW7G[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x0055(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0Z23[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniform"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorUniformCurve
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes1 : 1;                                            // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes2 : 1;                                            // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OSAH[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes[0x2];                                           // 0x0054(0x0002) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x0056(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZFRG[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseExtremes : 1;                                          // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S4I3[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniformCurve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DocumentationActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData_DTK4[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DocumentationActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DPICustomScalingRule
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDPICustomScalingRule : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DPICustomScalingRule"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DrawFrustumComponent
// 0x0020 (FullSize[0x0460] - InheritedSize[0x0440])
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                              // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumAngle;                                              // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumAspectRatio;                                        // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumStartDist;                                          // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumEndDist;                                            // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1TTD[0x4];                                     // 0x0454(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture*                                    Texture;                                                   // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DrawFrustumComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereComponent
// 0x0008 (FullSize[0x0460] - InheritedSize[0x0458])
class USphereComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_U1IK[0x8];                                     // 0x0458(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SphereComponent"));
		return ptr;
	}



	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DrawSphereComponent
// 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
class UDrawSphereComponent : public USphereComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.DrawSphereComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraph
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphNode*>                        Nodes;                                                     // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bEditable : 1;                                             // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowDeletion : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowRenaming : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C9YK[0x1F];                                    // 0x0041(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EdGraph"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GraphNodeContextMenuContext
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                                  Blueprint;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraph*                                    Graph;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                                Node;                                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MIX4[0x8];                                     // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsDebugging;                                              // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_17PB[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GraphNodeContextMenuContext"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphNode
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData_P8CM[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                            // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                NodePosX;                                                  // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodePosY;                                                  // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodeWidth;                                                 // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodeHeight;                                                // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENodeAdvancedPins>              AdvancedPinDisplay;                                        // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENodeEnabledState                           EnabledState;                                              // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_WGAP[0x1];                                     // 0x005A(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_304R : 1;                                      // 0x005B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisplayAsDisabled : 1;                                    // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bUserSetEnabledState : 1;                                  // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RWPU : 1;                                      // 0x005B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsNodeEnabled : 1;                                        // 0x005B(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_PHZ3 : 1;                                      // 0x005B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasCompilerMessage : 1;                                   // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZG59[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NodeComment;                                               // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ErrorType;                                                 // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QFOU[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ErrorMsg;                                                  // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       NodeGuid;                                                  // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphNode_Documentation
// 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                      // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Excerpt;                                                   // 0x00A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode_Documentation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphPin_Deprecated
// 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
class UEdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                                   // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PinToolTip;                                                // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEdGraphPinDirection>           Direction;                                                 // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PJRI[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FEdGraphPinType                             PinType;                                                   // 0x0050(0x0058) (NoDestructor, NativeAccessSpecifierPublic)
	struct FString                                     DefaultValue;                                              // 0x00A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     AutogeneratedDefaultValue;                                 // 0x00B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     DefaultObject;                                             // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       DefaultTextValue;                                          // 0x00D0(0x0018) (NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                  // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                   // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                      ParentPin;                                                 // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                            // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EdGraphPin_Deprecated"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphSchema
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEdGraphSchema : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EdGraphSchema"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Emitter
// 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                   // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bDestroyOnSystemFinish : 1;                                // 0x0228(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPostUpdateTickGroup : 1;                                  // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCurrentlyActive : 1;                                      // 0x0228(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DC5Q[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Emitter"));
		return ptr;
	}



	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EmitterCameraLensEffectBase
// 0x0070 (FullSize[0x02E0] - InheritedSize[0x0270])
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                           // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                          // 0x0278(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                        BaseCamera;                                                // 0x0280(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_2POR[0x8];                                     // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  RelativeTransform;                                         // 0x0290(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              BaseFOV;                                                   // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMultipleInstances : 1;                               // 0x02C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bResetWhenRetriggered : 1;                                 // 0x02C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4VMC[0x3];                                     // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              EmittersToTreatAsSame;                                     // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                              DistFromCamera;                                            // 0x02D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_21TK[0x4];                                     // 0x02DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EmitterCameraLensEffectBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ViewModeUtils
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UViewModeUtils : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ViewModeUtils"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineBaseTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineBaseTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineBaseTypes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineHandlerComponentFactory
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineHandlerComponentFactory"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalMessage
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULocalMessage : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LocalMessage"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineMessage
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                        // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     MaxedOutMessage;                                           // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     EnteredMessage;                                            // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LeftMessage;                                               // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GlobalNameChange;                                          // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SpecEnteredMessage;                                        // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NewPlayerMessage;                                          // 0x0088(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NewSpecMessage;                                            // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineMessage"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EngineTypes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ExponentialHeightFog
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                 // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0228(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7GY3[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFog"));
		return ptr;
	}



	void OnRep_bEnabled();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ExponentialHeightFogComponent
// 0x00A8 (FullSize[0x02A0] - InheritedSize[0x01F8])
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_12PH[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              FogHeightFalloff;                                          // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData                   SecondFogData;                                             // 0x0200(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                                FogInscatteringColor;                                      // 0x020C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0UOX[0x4];                                     // 0x021C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                InscatteringColorCubemap;                                  // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InscatteringColorCubemapAngle;                             // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                InscatteringTextureTint;                                   // 0x022C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FullyDirectionalInscatteringColorDistance;                 // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NonDirectionalInscatteringColorDistance;                   // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DirectionalInscatteringExponent;                           // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DirectionalInscatteringStartDistance;                      // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DirectionalInscatteringColor;                              // 0x024C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogMaxOpacity;                                             // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartDistance;                                             // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogCutoffDistance;                                         // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableVolumetricFog;                                      // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0HMR[0x3];                                     // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VolumetricFogScatteringDistribution;                       // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      VolumetricFogAlbedo;                                       // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                VolumetricFogEmissive;                                     // 0x0274(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogExtinctionScale;                              // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogDistance;                                     // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogStaticLightingScatteringIntensity;            // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;             // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9BGP[0xF];                                     // 0x0291(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFogComponent"));
		return ptr;
	}



	void SetVolumetricFogScatteringDistribution(float NewValue);
	void SetVolumetricFogExtinctionScale(float NewValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue);
	void SetVolumetricFogDistance(float NewValue);
	void SetVolumetricFogAlbedo(const struct FColor& NewValue);
	void SetVolumetricFog(bool bNewValue);
	void SetStartDistance(float Value);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringColorCubemap(class UTextureCube* Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFogCutoffDistance(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Exporter
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                            // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     ExportRootScope;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FormatExtension;                                           // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FormatDescription;                                         // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                PreferredFormatIndex;                                      // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TextIndent;                                                // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bText : 1;                                                 // 0x0060(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectedOnly : 1;                                         // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceFileOperations : 1;                                  // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1Z6H[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAssetExportTask*                            ExportTask;                                                // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0JT2[0x8];                                     // 0x0070(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Exporter"));
		return ptr;
	}



	bool ScriptRunAssetExportTask(class UAssetExportTask* Task);
	bool RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks);
	bool RunAssetExportTask(class UAssetExportTask* Task);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Font
// 0x01A8 (FullSize[0x01D0] - InheritedSize[0x0028])
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData_B9C6[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EFontCacheType                              FontCacheType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G1ZY[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFontCharacter>                      Characters;                                                // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                          Textures;                                                  // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                IsRemapped;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmScale;                                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Ascent;                                                    // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Descent;                                                   // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Leading;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Kerning;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontImportOptionsData                      ImportOptions;                                             // 0x0070(0x00B0) (Edit, NativeAccessSpecifierPublic)
	int                                                NumCharacters;                                             // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WBQ1[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        MaxCharHeight;                                             // 0x0128(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                              ScalingFactor;                                             // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LegacyFontSize;                                            // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LegacyFontName;                                            // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompositeFont                              CompositeFont;                                             // 0x0148(0x0038) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ED4U[0x50];                                    // 0x0180(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Font"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FontFace
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UFontFace : public UObject
{
public:
	unsigned char                                      UnknownData_7UZA[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SourceFilename;                                            // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontHinting                             Hinting;                                                   // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontLoadingPolicy                       LoadingPolicy;                                             // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontLayoutMethod                        LayoutMethod;                                              // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1DLT[0x15];                                    // 0x0043(0x0015) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.FontFace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FontImportOptions
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                      // 0x0028(0x00B0) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.FontImportOptions"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ForceFeedbackAttenuation
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings           Attenuation;                                               // 0x0028(0x00B0) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackAttenuation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ForceFeedbackComponent
// 0x00E8 (FullSize[0x02E0] - InheritedSize[0x01F8])
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                       // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x0200(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x0200(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_REI3[0x3];                                     // 0x0201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IntensityMultiplier;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                       // 0x0208(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackAttenuationSettings           AttenuationOverrides;                                      // 0x0210(0x00B0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnForceFeedbackFinished;                                   // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7KCY[0x10];                                    // 0x02D0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackComponent"));
		return ptr;
	}



	void Stop();
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void Play(float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings);
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ForceFeedbackEffect
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                            // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              Duration;                                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BIG4[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackEffect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameEngine
// 0x0050 (FullSize[0x0E30] - InheritedSize[0x0DE0])
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                              // 0x0DE0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerFlushLogInterval;                                    // 0x0DE4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                               GameInstance;                                              // 0x0DE8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0CQI[0x40];                                    // 0x0DF0(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameEngine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameNetworkManager
// 0x00B0 (FullSize[0x02D0] - InheritedSize[0x0220])
class AGameNetworkManager : public AInfo
{
public:
	float                                              BadPacketLossThreshold;                                    // 0x0220(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeverePacketLossThreshold;                                 // 0x0224(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BadPingThreshold;                                          // 0x0228(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SeverePingThreshold;                                       // 0x022C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AdjustedNetSpeed;                                          // 0x0230(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastNetSpeedUpdateTime;                                    // 0x0234(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TotalNetBandwidth;                                         // 0x0238(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinDynamicBandwidth;                                       // 0x023C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDynamicBandwidth;                                       // 0x0240(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                             // 0x0244(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                             // 0x0244(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TW3R[0x3];                                     // 0x0245(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StandbyRxCheatTime;                                        // 0x0248(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandbyTxCheatTime;                                        // 0x024C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentMissingForRxStandby;                                // 0x0250(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentMissingForTxStandby;                                // 0x0254(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentForBadPing;                                         // 0x0258(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoinInProgressStandbyWaitTime;                             // 0x025C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveRepSize;                                               // 0x0260(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXPOSITIONERRORSQUARED;                                   // 0x0264(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXNEARZEROVELOCITYSQUARED;                                // 0x0268(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CLIENTADJUSTUPDATECOST;                                    // 0x026C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXCLIENTUPDATEINTERVAL;                                   // 0x0270(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxClientForcedUpdateDuration;                             // 0x0274(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerForcedUpdateHitchThreshold;                          // 0x0278(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerForcedUpdateHitchCooldown;                           // 0x027C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxMoveDeltaTime;                                          // 0x0280(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxClientSmoothingDeltaTime;                               // 0x0284(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTime;                                // 0x0288(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                       // 0x028C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTimeStationary;                      // 0x0290(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                       // 0x0294(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                  // 0x0298(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ClientAuthorativePosition;                                 // 0x029C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JBFZ[0x3];                                     // 0x029D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ClientErrorUpdateRateLimit;                                // 0x02A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetCamUpdateDeltaTime;                               // 0x02A4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetCamUpdatePositionLimit;                           // 0x02A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyDetection;                         // 0x02AC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyResolution;                        // 0x02AD(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_12TI[0x2];                                     // 0x02AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                      // 0x02B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                      // 0x02B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyResolutionRate;                     // 0x02B8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyDriftAllowance;                     // 0x02BC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;  // 0x02C0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDistanceBasedRelevancy;                                // 0x02C1(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LND7[0xE];                                     // 0x02C2(0x000E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameNetworkManager"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameplayStatics
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameplayStatics"));
		return ptr;
	}



	void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	void UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam);
	class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);
	class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem);
	class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);
	class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, float LifeSpan);
	class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void SetViewportMouseCaptureMode(class UObject* WorldContextObject, Engine_EMouseCaptureMode MouseCaptureMode);
	void SetSubtitlesEnabled(bool bEnabled);
	void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);
	void SetPlayerControllerID(class APlayerController* Player, int ControllerId);
	void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);
	void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);
	void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);
	void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	bool SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	struct FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	struct FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	bool ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative);
	void PrimeSound(class USoundBase* InSound);
	void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor);
	void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound);
	void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	struct FString ParseOption(const struct FString& Options, const struct FString& Key);
	void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bAbsolute, const struct FString& Options);
	void OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	void LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool IsSplitscreenForceDisabled(class UObject* WorldContextObject);
	bool IsGamePaused(class UObject* WorldContextObject);
	bool HasOption(const struct FString& Options, const struct FString& InKey);
	bool HasLaunchOption(const struct FString& OptionToCheck);
	int GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);
	float GetWorldDeltaSeconds(class UObject* WorldContextObject);
	void GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix);
	Engine_EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject);
	float GetUnpausedTimeSeconds(class UObject* WorldContextObject);
	float GetTimeSeconds(class UObject* WorldContextObject);
	TEnumAsByte<PhysicsCore_EPhysicalSurface> GetSurfaceType(const struct FHitResult& Hit);
	class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	int GetPlayerControllerID(class APlayerController* Player);
	class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int ControllerId);
	class APlayerController* GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString GetPlatformName();
	class UClass* GetObjectClass(class UObject* Object);
	int GetMaxAudioChannelCount(class UObject* WorldContextObject);
	void GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	int GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);
	float GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameStateBase* GetGameState(class UObject* WorldContextObject);
	class AGameModeBase* GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* GetGameInstance(class UObject* WorldContextObject);
	bool GetEnableWorldRendering(class UObject* WorldContextObject);
	class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);
	struct FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	bool GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector* ListenerPosition);
	float GetAudioTimeSeconds(class UObject* WorldContextObject);
	void GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors);
	void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
	void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, const struct FName& Tag, TArray<class AActor*>* OutActors);
	void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	class AActor* GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);
	void GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector GetActorArrayAverageLocation(TArray<class AActor*> Actors);
	void GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	void FlushLevelStreaming(class UObject* WorldContextObject);
	class AActor* FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform);
	bool FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV);
	void EnableLiveStreaming(bool Enable);
	bool DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);
	class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);
	class APlayerController* CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController);
	void ClearSoundMixModifiers(class UObject* WorldContextObject);
	void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	void CancelAsyncLoading();
	void BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult);
	class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner);
	class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, Engine_ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner);
	bool AreSubtitlesEnabled();
	bool AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* eventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* eventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void AnnounceAccessibleString(const struct FString& AnnouncementString);
	void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameUserSettings
// 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                 // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDynamicResolution;                                     // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FCQ6[0x56];                                    // 0x002A(0x0056) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ResolutionSizeX;                                           // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           ResolutionSizeY;                                           // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                          // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                          // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                WindowPosX;                                                // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                WindowPosY;                                                // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                FullscreenMode;                                            // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastConfirmedFullscreenMode;                               // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                PreferredFullscreenMode;                                   // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           Version;                                                   // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                AudioQualityLevel;                                         // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastConfirmedAudioQualityLevel;                            // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FrameRateLimit;                                            // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_S25O[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DesiredScreenWidth;                                        // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseDesiredScreenHeight;                                   // 0x00BC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Q9ZY[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DesiredScreenHeight;                                       // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastUserConfirmedDesiredScreenWidth;                       // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastUserConfirmedDesiredScreenHeight;                      // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastRecommendedScreenWidth;                                // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastRecommendedScreenHeight;                               // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastCPUBenchmarkResult;                                    // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastGPUBenchmarkResult;                                    // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_041G[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LastCPUBenchmarkSteps;                                     // 0x00E0(0x0010) (ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                      LastGPUBenchmarkSteps;                                     // 0x00F0(0x0010) (ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                              LastGPUBenchmarkMultiplier;                                // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseHDRDisplayOutput;                                      // 0x0104(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_RTAI[0x3];                                     // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                HDRDisplayOutputNits;                                      // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_0XLX[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameUserSettings"));
		return ptr;
	}



	void ValidateSettings();
	bool SupportsHDRDisplayOutput();
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int Value);
	void SetViewDistanceQuality(int Value);
	void SetToDefaults();
	void SetTextureQuality(int Value);
	void SetShadowQuality(int Value);
	void SetShadingQuality(int Value);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetPostProcessingQuality(int Value);
	void SetOverallScalabilityLevel(int Value);
	void SetFullscreenMode(TEnumAsByte<Engine_EWindowMode> InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int Value);
	void SetDynamicResolutionEnabled(bool bEnable);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int QualityLevel);
	void SetAntiAliasingQuality(int Value);
	void SaveSettings();
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsHDREnabled();
	bool IsFullscreenModeDirty();
	bool IsDynamicResolutionEnabled();
	bool IsDynamicResolutionDirty();
	bool IsDirty();
	int GetVisualEffectQuality();
	int GetViewDistanceQuality();
	int GetTextureQuality();
	int GetSyncInterval();
	int GetShadowQuality();
	int GetShadingQuality();
	struct FIntPoint GetScreenResolution();
	float GetResolutionScaleNormalized();
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);
	float GetRecommendedResolutionScale();
	TEnumAsByte<Engine_EWindowMode> GetPreferredFullscreenMode();
	int GetPostProcessingQuality();
	int GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	TEnumAsByte<Engine_EWindowMode> GetLastConfirmedFullscreenMode();
	class UGameUserSettings* GetGameUserSettings();
	TEnumAsByte<Engine_EWindowMode> GetFullscreenMode();
	float GetFrameRateLimit();
	int GetFramePace();
	int GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint GetDefaultWindowPosition();
	TEnumAsByte<Engine_EWindowMode> GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint GetDefaultResolution();
	int GetCurrentHDRDisplayNits();
	int GetAudioQualityLevel();
	int GetAntiAliasingQuality();
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpotLight
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SpotLight"));
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class AGeneratedMeshAreaLight : public ASpotLight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GeneratedMeshAreaLight"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UHapticFeedbackEffect_Base : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Base"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HapticFeedbackEffect_Buffer
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                                // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                SampleRate;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6PO7[0x2C];                                    // 0x003C(0x002C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Buffer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                             // 0x0028(0x0110) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Curve"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F31Z[0x30];                                    // 0x0030(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_SoundWave"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HealthSnapshotBlueprintLibrary"));
		return ptr;
	}



	void StopPerformanceSnapshots();
	void StartPerformanceSnapshots();
	void LogPerformanceSnapshot(const struct FString& SnapshotTitle, bool bResetStats);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HLODEngineSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UHLODEngineSubsystem : public UEngineSubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HLODEngineSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HLODProxy
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                      ProxyMeshes;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                                // 0x0038(0x0050) (Edit, EditConst, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HLODProxy"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HLODProxyDesc
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UHLODProxyDesc : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HLODProxyDesc"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ImportanceSamplingLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ImportanceSamplingLibrary"));
		return ptr;
	}



	float RandomSobolFloat(int Index, int Dimension, float Seed);
	struct FVector RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed);
	struct FVector2D RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed);
	float NextSobolFloat(int Index, int Dimension, float PreviousValue);
	struct FVector NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue);
	struct FVector2D NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue);
	struct FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<Engine_EImportanceWeight> WeightingFunc);
	void ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);
	void BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, TEnumAsByte<Engine_EImportanceWeight>* WeightingFunc);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ImportantToggleSettingInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UImportantToggleSettingInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ImportantToggleSettingInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InGameAdManager
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                               // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3HWS[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                    // 0x0040(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                         // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InGameAdManager"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InheritableComponentHandler
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                   // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                     // 0x0038(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InheritableComponentHandler"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputDelegateBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputActionDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputActionDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputAxisDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputAxisDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputAxisKeyDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputComponent
// 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_01R0[0x70];                                    // 0x00B0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCachedKeyToActionInfo>              CachedKeyToActionInfo;                                     // 0x0120(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_SNMO[0x8];                                     // 0x0130(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputComponent"));
		return ptr;
	}



	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                  // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputKeyDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputSettings
// 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                                // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                            // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bF11TogglesFullscreen : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMouseForTouch : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMouseSmoothing : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableFOVScaling : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCaptureMouseOnLaunch : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultViewportMouseLock : 1;                             // 0x0038(0x0001) BIT_FIELD (Config, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysShowTouchInterface : 1;                             // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowConsoleOnFourFingerTap : 1;                           // 0x0039(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableGestureRecognizer : 1;                              // 0x0039(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAutocorrect;                                           // 0x003A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W95Q[0x5];                                     // 0x003B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             ExcludedAutocorrectOS;                                     // 0x0040(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ExcludedAutocorrectCultures;                               // 0x0050(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ExcludedAutocorrectDeviceModels;                           // 0x0060(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	Engine_EMouseCaptureMode                           DefaultViewportMouseCaptureMode;                           // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMouseLockMode                              DefaultViewportMouseLockMode;                              // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DF1K[0x2];                                     // 0x0072(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOVScale;                                                  // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoubleClickTime;                                           // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CKGT[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                            // 0x0080(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                              // 0x0090(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputActionSpeechMapping>           SpeechMappings;                                            // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	unsigned char                                      DefaultPlayerInputClass[0x28];                             // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
	unsigned char                                      DefaultInputComponentClass[0x28];                          // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
	struct FSoftObjectPath                             DefaultTouchInterface;                                     // 0x0100(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                        ConsoleKey;                                                // 0x0118(0x0018) (Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                                ConsoleKeys;                                               // 0x0130(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputSettings"));
		return ptr;
	}



	void SaveKeyMappings();
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	class UInputSettings* GetInputSettings();
	void GetAxisNames(TArray<struct FName>* AxisNames);
	void GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings);
	void GetActionNames(TArray<struct FName>* ActionNames);
	void GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings);
	void ForceRebuildKeymaps();
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputTouchDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputTouchDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InputVectorAxisDelegateBinding"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_AssetUserData : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Interface_AssetUserData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoneReferenceSkeletonProvider
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBoneReferenceSkeletonProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BoneReferenceSkeletonProvider"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_CollisionDataProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Interface_CollisionDataProvider"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_PostProcessVolume
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_PostProcessVolume : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Interface_PostProcessVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_PreviewMeshProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Interface_PreviewMeshProvider"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpCurveEdSetup
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                      // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                ActiveTab;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_643Y[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpCurveEdSetup"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpData
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                              // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PathBuildTime;                                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpGroup*>                        InterpGroups;                                              // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdSectionStart;                                            // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdSectionEnd;                                              // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBakeAndPrune : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MUWK[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpGroupDirector*                        CachedDirectorGroup;                                       // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               AllEventNames;                                             // 0x0060(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                   // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter_Classes
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Classes : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Classes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter_Custom
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Custom : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Custom"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroup
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData_LN4Q[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        InterpTracks;                                              // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FName                                       GroupName;                                                 // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      GroupColor;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollapsed : 1;                                            // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisible : 1;                                              // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFolder : 1;                                             // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsParented : 1;                                           // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSelected : 1;                                           // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UQE5[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroup"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupCamera
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                            // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CompressTolerance;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D6OC[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupCamera"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupDirector
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UInterpGroupDirector : public UInterpGroup
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupDirector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInst
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      GroupActor;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                 // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInst"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInstCamera
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstCamera"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInstDirector
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstDirector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpToMovementComponent
// 0x00A0 (FullSize[0x0190] - InheritedSize[0x00F0])
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                  // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseOnImpact : 1;                                        // 0x00F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CP4L[0x3];                                     // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bSweep;                                                    // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ETeleportType                               TeleportType;                                              // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EInterpToBehaviourType                      BehaviourType;                                             // 0x00FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckIfStillInWorld;                                      // 0x00FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x00FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R431[0x3];                                     // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                         // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                            // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                       // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                         // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                           // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              MaxSimulationTimeStep;                                     // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                             // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RON0[0x28];                                    // 0x0168(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpToMovementComponent"));
		return ptr;
	}



	void StopSimulating(const struct FHitResult& HitResult);
	void RestartMovement(float InitialDirection);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void FinaliseControlPoints();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackAnimControl
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                  // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                  // 0x0098(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipAnimNotifiers : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q1GS[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAnimControl"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAudioMaster"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackBoolProp
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                 // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FName                                       PropertyName;                                              // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackBoolProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackColorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackColorScale
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorScale"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackDirector
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                  // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                          // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_FFNV[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackDirector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackEvent
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                                // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCustomEventName : 1;                                   // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QOZ9[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackEvent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFade
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                          // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFadeAudio : 1;                                            // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A364[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                FadeColor;                                                 // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W3NJ[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                        // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AnimClass;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JNN6[0x8];                                     // 0x00A8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatAnimBPParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatMaterialParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatParticleParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstAnimControl
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VO5M[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAnimControl"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAudioMaster"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstProperty
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	unsigned char                                      InterpProperty[0x20];                                      // 0x0028(0x0020) UNKNOWN PROPERTY: FieldPathProperty
	class UObject*                                     PropertyOuterObjectInst;                                   // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstProperty"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstBoolProp
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_0FVE[0x10];                                    // 0x0050(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               ResetBool;                                                 // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7QDN[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstBoolProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstColorProp
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_8JFI[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      ResetColor;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_66RH[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorScale"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstDirector
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstDirector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstEvent
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_54K3[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstEvent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFade
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstFade : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                        // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ResetFloat;                                                // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9PNM[0xC];                                     // 0x0034(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatAnimBPParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                      ResetFloats;                                               // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatMaterialParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                                // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_75LX[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatParticleParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatProp
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_MR95[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResetFloat;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_197N[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_7ERZ[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                ResetColor;                                                // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstLinearColorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstMove
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                             // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    ResetRotation;                                             // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstMove"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_85YE[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstParticleReplay"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstSlomo
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1GVZ[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstSlomo"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstSound
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2JGB[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             PlayAudioComp;                                             // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstSound"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstToggle
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_ETrackToggleAction>             Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FQAQ[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSavedActiveState : 1;                                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JKR6[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstToggle"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             ResetVectors;                                              // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorMaterialParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVectorProp
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_9EK0[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ResetVector;                                               // 0x0058(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NV5E[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVisibility
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_EVisibilityTrackAction>         Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1IU0[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVisibility"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackLinearColorBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                          // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KV0Y[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackLinearColorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackMove
// 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                  // 0x0070(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          EulerTrack;                                                // 0x0088(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A0(0x0010) (NativeAccessSpecifierPublic)
	struct FName                                       LookAtGroupName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LinCurveTension;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngCurveTension;                                           // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseQuatInterpolation : 1;                                 // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowArrowAtKeys : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMovement : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                             // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowRotationOnCurveEd : 1;                                // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHide3DTrack : 1;                                          // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A16S[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EInterpTrackMoveRotMode>        RotMode;                                                   // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HWUX[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMove"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackMoveAxis
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<Engine_EInterpMoveAxis>                MoveAxis;                                                  // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7PTR[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x0098(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMoveAxis"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackParticleReplay
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                 // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackParticleReplay"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackSlomo
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackSlomo"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackSound
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                    // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayOnReverse : 1;                                        // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                            // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsDialogue : 1;                                      // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAttach : 1;                                               // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4I4R[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackSound"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackToggle
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                               // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bActivateSystemEachUpdate : 1;                             // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                         // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YY02[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackToggle"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorMaterialParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorProp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVisibility
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                           // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O15N[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVisibility"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.IntSerialization
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                     // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NXTT[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UnsignedInt32Variable;                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64_t                                           UnsignedInt64Variable;                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             SignedInt8Variable;                                        // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YQ1T[0x1];                                     // 0x0039(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int16_t                                            SignedInt16Variable;                                       // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0MQS[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int64_t                                            SignedInt64Variable;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnsignedInt8Variable;                                      // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N9ZN[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SignedInt32Variable;                                       // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.IntSerialization"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KillZVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class AKillZVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KillZVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetArrayLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetArrayLibrary"));
		return ptr;
	}



	void SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
	void Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex);
	void Array_Shuffle(TArray<int> TargetArray);
	void Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	void Array_Reverse(TArray<int> TargetArray);
	void Array_Resize(TArray<int> TargetArray, int Size);
	bool Array_RemoveItem(TArray<int> TargetArray, int Item);
	void Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	void Array_RandomFromStream(TArray<int> TargetArray, struct FRandomStream* RandomStream, int* OutItem, int* OutIndex);
	void Array_Random(TArray<int> TargetArray, int* OutItem, int* OutIndex);
	int Array_Length(TArray<int> TargetArray);
	int Array_LastIndex(TArray<int> TargetArray);
	bool Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);
	void Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	bool Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB);
	void Array_Get(TArray<int> TargetArray, int Index, int* Item);
	int Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void Array_Clear(TArray<int> TargetArray);
	void Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int Array_Add(TArray<int> TargetArray, int NewItem);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetGuidLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetGuidLibrary"));
		return ptr;
	}



	void Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success);
	bool NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FGuid NewGuid();
	bool IsValid_Guid(const struct FGuid& InGuid);
	void Invalidate_Guid(struct FGuid* InGuid);
	bool EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FString Conv_GuidToString(const struct FGuid& InGuid);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetInputLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetInputLibrary"));
		return ptr;
	}



	bool PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
	bool PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	float PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	int PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	int PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	int PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	Engine_ESlateGesture PointerEvent_GetGestureType(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	struct FKey PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	bool Key_IsVectorAxis(const struct FKey& Key);
	bool Key_IsValid(const struct FKey& Key);
	bool Key_IsMouseButton(const struct FKey& Key);
	bool Key_IsModifierKey(const struct FKey& Key);
	bool Key_IsKeyboardKey(const struct FKey& Key);
	bool Key_IsGamepadKey(const struct FKey& Key);
	bool Key_IsDigital(const struct FKey& Key);
	bool Key_IsButtonAxis(const struct FKey& Key);
	bool Key_IsAxis3D(const struct FKey& Key);
	bool Key_IsAxis2D(const struct FKey& Key);
	bool Key_IsAxis1D(const struct FKey& Key);
	bool Key_IsAnalog(const struct FKey& Key);
	SlateCore_EUINavigation Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent);
	SlateCore_EUINavigation Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent);
	SlateCore_EUINavigationAction Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent);
	SlateCore_EUINavigationAction Key_GetNavigationAction(const struct FKey& InKey);
	struct FText Key_GetDisplayName(const struct FKey& Key);
	bool InputEvent_IsShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	bool InputEvent_IsRepeat(const struct FInputEvent& Input);
	bool InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	bool InputEvent_IsControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsAltDown(const struct FInputEvent& Input);
	struct FText InputChord_GetDisplayName(const struct FInputChord& Key);
	int GetUserIndex(const struct FKeyEvent& Input);
	struct FKey GetKey(const struct FKeyEvent& Input);
	float GetAnalogValue(const struct FAnalogInputEvent& Input);
	bool EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	bool EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);
	void CalibrateTilt();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetInternationalizationLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetInternationalizationLibrary"));
		return ptr;
	}



	bool SetCurrentLocale(const struct FString& Culture, bool SaveToConfig);
	bool SetCurrentLanguageAndLocale(const struct FString& Culture, bool SaveToConfig);
	bool SetCurrentLanguage(const struct FString& Culture, bool SaveToConfig);
	bool SetCurrentCulture(const struct FString& Culture, bool SaveToConfig);
	bool SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const struct FString& Culture, bool SaveToConfig);
	struct FString GetSuitableCulture(TArray<struct FString> AvailableCultures, const struct FString& CultureToMatch, const struct FString& FallbackCulture);
	struct FString GetNativeCulture(CoreUObject_ELocalizedTextSourceCategory TextCategory);
	TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);
	struct FString GetCurrentLocale();
	struct FString GetCurrentLanguage();
	struct FString GetCurrentCulture();
	struct FString GetCurrentAssetGroupCulture(const struct FName& AssetGroup);
	struct FString GetCultureDisplayName(const struct FString& Culture, bool Localized);
	void ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetMaterialLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetMaterialLibrary"));
		return ptr;
	}



	void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	struct FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, const struct FName& OptionalName, Engine_EMIDCreationFlags CreationFlags);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetMathLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetMathLibrary"));
		return ptr;
	}



	int Xor_IntInt(int A, int B);
	int64_t Xor_Int64Int64(int64_t A, int64_t B);
	int Wrap(int Value, int Min, int Max);
	struct FVector WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight);
	struct FRotator WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight);
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);
	float VSizeXYSquared(const struct FVector& A);
	float VSizeXY(const struct FVector& A);
	float VSizeSquared(const struct FVector& A);
	float VSize2DSquared(const struct FVector2D& A);
	float VSize2D(const struct FVector2D& A);
	float VSize(const struct FVector& A);
	struct FVector VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, struct FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
	struct FVector Vector_Zero();
	struct FVector Vector_Up();
	void Vector_UnwindEuler(struct FVector* A);
	struct FVector2D Vector_UnitCartesianToSpherical(const struct FVector& A);
	struct FVector Vector_ToRadians(const struct FVector& A);
	struct FVector Vector_ToDegrees(const struct FVector& A);
	struct FVector Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize);
	void Vector_Set(struct FVector* A, float X, float Y, float Z);
	struct FVector Vector_Right();
	struct FVector Vector_Reciprocal(const struct FVector& A);
	struct FVector Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal);
	struct FVector Vector_One();
	struct FVector Vector_NormalUnsafe(const struct FVector& A);
	void Vector_Normalize(struct FVector* A, float Tolerance);
	struct FVector Vector_Normal2D(const struct FVector& A, float Tolerance);
	struct FVector Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane);
	struct FVector Vector_Left();
	bool Vector_IsZero(const struct FVector& A);
	bool Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance);
	bool Vector_IsUniform(const struct FVector& A, float Tolerance);
	bool Vector_IsNormal(const struct FVector& A);
	bool Vector_IsNearlyZero(const struct FVector& A, float Tolerance);
	bool Vector_IsNAN(const struct FVector& A);
	float Vector_HeadingAngle(const struct FVector& A);
	struct FVector Vector_GetSignVector(const struct FVector& A);
	struct FVector Vector_GetProjection(const struct FVector& A);
	float Vector_GetAbsMin(const struct FVector& A);
	float Vector_GetAbsMax(const struct FVector& A);
	struct FVector Vector_GetAbs(const struct FVector& A);
	struct FVector Vector_Forward();
	struct FVector Vector_Down();
	float Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2);
	float Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2);
	float Vector_Distance2D(const struct FVector& v1, const struct FVector& v2);
	float Vector_Distance(const struct FVector& v1, const struct FVector& v2);
	float Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B);
	struct FVector Vector_ComponentMin(const struct FVector& A, const struct FVector& B);
	struct FVector Vector_ComponentMax(const struct FVector& A, const struct FVector& B);
	struct FVector Vector_ClampSizeMax2D(const struct FVector& A, float Max);
	struct FVector Vector_ClampSizeMax(const struct FVector& A, float Max);
	struct FVector Vector_ClampSize2D(const struct FVector& A, float Min, float Max);
	struct FVector Vector_BoundedToCube(const struct FVector& InVect, float InRadius);
	struct FVector Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax);
	struct FVector Vector_Backward();
	void Vector_Assign(struct FVector* A, const struct FVector& InVector);
	void Vector_AddBounded(struct FVector* A, const struct FVector& InAddVect, float InRadius);
	struct FVector4 Vector4_Zero();
	float Vector4_SizeSquared3(const struct FVector4& A);
	float Vector4_SizeSquared(const struct FVector4& A);
	float Vector4_Size3(const struct FVector4& A);
	float Vector4_Size(const struct FVector4& A);
	void Vector4_Set(struct FVector4* A, float X, float Y, float Z, float W);
	struct FVector4 Vector4_NormalUnsafe3(const struct FVector4& A);
	void Vector4_Normalize3(struct FVector4* A, float Tolerance);
	struct FVector4 Vector4_Normal3(const struct FVector4& A, float Tolerance);
	struct FVector4 Vector4_Negated(const struct FVector4& A);
	struct FVector4 Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal);
	bool Vector4_IsZero(const struct FVector4& A);
	bool Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance);
	bool Vector4_IsNormal3(const struct FVector4& A);
	bool Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance);
	bool Vector4_IsNAN(const struct FVector4& A);
	float Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B);
	float Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B);
	struct FVector4 Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B);
	void Vector4_Assign(struct FVector4* A, const struct FVector4& InVector);
	struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D Vector2D_Zero();
	struct FVector2D Vector2D_Unit45Deg();
	struct FVector2D Vector2D_One();
	struct FVector VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime UtcNow();
	struct FVector4 TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4);
	struct FRotator TransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	struct FVector TransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	float Transform_Determinant(const struct FTransform& Transform);
	struct FVector2D ToSign2D(const struct FVector2D& A);
	struct FVector2D ToRounded2D(const struct FVector2D& A);
	void ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, float* OutLength);
	struct FDateTime Today();
	struct FTransform TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_ELerpInterpolationMode> InterpMode);
	struct FTransform TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan TimespanZeroValue();
	float TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan TimespanMinValue();
	struct FTimespan TimespanMaxValue();
	bool TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);
	struct FTransform TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float Tan(float A);
	struct FVector Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Subtract_VectorInt(const struct FVector& A, int B);
	struct FVector Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector4 Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FLinearColor Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint Subtract_IntPointInt(const struct FIntPoint& A, int B);
	int Subtract_IntInt(int A, int B);
	int64_t Subtract_Int64Int64(int64_t A, int64_t B);
	float Subtract_FloatFloat(float A, float B);
	struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char Subtract_ByteByte(unsigned char A, unsigned char B);
	float Square(float A);
	float Sqrt(float A);
	struct FVector Spherical2DToUnitCartesian(const struct FVector2D& A);
	float Sin(float A);
	int64_t SignOfInteger64(int64_t A);
	int SignOfInteger(int A);
	float SignOfFloat(float A);
	void SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed);
	void Set2D(struct FVector2D* A, float X, float Y);
	struct FVector SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int SelectInt(int A, int B, bool bPickA);
	float SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void SeedRandomStream(struct FRandomStream* Stream);
	float SafeDivide(float A, float B);
	int64_t Round64(float A);
	int Round(float A);
	struct FRotator RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	struct FLinearColor RGBLinearToHSV(const struct FLinearColor& RGB);
	void ResetVectorSpringState(struct FVectorSpringState* SpringState);
	void ResetRandomStream(const struct FRandomStream& Stream);
	void ResetFloatSpringState(struct FFloatSpringState* SpringState);
	struct FRotator REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream);
	struct FVector RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream);
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream);
	struct FVector RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians);
	struct FVector RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream);
	struct FVector RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees);
	struct FVector RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector RandomUnitVector();
	struct FRotator RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator RandomRotator(bool bRoll);
	struct FVector RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int RandomIntegerInRange(int Min, int Max);
	int RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int64_t RandomInteger64InRange(int64_t Min, int64_t Max);
	int64_t RandomInteger64(int64_t Max);
	int RandomInteger(int Max);
	float RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float RandomFloatInRange(float Min, float Max);
	float RandomFloatFromStream(const struct FRandomStream& Stream);
	float RandomFloat();
	bool RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream);
	bool RandomBoolWithWeight(float Weight);
	bool RandomBoolFromStream(const struct FRandomStream& Stream);
	bool RandomBool();
	float RadiansToDegrees(float A);
	struct FVector Quat_VectorUp(const struct FQuat& Q);
	struct FVector Quat_VectorRight(const struct FQuat& Q);
	struct FVector Quat_VectorForward(const struct FQuat& Q);
	struct FVector Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V);
	float Quat_SizeSquared(const struct FQuat& Q);
	float Quat_Size(const struct FQuat& Q);
	void Quat_SetFromEuler(struct FQuat* Q, const struct FVector& Euler);
	void Quat_SetComponents(struct FQuat* Q, float X, float Y, float Z, float W);
	struct FRotator Quat_Rotator(const struct FQuat& Q);
	struct FVector Quat_RotateVector(const struct FQuat& Q, const struct FVector& V);
	struct FQuat Quat_Normalized(const struct FQuat& Q, float Tolerance);
	void Quat_Normalize(struct FQuat* Q, float Tolerance);
	struct FQuat Quat_MakeFromEuler(const struct FVector& Euler);
	struct FQuat Quat_Log(const struct FQuat& Q);
	bool Quat_IsNormalized(const struct FQuat& Q);
	bool Quat_IsNonFinite(const struct FQuat& Q);
	bool Quat_IsIdentity(const struct FQuat& Q, float Tolerance);
	bool Quat_IsFinite(const struct FQuat& Q);
	struct FQuat Quat_Inversed(const struct FQuat& Q);
	struct FQuat Quat_Identity();
	struct FVector Quat_GetRotationAxis(const struct FQuat& Q);
	struct FVector Quat_GetAxisZ(const struct FQuat& Q);
	struct FVector Quat_GetAxisY(const struct FQuat& Q);
	struct FVector Quat_GetAxisX(const struct FQuat& Q);
	float Quat_GetAngle(const struct FQuat& Q);
	struct FQuat Quat_Exp(const struct FQuat& Q);
	struct FVector Quat_Euler(const struct FQuat& Q);
	void Quat_EnforceShortestArcWith(struct FQuat* A, const struct FQuat& B);
	float Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B);
	struct FVector ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	float PerlinNoise1D(float Value);
	int Percent_IntInt(int A, int B);
	float Percent_FloatFloat(float A, float B);
	unsigned char Percent_ByteByte(unsigned char A, unsigned char B);
	int Or_IntInt(int A, int B);
	int64_t Or_Int64Int64(int64_t A, int64_t B);
	struct FDateTime Now();
	bool NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	bool NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance);
	bool NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	bool NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	bool NotEqual_IntInt(int A, int B);
	bool NotEqual_Int64Int64(int64_t A, int64_t B);
	bool NotEqual_FloatFloat(float A, float B);
	bool NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool NotEqual_BoolBool(bool A, bool B);
	bool Not_PreBool(bool A);
	int64_t Not_Int64(int64_t A);
	int Not_Int(int A);
	struct FVector2D NormalSafe2D(const struct FVector2D& A, float Tolerance);
	float NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float NormalizeAxis(float Angle);
	void Normalize2D(struct FVector2D* A, float Tolerance);
	struct FVector2D Normal2D(const struct FVector2D& A);
	struct FVector Normal(const struct FVector& A, float Tolerance);
	struct FVector NegateVector(const struct FVector& A);
	struct FRotator NegateRotator(const struct FRotator& A);
	struct FVector2D Negated2D(const struct FVector2D& A);
	bool NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float MultiplyMultiply_FloatFloat(float Base, float Exp);
	float MultiplyByPi(float Value);
	struct FVector Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Multiply_VectorInt(const struct FVector& A, int B);
	struct FVector Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector4 Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FQuat Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FMatrix Multiply_MatrixFloat(const struct FMatrix& A, float B);
	struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	struct FIntPoint Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint Multiply_IntPointInt(const struct FIntPoint& A, int B);
	int Multiply_IntInt(int A, int B);
	float Multiply_IntFloat(int A, float B);
	int64_t Multiply_Int64Int64(int64_t A, int64_t B);
	float Multiply_FloatFloat(float A, float B);
	unsigned char Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	int64_t MinInt64(int64_t A, int64_t B);
	void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	int Min(int A, int B);
	void MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int64_t MaxInt64(int64_t A, int64_t B);
	int Max(int A, int B);
	struct FVector4 Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V);
	struct FVector4 Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V);
	struct FVector4 Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V);
	struct FQuat Matrix_ToQuat(const struct FMatrix& M);
	void Matrix_SetOrigin(struct FMatrix* M, const struct FVector& NewOrigin);
	void Matrix_SetColumn(struct FMatrix* M, TEnumAsByte<Engine_EMatrixColumns> column, const struct FVector& Value);
	void Matrix_SetAxis(struct FMatrix* M, TEnumAsByte<CoreUObject_EAxis> Axis, const struct FVector& AxisVector);
	struct FMatrix Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D);
	struct FMatrix Matrix_RemoveTranslation(const struct FMatrix& M);
	void Matrix_RemoveScaling(struct FMatrix* M, float Tolerance);
	struct FMatrix Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> MirrorAxis, TEnumAsByte<CoreUObject_EAxis> FlipAxis);
	struct FVector Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V);
	struct FVector Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V);
	struct FMatrix Matrix_Identity();
	struct FVector Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis);
	void Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	struct FMatrix Matrix_GetTransposed(const struct FMatrix& M);
	struct FMatrix Matrix_GetTransposeAdjoint(const struct FMatrix& M);
	struct FVector Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance);
	struct FVector Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis);
	void Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	float Matrix_GetRotDeterminant(const struct FMatrix& M);
	struct FRotator Matrix_GetRotator(const struct FMatrix& M);
	struct FVector Matrix_GetOrigin(const struct FMatrix& InMatrix);
	float Matrix_GetMaximumAxisScale(const struct FMatrix& M);
	struct FMatrix Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance);
	struct FMatrix Matrix_GetInverse(const struct FMatrix& M);
	bool Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	float Matrix_GetDeterminant(const struct FMatrix& M);
	struct FVector Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<Engine_EMatrixColumns> column);
	bool Matrix_ContainsNaN(const struct FMatrix& M);
	struct FMatrix Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation);
	struct FMatrix Matrix_ApplyScale(const struct FMatrix& M, float Scale);
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector4 MakeVector4(float X, float Y, float Z, float W);
	struct FVector2D MakeVector2D(float X, float Y);
	struct FVector MakeVector(float X, float Y, float Z);
	struct FTransform MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);
	struct FTimespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	struct FRotator MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator MakeRotFromZ(const struct FVector& Z);
	struct FRotator MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator MakeRotFromY(const struct FVector& Y);
	struct FRotator MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator MakeRotFromX(const struct FVector& X);
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FTransform MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo);
	struct FRandomStream MakeRandomStream(int InitialSeed);
	struct FQualifiedFrameTime MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FPlane MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal);
	struct FFrameRate MakeFrameRate(int Numerator, int Denominator);
	struct FDateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor MakeColor(float R, float G, float B, float A);
	struct FBox2D MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max);
	struct FBox MakeBox(const struct FVector& Min, const struct FVector& Max);
	float Loge(float A);
	float Log(float A, float Base);
	bool LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor LinearColor_Yellow();
	struct FLinearColor LinearColor_White();
	struct FLinearColor LinearColor_Transparent();
	struct FColor LinearColor_ToRGBE(const struct FLinearColor& InLinearColor);
	struct FLinearColor LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity);
	void LinearColor_SetTemperature(struct FLinearColor* InOutColor, float InTemperature);
	void LinearColor_SetRGBA(struct FLinearColor* InOutColor, float R, float G, float B, float A);
	void LinearColor_SetRandomHue(struct FLinearColor* InOutColor);
	void LinearColor_SetFromSRGB(struct FLinearColor* InOutColor, const struct FColor& InSRGB);
	void LinearColor_SetFromPow22(struct FLinearColor* InOutColor, const struct FColor& InColor);
	void LinearColor_SetFromHSV(struct FLinearColor* InOutColor, float H, float S, float V, float A);
	void LinearColor_Set(struct FLinearColor* InOutColor, const struct FLinearColor& InColor);
	struct FLinearColor LinearColor_Red();
	struct FColor LinearColor_QuantizeRound(const struct FLinearColor& InColor);
	struct FColor LinearColor_Quantize(const struct FLinearColor& InColor);
	bool LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance);
	struct FLinearColor LinearColor_Green();
	struct FLinearColor LinearColor_Gray();
	float LinearColor_GetMin(const struct FLinearColor& InColor);
	float LinearColor_GetMax(const struct FLinearColor& InColor);
	float LinearColor_GetLuminance(const struct FLinearColor& InColor);
	float LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2);
	struct FLinearColor LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation);
	struct FLinearColor LinearColor_Blue();
	struct FLinearColor LinearColor_Black();
	struct FVector LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool LessEqual_IntInt(int A, int B);
	bool LessEqual_Int64Int64(int64_t A, int64_t B);
	bool LessEqual_FloatFloat(float A, float B);
	bool LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Less_IntInt(int A, int B);
	bool Less_Int64Int64(int64_t A, int64_t B);
	bool Less_FloatFloat(float A, float B);
	bool Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Less_ByteByte(unsigned char A, unsigned char B);
	float Lerp(float A, float B, float Alpha);
	bool IsZero2D(const struct FVector2D& A);
	bool IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent);
	bool IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	bool IsNearlyZero2D(const struct FVector2D& A, float Tolerance);
	bool IsMorning(const struct FDateTime& A);
	bool IsLeapYear(int Year);
	bool IsAfternoon(const struct FDateTime& A);
	struct FTransform InvertTransform(const struct FTransform& T);
	struct FRotator InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	struct FVector InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	struct FIntPoint IntPoint_Zero();
	struct FIntPoint IntPoint_Up();
	struct FIntPoint IntPoint_Right();
	struct FIntPoint IntPoint_One();
	struct FIntPoint IntPoint_Left();
	struct FIntPoint IntPoint_Down();
	bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);
	bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float Hypotenuse(float Width, float Height);
	struct FLinearColor HSVToRGBLinear(const struct FLinearColor& HSV);
	void HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor HSVToRGB(float H, float S, float V, float A);
	float GridSnap_Float(float Location, float GridSize);
	struct FVector GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool GreaterEqual_IntInt(int A, int B);
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B);
	bool GreaterEqual_FloatFloat(float A, float B);
	bool GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Greater_IntInt(int A, int B);
	bool Greater_Int64Int64(int64_t A, int64_t B);
	bool Greater_FloatFloat(float A, float B);
	bool Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Greater_ByteByte(unsigned char A, unsigned char B);
	int GetYear(const struct FDateTime& A);
	void GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	struct FVector GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector GetUpVector(const struct FRotator& InRot);
	float GetTotalSeconds(const struct FTimespan& A);
	float GetTotalMinutes(const struct FTimespan& A);
	float GetTotalMilliseconds(const struct FTimespan& A);
	float GetTotalHours(const struct FTimespan& A);
	float GetTotalDays(const struct FTimespan& A);
	struct FTimespan GetTimeOfDay(const struct FDateTime& A);
	float GetTAU();
	void GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);
	int GetSeconds(const struct FTimespan& A);
	int GetSecond(const struct FDateTime& A);
	struct FVector2D GetRotated2D(const struct FVector2D& A, float AngleDeg);
	struct FVector GetRightVector(const struct FRotator& InRot);
	struct FVector GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal);
	float GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	float GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	float GetPI();
	int GetMonth(const struct FDateTime& A);
	int GetMinutes(const struct FTimespan& A);
	int GetMinute(const struct FDateTime& A);
	float GetMinElement(const struct FVector& A);
	float GetMin2D(const struct FVector2D& A);
	int GetMilliseconds(const struct FTimespan& A);
	int GetMillisecond(const struct FDateTime& A);
	float GetMaxElement(const struct FVector& A);
	float GetMax2D(const struct FVector2D& A);
	int GetHours(const struct FTimespan& A);
	int GetHour12(const struct FDateTime& A);
	int GetHour(const struct FDateTime& A);
	struct FVector GetForwardVector(const struct FRotator& InRot);
	struct FTimespan GetDuration(const struct FTimespan& A);
	struct FVector GetDirectionUnitVector(const struct FVector& from, const struct FVector& To);
	int GetDays(const struct FTimespan& A);
	int GetDayOfYear(const struct FDateTime& A);
	int GetDay(const struct FDateTime& A);
	struct FDateTime GetDate(const struct FDateTime& A);
	void GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation);
	void GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	float GetAbsMax2D(const struct FVector2D& A);
	struct FVector2D GetAbs2D(const struct FVector2D& A);
	float FWrap(float Value, float Min, float Max);
	struct FIntVector FTruncVector(const struct FVector& InVector);
	int64_t FTrunc64(float A);
	int FTrunc(float A);
	struct FTimespan FromSeconds(float Seconds);
	struct FTimespan FromMinutes(float Minutes);
	struct FTimespan FromMilliseconds(float Milliseconds);
	struct FTimespan FromHours(float Hours);
	struct FTimespan FromDays(float Days);
	float Fraction(float A);
	int FMod(float Dividend, float Divisor, float* Remainder);
	float FMin(float A, float B);
	float FMax(float A, float B);
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	void FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);
	struct FRotator FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	struct FVector FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	struct FVector FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	int64_t FFloor64(float A);
	int FFloor(float A);
	float FClamp(float Value, float Min, float Max);
	int64_t FCeil64(float A);
	int FCeil(float A);
	float Exp(float A);
	bool EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	bool EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance);
	bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	bool EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool EqualEqual_IntInt(int A, int B);
	bool EqualEqual_Int64Int64(int64_t A, int64_t B);
	bool EqualEqual_FloatFloat(float A, float B);
	bool EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool EqualEqual_BoolBool(bool A, bool B);
	bool Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	float Ease(float A, float B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	struct FRotator DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorInt(const struct FVector& A, int B);
	struct FVector Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector4 Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Divide_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Divide_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FLinearColor Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint Divide_IntPointInt(const struct FIntPoint& A, int B);
	int Divide_IntInt(int A, int B);
	int64_t Divide_Int64Int64(int64_t A, int64_t B);
	float Divide_FloatFloat(float A, float B);
	unsigned char Divide_ByteByte(unsigned char A, unsigned char B);
	float DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2);
	float Distance2D(const struct FVector2D& v1, const struct FVector2D& v2);
	float DegTan(float A);
	float DegSin(float A);
	float DegreesToRadians(float A);
	float DegCos(float A);
	float DegAtan2(float Y, float X);
	float DegAtan(float A);
	float DegAsin(float A);
	float DegAcos(float A);
	int DaysInYear(int Year);
	int DaysInMonth(int Year, int Month);
	struct FDateTime DateTimeMinValue();
	struct FDateTime DateTimeMaxValue();
	bool DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);
	bool DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);
	float CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float Cos(float A);
	struct FTransform ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator Conv_VectorToRotator(const struct FVector& InVec);
	struct FQuat Conv_VectorToQuaternion(const struct FVector& InVec);
	struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector Conv_Vector4ToVector(const struct FVector4& InVector4);
	struct FRotator Conv_Vector4ToRotator(const struct FVector4& InVec);
	struct FQuat Conv_Vector4ToQuaternion(const struct FVector4& InVec);
	struct FVector Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FIntPoint Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D);
	struct FMatrix Conv_TransformToMatrix(const struct FTransform& Transform);
	struct FVector Conv_RotatorToVector(const struct FRotator& InRot);
	struct FTransform Conv_RotatorToTransform(const struct FRotator& InRotator);
	struct FTransform Conv_MatrixToTransform(const struct FMatrix& InMatrix);
	struct FRotator Conv_MatrixToRotator(const struct FMatrix& InMatrix);
	struct FVector Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB);
	struct FVector Conv_IntVectorToVector(const struct FIntVector& InIntVector);
	struct FIntVector Conv_IntToIntVector(int inInt);
	int64_t Conv_IntToInt64(int inInt);
	float Conv_IntToFloat(int inInt);
	unsigned char Conv_IntToByte(int inInt);
	bool Conv_IntToBool(int inInt);
	struct FVector2D Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint);
	int Conv_Int64ToInt(int64_t inInt);
	unsigned char Conv_Int64ToByte(int64_t inInt);
	struct FVector Conv_FloatToVector(float InFloat);
	struct FLinearColor Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InColor);
	int Conv_ByteToInt(unsigned char InByte);
	float Conv_ByteToFloat(unsigned char InByte);
	int Conv_BoolToInt(bool InBool);
	float Conv_BoolToFloat(bool InBool);
	unsigned char Conv_BoolToByte(bool InBool);
	struct FTransform ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector ClampVectorSize(const struct FVector& A, float Min, float Max);
	int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max);
	float ClampAxis(float Angle);
	struct FVector2D ClampAxes2D(const struct FVector2D& A, float MinAxisVal, float MaxAxisVal);
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int Clamp(int Value, int Min, int Max);
	struct FLinearColor CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void BreakVector4(const struct FVector4& InVec, float* X, float* Y, float* Z, float* W);
	void BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano);
	void BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	void BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame);
	void BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator);
	void BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool BooleanXOR(bool A, bool B);
	bool BooleanOR(bool A, bool B);
	bool BooleanNOR(bool A, bool B);
	bool BooleanNAND(bool A, bool B);
	bool BooleanAND(bool A, bool B);
	unsigned char BMin(unsigned char A, unsigned char B);
	unsigned char BMax(unsigned char A, unsigned char B);
	float Atan2(float Y, float X);
	float Atan(float A);
	float Asin(float A);
	int And_IntInt(int A, int B);
	int64_t And_Int64Int64(int64_t A, int64_t B);
	struct FVector Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Add_VectorInt(const struct FVector& A, int B);
	struct FVector Add_VectorFloat(const struct FVector& A, float B);
	struct FVector4 Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat Add_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FLinearColor Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint Add_IntPointInt(const struct FIntPoint& A, int B);
	int Add_IntInt(int A, int B);
	int64_t Add_Int64Int64(int64_t A, int64_t B);
	float Add_FloatFloat(float A, float B);
	struct FDateTime Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FDateTime Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char Add_ByteByte(unsigned char A, unsigned char B);
	float Acos(float A);
	int64_t Abs_Int64(int64_t A);
	int Abs_Int(int A);
	float Abs(float A);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetNodeHelperLibrary"));
		return ptr;
	}



	void MarkBit(int* Data, int Index);
	bool HasUnmarkedBit(int Data, int NumBits);
	bool HasMarkedBit(int Data, int NumBits);
	unsigned char GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue);
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	unsigned char GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	struct FString GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void ClearBit(int* Data, int Index);
	void ClearAllBits(int* Data);
	bool BitIsMarked(int Data, int Index);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetRenderingLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetRenderingLibrary"));
		return ptr;
	}



	void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);
	class UTextureCube* RenderTargetCreateStaticTextureCubeEditorOnly(class UTextureRenderTargetCube* RenderTarget, const struct FString& Name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings);
	class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const struct FString& Name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings);
	void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
	struct FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	struct FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3);
	class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, const struct FString& Filename);
	class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<unsigned char> Buffer);
	struct FLinearColor GetSunLightAtmosphereTransmittance(const struct FVector& Direction, class USceneComponent* sunFogAtmosphereComponent);
	void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& Filename);
	void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename);
	void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
	void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int Width, int Height, int Depth, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);
	class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int Width, int Height, int Slices, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);
	class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);
	void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);
	void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3);
	void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetStringLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetStringLibrary"));
		return ptr;
	}



	struct FString TrimTrailing(const struct FString& SourceString);
	struct FString Trim(const struct FString& SourceString);
	struct FString ToUpper(const struct FString& SourceString);
	struct FString ToLower(const struct FString& SourceString);
	struct FString TimeSecondsToString(float InSeconds);
	bool StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	bool Split(const struct FString& SourceString, const struct FString& InStr, struct FString* LeftS, struct FString* RightS, TEnumAsByte<CoreUObject_ESearchCase> SearchCase, TEnumAsByte<CoreUObject_ESearchDir> SearchDir);
	struct FString RightPad(const struct FString& SourceString, int ChCount);
	struct FString RightChop(const struct FString& SourceString, int count);
	struct FString Right(const struct FString& SourceString, int count);
	struct FString Reverse(const struct FString& SourceString);
	int ReplaceInline(struct FString* SourceString, const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	struct FString Replace(const struct FString& SourceString, const struct FString& from, const struct FString& To, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	TArray<struct FString> ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString Mid(const struct FString& SourceString, int Start, int count);
	bool MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int Len(const struct FString& S);
	struct FString LeftPad(const struct FString& SourceString, int ChCount);
	struct FString LeftChop(const struct FString& SourceString, int count);
	struct FString Left(const struct FString& SourceString, int count);
	struct FString JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool IsNumeric(const struct FString& SourceString);
	bool IsEmpty(const struct FString& inString);
	struct FString GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int GetCharacterAsNumber(const struct FString& SourceString, int Index);
	TArray<struct FString> GetCharacterArrayFromString(const struct FString& SourceString);
	int FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int CullArray(const struct FString& SourceString, TArray<struct FString>* inArray);
	struct FString Conv_VectorToString(const struct FVector& InVec);
	struct FString Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString Conv_TransformToString(const struct FTransform& InTrans);
	void Conv_StringToVector2D(const struct FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	void Conv_StringToVector(const struct FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid);
	void Conv_StringToRotator(const struct FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	struct FName Conv_StringToName(const struct FString& inString);
	int Conv_StringToInt(const struct FString& inString);
	float Conv_StringToFloat(const struct FString& inString);
	void Conv_StringToColor(const struct FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	struct FString Conv_RotatorToString(const struct FRotator& InRot);
	struct FString Conv_ObjectToString(class UObject* InObj);
	struct FString Conv_NameToString(const struct FName& InName);
	struct FString Conv_MatrixToString(const struct FMatrix& InMatrix);
	struct FString Conv_IntVectorToString(const struct FIntVector& InIntVec);
	struct FString Conv_IntToString(int inInt);
	struct FString Conv_IntPointToString(const struct FIntPoint& InIntPoint);
	struct FString Conv_FloatToString(float InFloat);
	struct FString Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString Conv_ByteToString(unsigned char InByte);
	struct FString Conv_BoolToString(bool InBool);
	bool Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd);
	struct FString Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString BuildString_Vector2d(const struct FString& AppendTo, const struct FString& prefix, const struct FVector2D& InVector2D, const struct FString& suffix);
	struct FString BuildString_Vector(const struct FString& AppendTo, const struct FString& prefix, const struct FVector& InVector, const struct FString& suffix);
	struct FString BuildString_Rotator(const struct FString& AppendTo, const struct FString& prefix, const struct FRotator& InRot, const struct FString& suffix);
	struct FString BuildString_Object(const struct FString& AppendTo, const struct FString& prefix, class UObject* InObj, const struct FString& suffix);
	struct FString BuildString_Name(const struct FString& AppendTo, const struct FString& prefix, const struct FName& InName, const struct FString& suffix);
	struct FString BuildString_IntVector(const struct FString& AppendTo, const struct FString& prefix, const struct FIntVector& InIntVector, const struct FString& suffix);
	struct FString BuildString_Int(const struct FString& AppendTo, const struct FString& prefix, int inInt, const struct FString& suffix);
	struct FString BuildString_Float(const struct FString& AppendTo, const struct FString& prefix, float InFloat, const struct FString& suffix);
	struct FString BuildString_Color(const struct FString& AppendTo, const struct FString& prefix, const struct FLinearColor& InColor, const struct FString& suffix);
	struct FString BuildString_Bool(const struct FString& AppendTo, const struct FString& prefix, bool InBool, const struct FString& suffix);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetStringTableLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetStringTableLibrary"));
		return ptr;
	}



	bool IsRegisteredTableId(const struct FName& TableId);
	bool IsRegisteredTableEntry(const struct FName& TableId, const struct FString& Key);
	struct FString GetTableNamespace(const struct FName& TableId);
	struct FString GetTableEntrySourceString(const struct FName& TableId, const struct FString& Key);
	struct FString GetTableEntryMetaData(const struct FName& TableId, const struct FString& Key, const struct FName& MetaDataId);
	TArray<struct FName> GetRegisteredStringTables();
	TArray<struct FName> GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& Key);
	TArray<struct FString> GetKeysFromStringTable(const struct FName& TableId);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetSystemLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetSystemLibrary"));
		return ptr;
	}



	void UnregisterForRemoteNotifications();
	void UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList);
	void UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);
	void TransactObject(class UObject* Object);
	void TickLatentActionsEditorOnly(class UObject* WorldContextObject, class UObject* Object, float dTime);
	void StackTrace();
	bool SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void SnapshotObject(class UObject* Object);
	void ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void ShowInterstitialAd();
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void SetWindowTitle(const struct FText& Title);
	void SetVolumeButtonsHandledBySystem(bool bEnabled);
	void SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void SetUserActivity(const struct FUserActivity& UserActivity);
	void SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);
	void SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);
	void SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value);
	void SetInt64PropertyByName(class UObject* Object, const struct FName& PropertyName, int64_t Value);
	void SetGamepadsBlockDeviceFeedback(bool bBlock);
	void SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void SetFieldPathPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void SetColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FColor& Value);
	void SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value);
	void SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void ResetGamepadAssignmentToController(int ControllerId);
	void ResetGamepadAssignments();
	void RegisterForRemoteNotifications();
	void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<Engine_EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions);
	void PrintWarning(const struct FString& inString);
	void PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void PrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	bool ParseParamValue(const struct FString& inString, const struct FString& InParam, struct FString* OutValue);
	bool ParseParam(const struct FString& inString, const struct FString& InParam);
	void ParseCommandLine(const struct FString& InCmdLine, TArray<struct FString>* OutTokens, TArray<struct FString>* OutSwitches, TMap<struct FString, struct FString>* OutParams);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	bool NotEqual_SoftObjectReference();
	bool NotEqual_SoftClassReference();
	bool NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	struct FString NormalizeFilename(const struct FString& InFilename);
	void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<Engine_EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);
	struct FSoftObjectPath MakeSoftObjectPath(const struct FString& PathString);
	struct FSoftClassPath MakeSoftClassPath(const struct FString& PathString);
	struct FText MakeLiteralText(const struct FText& Value);
	struct FString MakeLiteralString(const struct FString& Value);
	struct FName MakeLiteralName(const struct FName& Value);
	int MakeLiteralInt(int Value);
	float MakeLiteralFloat(float Value);
	unsigned char MakeLiteralByte(unsigned char Value);
	bool MakeLiteralBool(bool Value);
	void LoadInterstitialAd(int AdIdIndex);
	class UClass* LoadClassAsset_Blocking();
	void LoadAssetClass(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	class UObject* LoadAsset_Blocking();
	void LoadAsset(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	void LaunchURL(const struct FString& URL);
	void K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	struct FTimerHandle K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	void K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle* Handle);
	float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle);
	bool IsValidSoftObjectReference();
	bool IsValidSoftClassReference();
	bool IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType);
	bool IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	bool IsValidClass(class UClass* Class);
	bool IsValid(class UObject* Object);
	bool IsUnattended();
	bool IsStandalone(class UObject* WorldContextObject);
	bool IsSplitScreen(class UObject* WorldContextObject);
	bool IsServer(class UObject* WorldContextObject);
	bool IsScreensaverEnabled();
	bool IsPackagedForDistribution();
	bool IsLoggedIn(class APlayerController* SpecificPlayer);
	bool IsInterstitialAdRequested();
	bool IsInterstitialAdAvailable();
	bool IsDedicatedServer(class UObject* WorldContextObject);
	bool IsControllerAssignedToGamepad(int ControllerId);
	void HideAdBanner();
	bool GetVolumeButtonsHandledBySystem();
	struct FRotator GetViewportRotationEditorOnly(class UObject* WorldContextObject, int ID);
	struct FVector GetViewportLocation(class UObject* WorldContextObject, int ID);
	struct FString GetUniqueDeviceId();
	struct FString GetSystemPath(class UObject* Object);
	bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	void GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	void GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int GetRenderingMaterialQualityLevel();
	int GetRenderingDetailMode();
	struct FString GetProjectSavedDirectory();
	struct FString GetProjectDirectory();
	struct FString GetProjectContentDirectory();
	void GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	void GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference();
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference();
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(class UClass* Class);
	TArray<struct FString> GetPreferredLanguages();
	struct FString GetPlatformUserName();
	struct FString GetPlatformUserDir();
	struct FString GetPathName(class UObject* Object);
	class UObject* GetOuterObject(class UObject* Object);
	struct FString GetObjectName(class UObject* Object);
	class UObject* GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int GetMinYResolutionForUI();
	int GetMinYResolutionFor3DView();
	struct FString GetLocalCurrencySymbol();
	struct FString GetLocalCurrencyCode();
	float GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString GetGamepadControllerName(int ControllerId);
	class UTexture2D* GetGamepadButtonGlyph(const struct FString& ButtonKey, int ControllerIndex);
	struct FString GetGameName();
	struct FString GetGameBundleId();
	int64_t GetFrameCount();
	struct FString GetEngineVersion();
	struct FString GetDisplayName(class UObject* Object);
	struct FString GetDeviceId();
	struct FString GetDefaultLocale();
	struct FString GetDefaultLanguage();
	bool GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles);
	bool GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	int GetConsoleVariableIntValue(const struct FString& VariableName);
	float GetConsoleVariableFloatValue(const struct FString& VariableName);
	bool GetConsoleVariableBoolValue(const struct FString& VariableName);
	void GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString GetCommandLine();
	class UClass* GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	struct FString GetClassDisplayName(class UClass* Class);
	int GetAdIDCount();
	void GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceCloseAdBanner();
	void FlushPersistentDebugLines(class UObject* WorldContextObject);
	void FlushDebugStrings(class UObject* WorldContextObject);
	void ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);
	bool EqualEqual_SoftObjectReference();
	bool EqualEqual_SoftClassReference();
	bool EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	int EndTransaction();
	void DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& position, float Size, const struct FLinearColor& PointColor, float Duration);
	void DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);
	void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	void DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
	bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	struct FString ConvertToRelativePath(const struct FString& Filename);
	struct FString ConvertToAbsolutePath(const struct FString& Filename);
	void Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath);
	struct FString Conv_SoftObjectReferenceToString();
	class UObject* Conv_SoftObjectReferenceToObject();
	struct FString Conv_SoftClassReferenceToString();
	class UClass* Conv_SoftClassReferenceToClass();
	void Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath);
	struct FString Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType);
	struct FString Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId);
	void Conv_ObjectToSoftObjectReference(class UObject* Object);
	class UObject* Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	void Conv_ClassToSoftClassReference(class UClass* Class);
	void ControlScreensaver(bool bAllowScreenSaver);
	bool ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void CollectGarbage();
	bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool CanLaunchURL(const struct FString& URL);
	void CancelTransaction(int Index);
	void BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, struct FString* PathString);
	void BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, struct FString* PathString);
	bool BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	int BeginTransaction(const struct FString& Context, const struct FText& Description, class UObject* PrimaryObject);
	struct FDebugFloatHistory AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetTextLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.KismetTextLibrary"));
		return ptr;
	}



	struct FText TextTrimTrailing(const struct FText& InText);
	struct FText TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText TextTrimPreceding(const struct FText& InText);
	struct FText TextToUpper(const struct FText& InText);
	struct FText TextToLower(const struct FText& InText);
	bool TextIsTransient(const struct FText& InText);
	bool TextIsFromStringTable(const struct FText& Text);
	bool TextIsEmpty(const struct FText& InText);
	bool TextIsCultureInvariant(const struct FText& InText);
	struct FText TextFromStringTable(const struct FName& TableId, const struct FString& Key);
	bool StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, struct FString* OutKey);
	struct FText PolyglotDataToText(const struct FPolyglotTextData& PolyglotData);
	bool NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	void IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage);
	struct FText GetEmptyText();
	struct FText Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs);
	bool FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText Conv_VectorToText(const struct FVector& InVec);
	struct FText Conv_Vector2dToText(const struct FVector2D& InVec);
	struct FText Conv_TransformToText(const struct FTransform& InTrans);
	struct FString Conv_TextToString(const struct FText& InText);
	struct FText Conv_StringToText(const struct FString& inString);
	struct FText Conv_RotatorToText(const struct FRotator& InRot);
	struct FText Conv_ObjectToText(class UObject* InObj);
	struct FText Conv_NameToText(const struct FName& InName);
	struct FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText Conv_FloatToText(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText Conv_ColorToText(const struct FLinearColor& InColor);
	struct FText Conv_ByteToText(unsigned char Value);
	struct FText Conv_BoolToText(bool InBool);
	struct FText AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText AsTime_DateTime(const struct FDateTime& In);
	struct FText AsPercent_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText AsDateTime_DateTime(const struct FDateTime& In);
	struct FText AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode);
	struct FText AsCurrency_Integer(int Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText AsCurrency_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Layer
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsVisible : 1;                                            // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TW37[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLayerActorStats>                    ActorStats;                                                // 0x0038(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Layer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelPartitionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULevelPartitionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelPartitionInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Level
// 0x0270 (FullSize[0x0298] - InheritedSize[0x0028])
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData_BNJS[0x90];                                    // 0x0028(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      OwningWorld;                                               // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                      Model;                                                     // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModelComponent*>                     ModelComponents;                                           // 0x00C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ULevelActorContainer*                        ActorCluster;                                              // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTextureStreamingUnbuiltComponents;                      // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTextureStreamingDirtyResources;                         // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelScriptActor*                           LevelScriptActor;                                          // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                       NavListStart;                                              // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                       NavListEnd;                                                // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                             // 0x0100(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              LightmapTotalSize;                                         // 0x0110(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowmapTotalSize;                                        // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             StaticNavigableGeometry;                                   // 0x0118(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                               StreamingTextureGuids;                                     // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ODBV[0x98];                                    // 0x0138(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       LevelBuildDataId;                                          // 0x01D0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapBuildDataRegistry*                       MapBuildData;                                              // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                                  LightBuildLevelOffset;                                     // 0x01E8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsLightingScenario : 1;                                   // 0x01F4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_57JJ : 2;                                      // 0x01F4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bTextureStreamingRotationChanged : 1;                      // 0x01F4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStaticComponentsRegisteredInStreamingManager : 1;         // 0x01F4(0x0001) BIT_FIELD (Transient, DuplicateTransient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsVisible : 1;                                            // 0x01F4(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5TET[0x63];                                    // 0x01F5(0x0063) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AWorldSettings*                              WorldSettings;                                             // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_CB9R[0x8];                                     // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0268(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Y91S[0x10];                                    // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                           // 0x0288(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Level"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelActorContainer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                              Actors;                                                    // 0x0028(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelActorContainer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelBounds
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class ALevelBounds : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                              // 0x0220(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoUpdateBounds;                                         // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2LDZ[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelBounds"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelScriptActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                         // 0x0220(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_9MJ2[0x7];                                     // 0x0221(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptActor"));
		return ptr;
	}



	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelScriptBlueprint
// 0x0000 (FullSize[0x00A0] - InheritedSize[0x00A0])
class ULevelScriptBlueprint : public UBlueprint
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptBlueprint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreaming
// 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
class ULevelStreaming : public UObject
{
public:
	unsigned char                                      WorldAsset[0x28];                                          // 0x0028(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
	struct FName                                       PackageNameToLoad;                                         // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               LODPackageNames;                                           // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_78L9[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  LevelTransform;                                            // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                LevelLODIndex;                                             // 0x00B0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                StreamingPriority;                                         // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_OAEV[0x2];                                     // 0x00B8(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_OGY3 : 3;                                      // 0x00BA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldBeVisible : 1;                                      // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldBeLoaded : 1;                                       // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bLocked : 1;                                               // 0x00BA(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsStatic : 1;                                             // 0x00BA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBlockOnLoad : 1;                                    // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBlockOnUnload : 1;                                  // 0x00BB(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableDistanceStreaming : 1;                             // 0x00BB(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                 // 0x00BB(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LevelColor;                                                // 0x00BC(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CGW4[0x4];                                     // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                    // 0x00D0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              MinTimeBetweenVolumeUnloadRequests;                        // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4FKR[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                             // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                           // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelShown;                                              // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                             // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ULevel*                                      LoadedLevel;                                               // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevel*                                      PendingUnloadLevel;                                        // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_WMJB[0x18];                                    // 0x0138(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelStreaming"));
		return ptr;
	}



	bool ShouldBeLoaded();
	void SetShouldBeVisible(bool bInShouldBeVisible);
	void SetShouldBeLoaded(bool bInShouldBeLoaded);
	void SetPriority(int NewPriority);
	void SetLevelLODIndex(int LODIndex);
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);
	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	struct FName GetWorldAssetPackageFName();
	class ULevel* GetLoadedLevel();
	class ALevelScriptActor* GetLevelScriptActor();
	bool GetIsRequestingUnloadAndRemoval();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingAlwaysLoaded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingDynamic
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingDynamic : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingDynamic"));
		return ptr;
	}



	class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const struct FString& OptionalLevelNameOverride);
	class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const struct FString& OptionalLevelNameOverride);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingPersistent
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingPersistent : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingPersistent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingVolume
// 0x0018 (FullSize[0x0270] - InheritedSize[0x0258])
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                       // 0x0258(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	unsigned char                                      bEditorPreVisOnly : 1;                                     // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisabled : 1;                                             // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V10C[0x3];                                     // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EStreamingVolumeUsage>          StreamingUsage;                                            // 0x026C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AMWS[0x3];                                     // 0x026D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        Surfaces;                                                  // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmappedSurfaceCollection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightMapTexture2D
// 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData_XRL7[0x8];                                     // 0x0100(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightMapTexture2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightMapVirtualTexture2D
// 0x0018 (FullSize[0x0118] - InheritedSize[0x0100])
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	TArray<int8_t>                                     TypeToLayer;                                               // 0x0100(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HEFB[0x8];                                     // 0x0110(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightMapVirtualTexture2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmassCharacterIndirectDetailVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassImportanceVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ALightmassImportanceVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmassImportanceVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassPortal
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmassPortal"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassPortalComponent
// 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                                // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmassPortalComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x0028(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightmassPrimitiveSettingsObject"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LineBatchComponent
// 0x0040 (FullSize[0x0480] - InheritedSize[0x0440])
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_7OCR[0x40];                                    // 0x0440(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LineBatchComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalPlayer
// 0x0210 (FullSize[0x0258] - InheritedSize[0x0048])
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData_L8PV[0x28];                                    // 0x0048(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         ViewportClient;                                            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZI43[0x1C];                                    // 0x0078(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAspectRatioAxisConstraint>     AspectRatioAxisConstraint;                                 // 0x0094(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C2FV[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PendingLevelPlayerControllerClass;                         // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSentSplitJoin : 1;                                        // 0x00A0(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZJOW[0x17];                                    // 0x00A1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ControllerId;                                              // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_KCUC[0x19C];                                   // 0x00BC(0x019C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LocalPlayer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalPlayerSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class ULocalPlayerSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LocalPlayerSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LODActor
// 0x0088 (FullSize[0x02A8] - InheritedSize[0x0220])
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0220(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UMaterialInterface*, class UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents;                             // 0x0228(0x0050) (Edit, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UHLODProxy*                                  Proxy;                                                     // 0x0278(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       Key;                                                       // 0x0280(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LODDrawDistance;                                           // 0x0288(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                LODLevel;                                                  // 0x028C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              SubActors;                                                 // 0x0290(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	unsigned char                                      CachedNumHLODLevels;                                       // 0x02A0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UFFU[0x7];                                     // 0x02A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LODActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LODSyncComponent
// 0x0090 (FullSize[0x0140] - InheritedSize[0x00B0])
class ULODSyncComponent : public UActorComponent
{
public:
	int                                                NumLODs;                                                   // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ForcedLOD;                                                 // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComponentSync>                      ComponentsToSync;                                          // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FLODMappingData>         CustomLODMapping;                                          // 0x00C8(0x0050) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int                                                CurrentLOD;                                                // 0x0118(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                CurrentNumLODs;                                            // 0x011C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                           // 0x0120(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>                 SubComponents;                                             // 0x0130(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LODSyncComponent"));
		return ptr;
	}



	struct FString GetLODSyncDebugText();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LODSyncInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULODSyncInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LODSyncInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MapBuildDataRegistry
// 0x0210 (FullSize[0x0238] - InheritedSize[0x0028])
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<Engine_ELightingBuildQuality>          LevelLightingQuality;                                      // 0x0028(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5ZXZ[0x20F];                                   // 0x0029(0x020F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MapBuildDataRegistry"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Material
// 0x0408 (FullSize[0x0490] - InheritedSize[0x0088])
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                          // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                  // 0x0098(0x0040) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                        Metallic;                                                  // 0x00D8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9JUI[0x8];                                     // 0x00E4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Specular;                                                  // 0x00EC(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J1ZX[0x8];                                     // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Anisotropy;                                                // 0x0100(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MFN1[0x8];                                     // 0x010C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        Normal;                                                    // 0x0114(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S2Q5[0x8];                                     // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        Tangent;                                                   // 0x0128(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MZI7[0x8];                                     // 0x0134(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColorMaterialInput                         EmissiveColor;                                             // 0x013C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0T14[0x8];                                     // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialDomain>                MaterialDomain;                                            // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlendMode>                     BlendMode;                                                 // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDecalBlendMode>                DecalBlendMode;                                            // 0x0152(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialDecalResponse>         MaterialDecalResponse;                                     // 0x0153(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x0154(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bCastDynamicShadowAsMasked : 1;                            // 0x0155(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialShadingModelField                  ShadingModels;                                             // 0x0156(0x0002) (NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	float                                              OpacityMaskClipValue;                                      // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                        WorldPositionOffset;                                       // 0x015C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3A7G[0x8];                                     // 0x0168(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Refraction;                                                // 0x0170(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_24Z9[0x8];                                     // 0x017C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0184(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VE32[0x8];                                     // 0x0194(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        PixelDepthOffset;                                          // 0x019C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H7M7[0x8];                                     // 0x01A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FShadingModelMaterialInput                  ShadingModelFromMaterialExpression;                        // 0x01B0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T0KE[0x8];                                     // 0x01BC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableSeparateTranslucency : 1;                           // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableResponsiveAA : 1;                                   // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScreenSpaceReflections : 1;                               // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bContactShadows : 1;                                       // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      TwoSided : 1;                                              // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DitheredLODTransition : 1;                                 // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DitherOpacityMask : 1;                                     // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                           // 0x01C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETranslucencyLightingMode>      TranslucencyLightingMode;                                  // 0x01C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;                     // 0x01C6(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y3U1[0x1];                                     // 0x01C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumCustomizedUVs;                                          // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucencyDirectionalLightingIntensity;                  // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentShadowDensityScale;                             // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowDensityScale;                         // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowSecondDensityScale;                   // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowSecondOpacity;                        // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentBackscatteringExponent;                         // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                   // 0x01E4(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentShadowStartOffset;                              // 0x01F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableDepthTest : 1;                                     // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWriteOnlyAlpha : 1;                                       // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                     // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentSpaceNormal : 1;                                   // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                    // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBlockGI : 1;                                              // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                          // 0x01F8(0x0001) BIT_FIELD (DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                 // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithEditorCompositing : 1;                            // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithParticleSprites : 1;                              // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithBeamTrails : 1;                                   // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithMeshParticles : 1;                                // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraSprites : 1;                               // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraRibbons : 1;                               // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraMeshParticles : 1;                         // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithGeometryCache : 1;                                // 0x01F9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithStaticLighting : 1;                               // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithMorphTargets : 1;                                 // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                 // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                        // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithGeometryCollections : 1;                          // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsesDistortion : 1;                                       // 0x01FA(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithClothing : 1;                                     // 0x01FA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YKIG[0x1];                                     // 0x01FB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUsedWithWater : 1;                                        // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithHairStrands : 1;                                  // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithLidarPointCloud : 1;                              // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithVirtualHeightfieldMesh : 1;                       // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QZ9Q[0x3];                                     // 0x01FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUsedWithUI : 1;                                           // 0x0200(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                        // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFullyRough : 1;                                           // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFullPrecision : 1;                                     // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLightmapDirectionality : 1;                            // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAlphaToCoverage : 1;                                   // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SZOJ[0x3];                                     // 0x0201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForwardRenderUsePreintegratedGFForSimpleIBL : 1;          // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3T4R[0x3];                                     // 0x0205(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseHQForwardReflections : 1;                              // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePlanarForwardReflections : 1;                          // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                           // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialTessellationMode>      D3D11TessellationMode;                                     // 0x0209(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                          // 0x020A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                           // 0x020A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;                     // 0x020A(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Wireframe : 1;                                             // 0x020A(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialShadingRate>           ShadingRate;                                               // 0x020B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                             // 0x020C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsMasked : 1;                                             // 0x020C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsPreviewMaterial : 1;                                    // 0x020C(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFunctionPreviewMaterial : 1;                            // 0x020C(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaterialAttributes : 1;                                // 0x020C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastRayTracedShadows : 1;                                 // 0x020C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                             // 0x020C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyCloudFogging : 1;                                    // 0x020C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSky : 1;                                                // 0x020D(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComputeFogPerPixel : 1;                                   // 0x020D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOutputTranslucentVelocity : 1;                            // 0x020D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                        // 0x020D(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                        // 0x020D(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlendableLocation>             BlendableLocation;                                         // 0x020E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      BlendableOutputAlpha : 1;                                  // 0x020F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableStencilTest : 1;                                    // 0x020F(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialStencilCompare>        StencilCompare;                                            // 0x0210(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      StencilRefValue;                                           // 0x0211(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERefractionMode>                RefractionMode;                                            // 0x0212(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PNGN[0x1];                                     // 0x0213(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlendablePriority;                                         // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBlendable : 1;                                          // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8YXP[0x3];                                     // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UsageFlagWarnings;                                         // 0x021C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RefractionDepthBias;                                       // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       StateId;                                                   // 0x0224(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDisplacement;                                           // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NKN9[0x30];                                    // 0x0238(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialCachedExpressionData               CachedExpressionData;                                      // 0x0268(0x0228) (NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Material"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialBillboardComponent
// 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                  // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialBillboardComponent"));
		return ptr;
	}



	void SetElements(TArray<struct FMaterialSpriteElement> NewElements);
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpression
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunction*                           Function;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsParameterExpression : 1;                                // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_562J[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpression"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAbs
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JWGA[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAbs"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionActorPositionWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAdd
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QGRS[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WTT5[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAdd"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureBase
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                   // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSample
// 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0048(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZBEU[0xC];                                     // 0x0054(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSample"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                             // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ExpressionGUID;                                            // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureColorChannel>           Channel;                                                   // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FNKS[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAntialiasedTextureMask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAppendVector
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SCDA[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_62ZL[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAppendVector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArccosine
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XG2A[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArccosine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArccosineFast
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X22F[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArccosineFast"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArcsine
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9H5[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArcsine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArcsineFast
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TO3X[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArcsineFast"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArctangent
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CL56[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArctangent2
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4KIU[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            X;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NE7K[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent2"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArctangent2Fast
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GNDQ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            X;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_75NJ[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent2Fast"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionArctangentFast
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NQ53[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangentFast"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0NTG[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericFogColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericLightColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericLightVector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustomOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GO9D[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBentNormalCustomOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBlackBody
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                      // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQ7U[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBlackBody"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                         // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_73QM[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialAttributesInput                    B;                                                         // 0x0058(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7HWS[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Alpha;                                                     // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5S88[0x8];                                     // 0x007C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialAttributeBlend>        PixelAttributeBlendType;                                   // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialAttributeBlend>        VertexAttributeBlendType;                                  // 0x0085(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_517Y[0x2];                                     // 0x0086(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBlendMaterialAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BTJV[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBreakMaterialAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBumpOffset
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QBFR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Height;                                                    // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1CO9[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            HeightRatioInput;                                          // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F3B0[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HeightRatio;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReferencePlane;                                            // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBumpOffset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraPositionWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraVectorWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCeil
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PSTE[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCeil"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParameter
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ExpressionGUID;                                            // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                              // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomPrimitiveData;                                   // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OALF[0x6];                                     // 0x006A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVectorParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	TEnumAsByte<Engine_EChannelMaskParameterColor>     MaskChannel;                                               // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3M8I[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionChannelMaskParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionClamp
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OVKP[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Min;                                                       // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QLCZ[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Max;                                                       // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GLE5[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClampMode>                     ClampMode;                                                 // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X9V5[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDefault;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDefault;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionClamp"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3XNC[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionClearCoatNormalCustomOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCloudSampleAttribute
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCloudSampleAttribute"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParameterName;                                             // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ParameterId;                                               // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCollectionParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionComment
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                     // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Text;                                                      // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                CommentColor;                                              // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FontSize;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RISN[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComment"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionComponentMask
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I3JA[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      R : 1;                                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      G : 1;                                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      B : 1;                                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      A : 1;                                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HE2E[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComponentMask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D6CF[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              G;                                                         // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant2Vector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant3Vector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant4Vector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_29S4[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Bias;                                                      // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Scale;                                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0LTD[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstantBiasScale"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCosine
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NXQP[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCosine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCrossProduct
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PQMG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_861F[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCrossProduct"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionScalarParameter
// 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomPrimitiveData;                                   // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D6HX[0x2];                                     // 0x005E(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScalarParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x0028 (FullSize[0x0088] - InheritedSize[0x0060])
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                           Curve;                                                     // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColorAtlas*                      Atlas;                                                     // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            InputTime;                                                 // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BCRC[0xC];                                     // 0x007C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCurveAtlasRowParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCustom
// 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                      // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECustomMaterialOutputType>      OutputType;                                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T920[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Description;                                               // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomInput>                        Inputs;                                                    // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomOutput>                       AdditionalOutputs;                                         // 0x0078(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomDefine>                       AdditionalDefines;                                         // 0x0088(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             IncludeFilePaths;                                          // 0x0098(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustom"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDDX
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6PD3[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDX"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDDY
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FTLF[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDY"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalDerivative"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalLifetimeOpacity"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZO9U[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstWidth;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstHeight;                                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M4U1[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalMipmapLevel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDeltaTime
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDeltaTime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDepthFade
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                 // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1WGH[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            FadeDistance;                                              // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F7C5[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OpacityDefault;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeDistanceDefault;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EDepthOfFieldFunctionValue>     FunctionValue;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_242Y[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Depth;                                                     // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4QTO[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthOfFieldFunction"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                      // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4ZSA[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDeriveNormalZ"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDesaturation
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NSAP[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Fraction;                                                  // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UWQY[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LuminanceFactors;                                          // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDesaturation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistance
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6WLG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RZK7[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceCullFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3VV9[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceFieldGradient"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MHBL[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceToNearestSurface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDivide
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0XKI[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4VZW[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDivide"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDotProduct
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LTOJ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V0WT[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDotProduct"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDynamicParameter
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                                // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                                DefaultValue;                                              // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ParameterIndex;                                            // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RO9F[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDynamicParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionEyeAdaptation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SWGE[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFeatureLevelSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFloor
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GWUJ[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFloor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFmod
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ETXG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RZY7[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFmod"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFontSample
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                      // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FontTexturePage;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LH4L[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSample"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                             // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ExpressionGUID;                                            // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSampleParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFrac
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6Z47[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFrac"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFresnel
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                                // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LBMC[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Exponent;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            BaseReflectFractionIn;                                     // 0x0058(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8CS8[0x8];                                     // 0x0064(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseReflectFraction;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            Normal;                                                    // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I52E[0xC];                                     // 0x007C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFresnel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFunctionInput
// 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QGCI[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       InputName;                                                 // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_APR2[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Description;                                               // 0x0060(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ID;                                                        // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFunctionInputType>             InputType;                                                 // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6I25[0xF];                                     // 0x0081(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector4                                    PreviewValue;                                              // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                             // 0x00A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BZHJ[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SortPriority;                                              // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCompilingFunctionPreview : 1;                             // 0x00A8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TXI3[0x17];                                    // 0x00A9(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionInput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFunctionOutput
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FName                                       OutputName;                                                // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Description;                                               // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SortPriority;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            A;                                                         // 0x005C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1I2E[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLastPreviewed : 1;                                        // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JRLC[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       ID;                                                        // 0x0074(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BZ7V[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7URF[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGuid>                               AttributeGetTypes;                                         // 0x0058(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionGetMaterialAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionGIReplace
// 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVKQ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            StaticIndirect;                                            // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HCBD[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            DynamicIndirect;                                           // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IQAJ[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionGIReplace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionHairAttributes
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:
	unsigned char                                      bUseTangentSpace : 1;                                      // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4IOU[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionHairAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionHairColor
// 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
class UMaterialExpressionHairColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Melanin;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W8NH[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Redness;                                                   // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N78T[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            DyeColor;                                                  // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EP0G[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionHairColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionIf
// 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KH8R[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HBD8[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AGreaterThanB;                                             // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N1WY[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AEqualsB;                                                  // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HZ53[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ALessThanB;                                                // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QCH2[0x8];                                     // 0x009C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EqualsThreshold;                                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstAEqualsB;                                             // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionIf"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionInverseLinearInterpolate
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KN88[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HJ2H[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Value;                                                     // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W0M1[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstValue;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClampResult;                                              // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L53B[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionInverseLinearInterpolate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmapUVs"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RTB3[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Lightmass;                                                 // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FQG4[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmassReplace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightVector"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MYAY[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BFCC[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Alpha;                                                     // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I866[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstAlpha;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLinearInterpolate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLogarithm10
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I9K8[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLogarithm10"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLogarithm2
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J5LW[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLogarithm2"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0230 (FullSize[0x0270] - InheritedSize[0x0040])
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P4ML[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Metallic;                                                  // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_54L7[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Specular;                                                  // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AOX4[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Roughness;                                                 // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HDWS[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Anisotropy;                                                // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JDGR[0x8];                                     // 0x009C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            EmissiveColor;                                             // 0x00A4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YKTN[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Opacity;                                                   // 0x00B8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_972S[0x8];                                     // 0x00C4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            OpacityMask;                                               // 0x00CC(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IDTJ[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Normal;                                                    // 0x00E0(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FTPS[0x8];                                     // 0x00EC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Tangent;                                                   // 0x00F4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MY2H[0x8];                                     // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldPositionOffset;                                       // 0x0108(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4FB4[0x8];                                     // 0x0114(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldDisplacement;                                         // 0x011C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KBZF[0x8];                                     // 0x0128(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            TessellationMultiplier;                                    // 0x0130(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N1YF[0x8];                                     // 0x013C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            SubsurfaceColor;                                           // 0x0144(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z38E[0x8];                                     // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ClearCoat;                                                 // 0x0158(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L8M8[0x8];                                     // 0x0164(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ClearCoatRoughness;                                        // 0x016C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B3Y7[0x8];                                     // 0x0178(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AmbientOcclusion;                                          // 0x0180(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4OYX[0x8];                                     // 0x018C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Refraction;                                                // 0x0194(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XEGU[0x8];                                     // 0x01A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            CustomizedUVs[0x8];                                        // 0x01A8(0x0060) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L8WT[0x40];                                    // 0x0208(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PixelDepthOffset;                                          // 0x0248(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JYD7[0x8];                                     // 0x0254(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ShadingModel;                                              // 0x025C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HXER[0x8];                                     // 0x0268(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMakeMaterialAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ONTL[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMapARPassthroughCameraUV"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x00A8 (FullSize[0x00E8] - InheritedSize[0x0040])
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ExpressionGUID;                                            // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput                    Input;                                                     // 0x0058(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ULHN[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialLayersFunctions                    DefaultLayers;                                             // 0x0070(0x0040) (Edit, NativeAccessSpecifierPublic)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                              // 0x00B0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int                                                NumActiveLayerCallers;                                     // 0x00C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L4FB[0x4];                                     // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                              // 0x00C8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int                                                NumActiveBlendCallers;                                     // 0x00D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLayerGraphBuilt;                                        // 0x00DC(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QD96[0xB];                                     // 0x00DD(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialAttributeLayers"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                          // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                      FunctionParameterInfo;                                     // 0x0048(0x0010) (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialFunctionCall"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialLayerOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NBRJ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MaterialProxy;                                             // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VE40[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialProxyReplace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMax
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HP5W[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5P0O[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMax"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMin
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YHSR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4NCM[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMin"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMultiply
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_73JQ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3VCF[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMultiply"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionNoise
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YHUG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            FilterWidth;                                               // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F55K[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Scale;                                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Quality;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENoiseFunction>                 NoiseFunction;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S2EF[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bTurbulence : 1;                                           // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PUR6[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Levels;                                                    // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutputMin;                                                 // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutputMax;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LevelScale;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTiling : 1;                                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D1MJ[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           RepeatSize;                                                // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNoise"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionNormalize
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VSB9[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNormalize"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectBounds"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectOrientation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectPositionWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectRadius"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionOneMinus
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8FM2[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionOneMinus"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPanner
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5N7W[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Time;                                                      // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NZ7Y[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Speed;                                                     // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5UI3[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpeedX;                                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedY;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFractionalPart;                                           // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LI8B[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPanner"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleColor
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleDirection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMacroUV"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMotionBlurFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticlePositionWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRadius"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRandom"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRelativeTime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSize
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSize"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSpeed"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J76M[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSubUV"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSubUVProperties
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSubUVProperties"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPerInstanceCustomData
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                            DefaultValue;                                              // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LNNB[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstDefaultValue;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           DataIndex;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I3UG[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceCustomData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceFadeAmount"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceRandom"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelDepth"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelNormalWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPower
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                      // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4DIR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Exponent;                                                  // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9944[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstExponent;                                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CHXI[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPower"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPrecomputedAOMask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreSkinnedLocalBounds"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreSkinnedNormal"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreSkinnedPosition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            CurrentFrame;                                              // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E6XX[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PreviousFrame;                                             // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_59RU[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreviousFrameSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionQualitySwitch
// 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KWKY[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Inputs[0x4];                                               // 0x0054(0x0030) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4UDE[0x24];                                    // 0x0084(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionQualitySwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                    // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZKZM[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            RayTraced;                                                 // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_84DI[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRayTracingQualitySwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3TJJ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Reflection;                                                // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SK2H[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReflectionCapturePassSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VTYG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                           // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5PDA[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReflectionVectorWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionReroute
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionReroute : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BQ4X[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReroute"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                    // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B3VF[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            RotationAngle;                                             // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IOC8[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PivotPoint;                                                // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IPY9[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            position;                                                  // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VWL1[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EH1Q[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotateAboutAxis"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRotator
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UNL7[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Time;                                                      // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9U8U[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CenterX;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterY;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                     // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRound
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_30SR[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRound"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x0090 (FullSize[0x00D0] - InheritedSize[0x0040])
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U3FB[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Specular;                                                  // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4711[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Roughness;                                                 // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QC7V[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Normal;                                                    // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_15CO[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldHeight;                                               // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UJQE[0x8];                                     // 0x009C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Opacity;                                                   // 0x00A4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MSKX[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Mask;                                                      // 0x00B8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SYFX[0xC];                                     // 0x00C4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRuntimeVirtualTextureOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PRFR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            VirtualTextureOutput;                                      // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7GP2[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRuntimeVirtualTextureReplace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KTH1[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldPosition;                                             // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FXWH[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MipValue;                                                  // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ED4V[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class URuntimeVirtualTexture*                      VirtualTexture;                                            // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ERuntimeVirtualTextureMaterialType          MaterialType;                                              // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSinglePhysicalSpace;                                      // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAdaptive;                                                 // 0x008A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERuntimeVirtualTextureMipValueMode> MipValueMode;                                              // 0x008B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                        // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DC0G[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRuntimeVirtualTextureSample"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	struct FName                                       ParameterName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       ExpressionGUID;                                            // 0x0098(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSaturate
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RU5P[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSaturate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneColor
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GH2D[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_66PV[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            OffsetFraction;                                            // 0x0058(0x000C) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W1PX[0x8];                                     // 0x0064(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   ConstInput;                                                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RQOL[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneDepth
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MRIJ[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PDFM[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Coordinates;                                               // 0x0058(0x000C) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XYWP[0x8];                                     // 0x0064(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   ConstInput;                                                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5THH[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneDepth"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SFZC[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1SLU[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   ConstInput;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FallbackDepth;                                             // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_88GW[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneDepthWithoutWater"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexelSize"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneTexture
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8J1B[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESceneTextureId>                SceneTextureId;                                            // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFiltered;                                                 // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EZXT[0x2];                                     // 0x0056(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScreenPosition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                                    // 0x0040(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                               AttributeSetTypes;                                         // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSetMaterialAttributes"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionShaderStageSwitch
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            PixelShader;                                               // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SQTM[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            VertexShader;                                              // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FROQ[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionShaderStageSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionShadingModel
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DT1P[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionShadingModel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionShadingPathSwitch
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IFXB[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Inputs[0x3];                                               // 0x0054(0x0024) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MNY5[0x18];                                    // 0x0078(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionShadingPathSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionShadowReplace
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_28ZW[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Shadow;                                                    // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LH9I[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionShadowReplace"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSign
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TLP6[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSign"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSine
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3MEG[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            ScatteringCoefficients;                                    // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JKOX[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AbsorptionCoefficients;                                    // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5T9W[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PhaseG;                                                    // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WAC6[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ColorScaleBehindWater;                                     // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TT7G[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkinningVertexOffsets
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkinningVertexOffsets"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L2JN[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereLightDirection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            WorldPosition;                                             // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N9PF[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G7ER[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4DJR[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSkyAtmosphereViewLuminance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSmoothStep
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionSmoothStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Min;                                                       // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FXVQ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Max;                                                       // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P4UM[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Value;                                                     // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NE80[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstMin;                                                  // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstMax;                                                  // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstValue;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSmoothStep"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSobol
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Cell;                                                      // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LIR3[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Index;                                                     // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SYDG[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Seed;                                                      // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7NXR[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstIndex;                                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ConstSeed;                                                 // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSobol"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSpeedTree
// 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                            GeometryInput;                                             // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S6M0[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WindInput;                                                 // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_75H1[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            LODInput;                                                  // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QP5S[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ExtraBendWS;                                               // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GJLE[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESpeedTreeGeometryType>         GeometryType;                                              // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESpeedTreeWindType>             WindType;                                                  // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESpeedTreeLODType>              LODType;                                                   // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XQY1[0x1];                                     // 0x0093(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BillboardThreshold;                                        // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAccurateWindVelocities;                                   // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X85L[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSpeedTree"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSphereMask
// 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2YAU[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BW1H[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Radius;                                                    // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OXJT[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Hardness;                                                  // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AAY7[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AttenuationRadius;                                         // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HardnessPercent;                                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphereMask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                   // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AG09[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstantDensity;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphericalParticleOpacity"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSquareRoot
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PJ3Q[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSquareRoot"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                 // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WI5L[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBool"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_33N9[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBoolParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultR : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultG : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultB : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultA : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_06YU[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticComponentMaskParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticSwitch
// 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_15CO[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WGTP[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0058(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZOM5[0x8];                                     // 0x0064(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Value;                                                     // 0x006C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PAD9[0x8];                                     // 0x0078(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitchParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStep
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JB2V[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            X;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T1WL[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstY;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstX;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStep"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSubtract
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6RKR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_44SV[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSubtract"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTangent
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AW1Q[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTangent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTangentOutput
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6CIB[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTangentOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTemporalSobol
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Index;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N768[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Seed;                                                      // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2ALU[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstIndex;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ConstSeed;                                                 // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVCU[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTemporalSobol"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                           // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UTiling;                                                   // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VTiling;                                                   // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnMirrorU : 1;                                             // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnMirrorV : 1;                                             // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZZTW[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureCoordinate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureObject
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObject"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObjectParameter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureProperty
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                             // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1MAZ[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialExposedTextureProperty> Property;                                                  // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TLNW[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureProperty"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter2DArray"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterCube"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YFV7[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterSubUV"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            TransmittanceColor;                                        // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NAMO[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionThinTranslucentMaterialOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTime
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                          // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_Period : 1;                                      // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_41RF[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTransform
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B66X[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialVectorCoordTransformSource> TransformSourceType;                                       // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialVectorCoordTransform>  TransformType;                                             // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3218[0x2];                                     // 0x0056(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransform"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTransformPosition
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HMZX[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformSourceType;                                       // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformType;                                             // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PH5W[0x2];                                     // 0x0056(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransformPosition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTruncate
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LQDW[0xC];                                     // 0x004C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTruncate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTwoSidedSign"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVectorNoise
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9FK[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EVectorNoiseFunction>           NoiseFunction;                                             // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LC8H[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Quality;                                                   // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTiling : 1;                                               // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1QAV[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           TileSize;                                                  // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I8IQ[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVectorNoise"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexInterpolator
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SVN8[0x14];                                    // 0x004C(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexInterpolator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexNormalWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexTangentWS
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexTangentWS"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionViewProperty
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialExposedViewProperty>   Property;                                                  // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NUDF[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewProperty"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionViewSize
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewSize"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            No;                                                        // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F9MR[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Yes;                                                       // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EOIS[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVirtualTextureFeatureSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// 0x00B0 (FullSize[0x00F0] - InheritedSize[0x0040])
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            PhaseG;                                                    // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_16QN[0x8];                                     // 0x004C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PhaseG2;                                                   // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OO0H[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PhaseBlend;                                                // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_52QP[0x8];                                     // 0x0074(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MultiScatteringContribution;                               // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E27Q[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MultiScatteringOcclusion;                                  // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I9LX[0x8];                                     // 0x009C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MultiScatteringEccentricity;                               // 0x00A4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E67I[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ConservativeDensity;                                       // 0x00B8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RSMH[0x8];                                     // 0x00C4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstPhaseG;                                               // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstPhaseG2;                                              // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstPhaseBlend;                                           // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               PerSamplePhaseEvaluation;                                  // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_61EH[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MultiScatteringApproximationOctaveCount;                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstMultiScatteringContribution;                          // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstMultiScatteringOcclusion;                             // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstMultiScatteringEccentricity;                          // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGroundContribution;                                       // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGrayScaleMaterial;                                        // 0x00ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRayMarchVolumeShadow;                                     // 0x00EE(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_198I[0x1];                                     // 0x00EF(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EWorldPositionIncludedOffsets>  WorldPositionShaderOffset;                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A6YI[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionWorldPosition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionInterface
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMaterialFunctionUsage                      MaterialFunctionUsage;                                     // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SVIQ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunction
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	struct FString                                     Description;                                               // 0x0040(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExposeToLibrary : 1;                                      // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrefixParameterNames : 1;                                 // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0C81[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunction"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionInstance
// 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*                  Parent;                                                    // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunctionInterface*                  Base;                                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticSwitchParameter>              StaticSwitchParameterValues;                               // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticComponentMaskParameter>       StaticComponentMaskParameterValues;                        // 0x00A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                      // 0x00B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionMaterialLayer
// 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionMaterialLayer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionMaterialLayerInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionMaterialLayerBlend"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunctionMaterialLayerBlendInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceActor
// 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                              // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceDynamic
// 0x0050 (FullSize[0x03B0] - InheritedSize[0x0360])
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	unsigned char                                      UnknownData_K494[0x50];                                    // 0x0360(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceDynamic"));
		return ptr;
	}



	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value);
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* Source);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialParameterCollection
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                          // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_98ET[0x18];                                    // 0x0058(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialParameterCollectionInstance
// 0x00E0 (FullSize[0x0108] - InheritedSize[0x0028])
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData_PA99[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialParameterCollection*                Collection;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_9GFD[0xD0];                                    // 0x0038(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollectionInstance"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeActor
// 0x00A8 (FullSize[0x02C8] - InheritedSize[0x0220])
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                               // 0x0220(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       MatineeControllerName;                                     // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayRate;                                                  // 0x0230(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayOnLevelLoad : 1;                                      // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceStartPos : 1;                                        // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7KD2[0x3];                                     // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStartPosition;                                        // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRewindOnPlay : 1;                                         // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoResetOnRewind : 1;                                      // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                               // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableRadioFilter : 1;                                   // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientSideOnly : 1;                                       // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                               // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSkippable : 1;                                          // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S6F0[0x3];                                     // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PreferredSplitScreenNum;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMovementInput : 1;                                 // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableLookAtInput : 1;                                   // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHidePlayer : 1;                                           // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHideHud : 1;                                              // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GPAS[0x3];                                     // 0x0245(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                           // 0x0248(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldShowGore : 1;                                       // 0x0258(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZIMO[0x7];                                     // 0x0259(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                 // 0x0260(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                                // 0x0270(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      bIsPlaying : 1;                                            // 0x0280(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReversePlayback : 1;                                      // 0x0280(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPaused : 1;                                               // 0x0280(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPendingStop : 1;                                          // 0x0280(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FQKO[0x3];                                     // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpPosition;                                            // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KROD[0x4];                                     // 0x0288(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ReplicationForceIsPlaying;                                 // 0x028C(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RXQC[0x3];                                     // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnPlay;                                                    // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStop;                                                    // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPause;                                                   // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7XQ2[0x8];                                     // 0x02C0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MatineeActor"));
		return ptr;
	}



	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play();
	void Pause();
	void EnableGroupByName(const struct FString& GroupName, bool bEnable);
	void ChangePlaybackDirection();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeActorCameraAnim
// 0x0008 (FullSize[0x02D0] - InheritedSize[0x02C8])
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                                // 0x02C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MatineeActorCameraAnim"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeAnimInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeAnimInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MatineeAnimInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MatineeInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshMergeCullingVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class AMeshMergeCullingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MeshMergeCullingVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshSimplificationSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                   // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MeshSimplificationSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MeshVertexPainterKismetLibrary"));
		return ptr;
	}



	void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);
	void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, Engine_EVertexPaintAxis Axis, bool bConvertToSRGB);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MicroTransactionBase
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                         // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     LastError;                                                 // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LastErrorSolution;                                         // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MicroTransactionBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ModelComponent
// 0x0040 (FullSize[0x0480] - InheritedSize[0x0440])
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_41PM[0x18];                                    // 0x0440(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  ModelBodySetup;                                            // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PKCR[0x20];                                    // 0x0460(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ModelComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MorphTarget
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0O10[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.MorphTarget"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavAgentInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavAgentInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavAreaBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UNavAreaBase : public UObject
{
public:
	unsigned char                                      UnknownData_D01X[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavAreaBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavCollisionBase
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UNavCollisionBase : public UObject
{
public:
	unsigned char                                      bIsDynamicObstacle : 1;                                    // 0x0028(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_KMLY[0x47];                                    // 0x0029(0x0047) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavCollisionBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavEdgeProviderInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavEdgeProviderInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavEdgeProviderInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationDataChunk
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavigationDataChunk"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationDataInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationDataInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavigationDataInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationSystemBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationSystemBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavigationSystemBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationSystemConfig
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                              NavigationSystemClass;                                     // 0x0028(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                           SupportedAgentsMask;                                       // 0x0040(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       DefaultAgentName;                                          // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsOverriden : 1;                                          // 0x004C(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Q97O[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavigationSystemConfig"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NullNavSysConfig
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NullNavSysConfig"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkDefinition
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QXRM[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavLinkDefinition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavPathObserverInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavPathObserverInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavPathObserverInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavRelevantInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavRelevantInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavRelevantInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SimulatedClientNetConnection
// 0x0000 (FullSize[0x1AF0] - InheritedSize[0x1AF0])
class USimulatedClientNetConnection : public UNetConnection
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SimulatedClientNetConnection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetPushModelHelpers
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NetPushModelHelpers"));
		return ptr;
	}



	void MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName);
	void MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetworkPredictionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetworkPredictionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NetworkPredictionInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetworkSettings
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                           // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YAT1[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxRepArraySize;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxRepArrayMemory;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BIHD[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                                  // 0x0048(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NetworkSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NodeMappingContainer
// 0x0140 (FullSize[0x0168] - InheritedSize[0x0028])
class UNodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FNodeItem>               SourceItems;                                               // 0x0028(0x0050) (Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FName, struct FNodeItem>               TargetItems;                                               // 0x0078(0x0050) (Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FName, struct FName>                   SourceToTarget;                                            // 0x00C8(0x0050) (Edit, NativeAccessSpecifierPrivate)
	unsigned char                                      SourceAsset[0x28];                                         // 0x0118(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
	unsigned char                                      TargetAsset[0x28];                                         // 0x0140(0x0028) UNKNOWN PROPERTY: SoftObjectProperty


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NodeMappingContainer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NodeMappingProviderInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNodeMappingProviderInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NodeMappingProviderInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Note
// 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
class ANote : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Note"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ObjectLibrary
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                           // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasBlueprintClasses;                                      // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q7NC[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             Objects;                                                   // 0x0038(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                               // 0x0048(0x0010) (ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                               bUseWeakReferences;                                        // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsFullyLoaded;                                            // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SQ3S[0x4E];                                    // 0x005A(0x004E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ObjectLibrary"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ObjectReferencer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ObjectReferencer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ObjectTraceWorldSubsystem
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData_BN44[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ObjectTraceWorldSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PackageMapClient
// 0x0318 (FullSize[0x03F8] - InheritedSize[0x00E0])
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData_LYSI[0x318];                                   // 0x00E0(0x0318) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PackageMapClient"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PainCausingVolume
// 0x0028 (FullSize[0x0290] - InheritedSize[0x0268])
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                          // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TWQ6[0x3];                                     // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamagePerSec;                                              // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageType;                                                // 0x0270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PainInterval;                                              // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEntryPain : 1;                                            // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      BACKUP_bPainCausing : 1;                                   // 0x027C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K5SA[0x3];                                     // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 DamageInstigator;                                          // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9JRX[0x8];                                     // 0x0288(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PainCausingVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleEmitter
// 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubUVDataOffset;                                           // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEmitterRenderMode>             EmitterRenderMode;                                         // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSignificanceLevel                  SignificanceLevel;                                         // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EI43[0x1];                                     // 0x0036(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseLegacySpawningBehavior : 1;                            // 0x0037(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZV8T : 3;                                      // 0x0037(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      ConvertedModules : 1;                                      // 0x0037(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSoloing : 1;                                            // 0x0037(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCookedOut : 1;                                            // 0x0037(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                         // 0x0037(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableWhenInsignficant : 1;                              // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZMDL[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                 // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                PeakActiveParticles;                                       // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InitialAllocationCount;                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QualityLevelSpawnRateScale;                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           DetailModeBitmask;                                         // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K3HT[0x158];                                   // 0x0060(0x0158) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleEmitter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleEventManager
// 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
class AParticleEventManager : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleEventManager"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleLODLevel
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x002C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_APB8[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleModuleRequired*                     RequiredModule;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     Modules;                                                   // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                            // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleSpawn*                        SpawnModule;                                               // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleEventGenerator*               EventGenerator;                                            // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                           // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     SpawnModules;                                              // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     UpdateModules;                                             // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                              // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                      // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	unsigned char                                      ConvertedModules : 1;                                      // 0x00B0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QC7X[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleLODLevel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModule
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                          // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateModule : 1;                                         // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFinalUpdateModule : 1;                                    // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCurvesAsColor : 1;                                        // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      b3DDrawMode : 1;                                           // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupported3DDrawMode : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEditable : 1;                                             // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LODDuplicate : 1;                                          // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportsRandomSeed : 1;                                   // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequiresLoopingNotification : 1;                          // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LODValidity;                                               // 0x002A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IKHD[0x5];                                     // 0x002B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModule"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                   // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7SJD[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAcceleration
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                              // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7EVE[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAcceleration"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                              // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PPQP[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationConstant"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationDrag
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                           // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       DragCoefficientRaw;                                        // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDrag"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                 // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       DragScaleRaw;                                              // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDragScaleOverLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationOverLifetime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleAttractorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorLine
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                 // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     EndPoint1;                                                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Range;                                                     // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorLine"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorParticle
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Range;                                                     // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bStrengthByDistance : 1;                                   // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VCD3[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0070(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WZ3R[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAttractorParticleSelectionMethod> SelectionMethod;                                           // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HQ7F[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenewSource : 1;                                          // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritSourceVel : 1;                                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H97N[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LastSelIndex;                                              // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorParticle"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      position;                                                  // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Range;                                                     // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00A8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      StrengthByDistance : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideVelocity : 1;                                     // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseWorldSpacePosition : 1;                                // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_X : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Y : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Z : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_X : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Y : 1;                                            // 0x00D9(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Z : 1;                                            // 0x00D9(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6F48[0x6];                                     // 0x00DA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPoint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     position;                                                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius;                                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloat*                          Strength;                                                  // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StrengthRaw;                                               // 0x0048(0x0030) (Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPointGravity"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleBeamBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamModifier
// 0x00D8 (FullSize[0x0108] - InheritedSize[0x0030])
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeamModifierType>              ModifierType;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NJET[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        PositionOptions;                                           // 0x0034(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      position;                                                  // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBeamModifierOptions                        TangentOptions;                                            // 0x0080(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_308P[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Tangent;                                                   // 0x0088(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsoluteTangent : 1;                                      // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ULDE[0x3];                                     // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        StrengthOptions;                                           // 0x00D4(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00D8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamModifier"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamNoise
// 0x0160 (FullSize[0x0190] - InheritedSize[0x0030])
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                      // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VI4F[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Frequency;                                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Frequency_LowRange;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GHYD[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseRange;                                                // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       NoiseRangeScale;                                           // 0x0088(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bNRScaleEmitterTime : 1;                                   // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y4AD[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseSpeed;                                                // 0x00C0(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bSmooth : 1;                                               // 0x0108(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YXFN[0x3];                                     // 0x0109(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockRadius;                                           // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoiseLock : 1;                                            // 0x0110(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOscillate : 1;                                            // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HPWK[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockTime;                                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseTension;                                              // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseNoiseTangents : 1;                                     // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2U6O[0x3];                                     // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                      // 0x0120(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                NoiseTessellation;                                         // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTargetNoise : 1;                                          // 0x0154(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XAQS[0x3];                                     // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FrequencyDistance;                                         // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyNoiseScale : 1;                                      // 0x015C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8GCB[0x3];                                     // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseScale;                                                // 0x0160(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamNoise"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamSource
// 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       SourceMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YEKE[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSourceAbsolute : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8VY3[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Source;                                                    // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSource : 1;                                           // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7URQ[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> SourceTangentMethod;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N2DO[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      SourceTangent;                                             // 0x0090(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceTangent : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LOC1[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x00E0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6ZRP[0x7];                                     // 0x0111(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamSource"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamTarget
// 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       TargetMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1OW1[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TargetName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WJLJ[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Target;                                                    // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bTargetAbsolute : 1;                                       // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTarget : 1;                                           // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0V5L[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> TargetTangentMethod;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4EF2[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      TargetTangent;                                             // 0x0090(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTargetTangent : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IRUR[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TargetStrength;                                            // 0x00E0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTargetStength : 1;                                    // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YAPL[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockRadius;                                                // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2EAJ[0x8];                                     // 0x0118(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamTarget"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCameraBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleCameraBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCameraOffset
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                              // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bSpawnTimeOnly : 1;                                        // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4EEH[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleCameraOffsetUpdateMethod> UpdateMethod;                                              // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QBV0[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraOffset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleCollisionBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollision
// 0x0160 (FullSize[0x0190] - InheritedSize[0x0030])
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                             // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      DampingFactorRotation;                                     // 0x0078(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       MaxCollisions;                                             // 0x00C0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionComplete>     CollisionCompletionOption;                                 // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HNME[0x7];                                     // 0x00F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       CollisionTypes;                                            // 0x00F8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CEPK[0x8];                                     // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyPhysics : 1;                                         // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                                 // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W3UL[0x7];                                     // 0x0111(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       ParticleMass;                                              // 0x0118(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              DirScalar;                                                 // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                             // 0x014C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                    // 0x014C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MAWT[0x3];                                     // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VerticalFudgeFactor;                                       // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W373[0x4];                                     // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       DelayAmount;                                               // 0x0158(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bDropDetail : 1;                                           // 0x0188(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                 // 0x0188(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreSourceActor : 1;                                    // 0x0188(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_10TR[0x3];                                     // 0x0189(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxCollisionDistance;                                      // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollision"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollisionGPU
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                                // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                   // 0x0060(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              Friction;                                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomSpread;                                              // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomDistribution;                                        // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RadiusScale;                                               // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RadiusBias;                                                // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionResponse>     Response;                                                  // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionMode>         CollisionMode;                                             // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IM79[0x2];                                     // 0x00A6(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionGPU"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleColorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColor
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                                // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartAlpha;                                                // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N0FA[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00B0(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorOverLife
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                             // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       AlphaOverLife;                                             // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V5LD[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorOverLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                        // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterTime : 1;                                          // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5GQQ[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorScaleOverLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleEventBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                    // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventGenerator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<Engine_EParticleEventType>             EventGeneratorType;                                        // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_746E[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       EventName;                                                 // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GG13[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                         // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IZ06[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverKillParticles"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0098 (FullSize[0x00D8] - InheritedSize[0x0040])
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                                // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bUseParticleTime : 1;                                      // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePSysLocation : 1;                                      // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritVelocity : 1;                                      // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4AM5[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      InheritVelocityScale;                                      // 0x0078(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                         // 0x00C0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bBanPhysicalMaterials : 1;                                 // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1Z9H[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverSpawn"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleKillBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillBox
// 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                           // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      UpperRightCorner;                                          // 0x0078(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsolute : 1;                                             // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillInside : 1;                                           // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                              // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SRZG[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBox"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillHeight
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                    // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsolute : 1;                                             // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFloor : 1;                                                // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyPSysScale : 1;                                       // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DUFQ[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillHeight"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLifetimeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetimeBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetime
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       LifeTime;                                                  // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0060(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLightBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLightBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLightBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLight
// 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                 // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAffectsTranslucency;                                      // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPreviewLightRadius;                                       // 0x0032(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BUZ0[0x1];                                     // 0x0033(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpawnFraction;                                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       BrightnessOverLife;                                        // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       RadiusScale;                                               // 0x00B0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       LightExponent;                                             // 0x00E0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLightingChannels                           LightingChannels;                                          // 0x0110(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K8RV[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VolumetricScatteringIntensity;                             // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHighQualityLights;                                        // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShadowCastingLights;                                      // 0x0119(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SBQF[0x6];                                     // 0x011A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0120(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLocationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocation
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                             // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              DistributeOverNPoints;                                     // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistributeThreshold;                                       // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationBoneSocketSource>      SourceType;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZOR0[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                           // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ELocationBoneSocketSelectionMethod> SelectionMethod;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_450B[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0054(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X0ML[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritVelocityScale;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SkelMeshActorParamName;                                    // 0x005C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumPreSelectedIndices;                                     // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K17D[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBoneSocket"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationDirect
// 0x0120 (FullSize[0x0150] - InheritedSize[0x0030])
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                  // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      LocationOffset;                                            // 0x0078(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      ScaleFactor;                                               // 0x00C0(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      Direction;                                                 // 0x0108(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationDirect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ELocationEmitterSelectionMethod> SelectionMethod;                                           // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S6A9[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InheritSourceVelocity : 1;                                 // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I1SE[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceVelocityScale;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritSourceRotation : 1;                                // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6I0X[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceRotationScale;                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YCFH[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitterDirect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Y : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Z : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_X : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Y : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Z : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      SurfaceOnly : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Velocity : 1;                                              // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VPKT[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      StartLocation;                                             // 0x0068(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                        // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0XK7[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00B8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartHeight;                                               // 0x00E8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECylinderHeightAxis>            HeightAxis;                                                // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7ESK[0x7];                                     // 0x0119(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0120(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00B0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00E0(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00D8 (FullSize[0x0108] - InheritedSize[0x0030])
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                               // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Height;                                                    // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Angle;                                                     // 0x00A8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Thickness;                                                 // 0x00D8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveTriangle"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationSkelVertSurfaceSource> SourceType;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BDQX[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MFM9[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritVelocityScale;                                      // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ValidAssociatedBones;                                      // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bEnforceNormalCheck : 1;                                   // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OG48[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalToCompare;                                           // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckToleranceDegrees;                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckTolerance;                                      // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        ValidMaterialIndices;                                      // 0x0078(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritVertexColor : 1;                                   // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritUV : 1;                                            // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8UFV[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           InheritUVChannel;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationSkelVertSurface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleMaterialBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMaterialBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                             // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshMaterial"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleRotationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotation
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                             // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritParent : 1;                                        // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UQ84[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleRotationRateBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRate
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                         // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0078(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateMultiplyLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                   // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleRotRate : 1;                                         // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QB1Z[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateOverLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrbitBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1NET[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbitBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrbit
// 0x00F8 (FullSize[0x0130] - InheritedSize[0x0038])
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<Engine_EOrbitChainMode>                ChainMode;                                                 // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S0N1[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      OffsetAmount;                                              // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               OffsetOptions;                                             // 0x0088(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_76YL[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationAmount;                                            // 0x0090(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               RotationOptions;                                           // 0x00D8(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XV17[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationRateAmount;                                        // 0x00E0(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               RotationRateOptions;                                       // 0x0128(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XP93[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbit"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleOrientationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<Engine_EParticleAxisLock>              LockAxisFlags;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_38BQ[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationAxisLock"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleParameterBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                             // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                UpdateFlags;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsesVelocity : 1;                                         // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R6G0[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0048(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModulePivotOffset
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModulePivotOffset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRequired
// 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                  // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinFacingCameraBlendDistance;                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxFacingCameraBlendDistance;                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     EmitterOrigin;                                             // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    EmitterRotation;                                           // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleScreenAlignment>       ScreenAlignment;                                           // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLocalSpace : 1;                                        // 0x0059(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillOnDeactivate : 1;                                     // 0x0059(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillOnCompleted : 1;                                      // 0x0059(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSortMode>              SortMode;                                                  // 0x005A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                 // 0x005B(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRemoveHMDRoll : 1;                                        // 0x005B(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterDurationUseRange : 1;                              // 0x005B(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDuration;                                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SpawnRate;                                                 // 0x0060(0x0030) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x0090(0x0010) (ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	float                                              EmitterDelay;                                              // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDelayLow;                                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                   // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSubUVInterpMethod>     InterpolationMethod;                                       // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleUV : 1;                                              // 0x00AA(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterDelayUseRange : 1;                                 // 0x00AA(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x00AB(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSystemMacroUV : 1;                                // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaxDrawCount : 1;                                      // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x00AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEmitterNormalsMode>            EmitterNormalsMode;                                        // 0x00AE(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                  // 0x00AF(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Horizontal;                                      // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Vertical;                                        // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomImageTime;                                           // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RandomImageChanges;                                        // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MacroUVPosition;                                           // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MacroUVRadius;                                             // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleUVFlipMode                         UVFlippingMode;                                            // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDurationRecalcEachLoop : 1;                               // 0x00D2(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XWNA[0x1];                                     // 0x00D3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalsSphereCenter;                                       // 0x00D4(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AlphaThreshold;                                            // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EmitterLoops;                                              // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  CutoutTexture;                                             // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDrawCount;                                              // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDurationLow;                                        // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     NormalsCylinderDirection;                                  // 0x00F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KN55[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               NamedMaterialOverrides;                                    // 0x0108(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WM6G[0x28];                                    // 0x0118(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRequired"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotation
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                             // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0060(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                          // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      Scale : 1;                                                 // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N8YK[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationOverLifetime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRate
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                         // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0060(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                            // 0x0030(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateMultiplyLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleSizeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSize
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                 // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0078(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyX : 1;                                             // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyY : 1;                                             // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyZ : 1;                                             // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WRRY[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeMultiplyLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeScale
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                 // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      EnableX : 1;                                               // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      EnableY : 1;                                               // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      EnableZ : 1;                                               // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EN7F[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScale"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   MaxScale;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScaleBySpeed"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSourceMovement
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                       // 0x0030(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSourceMovement"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bProcessBurstList : 1;                                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A10U[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawn
// 0x00B0 (FullSize[0x00E8] - InheritedSize[0x0038])
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                      // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       RateScale;                                                 // 0x0068(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_79GM[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x00A0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       BurstScale;                                                // 0x00B0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                            // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WCEN[0x7];                                     // 0x00E1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawn"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTolerance;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SpawnPerUnit;                                              // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              MaxFrameDistance;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                            // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                 // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                 // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                 // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UIGY[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnPerUnit"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleSubUVBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUV
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             Animation;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SubImageIndex;                                             // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRealTime : 1;                                          // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QXNY[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUV"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUVMovie
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4ALS[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       FrameRate;                                                 // 0x0078(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                StartingFrame;                                             // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q4NQ[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVMovie"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTrailBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleTrailBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTrailSource
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<Engine_ETrail2SourceMethod>            SourceMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M8AE[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IEUD[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RQT0[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SourceOffsetCount;                                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             SourceOffsetDefaults;                                      // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSourceSelectionMethod> SelectionMethod;                                           // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PTN6[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bInheritRotation : 1;                                      // 0x008C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PJPK[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailSource"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleTypeDataBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SR5L[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceTessellationStepSize;                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TangentTessellationStepSize;                               // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WidthTessellationStepSize;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SG4Z[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataAnimTrail"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0120 (FullSize[0x0150] - InheritedSize[0x0030])
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<Engine_EBeam2Method>                   BeamMethod;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CZVB[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TextureTile;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TextureTileDistance;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Sheets;                                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBeamCount;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InterpolationPoints;                                       // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysOn : 1;                                             // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EMWX[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UpVectorStepSize;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BranchParentName;                                          // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UNLF[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Distance;                                                  // 0x0060(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBeamTaperMethod>               TaperMethod;                                               // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SO8C[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TaperFactor;                                               // 0x0098(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       TaperScale;                                                // 0x00C8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      RenderGeometry : 1;                                        // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderDirectLine : 1;                                      // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderLines : 1;                                           // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderTessellation : 1;                                    // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9C4E[0x57];                                    // 0x00F9(0x0057) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBeam2"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataGpu
// 0x03F0 (FullSize[0x0420] - InheritedSize[0x0030])
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                               // 0x0030(0x0280) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGPUSpriteResourceData                      ResourceData;                                              // 0x02B0(0x0160) (NativeAccessSpecifierPublic)
	float                                              CameraMotionBlurAmount;                                    // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                         // 0x0414(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CDYR[0xB];                                     // 0x0415(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataGpu"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataMesh
// 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                      // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W7NO[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LODSizeScale;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseStaticMeshLODs : 1;                                    // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastShadows : 1;                                           // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DoCollisions : 1;                                          // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshScreenAlignment>           MeshAlignment;                                             // 0x0045(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideMaterial : 1;                                     // 0x0046(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;                    // 0x0046(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMotionBlur : 1;                                     // 0x0046(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7O46[0x1];                                     // 0x0047(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RollPitchYawRange;                                         // 0x0048(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleAxisLock>              AxisLockOption;                                            // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCameraFacing : 1;                                         // 0x0091(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshCameraFacingUpAxis>        CameraFacingUpAxisOption;                                  // 0x0092(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshCameraFacingOptions>       CameraFacingOption;                                        // 0x0093(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                          // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;                // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                       // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DJ9U[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataMesh"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SheetsPerTrail;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTrailCount;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxParticleInTrailCount;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                               // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClipSourceSegement : 1;                                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSpawnInitialParticle : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PZIT[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETrailsRenderAxisOption>        RenderAxis;                                                // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NRRV[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentSpawningScalar;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderGeometry : 1;                                       // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderSpawnPoints : 1;                                    // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderTangents : 1;                                       // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderTessellation : 1;                                   // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_69MC[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceTessellationStepSize;                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                         // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DCAE[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentTessellationScalar;                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataRibbon"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                   // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3GIT[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalVectorFieldScale;                                    // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalVectorFieldTightness;                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PKU9[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldGlobal"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeTranslation;                                       // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeScale3D;                                           // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Intensity;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Tightness;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreComponentTransform : 1;                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileX : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileY : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileZ : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixDT : 1;                                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZJNS[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldLocal"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                        // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MaxInitialRotation;                                        // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                              // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6UCR[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotationRate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldScale
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                                       // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScale"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                  // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                               // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScaleOverLife"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                         // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4RBT[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocity
// 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartVelocityRadial;                                       // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00B0(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity_Seeded"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityCone
// 0x0070 (FullSize[0x00A8] - InheritedSize[0x0038])
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                     // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Velocity;                                                  // 0x0068(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                     Direction;                                                 // 0x0098(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J9MH[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityCone"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                     // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityInheritParent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                               // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      Absolute : 1;                                              // 0x0080(0x0001) BIT_FIELD (Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6VYK[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityOverLifetime"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSpriteEmitter
// 0x0000 (FullSize[0x01B8] - InheritedSize[0x01B8])
class UParticleSpriteEmitter : public UParticleEmitter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleSpriteEmitter"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystem
// 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
class UParticleSystem : public UFXSystemAsset
{
public:
	float                                              UpdateTime_FPS;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UpdateTime_Delta;                                          // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTime;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTickRate;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleEmitter*>                    Emitters;                                                  // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    PreviewComponent;                                          // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LODDistanceCheckTime;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MacroUVRadius;                                             // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      LODDistances;                                              // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                               // 0x0078(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                        FixedRelativeBoundingBox;                                  // 0x0088(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              SecondsBeforeInactive;                                     // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Delay;                                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayLow;                                                  // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                              // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                          // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldResetPeakCounts : 1;                                // 0x00B0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasPhysics : 1;                                           // 0x00B0(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                 // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                               // 0x00B0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_25O7 : 2;                                      // 0x00B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseDelayRange : 1;                                        // 0x00B1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowManagedTicking : 1;                                  // 0x00B1(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDeactivate : 1;                                       // 0x00B1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRegenerateLODDuplicate : 1;                               // 0x00B1(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemUpdateMode>      SystemUpdateMode;                                          // 0x00B2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x00B3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSystemInsignificanceReaction       InsignificantReaction;                                     // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                                     // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UAIA[0x1];                                     // 0x00B6(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EParticleSignificanceLevel                  MaxSignificanceLevel;                                      // 0x00B7(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           MinTimeBetweenTicks;                                       // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InsignificanceDelay;                                       // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MacroUVPosition;                                           // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                        CustomOcclusionBounds;                                     // 0x00CC(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                              // 0x00E8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                        // 0x00F8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8ZZ2[0x8];                                     // 0x0108(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystem"));
		return ptr;
	}



	bool ContainsEmitterType(class UClass* TypeData);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystemComponent
// 0x0260 (FullSize[0x06A0] - InheritedSize[0x0440])
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UParticleSystem*                             Template;                                                  // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                          // 0x0448(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                        // 0x0458(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SK5V[0x1];                                     // 0x0468(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bResetOnDetach : 1;                                        // 0x0469(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                              // 0x0469(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1P88 : 2;                                      // 0x0469(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowRecycling : 1;                                       // 0x0469(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoManageAttachment : 1;                                 // 0x0469(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoAttachWeldSimulatedBodies : 1;                        // 0x0469(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVUA : 1;                                      // 0x0469(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_1VV3 : 1;                                      // 0x046A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWarmingUp : 1;                                            // 0x046A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideLODMethod : 1;                                    // 0x046A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                      // 0x046A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZXOA[0xA];                                     // 0x046B(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x0475(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSignificanceLevel                  RequiredSignificance;                                      // 0x0476(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X3L3[0x1];                                     // 0x0477(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                        // 0x0478(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x04B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bOldPositionValid;                                         // 0x04C8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_43CK[0x3];                                     // 0x04C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     OldPosition;                                               // 0x04CC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PartSysVelocity;                                           // 0x04D8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTime;                                                // 0x04E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTickRate;                                            // 0x04E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GBR7[0x4];                                     // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SecondsBeforeInactive;                                     // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZCG3[0x4];                                     // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxTimeBeforeForceUpdateTransform;                         // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NCV4[0x1C];                                    // 0x04FC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                               // 0x0518(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZWYI[0x8];                                     // 0x0528(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomTimeDilation;                                        // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UR8S[0x54];                                    // 0x0534(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                          // 0x0588(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AutoAttachSocketName;                                      // 0x0590(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachLocationRule;                                    // 0x0598(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachRotationRule;                                    // 0x0599(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachScaleRule;                                       // 0x059A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GUXE[0x2D];                                    // 0x059B(0x002D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSystemFinished;                                          // 0x05C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XAGV[0xC8];                                    // 0x05D8(0x00C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemComponent"));
		return ptr;
	}



	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<Engine_EAttachLocation> LocationType);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystemReplay
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UIL3[0x14];                                    // 0x002C(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemReplay"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PathFollowingAgentInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPathFollowingAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PathFollowingAgentInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                  // 0x00B0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_HACL[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LastRemoteNoisePosition;                                   // 0x00B4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseLifetime;                                             // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastRemoteNoiseVolume;                                     // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastRemoteNoiseTime;                                       // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastLocalNoiseVolume;                                      // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastLocalNoiseTime;                                        // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_L583[0x4];                                     // 0x00D4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PawnNoiseEmitterComponent"));
		return ptr;
	}



	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicalAnimationComponent
// 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                              StrengthMultiplyer;                                        // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2DFS[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                     // 0x00B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_S2VD[0x30];                                    // 0x00C0(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicalAnimationComponent"));
		return ptr;
	}



	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	struct FTransform GetBodyTargetTransform(const struct FName& BodyName);
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicalMaterialMask
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UPhysicalMaterialMask : public UObject
{
public:
	int                                                UVChannelIndex;                                            // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BGB5[0x2];                                     // 0x002E(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicalMaterialMask"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsAsset
// 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
class UPhysicsAsset : public UObject
{
public:
	unsigned char                                      UnknownData_3H7Q[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        BoundsBodies;                                              // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                        // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                           // 0x0050(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSolverIterations                           SolverIterations;                                          // 0x0060(0x001C) (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      bNotForDedicatedServer : 1;                                // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L63I[0xA3];                                    // 0x007D(0x00A3) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UThumbnailInfo*                              ThumbnailInfo;                                             // 0x0120(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBodySetup*>                          BodySetup;                                                 // 0x0128(0x0010) (ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BodySetup
// 0x0258 (FullSize[0x02A0] - InheritedSize[0x0048])
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                             AggGeom;                                                   // 0x0048(0x0058) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                 // 0x00A0(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderForBounds : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshCollideAll : 1;                                       // 0x00A0(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDoubleSidedGeometry : 1;                                  // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                         // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSharedCookedData : 1;                                     // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMirroredCollision : 1;                            // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportUVsAndFaceRemap : 1;                               // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UB4L[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                     // 0x00B0(0x0010) (Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R34W[0x68];                                    // 0x00C0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               DefaultInstance;                                           // 0x0128(0x0158) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UTMD[0x8];                                     // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     BuildScale3D;                                              // 0x0288(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OUFT[0xC];                                     // 0x0294(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.BodySetup"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalBodySetup
// 0x0018 (FullSize[0x02B8] - InheritedSize[0x02A0])
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                               bSkipScaleFromAnimation;                                   // 0x02A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5WP6[0x7];                                     // 0x02A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                                     // 0x02A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalBodySetup"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsCollisionHandler
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactReFireDelay;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                                  DefaultImpactSound;                                        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastImpactSoundTime;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_37LL[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsCollisionHandler"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RigidBodyBase
// 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
class ARigidBodyBase : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RigidBodyBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintActor
// 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                            // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      ConstraintActor1;                                          // 0x0228(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      ConstraintActor2;                                          // 0x0230(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableCollision : 1;                                     // 0x0238(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B9ZP[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintComponent
// 0x0208 (FullSize[0x0400] - InheritedSize[0x01F8])
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                          // 0x01F8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName                 ComponentName1;                                            // 0x0200(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                      ConstraintActor2;                                          // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName                 ComponentName2;                                            // 0x0210(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4B4F[0x10];                                    // 0x0218(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                           // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FConstraintInstance                         ConstraintInstance;                                        // 0x0240(0x01C0) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintComponent"));
		return ptr;
	}



	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetLinearZLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(TEnumAsByte<Engine_EAngularDriveMode> DriveMode);
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
	bool IsBroken();
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintTemplate
// 0x02E0 (FullSize[0x0308] - InheritedSize[0x0028])
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                         DefaultInstance;                                           // 0x0028(0x01C0) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                            // 0x01E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FConstraintProfileProperties                DefaultProfile;                                            // 0x01F8(0x010C) (Transient, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_NHYO[0x4];                                     // 0x0304(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintTemplate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsHandleComponent
// 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                          // 0x00B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JY4D[0x8];                                     // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_56J3 : 1;                                      // 0x00C0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSoftAngularConstraint : 1;                                // 0x00C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSoftLinearConstraint : 1;                                 // 0x00C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpolateTarget : 1;                                    // 0x00C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KSIR[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearDamping;                                             // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LinearStiffness;                                           // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngularDamping;                                            // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngularStiffness;                                          // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SON5[0x6C];                                    // 0x00D4(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpolationSpeed;                                        // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JE7Z[0x1C];                                    // 0x0144(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsHandleComponent"));
		return ptr;
	}



	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation);
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
	class UPrimitiveComponent* GetGrabbedComponent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsSettings
// 0x00C0 (FullSize[0x01A0] - InheritedSize[0x00E0])
class UPhysicsSettings : public UPhysicsSettingsCore
{
public:
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                     // 0x00E0(0x0034) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESettingsLockedAxis>            LockedAxis;                                                // 0x0114(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESettingsDOF>                   DefaultDegreesOfFreedom;                                   // 0x0115(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSuppressFaceRemapTable;                                   // 0x0116(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSupportUVFromHitResults;                                  // 0x0117(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableActiveActors;                                      // 0x0118(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableKinematicStaticPairs;                              // 0x0119(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableKinematicKinematicPairs;                           // 0x011A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableCCD;                                               // 0x011B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableEnhancedDeterminism;                                // 0x011C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8E28[0x3];                                     // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AnimPhysicsMinDeltaTime;                                   // 0x0120(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSimulateAnimPhysicsAfterReset;                            // 0x0124(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QUXZ[0x3];                                     // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxPhysicsDeltaTime;                                       // 0x0128(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSubstepping;                                              // 0x012C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSubsteppingAsync;                                         // 0x012D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YZ46[0x2];                                     // 0x012E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSubstepDeltaTime;                                       // 0x0130(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSubsteps;                                               // 0x0134(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SyncSceneSmoothingFactor;                                  // 0x0138(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialAverageFrameRate;                                   // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PhysXTreeRebuildRate;                                      // 0x0140(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0MAS[0x4];                                     // 0x0144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                          // 0x0148(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                         DefaultBroadphaseSettings;                                 // 0x0158(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MinDeltaVelocityForHitEvents;                              // 0x0198(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChaosPhysicsSettings                       ChaosSettings;                                             // 0x019C(0x0003) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AXNR[0x1];                                     // 0x019F(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsSpringComponent
// 0x0028 (FullSize[0x0220] - InheritedSize[0x01F8])
class UPhysicsSpringComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_P81F[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              SpringDamping;                                             // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringLengthAtRest;                                        // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringRadius;                                              // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              SpringChannel;                                             // 0x0208(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreSelf;                                               // 0x0209(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D9BH[0x2];                                     // 0x020A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpringCompression;                                         // 0x020C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3Q39[0x10];                                    // 0x0210(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSpringComponent"));
		return ptr;
	}



	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsThruster
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                         // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThruster"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsThrusterComponent
// 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_PPVV[0x8];                                     // 0x01F8(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThrusterComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlanarReflection
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                 // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bShowPreviewPlane;                                         // 0x0238(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U6OS[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlanarReflection"));
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponent
// 0x00B8 (FullSize[0x02B0] - InheritedSize[0x01F8])
class USceneCaptureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_LU3F[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                          // 0x0200(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              HiddenActors;                                              // 0x0210(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  ShowOnlyComponents;                                        // 0x0220(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              ShowOnlyActors;                                            // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	float                                              LODDistanceFactor;                                         // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxViewDistanceOverride;                                   // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CaptureSortPriority;                                       // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseRayTracingIfEnabled;                                   // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C6HP[0x3];                                     // 0x024D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                          // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W2P7[0x30];                                    // 0x0260(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ProfilingEventName;                                        // 0x0290(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GC09[0x10];                                    // 0x02A0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent"));
		return ptr;
	}



	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void SetCaptureSortPriority(int NewCaptureSortPriority);
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void ClearShowOnlyComponents();
	void ClearHiddenComponents();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlanarReflectionComponent
// 0x00F0 (FullSize[0x03A0] - InheritedSize[0x02B0])
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                                // 0x02B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalDistortionStrength;                                  // 0x02B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrefilterRoughness;                                        // 0x02BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrefilterRoughnessDistance;                                // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ScreenPercentage;                                          // 0x02C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraFOV;                                                  // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeStart;                                // 0x02CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeEnd;                                  // 0x02D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeoutStart;                             // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeoutEnd;                               // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngleFromPlaneFadeStart;                                   // 0x02DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngleFromPlaneFadeEnd;                                     // 0x02E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowPreviewPlane;                                         // 0x02E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRenderSceneTwoSided;                                      // 0x02E5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q8O0[0xBA];                                    // 0x02E6(0x00BA) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlanarReflectionComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlaneReflectionCapture
// 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
class APlaneReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCapture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (FullSize[0x0290] - InheritedSize[0x0270])
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                      // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QXH6[0x4];                                     // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8KZX[0x8];                                     // 0x0288(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCaptureComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformEventsComponent
// 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                       // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                       // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlatformEventsComponent"));
		return ptr;
	}



	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                               // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ResponseCode;                                              // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Tag;                                                       // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     StringResponse;                                            // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<unsigned char>                              BinaryResponse;                                            // 0x0050(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QOG1[0x50];                                    // 0x0060(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceWebResponse"));
		return ptr;
	}



	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerInput
// 0x0380 (FullSize[0x03A8] - InheritedSize[0x0028])
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData_MPVO[0xF8];                                    // 0x0028(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FKeyBind>                            DebugExecBindings;                                         // 0x0120(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M27G[0x30];                                    // 0x0130(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               InvertedAxis;                                              // 0x0160(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M01I[0x238];                                   // 0x0170(0x0238) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerInput"));
		return ptr;
	}



	void SetMouseSensitivity(float Sensitivity);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertAxisKey(const struct FKey& AxisKey);
	void InvertAxis(const struct FName& AxisName);
	void ClearSmoothing();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationObjectBase
// 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData_7ZZK[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         GoodSprite;                                                // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         BadSprite;                                                 // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsPIEPlayerStart : 1;                                     // 0x0240(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H6JV[0x7];                                     // 0x0241(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.NavigationObjectBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerStart
// 0x0008 (FullSize[0x0250] - InheritedSize[0x0248])
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                            // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerStart"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerStartPIE
// 0x0000 (FullSize[0x0250] - InheritedSize[0x0250])
class APlayerStartPIE : public APlayerStart
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PlayerStartPIE"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Commandlet
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                           // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HelpUsage;                                                 // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HelpWebLink;                                               // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HelpParamNames;                                            // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HelpParamDescriptions;                                     // 0x0068(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      IsServer : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsClient : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsEditor : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LogToConsole : 1;                                          // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ShowErrorCount : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ShowProgress : 1;                                          // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MN6W[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Commandlet"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PluginCommandlet
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData_0KHP[0x20];                                    // 0x0080(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PluginCommandlet"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PointLight
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PointLight"));
		return ptr;
	}



	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Polys
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData_RWG6[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Polys"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PoseableMeshComponent
// 0x0160 (FullSize[0x07F0] - InheritedSize[0x0690])
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData_SOXY[0x160];                                   // 0x0690(0x0160) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PoseableMeshComponent"));
		return ptr;
	}



	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PoseAsset
// 0x00A0 (FullSize[0x0120] - InheritedSize[0x0080])
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                             // 0x0080(0x0090) (NativeAccessSpecifierPrivate)
	bool                                               bAdditivePose;                                             // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UNWQ[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BasePoseIndex;                                             // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       RetargetSource;                                            // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PoseAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PoseWatch
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                                Node;                                                      // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      PoseWatchColour;                                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TX0U[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PoseWatch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PostProcessComponent
// 0x0568 (FullSize[0x0760] - InheritedSize[0x01F8])
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_CVBE[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	struct FPostProcessSettings                        Settings;                                                  // 0x0200(0x0550) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              Priority;                                                  // 0x0750(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendRadius;                                               // 0x0754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendWeight;                                               // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x075C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUnbound : 1;                                              // 0x075C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UQX6[0x3];                                     // 0x075D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PostProcessComponent"));
		return ptr;
	}



	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (FullSize[0x0288] - InheritedSize[0x0258])
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                     // 0x0258(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              OverrideInvisibleActors;                                   // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FName>                               OverrideInvisibleLevels;                                   // 0x0278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityOverrideVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class APrecomputedVisibilityVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PreviewCollectionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPreviewCollectionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PreviewCollectionInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PreviewMeshCollection
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UPreviewMeshCollection : public UDataAsset
{
public:
	unsigned char                                      UnknownData_X20Z[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                            // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PreviewMeshCollection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrimaryDataAsset
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UPrimaryDataAsset : public UDataAsset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PrimaryDataAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrimaryAssetLabel
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          Rules;                                                     // 0x0030(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bLabelAssetsInMyDirectory : 1;                             // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRuntimeLabel : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JIX1[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ExplicitAssets[0x10];                                      // 0x003D(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      ExplicitBlueprints[0x10];                                  // 0x0050(0x0010) UNKNOWN PROPERTY: ArrayProperty
	struct FCollectionReference                        AssetCollection;                                           // 0x0060(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.PrimaryAssetLabel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       ProxyLODMeshReductionModuleName;                           // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ProxyLODMeshSimplificationSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RadialForceActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                            // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RadialForceActor"));
		return ptr;
	}



	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RadialForceComponent
// 0x0038 (FullSize[0x0230] - InheritedSize[0x01F8])
class URadialForceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_Q1QU[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	float                                              ImpulseStrength;                                           // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpulseVelChange : 1;                                     // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreOwningActor : 1;                                    // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_84QD[0x3];                                     // 0x0205(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStrength;                                             // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleDamage;                                        // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       ObjectTypesToAffect;                                       // 0x0210(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_6WEU[0x10];                                    // 0x0220(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RadialForceComponent"));
		return ptr;
	}



	void RemoveObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RectLight
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ARectLight : public ALight
{
public:
	class URectLightComponent*                         RectLightComponent;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RectLight"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RectLightComponent
// 0x0020 (FullSize[0x0360] - InheritedSize[0x0340])
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                              SourceWidth;                                               // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceHeight;                                              // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarnDoorAngle;                                             // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarnDoorLength;                                            // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                                    SourceTexture;                                             // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0BYH[0x8];                                     // 0x0358(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RectLightComponent"));
		return ptr;
	}



	void SetSourceWidth(float bNewValue);
	void SetSourceTexture(class UTexture* bNewValue);
	void SetSourceHeight(float NewValue);
	void SetBarnDoorLength(float NewValue);
	void SetBarnDoorAngle(float NewValue);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RendererSettings
// 0x0108 (FullSize[0x0140] - InheritedSize[0x0038])
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileDisableVertexFog : 1;                               // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R6VL[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxMobileCascades;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMobileMSAASampleCount>         MobileMSAASampleCount;                                     // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W85Y[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bMobileAllowDitheredLODTransition : 1;                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowSoftwareOcclusionCulling : 1;                  // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileVirtualTextures : 1;                                // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                           // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOcclusionCulling : 1;                                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FHBV[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinScreenRadiusForLights;                                  // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinScreenRadiusForEarlyZPass;                              // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinScreenRadiusForCSMdepth;                                // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                         // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTextureStreaming : 1;                                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                    // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextures : 1;                                      // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTexturedLightmaps : 1;                             // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7UOC[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           VirtualTextureTileSize;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VirtualTextureTileBorderSize;                              // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VirtualTextureFeedbackFactor;                              // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextureEnableCompressZlib : 1;                     // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextureEnableCompressCrunch : 1;                   // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                          // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0DTP[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ReflectionCaptureResolution;                               // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReflectionCaptureCompression : 1;                         // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;      // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForwardShading : 1;                                       // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVertexFoggingForOpaque : 1;                               // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowStaticLighting : 1;                                  // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                       // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                           // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEightBitMeshDistanceFields : 1;                           // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateLandscapeGIData : 1;                              // 0x006D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCompressMeshDistanceFields : 1;                           // 0x006D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZZSE[0x2];                                     // 0x006E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TessellationAdaptivePixelsPerTriangle;                     // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSeparateTranslucency : 1;                                 // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9HNC[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETranslucentSortPolicy>         TranslucentSortPolicy;                                     // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U29D[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     TranslucentSortAxis;                                       // 0x007C(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECustomDepthStencil>            CustomDepthStencil;                                        // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TF5F[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCustomDepthTaaJitter : 1;                                 // 0x008C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F8MN[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAlphaChannelMode>              bEnableAlphaChannelInPostProcessing;                       // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JL7B[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDefaultFeatureBloom : 1;                                  // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                       // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;         // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                           // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K4M8[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAutoExposureMethodUI>          DefaultFeatureAutoExposure;                                // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LZ9N[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultFeatureAutoExposureBias;                            // 0x009C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;    // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePreExposure : 1;                                       // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreExposureOnlyInTheEditor : 1;                     // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                             // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                              // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTemporalUpsampling : 1;                                   // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSSGI : 1;                                                 // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0RT4[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAntiAliasingMethod>            DefaultFeatureAntiAliasing;                                // 0x00A4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ELightUnits                                 DefaultLightUnits;                                         // 0x00A5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDefaultBackBufferPixelFormat>  DefaultBackBufferPixelFormat;                              // 0x00A6(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FAFU[0x1];                                     // 0x00A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenderUnbuiltPreviewShadowsInGame : 1;                    // 0x00A8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStencilForLODDither : 1;                                  // 0x00A8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MU1B[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EEarlyZPass>                    EarlyZPass;                                                // 0x00AC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_POTV[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEarlyZPassOnlyMaterialMasking : 1;                        // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDBuffer : 1;                                              // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9KC[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClearSceneOptions>             ClearSceneMethod;                                          // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5HI3[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBasePassOutputsVelocity : 1;                              // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVertexDeformationOutputsVelocity : 1;                     // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectiveBasePassOutputs : 1;                             // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultParticleCutouts : 1;                               // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GEGH[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                GPUSimulationTextureSizeX;                                 // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GPUSimulationTextureSizeY;                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalClipPlane : 1;                                      // 0x00C4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_08OZ[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EGBufferFormat>                 GBufferFormat;                                             // 0x00C8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8W73[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseGPUMorphTargets : 1;                                   // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNvidiaAftermathEnabled : 1;                               // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMultiView : 1;                                            // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobilePostProcessing : 1;                                 // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileMultiView : 1;                                      // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileUseHWsRGBEncoding : 1;                              // 0x00CC(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRoundRobinOcclusion : 1;                                  // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bODSCapture : 1;                                           // 0x00CC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshStreaming : 1;                                        // 0x00CD(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OTKQ[0x2];                                     // 0x00CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WireframeCullThreshold;                                    // 0x00D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableRayTracing : 1;                                     // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableRayTracingTextureLOD : 1;                           // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportStationarySkylight : 1;                            // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                           // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;                   // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportAtmosphericFog : 1;                                // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkyAtmosphere : 1;                                 // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkyAtmosphereAffectsHeightFog : 1;                 // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkinCacheShaders : 1;                              // 0x00D5(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T65I[0x2];                                     // 0x00D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_ESkinCacheDefaultBehavior                   DefaultSkinCacheBehavior;                                  // 0x00D8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AB0W[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SkinCacheSceneMemoryLimitInMB;                             // 0x00DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;              // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileEnableMovableLightCSMShaderCulling : 1;             // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowDistanceFieldShadows : 1;                      // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowMovableDirectionalLights : 1;                  // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H9AA[0x3];                                     // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MobileNumDynamicPointLights;                               // 0x00E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;              // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowMovableSpotlights : 1;                         // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowMovableSpotlightShadows : 1;                   // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupport16BitBoneIndex : 1;                                // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGPUSkinLimit2BoneInfluences : 1;                          // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportDepthOnlyIndexBuffers : 1;                         // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportReversedIndexBuffers : 1;                          // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLPV : 1;                                                  // 0x00E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAmbientOcclusion : 1;                               // 0x00E9(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseUnlimitedBoneInfluences : 1;                           // 0x00E9(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GH9Y[0x2];                                     // 0x00EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UnlimitedBonInfluencesThreshold;                           // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMobilePlanarReflectionMode>    MobilePlanarReflectionMode;                                // 0x00F0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                            bStreamSkeletalMeshLODs;                                   // 0x00F1(0x0001) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                            bDiscardSkeletalMeshOptionalLODs;                          // 0x00F2(0x0001) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3WD9[0x5];                                     // 0x00F3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftObjectPath                             VisualizeCalibrationColorMaterialPath;                     // 0x00F8(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             VisualizeCalibrationCustomMaterialPath;                    // 0x0110(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             VisualizeCalibrationGrayscaleMaterialPath;                 // 0x0128(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RendererSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RendererOverrideSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                         // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceRecomputeTangents : 1;                               // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UZUE[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RendererOverrideSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReplayNetConnection
// 0x0800 (FullSize[0x22F0] - InheritedSize[0x1AF0])
class UReplayNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData_E9AD[0x800];                                   // 0x1AF0(0x0800) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReplayNetConnection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameInstanceSubsystem
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UGameInstanceSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.GameInstanceSubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReplaySubsystem
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UReplaySubsystem : public UGameInstanceSubsystem
{
public:
	unsigned char                                      UnknownData_EWG3[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReplaySubsystem"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReplicationDriver
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UReplicationDriver : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReplicationDriver"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReplicationConnectionDriver
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UReplicationConnectionDriver : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReplicationConnectionDriver"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReporterBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData_ARQQ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReporterBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReporterGraph
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData_LYII[0x78];                                    // 0x0030(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReporterGraph"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReverbEffect
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UReverbEffect : public UObject
{
public:
	bool                                               bBypassEarlyReflections;                                   // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VNUJ[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReflectionsDelay;                                          // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GainHF;                                                    // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReflectionsGain;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bBypassLateReflections;                                    // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2I9M[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LateDelay;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DecayTime;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Density;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Diffusion;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirAbsorptionGainHF;                                       // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DecayHFRatio;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LateGain;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Gain;                                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RoomRolloffFactor;                                         // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ReverbEffect"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Rig
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class URig : public UObject
{
public:
	unsigned char                                      UnknownData_2VZS[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTransformBase>                      TransformBases;                                            // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                               Nodes;                                                     // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Rig"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RotatingMovementComponent
// 0x0020 (FullSize[0x0110] - InheritedSize[0x00F0])
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                              // 0x00F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     PivotTranslation;                                          // 0x00FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationInLocalSpace : 1;                                 // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NEX4[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RotatingMovementComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RuntimeOptionsBase
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class URuntimeOptionsBase : public UObject
{
public:
	unsigned char                                      UnknownData_HZCJ[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RuntimeOptionsBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RuntimeVirtualTexture
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class URuntimeVirtualTexture : public UObject
{
public:
	int                                                TileCount;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TileSize;                                                  // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TileBorderSize;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	Engine_ERuntimeVirtualTextureMaterialType          MaterialType;                                              // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bCompressTextures;                                         // 0x0035(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bClearTextures;                                            // 0x0036(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bSinglePhysicalSpace;                                      // 0x0037(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bPrivateSpace;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bAdaptive;                                                 // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bContinuousUpdate;                                         // 0x003A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_WJKG[0x1];                                     // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RemoveLowMips;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_ETextureGroup>                  LODGroup;                                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_FG11[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Size;                                                      // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                          // 0x0048(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Z42P[0x50];                                    // 0x0050(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RuntimeVirtualTexture"));
		return ptr;
	}



	int GetTileSize();
	int GetTileCount();
	int GetTileBorderSize();
	int GetSize();
	int GetPageTableSize();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RuntimeVirtualTextureComponent
// 0x0078 (FullSize[0x0270] - InheritedSize[0x01F8])
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_66OE[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	unsigned char                                      BoundsAlignActor[0x28];                                    // 0x0200(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
	bool                                               bSetBoundsButton;                                          // 0x0220(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bSnapBoundsToLandscape;                                    // 0x0221(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_5B3B[0x6];                                     // 0x0222(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class URuntimeVirtualTexture*                      VirtualTexture;                                            // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableScalability;                                        // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YAHC[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ScalabilityGroup;                                          // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHidePrimitives;                                           // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8SS8[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UVirtualTextureBuilder*                      StreamingTexture;                                          // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                StreamLowMips;                                             // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bBuildStreamingMipsButton;                                 // 0x024C(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableCompressCrunch;                                     // 0x024D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseStreamingLowMipsInEditor;                              // 0x024E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bBuildDebugStreamingMips;                                  // 0x024F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_CKDI[0x20];                                    // 0x0250(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RuntimeVirtualTextureComponent"));
		return ptr;
	}



	void Invalidate(const struct FBoxSphereBounds& WorldBounds);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RuntimeVirtualTextureVolume
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ARuntimeVirtualTextureVolume : public AActor
{
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                   // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RuntimeVirtualTextureVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RVOAvoidanceInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class URVOAvoidanceInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RVOAvoidanceInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Scene
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UScene : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Scene"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponent2D
// 0x0600 (FullSize[0x08B0] - InheritedSize[0x02B0])
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionType;                                            // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LEO8[0x3];                                     // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOVAngle;                                                  // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoWidth;                                                // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U5VG[0x4];                                     // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTarget2D*                      TextureTarget;                                             // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneCaptureCompositeMode>     CompositeMode;                                             // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_60J1[0x7];                                     // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x02D0(0x0550) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              PostProcessBlendWeight;                                    // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_CustomNearClippingPlane : 1;                     // 0x0824(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PW5T[0x3];                                     // 0x0825(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomNearClippingPlane;                                   // 0x0828(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomProjectionMatrix;                                // 0x082C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A3C3[0x3];                                     // 0x082D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMatrix                                     CustomProjectionMatrix;                                    // 0x0830(0x0040) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                               bEnableClipPlane;                                          // 0x0870(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FR0I[0x3];                                     // 0x0871(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ClipPlaneBase;                                             // 0x0874(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ClipPlaneNormal;                                           // 0x0880(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCameraCutThisFrame : 1;                                   // 0x088C(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;      // 0x088C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3Q67[0x3];                                     // 0x088D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDisableFlipCopyGLES;                                      // 0x0890(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_94DH[0x1F];                                    // 0x0891(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent2D"));
		return ptr;
	}



	void CaptureScene();
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponentCube
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                             // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCaptureRotation;                                          // 0x02B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FL86[0x7];                                     // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                         // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTargetCube*                    TextureTargetRight;                                        // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                      TextureTargetODS;                                          // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IPD;                                                       // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NFEM[0x4];                                     // 0x02DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponentCube"));
		return ptr;
	}



	void CaptureScene();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureCube
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                      // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureCube"));
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SCS_Node
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class USCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                             ComponentTemplate;                                         // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                             // 0x0038(0x0048) (NativeAccessSpecifierPublic)
	struct FName                                       AttachToName;                                              // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParentComponentOrVariableName;                             // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParentComponentOwnerClassName;                             // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsParentComponentNative;                                  // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KT5F[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USCS_Node*>                           ChildNodes;                                                // 0x00A0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x00B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                       VariableGuid;                                              // 0x00C0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       InternalVariableName;                                      // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SCS_Node"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Selection
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData_57D8[0x78];                                    // 0x0028(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Selection"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ServerStatReplicator
// 0x00C8 (FullSize[0x02E8] - InheritedSize[0x0220])
class AServerStatReplicator : public AInfo
{
public:
	bool                                               bUpdateStatNet;                                            // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverwriteClientStats;                                     // 0x0221(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VC0O[0x2];                                     // 0x0222(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           Channels;                                                  // 0x0224(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRate;                                                    // 0x0228(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRate;                                                   // 0x022C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YLLB[0x4];                                     // 0x0230(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MaxPacketOverhead;                                         // 0x0234(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientMax;                                           // 0x0238(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientMin;                                           // 0x023C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientAvg;                                           // 0x0240(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientMax;                                        // 0x0244(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientMin;                                        // 0x0248(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientAvg;                                        // 0x024C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientMax;                                          // 0x0250(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientMin;                                          // 0x0254(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientAvg;                                          // 0x0258(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientMax;                                       // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientMin;                                       // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientAvg;                                       // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetNumClients;                                             // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPackets;                                                 // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPackets;                                                // 0x0270(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InBunches;                                                 // 0x0274(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutBunches;                                                // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutLoss;                                                   // 0x027C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InLoss;                                                    // 0x0280(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoiceBytesSent;                                            // 0x0284(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoiceBytesRecv;                                            // 0x0288(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoicePacketsSent;                                          // 0x028C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoicePacketsRecv;                                          // 0x0290(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PercentInVoice;                                            // 0x0294(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PercentOutVoice;                                           // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumActorChannels;                                          // 0x029C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumConsideredActors;                                       // 0x02A0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PrioritizedActors;                                         // 0x02A4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumRelevantActors;                                         // 0x02A8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumRelevantDeletedActors;                                  // 0x02AC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumReplicatedActorAttempts;                                // 0x02B0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumReplicatedActors;                                       // 0x02B4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumActors;                                                 // 0x02B8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetActors;                                              // 0x02BC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumDormantActors;                                          // 0x02C0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumInitiallyDormantActors;                                 // 0x02C4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsAckd;                                           // 0x02C8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsPending;                                        // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsUnAckd;                                         // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ObjPathBytes;                                              // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetGUIDOutRate;                                            // 0x02D8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetGUIDInRate;                                             // 0x02DC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetSaturated;                                              // 0x02E0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UCUE[0x4];                                     // 0x02E4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ServerStatReplicator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ShadowMapTexture2D
// 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<Engine_EShadowMapFlags>                ShadowmapFlags;                                            // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KSRO[0x7];                                     // 0x0101(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ShadowMapTexture2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SimpleConstructionScript
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                 // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                           AllNodes;                                                  // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class USCS_Node*                                   DefaultSceneRootNode;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_89NM[0x50];                                    // 0x0050(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SimpleConstructionScript"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshActor
// 0x0088 (FullSize[0x02A8] - InheritedSize[0x0220])
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData_261K[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldDoAnimNotifies : 1;                                 // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWakeOnLevelStart : 1;                                     // 0x0228(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_13UP[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                     // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                               ReplicatedMesh;                                            // 0x0238(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                       // 0x0240(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          ReplicatedMaterial0;                                       // 0x0248(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          ReplicatedMaterial1;                                       // 0x0250(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A0IH[0x50];                                    // 0x0258(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshActor"));
		return ptr;
	}



	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshEditorData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USkeletalMeshEditorData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshEditorData"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshLODSettings
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FPerPlatformInt                             MinLOD;                                                    // 0x0030(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                               // 0x0034(0x0001) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                               bOverrideLODStreamingSettings;                             // 0x0035(0x0001) (Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                            bSupportLODStreaming;                                      // 0x0036(0x0001) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_CKYF[0x1];                                     // 0x0037(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPerPlatformInt                             MaxNumStreamedLODs;                                        // 0x0038(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformInt                             MaxNumOptionalLODs;                                        // 0x003C(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMeshLODGroupSettings>       LODGroups;                                                 // 0x0040(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshLODSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshSimplificationSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       SkeletalMeshReductionModuleName;                           // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshSimplificationSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshSocket
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BoneName;                                                  // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeLocation;                                          // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeScale;                                             // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceAlwaysAnimated;                                      // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CTN6[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshSocket"));
		return ptr;
	}



	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyAtmosphereComponent
// 0x00D8 (FullSize[0x02D0] - InheritedSize[0x01F8])
class USkyAtmosphereComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_H7DS[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              BottomRadius;                                              // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      GroundAlbedo;                                              // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AtmosphereHeight;                                          // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MultiScatteringFactor;                                     // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceSampleCountScale;                                     // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RayleighScatteringScale;                                   // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                RayleighScattering;                                        // 0x0214(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RayleighExponentialDistribution;                           // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieScatteringScale;                                        // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                MieScattering;                                             // 0x022C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieAbsorptionScale;                                        // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                MieAbsorption;                                             // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieAnisotropy;                                             // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieExponentialDistribution;                                // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OtherAbsorptionScale;                                      // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                OtherAbsorption;                                           // 0x025C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                           OtherTentDistribution;                                     // 0x026C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                                SkyLuminanceFactor;                                        // 0x0278(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AerialPespectiveViewDistanceScale;                         // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightFogContribution;                                     // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TransmittanceMinLightElevationAngle;                       // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AerialPerspectiveStartDepth;                               // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FYL0[0x24];                                    // 0x0298(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       bStaticLightingBuiltGUID;                                  // 0x02BC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_SJWU[0x4];                                     // 0x02CC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkyAtmosphereComponent"));
		return ptr;
	}



	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue);
	void SetRayleighScatteringScale(float NewValue);
	void SetRayleighScattering(const struct FLinearColor& NewValue);
	void SetRayleighExponentialDistribution(float NewValue);
	void SetOtherAbsorptionScale(float NewValue);
	void SetOtherAbsorption(const struct FLinearColor& NewValue);
	void SetMieScatteringScale(float NewValue);
	void SetMieScattering(const struct FLinearColor& NewValue);
	void SetMieExponentialDistribution(float NewValue);
	void SetMieAnisotropy(float NewValue);
	void SetMieAbsorptionScale(float NewValue);
	void SetMieAbsorption(const struct FLinearColor& NewValue);
	void SetHeightFogContribution(float NewValue);
	void SetAerialPespectiveViewDistanceScale(float NewValue);
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct FVector& LightDirection);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyAtmosphere
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ASkyAtmosphere : public AInfo
{
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                    // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkyAtmosphere"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyLightComponent
// 0x01E4 (FullSize[0x0410] - InheritedSize[0x022C])
class USkyLightComponent : public ULightComponentBase
{
public:
	unsigned char                                      UnknownData_MXX7[0x4];                                     // 0x022C(0x0004) Fix Super Size
	class UTextureCube*                                Cubemap;                                                   // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceCubemapAngle;                                        // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CubemapResolution;                                         // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkyDistanceThreshold;                                      // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCaptureEmissiveOnly;                                      // 0x0244(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLowerHemisphereIsBlack;                                   // 0x0245(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EYSE[0x2];                                     // 0x0246(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LowerHemisphereColor;                                      // 0x0248(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionMaxDistance;                                      // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Contrast;                                                  // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionExponent;                                         // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinOcclusion;                                              // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      OcclusionTint;                                             // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCloudAmbientOcclusion : 1;                                // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3U55[0x3];                                     // 0x026D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CloudAmbientOcclusionStrength;                             // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudAmbientOcclusionExtent;                               // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudAmbientOcclusionMapResolutionScale;                   // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloudAmbientOcclusionApertureScale;                        // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOcclusionCombineMode>          OcclusionCombineMode;                                      // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TX1M[0xB7];                                    // 0x0281(0x00B7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                BlendDestinationCubemap;                                   // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_A5E7[0xD0];                                    // 0x0340(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SkyLightComponent"));
		return ptr;
	}



	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetOcclusionTint(const struct FColor& InTint);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SlateBrushAsset
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                     // 0x0028(0x0088) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SlateBrushAsset"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SlateTextureAtlasInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USlateTextureAtlasInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SlateTextureAtlasInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SmokeTestCommandlet
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class USmokeTestCommandlet : public UCommandlet
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SmokeTestCommandlet"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundAttenuation
// 0x03A0 (FullSize[0x03C8] - InheritedSize[0x0028])
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings                   Attenuation;                                               // 0x0028(0x03A0) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundAttenuation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundClass
// 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                                // 0x0028(0x0080) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USoundClass*>                         ChildClasses;                                              // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                  // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundClass*                                 ParentClass;                                               // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundClass"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundConcurrency
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                               // 0x0028(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundConcurrency"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundCue
// 0x03D8 (FullSize[0x0590] - InheritedSize[0x01B8])
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bPrimeOnLoad : 1;                                          // 0x01B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_03QR[0x7];                                     // 0x01B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundNode*                                  FirstNode;                                                 // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x01C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x01CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x01D0(0x03A0) (Edit, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0570(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_IWUC[0x4];                                     // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0578(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExcludeFromRandomNodeBranchCulling : 1;                   // 0x0578(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GKCH[0x3];                                     // 0x0579(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CookedQualityIndex;                                        // 0x057C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHasPlayWhenSilent : 1;                                    // 0x0580(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_LW1C[0xF];                                     // 0x0581(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundCue"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>             Chain;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayEffectChainTails : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2X5K[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSourcePresetChain"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundGroups
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                        // 0x0028(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_G2EE[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundGroups"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundMix
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                              // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E2IU[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EQPriority;                                                // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioEQEffect                              EQSettings;                                                // 0x0030(0x0040) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                         // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              InitialDelay;                                              // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInTime;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Duration;                                                  // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeOutTime;                                               // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundMix"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNode
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                                // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H7U1[0x10];                                    // 0x0038(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNode"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeAssetReferencer
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class USoundNodeAssetReferencer : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAssetReferencer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeAttenuation
// 0x03B0 (FullSize[0x03F8] - InheritedSize[0x0048])
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x0050(0x03A0) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x03F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YJNK[0x7];                                     // 0x03F1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAttenuation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeBranch
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeBranch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeConcatenator
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeConcatenator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDelay
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayMax;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDelay"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                     // 0x0048(0x0020) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q4P0[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDialoguePlayer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                            // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDistanceCrossFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDoppler
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSmoothing;                                             // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N6ND[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SmoothingInterpSpeed;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TIE6[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDoppler"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeEnveloper
// 0x0148 (FullSize[0x0190] - InheritedSize[0x0048])
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LoopEnd;                                                   // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DurationAfterLoop;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LoopCount;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YJPR[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                         // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                          // 0x0068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          VolumeCurve;                                               // 0x0070(0x0088) (Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          PitchCurve;                                                // 0x00F8(0x0088) (Edit, NativeAccessSpecifierPublic)
	float                                              PitchMin;                                                  // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMax;                                                  // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMin;                                                 // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMax;                                                 // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeEnveloper"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeGroupControl
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                                // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeGroupControl"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeLooping
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QHEO[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeLooping"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeMature
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class USoundNodeMature : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMature"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeMixer
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMixer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeModulator
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMax;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMin;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMax;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                     // 0x0048(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                    // 0x0068(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulatorContinuous"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeOscillator
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                       // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bModulatePitch : 1;                                        // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SB1L[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmplitudeMin;                                              // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AmplitudeMax;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrequencyMin;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrequencyMax;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffsetMin;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffsetMax;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterMin;                                                 // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterMax;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DOV9[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeOscillator"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeParamCrossFade
// 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                 // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeParamCrossFade"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeQualityLevel
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeQualityLevel : public USoundNode
{
public:
	int                                                CookedQualityLevelIndex;                                   // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D71N[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeQualityLevel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeRandom
// 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                   // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                       HasBeenUsed;                                               // 0x0058(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int                                                NumRandomUsed;                                             // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PreselectAtLevelLoad;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldExcludeFromBranchCulling : 1;                       // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSoundCueExcludedFromBranchCulling : 1;                    // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                          // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5S62[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeRandom"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeSoundClass
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CPKE[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSoundClass"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeSwitch
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSwitch"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeWaveParam
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWaveParam"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeWavePlayer
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	unsigned char                                      SoundWaveAssetPtr[0x28];                                   // 0x0048(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
	class USoundWave*                                  SoundWave;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_ZR9X[0x8];                                     // 0x0078(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLooping : 1;                                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X0H6[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWavePlayer"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundSourceBus
// 0x0018 (FullSize[0x0388] - InheritedSize[0x0370])
class USoundSourceBus : public USoundWave
{
public:
	Engine_ESourceBusChannels                          SourceBusChannels;                                         // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HBXL[0x3];                                     // 0x0371(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SourceBusDuration;                                         // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                                   AudioBus;                                                  // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDeactivateWhenSilent : 1;                             // 0x0380(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JPN1[0x7];                                     // 0x0381(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundSourceBus"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundSubmixBase
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class USoundSubmixBase : public UObject
{
public:
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                             // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundSubmixBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundSubmixWithParentBase
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                            ParentSubmix;                                              // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundSubmixWithParentBase"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundSubmix
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	unsigned char                                      bMuteWhenBackgrounded : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NQP5[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                         // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                  // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerAttackTime;                                // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerReleaseTime;                               // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EGainParamMode                              GainMode;                                                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_35QP[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OutputVolume;                                              // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WetLevel;                                                  // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DryLevel;                                                  // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSubmixRecordedFileDone;                                  // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_45Z5[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundSubmix"));
		return ptr;
	}



	void StopSpectralAnalysis(class UObject* WorldContextObject);
	void StopRecordingOutput(class UObject* WorldContextObject, Engine_EAudioRecordingExportType ExportType, const struct FString& Name, const struct FString& Path, class USoundWave* ExistingSoundWaveToOverwrite);
	void StopEnvelopeFollowing(class UObject* WorldContextObject);
	void StartSpectralAnalysis(class UObject* WorldContextObject, Engine_EFFTSize FFTSize, Engine_EFFTPeakInterpolationMethod InterpolationMethod, Engine_EFFTWindowType WindowType, float HopSize, Engine_EAudioSpectrumType SpectrumType);
	void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);
	void StartEnvelopeFollowing(class UObject* WorldContextObject);
	void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);
	void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP);
	void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);
	void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundfieldSubmix
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	struct FName                                       SoundfieldEncodingFormat;                                  // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                     // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                      EncodingSettingsClass;                                     // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundfieldSubmix"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EndpointSubmix
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       EndpointType;                                              // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EndpointSettingsClass;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.EndpointSubmix"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundfieldEndpointSubmix
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       SoundfieldEndpointType;                                    // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EndpointSettingsClass;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EncodingSettingsClass;                                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                     // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SoundfieldEndpointSubmix"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FloatingPawnMovement
// 0x0018 (FullSize[0x0150] - InheritedSize[0x0138])
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                  // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Acceleration;                                              // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Deceleration;                                              // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurningBoost;                                              // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPositionCorrected : 1;                                    // 0x0148(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_RDMM[0x7];                                     // 0x0149(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.FloatingPawnMovement"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpectatorPawnMovement
// 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0150(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZKYF[0x7];                                     // 0x0151(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawnMovement"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereReflectionCapture
// 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                         // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCapture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (FullSize[0x0280] - InheritedSize[0x0270])
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                           // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CaptureDistanceScale;                                      // 0x0274(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCaptureComponent"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineMetadata
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USplineMetadata : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SplineMetadata"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineMeshActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                       // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineMeshComponent
// 0x00A0 (FullSize[0x0570] - InheritedSize[0x04D0])
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_JX6P[0x8];                                     // 0x04D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSplineMeshParams                           SplineParams;                                              // 0x04D8(0x0058) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     SplineUpDir;                                               // 0x0530(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SplineBoundaryMin;                                         // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                       CachedMeshBodySetupGuid;                                   // 0x0540(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SplineBoundaryMax;                                         // 0x0558(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                        // 0x055C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSmoothInterpRollScale : 1;                                // 0x055C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshDirty : 1;                                            // 0x055C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESplineMeshAxis>                ForwardAxis;                                               // 0x055D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZEMJ[0x2];                                     // 0x055E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VirtualTextureMainPassMaxDrawDistance;                     // 0x0560(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MH53[0xC];                                     // 0x0564(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshComponent"));
		return ptr;
	}



	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<Engine_ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	TEnumAsByte<Engine_ESplineMeshAxis> GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpotLightComponent
// 0x0004 (FullSize[0x0360] - InheritedSize[0x035C])
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              OuterConeAngle;                                            // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SpotLightComponent"));
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMesh
// 0x00F0 (FullSize[0x0150] - InheritedSize[0x0060])
class UStaticMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_5GSP[0x20];                                    // 0x0060(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPerPlatformInt                             MinLOD;                                                    // 0x0080(0x0004) (NoDestructor, NativeAccessSpecifierPublic)
	float                                              LpvBiasMultiplier;                                         // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMaterial>                     StaticMaterials;                                           // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              LightmapUVDensity;                                         // 0x0098(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LightMapResolution;                                        // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LightMapCoordinateIndex;                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldSelfShadowBias;                               // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x00A8(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LODForCollision;                                           // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMeshDistanceField : 1;                            // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                      // 0x00B4(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasNavigationData : 1;                                    // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportUniformlyDistributedSampling : 1;                  // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportPhysicalMaterialMasks : 1;                         // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBuiltAtRuntime : 1;                                     // 0x00B4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GQ5J : 1;                                      // 0x00B4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowCPUAccess : 1;                                       // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportGpuUniformlyDistributedSampling : 1;               // 0x00B5(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_37PR[0x22];                                    // 0x00B6(0x0022) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshSocket*>                   Sockets;                                                   // 0x00D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_22VP[0x10];                                    // 0x00E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PositiveBoundsExtension;                                   // 0x00F8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     NegativeBoundsExtension;                                   // 0x0104(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            ExtendedBounds;                                            // 0x0110(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ElementToIgnoreForTexFactor;                               // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0130(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class UObject*                                     EditableMesh;                                              // 0x0140(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavCollisionBase*                           NavCollision;                                              // 0x0148(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StaticMesh"));
		return ptr;
	}



	void RemoveSocket(class UStaticMeshSocket* Socket);
	int GetNumSections(int InLOD);
	int GetNumLODs();
	void GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs);
	int GetMinimumLODForPlatform(const struct FName& PlatformName);
	int GetMaterialIndex(const struct FName& MaterialSlotName);
	class UMaterialInterface* GetMaterial(int MaterialIndex);
	struct FBoxSphereBounds GetBounds();
	struct FBox GetBoundingBox();
	class UStaticMeshSocket* FindSocket(const struct FName& InSocketName);
	class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer);
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*> StaticMeshDescriptions, bool bBuildSimpleCollision);
	void AddSocket(class UStaticMeshSocket* Socket);
	struct FName AddMaterial(class UMaterialInterface* Material);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshSocket
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeLocation;                                          // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     RelativeScale;                                             // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZLGD[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Tag;                                                       // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshSocket"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerShape
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UStereoLayerShape : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerShape"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerShapeQuad
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerShapeQuad"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerShapeCylinder
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                              Radius;                                                    // 0x0028(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlayArc;                                                // 0x002C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Height;                                                    // 0x0030(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8HG9[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerShapeCylinder"));
		return ptr;
	}



	void SetRadius(float InRadius);
	void SetOverlayArc(float InOverlayArc);
	void SetHeight(int InHeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerShapeCubemap
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerShapeCubemap"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerShapeEquirect
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                      LeftUVRect;                                                // 0x0028(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                      RightUVRect;                                               // 0x003C(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                                   LeftScale;                                                 // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RightScale;                                                // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   LeftBias;                                                  // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RightBias;                                                 // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerShapeEquirect"));
		return ptr;
	}



	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerComponent
// 0x00E8 (FullSize[0x02E0] - InheritedSize[0x01F8])
class UStereoLayerComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_QTIV[0x8];                                     // 0x01F8(0x0008) Fix Super Size
	class UTexture*                                    Texture;                                                   // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                                    LeftTexture;                                               // 0x0208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                             // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J8RU[0x3];                                     // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   QuadSize;                                                  // 0x0214(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                      UVRect;                                                    // 0x021C(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              CylinderRadius;                                            // 0x0230(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CylinderOverlayArc;                                        // 0x0234(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CylinderHeight;                                            // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FEquirectProps                              EquirectProps;                                             // 0x023C(0x0048) (Deprecated, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_EStereoLayerType>               StereoLayerType;                                           // 0x0284(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_EStereoLayerShape>              StereoLayerShape;                                          // 0x0285(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_Q5YW[0x2];                                     // 0x0286(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStereoLayerShape*                           Shape;                                                     // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                Priority;                                                  // 0x0290(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NBNF[0x4C];                                    // 0x0294(0x004C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerComponent"));
		return ptr;
	}



	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class UTexture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int InPriority);
	void SetLeftTexture(class UTexture* InTexture);
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class UTexture* GetTexture();
	struct FVector2D GetQuadSize();
	int GetPriority();
	class UTexture* GetLeftTexture();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerFunctionLibrary"));
		return ptr;
	}



	void ShowSplashScreen();
	void SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void HideSplashScreen();
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StringTable
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UStringTable : public UObject
{
public:
	unsigned char                                      UnknownData_LZVJ[0x18];                                    // 0x0028(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.StringTable"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SubsurfaceProfile
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                  // 0x0028(0x008C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZAMQ[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SubsurfaceProfile"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SubsystemBlueprintLibrary"));
		return ptr;
	}



	class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);
	class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class);
	class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);
	class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);
	class UEngineSubsystem* GetEngineSubsystem(class UClass* Class);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SubUVAnimation
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Horizontal;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Vertical;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CQMC[0x2];                                     // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlphaThreshold;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RE6U[0x28];                                    // 0x0040(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SubUVAnimation"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SystemTimeTimecodeProvider
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                                  FrameRate;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGenerateFullFrame;                                        // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseHighPerformanceClock;                                  // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BR6F[0x6];                                     // 0x003A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.SystemTimeTimecodeProvider"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TargetPoint
// 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
class ATargetPoint : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TargetPoint"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextPropertyTestObject
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                             // 0x0028(0x0018) (NativeAccessSpecifierPublic)
	struct FText                                       UndefaultedText;                                           // 0x0040(0x0018) (NativeAccessSpecifierPublic)
	struct FText                                       TransientText;                                             // 0x0058(0x0018) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextPropertyTestObject"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextRenderActor
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                                // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextRenderActor"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextRenderComponent
// 0x0050 (FullSize[0x0490] - InheritedSize[0x0440])
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FText                                       Text;                                                      // 0x0440(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          TextMaterial;                                              // 0x0458(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       Font;                                                      // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EHorizTextAligment>             HorizontalAlignment;                                       // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVerticalTextAligment>          VerticalAlignment;                                         // 0x0469(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LKOE[0x2];                                     // 0x046A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      TextRenderColor;                                           // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              XScale;                                                    // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              YScale;                                                    // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WorldSize;                                                 // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InvDefaultSize;                                            // 0x047C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HorizSpacingAdjust;                                        // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VertSpacingAdjust;                                         // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysRenderAsText : 1;                                   // 0x0488(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6I26[0x7];                                     // 0x0489(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextRenderComponent"));
		return ptr;
	}



	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(TEnumAsByte<Engine_EVerticalTextAligment> Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<Engine_EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	void K2_SetText(const struct FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture2DArray
// 0x0060 (FullSize[0x0138] - InheritedSize[0x00D8])
class UTexture2DArray : public UTexture
{
public:
	unsigned char                                      UnknownData_YC09[0x58];                                    // 0x00D8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x0131(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressZ;                                                  // 0x0132(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O64N[0x5];                                     // 0x0133(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Texture2DArray"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture2DDynamic
// 0x0018 (FullSize[0x00F0] - InheritedSize[0x00D8])
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData_AFH6[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              Format;                                                    // 0x00E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EV6E[0xF];                                     // 0x00E1(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.Texture2DDynamic"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureLightProfile
// 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                                // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TextureMultiplier;                                         // 0x0104(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureLightProfile"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureMipDataProviderFactory
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureMipDataProviderFactory"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTarget2DArray
// 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Slices;                                                    // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00EC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00FC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00FD(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TX37[0x2];                                     // 0x00FE(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget2DArray"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTargetCube
// 0x0018 (FullSize[0x00F8] - InheritedSize[0x00E0])
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00E4(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00F4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00F5(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X10T[0x2];                                     // 0x00F6(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTargetCube"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTargetVolume
// 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
class UTextureRenderTargetVolume : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeZ;                                                     // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00EC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00FC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00FD(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_88YI[0x2];                                     // 0x00FE(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTargetVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ThumbnailInfo
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UThumbnailInfo : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ThumbnailInfo"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TimelineComponent
// 0x00A0 (FullSize[0x0150] - InheritedSize[0x00B0])
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                               // 0x00B0(0x0098) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0148(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_8H0V[0x7];                                     // 0x0149(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TimelineComponent"));
		return ptr;
	}



	void Stop();
	void SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName);
	void SetTimelineLengthMode(TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TimelineTemplate
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                            // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETimelineLengthMode>            LengthMode;                                                // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoPlay : 1;                                             // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicated : 1;                                           // 0x002D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KQMB[0x2];                                     // 0x002E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTTEventTrack>                       EventTracks;                                               // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                               // 0x0040(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                              // 0x0050(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                         // 0x0060(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                       TimelineGuid;                                              // 0x0080(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       VariableName;                                              // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       DirectionPropertyName;                                     // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       UpdateFunctionName;                                        // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       FinishedFunctionName;                                      // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TimelineTemplate"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TireType
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E3DZ[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TireType"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TouchInterface
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  controls;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              ActiveOpacity;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InactiveOpacity;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeUntilDeactive;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeUntilReset;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ActivationDelay;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPreventRecenter;                                          // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3I0T[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StartupDelay;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TD5C[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TouchInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerCapsule
// 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
class ATriggerCapsule : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TriggerCapsule"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerSphere
// 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
class ATriggerSphere : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TriggerSphere"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerVolume
// 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
class ATriggerVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TriggerVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TwitterIntegrationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.TwitterIntegrationBase"));
		return ptr;
	}



	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserDefinedEnum
// 0x0050 (FullSize[0x00B0] - InheritedSize[0x0060])
class UUserDefinedEnum : public UEnum
{
public:
	TMap<struct FName, struct FText>                   DisplayNameMap;                                            // 0x0060(0x0050) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedEnum"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserDefinedStruct
// 0x0048 (FullSize[0x0108] - InheritedSize[0x00C0])
class UUserDefinedStruct : public UScriptStruct
{
public:
	TEnumAsByte<Engine_EUserDefinedStructureStatus>    Status;                                                    // 0x00C0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PZ0G[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       Guid;                                                      // 0x00C4(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J8SK[0x34];                                    // 0x00D4(0x0034) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedStruct"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserInterfaceSettings
// 0x0238 (FullSize[0x0270] - InheritedSize[0x0038])
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	Engine_ERenderFocusRule                            RenderFocusRule;                                           // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LP6I[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<TEnumAsByte<CoreUObject_EMouseCursor>, struct FHardwareCursorReference> HardwareCursors;                                           // 0x0040(0x0050) (Edit, Config, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<CoreUObject_EMouseCursor>, struct FSoftClassPath> SoftwareCursors;                                           // 0x0090(0x0050) (Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              DefaultCursor;                                             // 0x00E0(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              TextEditBeamCursor;                                        // 0x00F8(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              CrosshairsCursor;                                          // 0x0110(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              HandCursor;                                                // 0x0128(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GrabHandCursor;                                            // 0x0140(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GrabHandClosedCursor;                                      // 0x0158(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              SlashedCircleCursor;                                       // 0x0170(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ApplicationScale;                                          // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EUIScalingRule                              UIScaleRule;                                               // 0x018C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TQ3T[0x3];                                     // 0x018D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              CustomScalingRuleClass;                                    // 0x0190(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                              // 0x01A8(0x0088) (Edit, Config, NativeAccessSpecifierPublic)
	bool                                               bAllowHighDPIInGameMode;                                   // 0x0230(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YU1M[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FIntPoint                                   DesignScreenSize;                                          // 0x0234(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLoadWidgetsOnDedicatedServer;                             // 0x023C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GYBG[0x3];                                     // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             CursorClasses;                                             // 0x0240(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UClass*                                      CustomScalingRuleClassInstance;                            // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDPICustomScalingRule*                       CustomScalingRule;                                         // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_9EQD[0x10];                                    // 0x0260(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.UserInterfaceSettings"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorField
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                    // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              Intensity;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VectorField"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldAnimated
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVectorFieldConstructionOp>     ConstructionOp;                                            // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3JBV[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VolumeSizeX;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VolumeSizeY;                                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VolumeSizeZ;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImagesX;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImagesY;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FrameCount;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FramesPerSecond;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0YD4[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UVectorFieldStatic*                          NoiseField;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseScale;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseMax;                                                  // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldAnimated"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldComponent
// 0x0030 (FullSize[0x0470] - InheritedSize[0x0440])
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                               // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Intensity;                                                 // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Tightness;                                                 // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPreviewVectorField : 1;                                   // 0x0450(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YAK6[0x1F];                                    // 0x0451(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldComponent"));
		return ptr;
	}



	void SetIntensity(float NewIntensity);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldStatic
// 0x0050 (FullSize[0x0098] - InheritedSize[0x0048])
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                     // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeZ;                                                     // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowCPUAccess;                                           // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2TYN[0x43];                                    // 0x0055(0x0043) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldStatic"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldVolume
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                      // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ViewportStatsSubsystem
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UViewportStatsSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData_CE7E[0x20];                                    // 0x0030(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.ViewportStatsSubsystem"));
		return ptr;
	}



	void RemoveDisplayDelegate(int IndexToRemove);
	void AddTimedDisplay(const struct FText& Text, const struct FLinearColor& Color, float Duration);
	int AddDisplayDelegate(const struct FScriptDelegate& Delegate);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VirtualTexture
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVirtualTexture : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VirtualTexture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightMapVirtualTexture
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULightMapVirtualTexture : public UVirtualTexture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.LightMapVirtualTexture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.RuntimeVirtualTextureStreamingProxy"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VirtualTexture2D
// 0x0010 (FullSize[0x0110] - InheritedSize[0x0100])
class UVirtualTexture2D : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings                Settings;                                                  // 0x0100(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bContinuousUpdate;                                         // 0x010C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSinglePhysicalSpace;                                      // 0x010D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DSCF[0x2];                                     // 0x010E(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VirtualTexture2D"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VirtualTextureBuilder
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UVirtualTextureBuilder : public UObject
{
public:
	class UVirtualTexture2D*                           Texture;                                                   // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64_t                                           BuildHash;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VirtualTextureBuilder"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VirtualTexturePoolConfig
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UVirtualTexturePoolConfig : public UObject
{
public:
	int                                                DefaultSizeInMegabyte;                                     // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RDO1[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVirtualTextureSpacePoolConfig>      Pools;                                                     // 0x0030(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VirtualTexturePoolConfig"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VisualLoggerAutomationTests
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVisualLoggerAutomationTests : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerAutomationTests"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerDebugSnapshotInterface"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerKismetLibrary"));
		return ptr;
	}



	void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);
	void LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory, bool bAddToMessageLog);
	void LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog);
	void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog);
	void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog);
	void EnableRecording(bool bEnabled);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VoiceChannel
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_FIX3[0x10];                                    // 0x0070(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VoiceChannel"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VOIPTalker
// 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
class UVOIPTalker : public UActorComponent
{
public:
	struct FVoiceSettings                              Settings;                                                  // 0x00B0(0x0018) (Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BU7I[0x20];                                    // 0x00C8(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VOIPTalker"));
		return ptr;
	}



	void RegisterWithPlayerState(class APlayerState* OwningState);
	float GetVoiceLevel();
	class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);
	void BPOnTalkingEnd();
	void BPOnTalkingBegin(class UAudioComponent* AudioComponent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VOIPStatics
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VOIPStatics"));
		return ptr;
	}



	void SetMicThreshold(float InThreshold);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VolumeTexture
// 0x0058 (FullSize[0x0130] - InheritedSize[0x00D8])
class UVolumeTexture : public UTexture
{
public:
	unsigned char                                      UnknownData_NYPJ[0x58];                                    // 0x00D8(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VolumeTexture"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VolumetricCloudComponent
// 0x0048 (FullSize[0x0240] - InheritedSize[0x01F8])
class UVolumetricCloudComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_4WSD[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              LayerHeight;                                               // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TracingStartMaxDistance;                                   // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TracingMaxDistance;                                        // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlanetRadius;                                              // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      GroundAlbedo;                                              // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          Material;                                                  // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePerSampleAtmosphericLightTransmittance : 1;            // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MMSS[0x3];                                     // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SkyLightCloudBottomOcclusion;                              // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewSampleCountScale;                                      // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReflectionSampleCountScale;                                // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowViewSampleCountScale;                                // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowReflectionSampleCountScale;                          // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowTracingDistance;                                     // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XPFS[0xC];                                     // 0x0234(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VolumetricCloudComponent"));
		return ptr;
	}



	void SetViewSampleCountScale(float NewValue);
	void SetTracingStartMaxDistance(float NewValue);
	void SetTracingMaxDistance(float NewValue);
	void SetSkyLightCloudBottomOcclusion(float NewValue);
	void SetShadowViewSampleCountScale(float NewValue);
	void SetShadowTracingDistance(float NewValue);
	void SetShadowReflectionSampleCountScale(float NewValue);
	void SetReflectionSampleCountScale(float NewValue);
	void SetPlanetRadius(float NewValue);
	void SetMaterial(class UMaterialInterface* NewValue);
	void SetLayerHeight(float NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetGroundAlbedo(const struct FColor& NewValue);
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VolumetricCloud
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AVolumetricCloud : public AInfo
{
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                  // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VolumetricCloud"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (FullSize[0x0260] - InheritedSize[0x0258])
class AVolumetricLightmapDensityVolume : public AVolume
{
public:
	struct FInt32Interval                              AllowedMipLevelRange;                                      // 0x0258(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.VolumetricLightmapDensityVolume"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WindDirectionalSource
// 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                 // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSource"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WindDirectionalSourceComponent
// 0x0028 (FullSize[0x0220] - InheritedSize[0x01F8])
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_JURY[0x4];                                     // 0x01F8(0x0004) Fix Super Size
	float                                              Speed;                                                     // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinGustAmount;                                             // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGustAmount;                                             // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius;                                                    // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPointWind : 1;                                            // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4V0K[0x13];                                    // 0x020D(0x0013) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSourceComponent"));
		return ptr;
	}



	void SetWindType(Engine_EWindSourceType InNewType);
	void SetStrength(float InNewStrength);
	void SetSpeed(float InNewSpeed);
	void SetRadius(float InNewRadius);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetMaximumGustAmount(float InNewMaxGust);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WorldComposition
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData_FSDY[0x20];                                    // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     TilesStreaming;                                            // 0x0048(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	double                                             TilesStreamingTimeThreshold;                               // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLoadAllTilesDuringCinematic;                              // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRebaseOriginIn3DSpace;                                    // 0x0061(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XPA5[0x2];                                     // 0x0062(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RebaseOriginDistance;                                      // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.WorldComposition"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HierarchicalLODSetup
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>         HierarchicalLODSetup;                                      // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      OverrideBaseMaterial[0x28];                                // 0x0038(0x0028) UNKNOWN PROPERTY: SoftObjectProperty


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass(_xor_("Class Engine.HierarchicalLODSetup"));
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
