// Name: S, Version: N

#include "../pch.h"

/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------

void FMulticastRecordOptions::AfterRead()
{
}

void FMulticastRecordOptions::BeforeDelete()
{
}

void FRollbackNetStartupActorInfo::AfterRead()
{
	READ_PTR_FULL(Archetype, UObject);
	READ_PTR_FULL(Level, ULevel);
}

void FRollbackNetStartupActorInfo::BeforeDelete()
{
	DELE_PTR_FULL(Archetype);
	DELE_PTR_FULL(Level);
}

void FDialogueContext::AfterRead()
{
	READ_PTR_FULL(Speaker, UDialogueVoice);
}

void FDialogueContext::BeforeDelete()
{
	DELE_PTR_FULL(Speaker);
}

void FDialogueWaveParameter::AfterRead()
{
	READ_PTR_FULL(DialogueWave, UDialogueWave);
}

void FDialogueWaveParameter::BeforeDelete()
{
	DELE_PTR_FULL(DialogueWave);
}

void FDialogueContextMapping::AfterRead()
{
	READ_PTR_FULL(SoundWave, USoundWave);
	READ_PTR_FULL(Proxy, UDialogueSoundWaveProxy);
}

void FDialogueContextMapping::BeforeDelete()
{
	DELE_PTR_FULL(SoundWave);
	DELE_PTR_FULL(Proxy);
}

void FDistributionLookupTable::AfterRead()
{
}

void FDistributionLookupTable::BeforeDelete()
{
}

void FRawDistribution::AfterRead()
{
}

void FRawDistribution::BeforeDelete()
{
}

void FRawDistributionFloat::AfterRead()
{
	FRawDistribution::AfterRead();

	READ_PTR_FULL(Distribution, UDistributionFloat);
}

void FRawDistributionFloat::BeforeDelete()
{
	FRawDistribution::BeforeDelete();

	DELE_PTR_FULL(Distribution);
}

void FRawDistributionVector::AfterRead()
{
	FRawDistribution::AfterRead();

	READ_PTR_FULL(Distribution, UDistributionVector);
}

void FRawDistributionVector::BeforeDelete()
{
	FRawDistribution::BeforeDelete();

	DELE_PTR_FULL(Distribution);
}

void FGraphReference::AfterRead()
{
	READ_PTR_FULL(MacroGraph, UEdGraph);
	READ_PTR_FULL(GraphBlueprint, UBlueprint);
}

void FGraphReference::BeforeDelete()
{
	DELE_PTR_FULL(MacroGraph);
	DELE_PTR_FULL(GraphBlueprint);
}

void FEdGraphPinReference::AfterRead()
{
}

void FEdGraphPinReference::BeforeDelete()
{
}

void FEdGraphSchemaAction::AfterRead()
{
}

void FEdGraphSchemaAction::BeforeDelete()
{
}

void FEdGraphSchemaAction_NewNode::AfterRead()
{
	FEdGraphSchemaAction::AfterRead();

	READ_PTR_FULL(NodeTemplate, UEdGraphNode);
}

void FEdGraphSchemaAction_NewNode::BeforeDelete()
{
	FEdGraphSchemaAction::BeforeDelete();

	DELE_PTR_FULL(NodeTemplate);
}

void FPluginRedirect::AfterRead()
{
}

void FPluginRedirect::BeforeDelete()
{
}

void FStructRedirect::AfterRead()
{
}

void FStructRedirect::BeforeDelete()
{
}

void FClassRedirect::AfterRead()
{
}

void FClassRedirect::BeforeDelete()
{
}

void FGameNameRedirect::AfterRead()
{
}

void FGameNameRedirect::BeforeDelete()
{
}

void FScreenMessageString::AfterRead()
{
}

void FScreenMessageString::BeforeDelete()
{
}

void FDropNoteInfo::AfterRead()
{
}

void FDropNoteInfo::BeforeDelete()
{
}

void FStatColorMapEntry::AfterRead()
{
}

void FStatColorMapEntry::BeforeDelete()
{
}

void FStatColorMapping::AfterRead()
{
}

void FStatColorMapping::BeforeDelete()
{
}

void FURL::AfterRead()
{
}

void FURL::BeforeDelete()
{
}

void FFullyLoadedPackagesInfo::AfterRead()
{
}

void FFullyLoadedPackagesInfo::BeforeDelete()
{
}

void FLevelStreamingStatus::AfterRead()
{
}

void FLevelStreamingStatus::BeforeDelete()
{
}

void FNamedNetDriver::AfterRead()
{
	READ_PTR_FULL(NetDriver, UNetDriver);
}

void FNamedNetDriver::BeforeDelete()
{
	DELE_PTR_FULL(NetDriver);
}

void FWorldContext::AfterRead()
{
	READ_PTR_FULL(PendingNetGame, UPendingNetGame);
	READ_PTR_FULL(GameViewport, UGameViewportClient);
	READ_PTR_FULL(OwningGameInstance, UGameInstance);
}

void FWorldContext::BeforeDelete()
{
	DELE_PTR_FULL(PendingNetGame);
	DELE_PTR_FULL(GameViewport);
	DELE_PTR_FULL(OwningGameInstance);
}

void FNetDriverDefinition::AfterRead()
{
}

void FNetDriverDefinition::BeforeDelete()
{
}

void FExposureSettings::AfterRead()
{
}

void FExposureSettings::BeforeDelete()
{
}

void FTickPrerequisite::AfterRead()
{
}

void FTickPrerequisite::BeforeDelete()
{
}

void FCanvasUVTri::AfterRead()
{
}

void FCanvasUVTri::BeforeDelete()
{
}

void FDepthFieldGlowInfo::AfterRead()
{
}

void FDepthFieldGlowInfo::BeforeDelete()
{
}

void FFontRenderInfo::AfterRead()
{
}

void FFontRenderInfo::BeforeDelete()
{
}

void FRedirector::AfterRead()
{
}

void FRedirector::BeforeDelete()
{
}

void FCollectionReference::AfterRead()
{
}

void FCollectionReference::BeforeDelete()
{
}

void FComponentReference::AfterRead()
{
	READ_PTR_FULL(OtherActor, AActor);
}

void FComponentReference::BeforeDelete()
{
	DELE_PTR_FULL(OtherActor);
}

void FConstrainComponentPropName::AfterRead()
{
}

void FConstrainComponentPropName::BeforeDelete()
{
}

void FSkeletalMeshBuildSettings::AfterRead()
{
}

void FSkeletalMeshBuildSettings::BeforeDelete()
{
}

void FMeshBuildSettings::AfterRead()
{
	READ_PTR_FULL(DistanceFieldReplacementMesh, UStaticMesh);
}

void FMeshBuildSettings::BeforeDelete()
{
	DELE_PTR_FULL(DistanceFieldReplacementMesh);
}

void FPOV::AfterRead()
{
}

void FPOV::BeforeDelete()
{
}

void FAnimUpdateRateParameters::AfterRead()
{
}

void FAnimUpdateRateParameters::BeforeDelete()
{
}

void FAnimSlotDesc::AfterRead()
{
}

void FAnimSlotDesc::BeforeDelete()
{
}

void FAnimSlotInfo::AfterRead()
{
}

void FAnimSlotInfo::BeforeDelete()
{
}

void FMTDResult::AfterRead()
{
}

void FMTDResult::BeforeDelete()
{
}

void FOverlapResult::AfterRead()
{
}

void FOverlapResult::BeforeDelete()
{
}

void FPrimitiveMaterialRef::AfterRead()
{
	READ_PTR_FULL(Primitive, UPrimitiveComponent);
	READ_PTR_FULL(Decal, UDecalComponent);
}

void FPrimitiveMaterialRef::BeforeDelete()
{
	DELE_PTR_FULL(Primitive);
	DELE_PTR_FULL(Decal);
}

void FSwarmDebugOptions::AfterRead()
{
}

void FSwarmDebugOptions::BeforeDelete()
{
}

void FLightmassDebugOptions::AfterRead()
{
}

void FLightmassDebugOptions::BeforeDelete()
{
}

void FLightmassPrimitiveSettings::AfterRead()
{
}

void FLightmassPrimitiveSettings::BeforeDelete()
{
}

void FLightmassLightSettings::AfterRead()
{
}

void FLightmassLightSettings::BeforeDelete()
{
}

void FLightmassDirectionalLightSettings::AfterRead()
{
	FLightmassLightSettings::AfterRead();

}

void FLightmassDirectionalLightSettings::BeforeDelete()
{
	FLightmassLightSettings::BeforeDelete();

}

void FLightmassPointLightSettings::AfterRead()
{
	FLightmassLightSettings::AfterRead();

}

void FLightmassPointLightSettings::BeforeDelete()
{
	FLightmassLightSettings::BeforeDelete();

}

void FBasedPosition::AfterRead()
{
	READ_PTR_FULL(Base, AActor);
}

void FBasedPosition::BeforeDelete()
{
	DELE_PTR_FULL(Base);
}

void FFractureEffect::AfterRead()
{
	READ_PTR_FULL(ParticleSystem, UParticleSystem);
	READ_PTR_FULL(Sound, USoundBase);
}

void FFractureEffect::BeforeDelete()
{
	DELE_PTR_FULL(ParticleSystem);
	DELE_PTR_FULL(Sound);
}

void FRigidBodyContactInfo::AfterRead()
{
	READ_PTR_FULL(PhysMaterial[0x2], UPhysicalMaterial);
}

void FRigidBodyContactInfo::BeforeDelete()
{
	DELE_PTR_FULL(PhysMaterial[0x2]);
}

void FCollisionImpactData::AfterRead()
{
}

void FCollisionImpactData::BeforeDelete()
{
}

void FRigidBodyErrorCorrection::AfterRead()
{
}

void FRigidBodyErrorCorrection::BeforeDelete()
{
}

void FVector_NetQuantize100::AfterRead()
{
	FVector::AfterRead();

}

void FVector_NetQuantize100::BeforeDelete()
{
	FVector::BeforeDelete();

}

void FRigidBodyState::AfterRead()
{
}

void FRigidBodyState::BeforeDelete()
{
}

void FMaterialShadingModelField::AfterRead()
{
}

void FMaterialShadingModelField::BeforeDelete()
{
}

void FExponentialHeightFogData::AfterRead()
{
}

void FExponentialHeightFogData::BeforeDelete()
{
}

void FFontCharacter::AfterRead()
{
}

void FFontCharacter::BeforeDelete()
{
}

void FFontImportOptionsData::AfterRead()
{
}

void FFontImportOptionsData::BeforeDelete()
{
}

void FKeyHandleMap::AfterRead()
{
}

void FKeyHandleMap::BeforeDelete()
{
}

void FIndexedCurve::AfterRead()
{
}

void FIndexedCurve::BeforeDelete()
{
}

void FRealCurve::AfterRead()
{
	FIndexedCurve::AfterRead();

}

void FRealCurve::BeforeDelete()
{
	FIndexedCurve::BeforeDelete();

}

void FRichCurveKey::AfterRead()
{
}

void FRichCurveKey::BeforeDelete()
{
}

void FRichCurve::AfterRead()
{
	FRealCurve::AfterRead();

}

void FRichCurve::BeforeDelete()
{
	FRealCurve::BeforeDelete();

}

void FRuntimeFloatCurve::AfterRead()
{
	READ_PTR_FULL(ExternalCurve, UCurveFloat);
}

void FRuntimeFloatCurve::BeforeDelete()
{
	DELE_PTR_FULL(ExternalCurve);
}

void FBaseAttenuationSettings::AfterRead()
{
}

void FBaseAttenuationSettings::BeforeDelete()
{
}

void FForceFeedbackAttenuationSettings::AfterRead()
{
	FBaseAttenuationSettings::AfterRead();

}

void FForceFeedbackAttenuationSettings::BeforeDelete()
{
	FBaseAttenuationSettings::BeforeDelete();

}

void FForceFeedbackChannelDetails::AfterRead()
{
}

void FForceFeedbackChannelDetails::BeforeDelete()
{
}

void FPredictProjectilePathPointData::AfterRead()
{
}

void FPredictProjectilePathPointData::BeforeDelete()
{
}

void FVector_NetQuantize::AfterRead()
{
	FVector::AfterRead();

}

void FVector_NetQuantize::BeforeDelete()
{
	FVector::BeforeDelete();

}

void FVector_NetQuantizeNormal::AfterRead()
{
	FVector::AfterRead();

}

void FVector_NetQuantizeNormal::BeforeDelete()
{
	FVector::BeforeDelete();

}

void FHitResult::AfterRead()
{
}

void FHitResult::BeforeDelete()
{
}

void FPredictProjectilePathResult::AfterRead()
{
}

void FPredictProjectilePathResult::BeforeDelete()
{
}

void FPredictProjectilePathParams::AfterRead()
{
}

void FPredictProjectilePathParams::BeforeDelete()
{
}

void FActiveHapticFeedbackEffect::AfterRead()
{
	READ_PTR_FULL(HapticEffect, UHapticFeedbackEffect_Base);
}

void FActiveHapticFeedbackEffect::BeforeDelete()
{
	DELE_PTR_FULL(HapticEffect);
}

void FHapticFeedbackDetails_Curve::AfterRead()
{
}

void FHapticFeedbackDetails_Curve::BeforeDelete()
{
}

void FClusterNode::AfterRead()
{
}

void FClusterNode::BeforeDelete()
{
}

void FClusterNode_DEPRECATED::AfterRead()
{
}

void FClusterNode_DEPRECATED::BeforeDelete()
{
}

void FHLODISMComponentDesc::AfterRead()
{
	READ_PTR_FULL(StaticMesh, UStaticMesh);
	READ_PTR_FULL(Material, UMaterialInterface);
}

void FHLODISMComponentDesc::BeforeDelete()
{
	DELE_PTR_FULL(StaticMesh);
	DELE_PTR_FULL(Material);
}

void FHLODProxyMesh::AfterRead()
{
	READ_PTR_FULL(StaticMesh, UStaticMesh);
}

void FHLODProxyMesh::BeforeDelete()
{
	DELE_PTR_FULL(StaticMesh);
}

void FImportanceTexture::AfterRead()
{
}

void FImportanceTexture::BeforeDelete()
{
}

void FComponentKey::AfterRead()
{
	READ_PTR_FULL(OwnerClass, UClass);
}

void FComponentKey::BeforeDelete()
{
	DELE_PTR_FULL(OwnerClass);
}

void FBlueprintComponentChangedPropertyInfo::AfterRead()
{
	READ_PTR_FULL(PropertyScope, UStruct);
}

void FBlueprintComponentChangedPropertyInfo::BeforeDelete()
{
	DELE_PTR_FULL(PropertyScope);
}

void FBlueprintCookedComponentInstancingData::AfterRead()
{
}

void FBlueprintCookedComponentInstancingData::BeforeDelete()
{
}

void FComponentOverrideRecord::AfterRead()
{
	READ_PTR_FULL(ComponentClass, UClass);
	READ_PTR_FULL(ComponentTemplate, UActorComponent);
}

void FComponentOverrideRecord::BeforeDelete()
{
	DELE_PTR_FULL(ComponentClass);
	DELE_PTR_FULL(ComponentTemplate);
}

void FBlueprintInputDelegateBinding::AfterRead()
{
}

void FBlueprintInputDelegateBinding::BeforeDelete()
{
}

void FBlueprintInputActionDelegateBinding::AfterRead()
{
	FBlueprintInputDelegateBinding::AfterRead();

}

void FBlueprintInputActionDelegateBinding::BeforeDelete()
{
	FBlueprintInputDelegateBinding::BeforeDelete();

}

void FBlueprintInputAxisDelegateBinding::AfterRead()
{
	FBlueprintInputDelegateBinding::AfterRead();

}

void FBlueprintInputAxisDelegateBinding::BeforeDelete()
{
	FBlueprintInputDelegateBinding::BeforeDelete();

}

void FBlueprintInputAxisKeyDelegateBinding::AfterRead()
{
	FBlueprintInputDelegateBinding::AfterRead();

}

void FBlueprintInputAxisKeyDelegateBinding::BeforeDelete()
{
	FBlueprintInputDelegateBinding::BeforeDelete();

}

void FCachedKeyToActionInfo::AfterRead()
{
	READ_PTR_FULL(PlayerInput, UPlayerInput);
}

void FCachedKeyToActionInfo::BeforeDelete()
{
	DELE_PTR_FULL(PlayerInput);
}

void FBlueprintInputKeyDelegateBinding::AfterRead()
{
	FBlueprintInputDelegateBinding::AfterRead();

}

void FBlueprintInputKeyDelegateBinding::BeforeDelete()
{
	FBlueprintInputDelegateBinding::BeforeDelete();

}

void FBlueprintInputTouchDelegateBinding::AfterRead()
{
	FBlueprintInputDelegateBinding::AfterRead();

}

void FBlueprintInputTouchDelegateBinding::BeforeDelete()
{
	FBlueprintInputDelegateBinding::BeforeDelete();

}

void FActorComponentDuplicatedObjectData::AfterRead()
{
}

void FActorComponentDuplicatedObjectData::BeforeDelete()
{
}

void FActorComponentInstanceData::AfterRead()
{
	READ_PTR_FULL(SourceComponentTemplate, UObject);
}

void FActorComponentInstanceData::BeforeDelete()
{
	DELE_PTR_FULL(SourceComponentTemplate);
}

void FSceneComponentInstanceData::AfterRead()
{
	FActorComponentInstanceData::AfterRead();

}

void FSceneComponentInstanceData::BeforeDelete()
{
	FActorComponentInstanceData::BeforeDelete();

}

void FInstancedStaticMeshLightMapInstanceData::AfterRead()
{
}

void FInstancedStaticMeshLightMapInstanceData::BeforeDelete()
{
}

void FInstancedStaticMeshInstanceData::AfterRead()
{
}

void FInstancedStaticMeshInstanceData::BeforeDelete()
{
}

void FInstancedStaticMeshComponentInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

	READ_PTR_FULL(StaticMesh, UStaticMesh);
}

void FInstancedStaticMeshComponentInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

	DELE_PTR_FULL(StaticMesh);
}

void FInstancedStaticMeshMappingInfo::AfterRead()
{
}

void FInstancedStaticMeshMappingInfo::BeforeDelete()
{
}

void FCurveEdEntry::AfterRead()
{
	READ_PTR_FULL(CurveObject, UObject);
}

void FCurveEdEntry::BeforeDelete()
{
	DELE_PTR_FULL(CurveObject);
}

void FCurveEdTab::AfterRead()
{
}

void FCurveEdTab::BeforeDelete()
{
}

void FInterpEdSelKey::AfterRead()
{
	READ_PTR_FULL(Group, UInterpGroup);
	READ_PTR_FULL(Track, UInterpTrack);
}

void FInterpEdSelKey::BeforeDelete()
{
	DELE_PTR_FULL(Group);
	DELE_PTR_FULL(Track);
}

void FCameraPreviewInfo::AfterRead()
{
	READ_PTR_FULL(PawnClass, UClass);
	READ_PTR_FULL(AnimSeq, UAnimSequence);
	READ_PTR_FULL(PawnInst, APawn);
}

void FCameraPreviewInfo::BeforeDelete()
{
	DELE_PTR_FULL(PawnClass);
	DELE_PTR_FULL(AnimSeq);
	DELE_PTR_FULL(PawnInst);
}

void FSubTrackGroup::AfterRead()
{
}

void FSubTrackGroup::BeforeDelete()
{
}

void FSupportedSubTrackInfo::AfterRead()
{
	READ_PTR_FULL(SupportedClass, UClass);
}

void FSupportedSubTrackInfo::BeforeDelete()
{
	DELE_PTR_FULL(SupportedClass);
}

void FAnimControlTrackKey::AfterRead()
{
	READ_PTR_FULL(AnimSeq, UAnimSequence);
}

void FAnimControlTrackKey::BeforeDelete()
{
	DELE_PTR_FULL(AnimSeq);
}

void FBoolTrackKey::AfterRead()
{
}

void FBoolTrackKey::BeforeDelete()
{
}

void FDirectorTrackCut::AfterRead()
{
}

void FDirectorTrackCut::BeforeDelete()
{
}

void FEventTrackKey::AfterRead()
{
}

void FEventTrackKey::BeforeDelete()
{
}

void FInterpLookupPoint::AfterRead()
{
}

void FInterpLookupPoint::BeforeDelete()
{
}

void FInterpLookupTrack::AfterRead()
{
}

void FInterpLookupTrack::BeforeDelete()
{
}

void FParticleReplayTrackKey::AfterRead()
{
}

void FParticleReplayTrackKey::BeforeDelete()
{
}

void FSoundTrackKey::AfterRead()
{
	READ_PTR_FULL(Sound, USoundBase);
}

void FSoundTrackKey::BeforeDelete()
{
	DELE_PTR_FULL(Sound);
}

void FToggleTrackKey::AfterRead()
{
}

void FToggleTrackKey::BeforeDelete()
{
}

void FVisibilityTrackKey::AfterRead()
{
}

void FVisibilityTrackKey::BeforeDelete()
{
}

void FVectorSpringState::AfterRead()
{
}

void FVectorSpringState::BeforeDelete()
{
}

void FFloatSpringState::AfterRead()
{
}

void FFloatSpringState::BeforeDelete()
{
}

void FDrawToRenderTargetContext::AfterRead()
{
	READ_PTR_FULL(RenderTarget, UTextureRenderTarget2D);
}

void FDrawToRenderTargetContext::BeforeDelete()
{
	DELE_PTR_FULL(RenderTarget);
}

void FLatentActionManager::AfterRead()
{
}

void FLatentActionManager::BeforeDelete()
{
}

void FLayerActorStats::AfterRead()
{
	READ_PTR_FULL(Type, UClass);
}

void FLayerActorStats::BeforeDelete()
{
	DELE_PTR_FULL(Type);
}

void FReplicatedStaticActorDestructionInfo::AfterRead()
{
	READ_PTR_FULL(ObjClass, UClass);
}

void FReplicatedStaticActorDestructionInfo::BeforeDelete()
{
	DELE_PTR_FULL(ObjClass);
}

void FMaterialProxySettings::AfterRead()
{
}

void FMaterialProxySettings::BeforeDelete()
{
}

void FLevelSimplificationDetails::AfterRead()
{
}

void FLevelSimplificationDetails::BeforeDelete()
{
}

void FStreamableTextureInstance::AfterRead()
{
}

void FStreamableTextureInstance::BeforeDelete()
{
}

void FDynamicTextureInstance::AfterRead()
{
	FStreamableTextureInstance::AfterRead();

	READ_PTR_FULL(Texture, UTexture2D);
}

void FDynamicTextureInstance::BeforeDelete()
{
	FStreamableTextureInstance::BeforeDelete();

	DELE_PTR_FULL(Texture);
}

void FPrecomputedLightInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

}

void FPrecomputedLightInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

}

void FBatchedPoint::AfterRead()
{
}

void FBatchedPoint::BeforeDelete()
{
}

void FBatchedLine::AfterRead()
{
}

void FBatchedLine::BeforeDelete()
{
}

void FClientReceiveData::AfterRead()
{
	READ_PTR_FULL(LocalPC, APlayerController);
	READ_PTR_FULL(RelatedPlayerState_2, APlayerState);
	READ_PTR_FULL(RelatedPlayerState_3, APlayerState);
	READ_PTR_FULL(OptionalObject, UObject);
}

void FClientReceiveData::BeforeDelete()
{
	DELE_PTR_FULL(LocalPC);
	DELE_PTR_FULL(RelatedPlayerState_2);
	DELE_PTR_FULL(RelatedPlayerState_3);
	DELE_PTR_FULL(OptionalObject);
}

void FComponentSync::AfterRead()
{
}

void FComponentSync::BeforeDelete()
{
}

void FLODMappingData::AfterRead()
{
}

void FLODMappingData::BeforeDelete()
{
}

void FParameterGroupData::AfterRead()
{
}

void FParameterGroupData::BeforeDelete()
{
}

void FMaterialSpriteElement::AfterRead()
{
	READ_PTR_FULL(Material, UMaterialInterface);
	READ_PTR_FULL(DistanceToOpacityCurve, UCurveFloat);
	READ_PTR_FULL(DistanceToSizeCurve, UCurveFloat);
}

void FMaterialSpriteElement::BeforeDelete()
{
	DELE_PTR_FULL(Material);
	DELE_PTR_FULL(DistanceToOpacityCurve);
	DELE_PTR_FULL(DistanceToSizeCurve);
}

void FMaterialFunctionInfo::AfterRead()
{
	READ_PTR_FULL(Function, UMaterialFunctionInterface);
}

void FMaterialFunctionInfo::BeforeDelete()
{
	DELE_PTR_FULL(Function);
}

void FMaterialParameterCollectionInfo::AfterRead()
{
	READ_PTR_FULL(ParameterCollection, UMaterialParameterCollection);
}

void FMaterialParameterCollectionInfo::BeforeDelete()
{
	DELE_PTR_FULL(ParameterCollection);
}

void FMaterialParameterInfo::AfterRead()
{
}

void FMaterialParameterInfo::BeforeDelete()
{
}

void FMaterialCachedParameterEntry::AfterRead()
{
}

void FMaterialCachedParameterEntry::BeforeDelete()
{
}

void FMaterialCachedParameters::AfterRead()
{
}

void FMaterialCachedParameters::BeforeDelete()
{
}

void FMaterialCachedExpressionData::AfterRead()
{
}

void FMaterialCachedExpressionData::BeforeDelete()
{
}

void FStaticComponentMaskValue::AfterRead()
{
}

void FStaticComponentMaskValue::BeforeDelete()
{
}

void FParameterChannelNames::AfterRead()
{
}

void FParameterChannelNames::BeforeDelete()
{
}

void FCustomDefine::AfterRead()
{
}

void FCustomDefine::BeforeDelete()
{
}

void FCustomOutput::AfterRead()
{
}

void FCustomOutput::BeforeDelete()
{
}

void FExpressionInput::AfterRead()
{
}

void FExpressionInput::BeforeDelete()
{
}

void FCustomInput::AfterRead()
{
}

void FCustomInput::BeforeDelete()
{
}

void FExpressionOutput::AfterRead()
{
}

void FExpressionOutput::BeforeDelete()
{
}

void FFunctionExpressionOutput::AfterRead()
{
	READ_PTR_FULL(ExpressionOutput, UMaterialExpressionFunctionOutput);
}

void FFunctionExpressionOutput::BeforeDelete()
{
	DELE_PTR_FULL(ExpressionOutput);
}

void FFunctionExpressionInput::AfterRead()
{
	READ_PTR_FULL(ExpressionInput, UMaterialExpressionFunctionInput);
}

void FFunctionExpressionInput::BeforeDelete()
{
	DELE_PTR_FULL(ExpressionInput);
}

void FScalarParameterAtlasInstanceData::AfterRead()
{
}

void FScalarParameterAtlasInstanceData::BeforeDelete()
{
}

void FMemberReference::AfterRead()
{
	READ_PTR_FULL(MemberParent, UObject);
}

void FMemberReference::BeforeDelete()
{
	DELE_PTR_FULL(MemberParent);
}

void FMeshInstancingSettings::AfterRead()
{
	READ_PTR_FULL(ActorClassToUse, UClass);
	READ_PTR_FULL(ISMComponentToUse, UClass);
}

void FMeshInstancingSettings::BeforeDelete()
{
	DELE_PTR_FULL(ActorClassToUse);
	DELE_PTR_FULL(ISMComponentToUse);
}

void FMeshMergingSettings::AfterRead()
{
}

void FMeshMergingSettings::BeforeDelete()
{
}

void FMeshProxySettings::AfterRead()
{
}

void FMeshProxySettings::BeforeDelete()
{
}

void FMeshReductionSettings::AfterRead()
{
}

void FMeshReductionSettings::BeforeDelete()
{
}

void FNameCurveKey::AfterRead()
{
}

void FNameCurveKey::BeforeDelete()
{
}

void FNameCurve::AfterRead()
{
	FIndexedCurve::AfterRead();

}

void FNameCurve::BeforeDelete()
{
	FIndexedCurve::BeforeDelete();

}

void FNavAvoidanceMask::AfterRead()
{
}

void FNavAvoidanceMask::BeforeDelete()
{
}

void FMovementProperties::AfterRead()
{
}

void FMovementProperties::BeforeDelete()
{
}

void FNavAgentProperties::AfterRead()
{
	FMovementProperties::AfterRead();

}

void FNavAgentProperties::BeforeDelete()
{
	FMovementProperties::BeforeDelete();

}

void FNavDataConfig::AfterRead()
{
	FNavAgentProperties::AfterRead();

	READ_PTR_FULL(NavigationDataClass, UClass);
}

void FNavDataConfig::BeforeDelete()
{
	FNavAgentProperties::BeforeDelete();

	DELE_PTR_FULL(NavigationDataClass);
}

void FPacketSimulationSettings::AfterRead()
{
}

void FPacketSimulationSettings::BeforeDelete()
{
}

void FFastArraySerializer::AfterRead()
{
}

void FFastArraySerializer::BeforeDelete()
{
}

void FFastArraySerializerItem::AfterRead()
{
}

void FFastArraySerializerItem::BeforeDelete()
{
}

void FParticleCurvePair::AfterRead()
{
	READ_PTR_FULL(CurveObject, UObject);
}

void FParticleCurvePair::BeforeDelete()
{
	DELE_PTR_FULL(CurveObject);
}

void FBeamTargetData::AfterRead()
{
}

void FBeamTargetData::BeforeDelete()
{
}

void FTickFunction::AfterRead()
{
}

void FTickFunction::BeforeDelete()
{
}

void FParticleSystemWorldManagerTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FParticleSystemWorldManagerTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FParticleSystemReplayFrame::AfterRead()
{
}

void FParticleSystemReplayFrame::BeforeDelete()
{
}

void FParticleEmitterReplayFrame::AfterRead()
{
}

void FParticleEmitterReplayFrame::BeforeDelete()
{
}

void FFreezablePerPlatformInt::AfterRead()
{
}

void FFreezablePerPlatformInt::BeforeDelete()
{
}

void FWeightedBlendable::AfterRead()
{
	READ_PTR_FULL(Object, UObject);
}

void FWeightedBlendable::BeforeDelete()
{
	DELE_PTR_FULL(Object);
}

void FWeightedBlendables::AfterRead()
{
}

void FWeightedBlendables::BeforeDelete()
{
}

void FPostProcessSettings::AfterRead()
{
	READ_PTR_FULL(BloomConvolutionTexture, UTexture2D);
	READ_PTR_FULL(BloomDirtMask, UTexture);
	READ_PTR_FULL(AmbientCubemap, UTextureCube);
	READ_PTR_FULL(AutoExposureBiasCurve, UCurveFloat);
	READ_PTR_FULL(AutoExposureMeterMask, UTexture);
	READ_PTR_FULL(LensFlareBokehShape, UTexture);
	READ_PTR_FULL(ColorGradingLUT, UTexture);
}

void FPostProcessSettings::BeforeDelete()
{
	DELE_PTR_FULL(BloomConvolutionTexture);
	DELE_PTR_FULL(BloomDirtMask);
	DELE_PTR_FULL(AmbientCubemap);
	DELE_PTR_FULL(AutoExposureBiasCurve);
	DELE_PTR_FULL(AutoExposureMeterMask);
	DELE_PTR_FULL(LensFlareBokehShape);
	DELE_PTR_FULL(ColorGradingLUT);
}

void FMinimalViewInfo::AfterRead()
{
}

void FMinimalViewInfo::BeforeDelete()
{
}

void FTViewTarget::AfterRead()
{
	READ_PTR_FULL(Target, AActor);
	READ_PTR_FULL(PlayerState, APlayerState);
}

void FTViewTarget::BeforeDelete()
{
	DELE_PTR_FULL(Target);
	DELE_PTR_FULL(PlayerState);
}

void FCameraCacheEntry::AfterRead()
{
}

void FCameraCacheEntry::BeforeDelete()
{
}

void FInputActionSpeechMapping::AfterRead()
{
}

void FInputActionSpeechMapping::BeforeDelete()
{
}

void FInputAxisKeyMapping::AfterRead()
{
}

void FInputAxisKeyMapping::BeforeDelete()
{
}

void FInputActionKeyMapping::AfterRead()
{
}

void FInputActionKeyMapping::BeforeDelete()
{
}

void FInputAxisProperties::AfterRead()
{
}

void FInputAxisProperties::BeforeDelete()
{
}

void FInputAxisConfigEntry::AfterRead()
{
}

void FInputAxisConfigEntry::BeforeDelete()
{
}

void FKeyBind::AfterRead()
{
}

void FKeyBind::BeforeDelete()
{
}

void FPlayerMuteList::AfterRead()
{
}

void FPlayerMuteList::BeforeDelete()
{
}

void FSmartName::AfterRead()
{
}

void FSmartName::BeforeDelete()
{
}

void FPoseData::AfterRead()
{
}

void FPoseData::BeforeDelete()
{
}

void FAnimCurveBase::AfterRead()
{
}

void FAnimCurveBase::BeforeDelete()
{
}

void FPoseDataContainer::AfterRead()
{
}

void FPoseDataContainer::BeforeDelete()
{
}

void FPreviewAttachedObjectPair::AfterRead()
{
	READ_PTR_FULL(Object, UObject);
}

void FPreviewAttachedObjectPair::BeforeDelete()
{
	DELE_PTR_FULL(Object);
}

void FPreviewAssetAttachContainer::AfterRead()
{
}

void FPreviewAssetAttachContainer::BeforeDelete()
{
}

void FPreviewMeshCollectionEntry::AfterRead()
{
}

void FPreviewMeshCollectionEntry::BeforeDelete()
{
}

void FPrimitiveComponentInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

	READ_PTR_FULL(LODParent, UPrimitiveComponent);
}

void FPrimitiveComponentInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

	DELE_PTR_FULL(LODParent);
}

void FSpriteCategoryInfo::AfterRead()
{
}

void FSpriteCategoryInfo::BeforeDelete()
{
}

void FQuartzPulseOverrideStep::AfterRead()
{
}

void FQuartzPulseOverrideStep::BeforeDelete()
{
}

void FQuartzTimeSignature::AfterRead()
{
}

void FQuartzTimeSignature::BeforeDelete()
{
}

void FQuartzClockSettings::AfterRead()
{
}

void FQuartzClockSettings::BeforeDelete()
{
}

void FQuartzQuantizationBoundary::AfterRead()
{
}

void FQuartzQuantizationBoundary::BeforeDelete()
{
}

void FQuartzTransportTimeStamp::AfterRead()
{
}

void FQuartzTransportTimeStamp::BeforeDelete()
{
}

void FLevelNameAndTime::AfterRead()
{
}

void FLevelNameAndTime::BeforeDelete()
{
}

void FCompressedRichCurve::AfterRead()
{
}

void FCompressedRichCurve::BeforeDelete()
{
}

void FRigTransformConstraint::AfterRead()
{
}

void FRigTransformConstraint::BeforeDelete()
{
}

void FTransformBaseConstraint::AfterRead()
{
}

void FTransformBaseConstraint::BeforeDelete()
{
}

void FTransformBase::AfterRead()
{
}

void FTransformBase::BeforeDelete()
{
}

void FNode::AfterRead()
{
}

void FNode::BeforeDelete()
{
}

void FRootMotionSourceStatus::AfterRead()
{
}

void FRootMotionSourceStatus::BeforeDelete()
{
}

void FRootMotionFinishVelocitySettings::AfterRead()
{
}

void FRootMotionFinishVelocitySettings::BeforeDelete()
{
}

void FRootMotionSourceSettings::AfterRead()
{
}

void FRootMotionSourceSettings::BeforeDelete()
{
}

void FRootMotionMovementParams::AfterRead()
{
}

void FRootMotionMovementParams::BeforeDelete()
{
}

void FRootMotionSource::AfterRead()
{
}

void FRootMotionSource::BeforeDelete()
{
}

void FRootMotionSource_JumpForce::AfterRead()
{
	FRootMotionSource::AfterRead();

	READ_PTR_FULL(PathOffsetCurve, UCurveVector);
	READ_PTR_FULL(TimeMappingCurve, UCurveFloat);
}

void FRootMotionSource_JumpForce::BeforeDelete()
{
	FRootMotionSource::BeforeDelete();

	DELE_PTR_FULL(PathOffsetCurve);
	DELE_PTR_FULL(TimeMappingCurve);
}

void FRootMotionSource_MoveToDynamicForce::AfterRead()
{
	FRootMotionSource::AfterRead();

	READ_PTR_FULL(PathOffsetCurve, UCurveVector);
	READ_PTR_FULL(TimeMappingCurve, UCurveFloat);
}

void FRootMotionSource_MoveToDynamicForce::BeforeDelete()
{
	FRootMotionSource::BeforeDelete();

	DELE_PTR_FULL(PathOffsetCurve);
	DELE_PTR_FULL(TimeMappingCurve);
}

void FRootMotionSource_MoveToForce::AfterRead()
{
	FRootMotionSource::AfterRead();

	READ_PTR_FULL(PathOffsetCurve, UCurveVector);
}

void FRootMotionSource_MoveToForce::BeforeDelete()
{
	FRootMotionSource::BeforeDelete();

	DELE_PTR_FULL(PathOffsetCurve);
}

void FRootMotionSource_RadialForce::AfterRead()
{
	FRootMotionSource::AfterRead();

	READ_PTR_FULL(LocationActor, AActor);
	READ_PTR_FULL(StrengthDistanceFalloff, UCurveFloat);
	READ_PTR_FULL(StrengthOverTime, UCurveFloat);
}

void FRootMotionSource_RadialForce::BeforeDelete()
{
	FRootMotionSource::BeforeDelete();

	DELE_PTR_FULL(LocationActor);
	DELE_PTR_FULL(StrengthDistanceFalloff);
	DELE_PTR_FULL(StrengthOverTime);
}

void FRootMotionSource_ConstantForce::AfterRead()
{
	FRootMotionSource::AfterRead();

	READ_PTR_FULL(StrengthOverTime, UCurveFloat);
}

void FRootMotionSource_ConstantForce::BeforeDelete()
{
	FRootMotionSource::BeforeDelete();

	DELE_PTR_FULL(StrengthOverTime);
}

void FCameraExposureSettings::AfterRead()
{
	READ_PTR_FULL(BiasCurve, UCurveFloat);
	READ_PTR_FULL(MeterMask, UTexture);
}

void FCameraExposureSettings::BeforeDelete()
{
	DELE_PTR_FULL(BiasCurve);
	DELE_PTR_FULL(MeterMask);
}

void FGaussianSumBloomSettings::AfterRead()
{
}

void FGaussianSumBloomSettings::BeforeDelete()
{
}

void FConvolutionBloomSettings::AfterRead()
{
	READ_PTR_FULL(Texture, UTexture2D);
}

void FConvolutionBloomSettings::BeforeDelete()
{
	DELE_PTR_FULL(Texture);
}

void FLensBloomSettings::AfterRead()
{
}

void FLensBloomSettings::BeforeDelete()
{
}

void FLensImperfectionSettings::AfterRead()
{
	READ_PTR_FULL(DirtMask, UTexture);
}

void FLensImperfectionSettings::BeforeDelete()
{
	DELE_PTR_FULL(DirtMask);
}

void FLensSettings::AfterRead()
{
}

void FLensSettings::BeforeDelete()
{
}

void FFilmStockSettings::AfterRead()
{
}

void FFilmStockSettings::BeforeDelete()
{
}

void FColorGradePerRangeSettings::AfterRead()
{
}

void FColorGradePerRangeSettings::BeforeDelete()
{
}

void FColorGradingSettings::AfterRead()
{
}

void FColorGradingSettings::BeforeDelete()
{
}

void FSceneViewExtensionIsActiveFunctor::AfterRead()
{
}

void FSceneViewExtensionIsActiveFunctor::BeforeDelete()
{
}

void FClothPhysicsProperties_Legacy::AfterRead()
{
}

void FClothPhysicsProperties_Legacy::BeforeDelete()
{
}

void FClothingAssetData_Legacy::AfterRead()
{
}

void FClothingAssetData_Legacy::BeforeDelete()
{
}

void FSkeletalMeshClothBuildParams::AfterRead()
{
}

void FSkeletalMeshClothBuildParams::BeforeDelete()
{
}

void FBoneMirrorExport::AfterRead()
{
}

void FBoneMirrorExport::BeforeDelete()
{
}

void FSkeletalMeshComponentClothTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FSkeletalMeshComponentClothTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FSkeletalMeshComponentEndPhysicsTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FSkeletalMeshComponentEndPhysicsTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FVirtualBone::AfterRead()
{
}

void FVirtualBone::BeforeDelete()
{
}

void FAnimSlotGroup::AfterRead()
{
}

void FAnimSlotGroup::BeforeDelete()
{
}

void FNameMapping::AfterRead()
{
}

void FNameMapping::BeforeDelete()
{
}

void FRigConfiguration::AfterRead()
{
	READ_PTR_FULL(Rig, URig);
}

void FRigConfiguration::BeforeDelete()
{
	DELE_PTR_FULL(Rig);
}

void FBoneReductionSetting::AfterRead()
{
}

void FBoneReductionSetting::BeforeDelete()
{
}

void FReferencePose::AfterRead()
{
}

void FReferencePose::BeforeDelete()
{
}

void FBoneNode::AfterRead()
{
}

void FBoneNode::BeforeDelete()
{
}

void FSkeletonToMeshLinkup::AfterRead()
{
}

void FSkeletonToMeshLinkup::BeforeDelete()
{
}

void FSkelMeshSkinWeightInfo::AfterRead()
{
}

void FSkelMeshSkinWeightInfo::BeforeDelete()
{
}

void FSkinWeightProfileManagerTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FSkinWeightProfileManagerTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FPrecomputedSkyLightInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

}

void FPrecomputedSkyLightInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

}

void FSmartNameContainer::AfterRead()
{
}

void FSmartNameContainer::BeforeDelete()
{
}

void FSmartNameMapping::AfterRead()
{
}

void FSmartNameMapping::BeforeDelete()
{
}

void FCurveMetaData::AfterRead()
{
}

void FCurveMetaData::BeforeDelete()
{
}

void FSoundClassEditorData::AfterRead()
{
}

void FSoundClassEditorData::BeforeDelete()
{
}

void FSoundNodeEditorData::AfterRead()
{
}

void FSoundNodeEditorData::BeforeDelete()
{
}

void FSoundSubmixSpectralAnalysisBandSettings::AfterRead()
{
}

void FSoundSubmixSpectralAnalysisBandSettings::BeforeDelete()
{
}

void FSoundWaveEnvelopeDataPerSound::AfterRead()
{
	READ_PTR_FULL(SoundWave, USoundWave);
}

void FSoundWaveEnvelopeDataPerSound::BeforeDelete()
{
	DELE_PTR_FULL(SoundWave);
}

void FSoundWaveSpectralData::AfterRead()
{
}

void FSoundWaveSpectralData::BeforeDelete()
{
}

void FSoundWaveSpectralDataPerSound::AfterRead()
{
	READ_PTR_FULL(SoundWave, USoundWave);
}

void FSoundWaveSpectralDataPerSound::BeforeDelete()
{
	DELE_PTR_FULL(SoundWave);
}

void FStreamedAudioPlatformData::AfterRead()
{
}

void FStreamedAudioPlatformData::BeforeDelete()
{
}

void FSplineCurves::AfterRead()
{
	READ_PTR_FULL(MetaData, USplineMetadata);
}

void FSplineCurves::BeforeDelete()
{
	DELE_PTR_FULL(MetaData);
}

void FSplineInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

}

void FSplineInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

}

void FSplinePoint::AfterRead()
{
}

void FSplinePoint::BeforeDelete()
{
}

void FSplineMeshInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

}

void FSplineMeshInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

}

void FSplineMeshParams::AfterRead()
{
}

void FSplineMeshParams::BeforeDelete()
{
}

void FMaterialRemapIndex::AfterRead()
{
}

void FMaterialRemapIndex::BeforeDelete()
{
}

void FMeshUVChannelInfo::AfterRead()
{
}

void FMeshUVChannelInfo::BeforeDelete()
{
}

void FStaticMaterial::AfterRead()
{
	READ_PTR_FULL(MaterialInterface, UMaterialInterface);
}

void FStaticMaterial::BeforeDelete()
{
	DELE_PTR_FULL(MaterialInterface);
}

void FAssetEditorOrbitCameraPosition::AfterRead()
{
}

void FAssetEditorOrbitCameraPosition::BeforeDelete()
{
}

void FMeshSectionInfo::AfterRead()
{
}

void FMeshSectionInfo::BeforeDelete()
{
}

void FMeshSectionInfoMap::AfterRead()
{
}

void FMeshSectionInfoMap::BeforeDelete()
{
}

void FPerPlatformFloat::AfterRead()
{
}

void FPerPlatformFloat::BeforeDelete()
{
}

void FStaticMeshSourceModel::AfterRead()
{
}

void FStaticMeshSourceModel::BeforeDelete()
{
}

void FStaticMeshOptimizationSettings::AfterRead()
{
}

void FStaticMeshOptimizationSettings::BeforeDelete()
{
}

void FPaintedVertex::AfterRead()
{
}

void FPaintedVertex::BeforeDelete()
{
}

void FStaticMeshVertexColorLODData::AfterRead()
{
}

void FStaticMeshVertexColorLODData::BeforeDelete()
{
}

void FStreamingTextureBuildInfo::AfterRead()
{
}

void FStreamingTextureBuildInfo::BeforeDelete()
{
}

void FStaticMeshComponentInstanceData::AfterRead()
{
	FPrimitiveComponentInstanceData::AfterRead();

	READ_PTR_FULL(StaticMesh, UStaticMesh);
}

void FStaticMeshComponentInstanceData::BeforeDelete()
{
	FPrimitiveComponentInstanceData::BeforeDelete();

	DELE_PTR_FULL(StaticMesh);
}

void FSubsurfaceProfileStruct::AfterRead()
{
}

void FSubsurfaceProfileStruct::BeforeDelete()
{
}

void FTextureFormatSettings::AfterRead()
{
}

void FTextureFormatSettings::BeforeDelete()
{
}

void FTexturePlatformData::AfterRead()
{
}

void FTexturePlatformData::BeforeDelete()
{
}

void FTextureSource::AfterRead()
{
}

void FTextureSource::BeforeDelete()
{
}

void FTextureSourceBlock::AfterRead()
{
}

void FTextureSourceBlock::BeforeDelete()
{
}

void FTextureLODGroup::AfterRead()
{
}

void FTextureLODGroup::BeforeDelete()
{
}

void FStreamingRenderAssetPrimitiveInfo::AfterRead()
{
	READ_PTR_FULL(RenderAsset, UStreamableRenderAsset);
}

void FStreamingRenderAssetPrimitiveInfo::BeforeDelete()
{
	DELE_PTR_FULL(RenderAsset);
}

void FTimelineEventEntry::AfterRead()
{
}

void FTimelineEventEntry::BeforeDelete()
{
}

void FTimelineVectorTrack::AfterRead()
{
	READ_PTR_FULL(VectorCurve, UCurveVector);
}

void FTimelineVectorTrack::BeforeDelete()
{
	DELE_PTR_FULL(VectorCurve);
}

void FTimelineFloatTrack::AfterRead()
{
	READ_PTR_FULL(FloatCurve, UCurveFloat);
}

void FTimelineFloatTrack::BeforeDelete()
{
	DELE_PTR_FULL(FloatCurve);
}

void FTimelineLinearColorTrack::AfterRead()
{
	READ_PTR_FULL(LinearColorCurve, UCurveLinearColor);
}

void FTimelineLinearColorTrack::BeforeDelete()
{
	DELE_PTR_FULL(LinearColorCurve);
}

void FTimeline::AfterRead()
{
}

void FTimeline::BeforeDelete()
{
}

void FTTTrackBase::AfterRead()
{
}

void FTTTrackBase::BeforeDelete()
{
}

void FTTPropertyTrack::AfterRead()
{
	FTTTrackBase::AfterRead();

}

void FTTPropertyTrack::BeforeDelete()
{
	FTTTrackBase::BeforeDelete();

}

void FTTLinearColorTrack::AfterRead()
{
	FTTPropertyTrack::AfterRead();

	READ_PTR_FULL(CurveLinearColor, UCurveLinearColor);
}

void FTTLinearColorTrack::BeforeDelete()
{
	FTTPropertyTrack::BeforeDelete();

	DELE_PTR_FULL(CurveLinearColor);
}

void FTTVectorTrack::AfterRead()
{
	FTTPropertyTrack::AfterRead();

	READ_PTR_FULL(CurveVector, UCurveVector);
}

void FTTVectorTrack::BeforeDelete()
{
	FTTPropertyTrack::BeforeDelete();

	DELE_PTR_FULL(CurveVector);
}

void FTTTrackId::AfterRead()
{
}

void FTTTrackId::BeforeDelete()
{
}

void FTimeStretchCurveInstance::AfterRead()
{
}

void FTimeStretchCurveInstance::BeforeDelete()
{
}

void FTouchInputControl::AfterRead()
{
	READ_PTR_FULL(Image1, UTexture2D);
	READ_PTR_FULL(Image2, UTexture2D);
}

void FTouchInputControl::BeforeDelete()
{
	DELE_PTR_FULL(Image1);
	DELE_PTR_FULL(Image2);
}

void FHardwareCursorReference::AfterRead()
{
}

void FHardwareCursorReference::BeforeDelete()
{
}

void FVirtualTextureBuildSettings::AfterRead()
{
}

void FVirtualTextureBuildSettings::BeforeDelete()
{
}

void FVirtualTextureSpacePoolConfig::AfterRead()
{
}

void FVirtualTextureSpacePoolConfig::BeforeDelete()
{
}

void FVoiceSettings::AfterRead()
{
	READ_PTR_FULL(ComponentToAttachTo, USceneComponent);
	READ_PTR_FULL(AttenuationSettings, USoundAttenuation);
	READ_PTR_FULL(SourceEffectChain, USoundEffectSourcePresetChain);
}

void FVoiceSettings::BeforeDelete()
{
	DELE_PTR_FULL(ComponentToAttachTo);
	DELE_PTR_FULL(AttenuationSettings);
	DELE_PTR_FULL(SourceEffectChain);
}

void FEndPhysicsTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FEndPhysicsTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FStartPhysicsTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FStartPhysicsTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FLevelViewportInfo::AfterRead()
{
}

void FLevelViewportInfo::BeforeDelete()
{
}

void FHierarchicalSimplification::AfterRead()
{
}

void FHierarchicalSimplification::BeforeDelete()
{
}

void FLightmassWorldInfoSettings::AfterRead()
{
}

void FLightmassWorldInfoSettings::BeforeDelete()
{
}

void FRepAttachment::AfterRead()
{
	READ_PTR_FULL(AttachParent, AActor);
	READ_PTR_FULL(AttachComponent, USceneComponent);
}

void FRepAttachment::BeforeDelete()
{
	DELE_PTR_FULL(AttachParent);
	DELE_PTR_FULL(AttachComponent);
}

void FRepMovement::AfterRead()
{
}

void FRepMovement::BeforeDelete()
{
}

void FForceFeedbackParameters::AfterRead()
{
}

void FForceFeedbackParameters::BeforeDelete()
{
}

void FViewTargetTransitionParams::AfterRead()
{
}

void FViewTargetTransitionParams::BeforeDelete()
{
}

void FUpdateLevelStreamingLevelStatus::AfterRead()
{
}

void FUpdateLevelStreamingLevelStatus::BeforeDelete()
{
}

void FUpdateLevelVisibilityLevelInfo::AfterRead()
{
}

void FUpdateLevelVisibilityLevelInfo::BeforeDelete()
{
}

void FActiveForceFeedbackEffect::AfterRead()
{
	READ_PTR_FULL(ForceFeedbackEffect, UForceFeedbackEffect);
}

void FActiveForceFeedbackEffect::BeforeDelete()
{
	DELE_PTR_FULL(ForceFeedbackEffect);
}

void FVector_NetQuantize10::AfterRead()
{
	FVector::AfterRead();

}

void FVector_NetQuantize10::BeforeDelete()
{
	FVector::BeforeDelete();

}

void FRootMotionSourceGroup::AfterRead()
{
}

void FRootMotionSourceGroup::BeforeDelete()
{
}

void FCharacterNetworkSerializationPackedBits::AfterRead()
{
}

void FCharacterNetworkSerializationPackedBits::BeforeDelete()
{
}

void FCharacterMoveResponsePackedBits::AfterRead()
{
	FCharacterNetworkSerializationPackedBits::AfterRead();

}

void FCharacterMoveResponsePackedBits::BeforeDelete()
{
	FCharacterNetworkSerializationPackedBits::BeforeDelete();

}

void FCharacterServerMovePackedBits::AfterRead()
{
	FCharacterNetworkSerializationPackedBits::AfterRead();

}

void FCharacterServerMovePackedBits::BeforeDelete()
{
	FCharacterNetworkSerializationPackedBits::BeforeDelete();

}

void FRepRootMotionMontage::AfterRead()
{
	READ_PTR_FULL(AnimMontage, UAnimMontage);
	READ_PTR_FULL(MovementBase, UPrimitiveComponent);
}

void FRepRootMotionMontage::BeforeDelete()
{
	DELE_PTR_FULL(AnimMontage);
	DELE_PTR_FULL(MovementBase);
}

void FSimulatedRootMotionReplicatedMove::AfterRead()
{
}

void FSimulatedRootMotionReplicatedMove::BeforeDelete()
{
}

void FBasedMovementInfo::AfterRead()
{
	READ_PTR_FULL(MovementBase, UPrimitiveComponent);
}

void FBasedMovementInfo::BeforeDelete()
{
	DELE_PTR_FULL(MovementBase);
}

void FDamageEvent::AfterRead()
{
	READ_PTR_FULL(DamageTypeClass, UClass);
}

void FDamageEvent::BeforeDelete()
{
	DELE_PTR_FULL(DamageTypeClass);
}

void FPointDamageEvent::AfterRead()
{
	FDamageEvent::AfterRead();

}

void FPointDamageEvent::BeforeDelete()
{
	FDamageEvent::BeforeDelete();

}

void FWalkableSlopeOverride::AfterRead()
{
}

void FWalkableSlopeOverride::BeforeDelete()
{
}

void FCollisionResponseContainer::AfterRead()
{
}

void FCollisionResponseContainer::BeforeDelete()
{
}

void FResponseChannel::AfterRead()
{
}

void FResponseChannel::BeforeDelete()
{
}

void FCollisionResponse::AfterRead()
{
}

void FCollisionResponse::BeforeDelete()
{
}

void FDebugTextInfo::AfterRead()
{
	READ_PTR_FULL(SrcActor, AActor);
	READ_PTR_FULL(Font, UFont);
}

void FDebugTextInfo::BeforeDelete()
{
	DELE_PTR_FULL(SrcActor);
	DELE_PTR_FULL(Font);
}

void FInterpControlPoint::AfterRead()
{
}

void FInterpControlPoint::BeforeDelete()
{
}

void FPlatformInterfaceData::AfterRead()
{
	READ_PTR_FULL(ObjectValue, UObject);
}

void FPlatformInterfaceData::BeforeDelete()
{
	DELE_PTR_FULL(ObjectValue);
}

void FPlatformInterfaceDelegateResult::AfterRead()
{
}

void FPlatformInterfaceDelegateResult::BeforeDelete()
{
}

void FDebugFloatHistory::AfterRead()
{
}

void FDebugFloatHistory::BeforeDelete()
{
}

void FLatentActionInfo::AfterRead()
{
	READ_PTR_FULL(CallbackTarget, UObject);
}

void FLatentActionInfo::BeforeDelete()
{
	DELE_PTR_FULL(CallbackTarget);
}

void FTimerHandle::AfterRead()
{
}

void FTimerHandle::BeforeDelete()
{
}

void FCollisionProfileName::AfterRead()
{
}

void FCollisionProfileName::BeforeDelete()
{
}

void FGenericStruct::AfterRead()
{
}

void FGenericStruct::BeforeDelete()
{
}

void FUserActivity::AfterRead()
{
}

void FUserActivity::BeforeDelete()
{
}

void FScalarParameterValue::AfterRead()
{
}

void FScalarParameterValue::BeforeDelete()
{
}

void FVectorParameterValue::AfterRead()
{
}

void FVectorParameterValue::BeforeDelete()
{
}

void FTextureParameterValue::AfterRead()
{
	READ_PTR_FULL(ParameterValue, UTexture);
}

void FTextureParameterValue::BeforeDelete()
{
	DELE_PTR_FULL(ParameterValue);
}

void FFontParameterValue::AfterRead()
{
	READ_PTR_FULL(FontValue, UFont);
}

void FFontParameterValue::BeforeDelete()
{
	DELE_PTR_FULL(FontValue);
}

void FStaticParameterBase::AfterRead()
{
}

void FStaticParameterBase::BeforeDelete()
{
}

void FStaticSwitchParameter::AfterRead()
{
	FStaticParameterBase::AfterRead();

}

void FStaticSwitchParameter::BeforeDelete()
{
	FStaticParameterBase::BeforeDelete();

}

void FStaticComponentMaskParameter::AfterRead()
{
	FStaticParameterBase::AfterRead();

}

void FStaticComponentMaskParameter::BeforeDelete()
{
	FStaticParameterBase::BeforeDelete();

}

void FRuntimeVirtualTextureParameterValue::AfterRead()
{
	READ_PTR_FULL(ParameterValue, URuntimeVirtualTexture);
}

void FRuntimeVirtualTextureParameterValue::BeforeDelete()
{
	DELE_PTR_FULL(ParameterValue);
}

void FLightmassMaterialInterfaceSettings::AfterRead()
{
}

void FLightmassMaterialInterfaceSettings::BeforeDelete()
{
}

void FMaterialTextureInfo::AfterRead()
{
}

void FMaterialTextureInfo::BeforeDelete()
{
}

void FMaterialInstanceBasePropertyOverrides::AfterRead()
{
}

void FMaterialInstanceBasePropertyOverrides::BeforeDelete()
{
}

void FStaticTerrainLayerWeightParameter::AfterRead()
{
	FStaticParameterBase::AfterRead();

}

void FStaticTerrainLayerWeightParameter::BeforeDelete()
{
	FStaticParameterBase::BeforeDelete();

}

void FMaterialLayersFunctions::AfterRead()
{
}

void FMaterialLayersFunctions::BeforeDelete()
{
}

void FStaticMaterialLayersParameter::AfterRead()
{
	FStaticParameterBase::AfterRead();

}

void FStaticMaterialLayersParameter::BeforeDelete()
{
	FStaticParameterBase::BeforeDelete();

}

void FStaticParameterSet::AfterRead()
{
}

void FStaticParameterSet::BeforeDelete()
{
}

void FCollectionParameterBase::AfterRead()
{
}

void FCollectionParameterBase::BeforeDelete()
{
}

void FCollectionScalarParameter::AfterRead()
{
	FCollectionParameterBase::AfterRead();

}

void FCollectionScalarParameter::BeforeDelete()
{
	FCollectionParameterBase::BeforeDelete();

}

void FCollectionVectorParameter::AfterRead()
{
	FCollectionParameterBase::AfterRead();

}

void FCollectionVectorParameter::BeforeDelete()
{
	FCollectionParameterBase::BeforeDelete();

}

void FInterpGroupActorInfo::AfterRead()
{
}

void FInterpGroupActorInfo::BeforeDelete()
{
}

void FCameraCutInfo::AfterRead()
{
}

void FCameraCutInfo::BeforeDelete()
{
}

void FDelegateArray::AfterRead()
{
}

void FDelegateArray::BeforeDelete()
{
}

void FPurchaseInfo::AfterRead()
{
}

void FPurchaseInfo::BeforeDelete()
{
}

void FNavAgentSelector::AfterRead()
{
}

void FNavAgentSelector::BeforeDelete()
{
}

void FNavigationLinkBase::AfterRead()
{
	READ_PTR_FULL(AreaClass, UClass);
}

void FNavigationLinkBase::BeforeDelete()
{
	DELE_PTR_FULL(AreaClass);
}

void FNavigationLink::AfterRead()
{
	FNavigationLinkBase::AfterRead();

}

void FNavigationLink::BeforeDelete()
{
	FNavigationLinkBase::BeforeDelete();

}

void FNavigationSegmentLink::AfterRead()
{
	FNavigationLinkBase::AfterRead();

}

void FNavigationSegmentLink::BeforeDelete()
{
	FNavigationLinkBase::BeforeDelete();

}

void FNetworkEmulationProfileDescription::AfterRead()
{
}

void FNetworkEmulationProfileDescription::BeforeDelete()
{
}

void FNodeItem::AfterRead()
{
}

void FNodeItem::BeforeDelete()
{
}

void FBeamModifierOptions::AfterRead()
{
}

void FBeamModifierOptions::BeforeDelete()
{
}

void FParticleRandomSeedInfo::AfterRead()
{
}

void FParticleRandomSeedInfo::BeforeDelete()
{
}

void FParticleEvent_GenerateInfo::AfterRead()
{
}

void FParticleEvent_GenerateInfo::BeforeDelete()
{
}

void FLocationBoneSocketInfo::AfterRead()
{
}

void FLocationBoneSocketInfo::BeforeDelete()
{
}

void FOrbitOptions::AfterRead()
{
}

void FOrbitOptions::BeforeDelete()
{
}

void FEmitterDynamicParameter::AfterRead()
{
}

void FEmitterDynamicParameter::BeforeDelete()
{
}

void FParticleBurst::AfterRead()
{
}

void FParticleBurst::BeforeDelete()
{
}

void FGPUSpriteLocalVectorFieldInfo::AfterRead()
{
	READ_PTR_FULL(Field, UVectorField);
}

void FGPUSpriteLocalVectorFieldInfo::BeforeDelete()
{
	DELE_PTR_FULL(Field);
}

void FFloatDistribution::AfterRead()
{
}

void FFloatDistribution::BeforeDelete()
{
}

void FGPUSpriteEmitterInfo::AfterRead()
{
	READ_PTR_FULL(RequiredModule, UParticleModuleRequired);
	READ_PTR_FULL(SpawnModule, UParticleModuleSpawn);
	READ_PTR_FULL(SpawnPerUnitModule, UParticleModuleSpawnPerUnit);
}

void FGPUSpriteEmitterInfo::BeforeDelete()
{
	DELE_PTR_FULL(RequiredModule);
	DELE_PTR_FULL(SpawnModule);
	DELE_PTR_FULL(SpawnPerUnitModule);
}

void FGPUSpriteResourceData::AfterRead()
{
}

void FGPUSpriteResourceData::BeforeDelete()
{
}

void FParticleSystemLOD::AfterRead()
{
}

void FParticleSystemLOD::BeforeDelete()
{
}

void FLODSoloTrack::AfterRead()
{
}

void FLODSoloTrack::BeforeDelete()
{
}

void FNamedEmitterMaterial::AfterRead()
{
	READ_PTR_FULL(Material, UMaterialInterface);
}

void FNamedEmitterMaterial::BeforeDelete()
{
	DELE_PTR_FULL(Material);
}

void FParticleSysParam::AfterRead()
{
	READ_PTR_FULL(Actor, AActor);
	READ_PTR_FULL(Material, UMaterialInterface);
}

void FParticleSysParam::BeforeDelete()
{
	DELE_PTR_FULL(Actor);
	DELE_PTR_FULL(Material);
}

void FSolverIterations::AfterRead()
{
}

void FSolverIterations::BeforeDelete()
{
}

void FKShapeElem::AfterRead()
{
}

void FKShapeElem::BeforeDelete()
{
}

void FKSphereElem::AfterRead()
{
	FKShapeElem::AfterRead();

}

void FKSphereElem::BeforeDelete()
{
	FKShapeElem::BeforeDelete();

}

void FKBoxElem::AfterRead()
{
	FKShapeElem::AfterRead();

}

void FKBoxElem::BeforeDelete()
{
	FKShapeElem::BeforeDelete();

}

void FKSphylElem::AfterRead()
{
	FKShapeElem::AfterRead();

}

void FKSphylElem::BeforeDelete()
{
	FKShapeElem::BeforeDelete();

}

void FKConvexElem::AfterRead()
{
	FKShapeElem::AfterRead();

}

void FKConvexElem::BeforeDelete()
{
	FKShapeElem::BeforeDelete();

}

void FKTaperedCapsuleElem::AfterRead()
{
	FKShapeElem::AfterRead();

}

void FKTaperedCapsuleElem::BeforeDelete()
{
	FKShapeElem::BeforeDelete();

}

void FKAggregateGeom::AfterRead()
{
}

void FKAggregateGeom::BeforeDelete()
{
}

void FPhysicalAnimationData::AfterRead()
{
}

void FPhysicalAnimationData::BeforeDelete()
{
}

void FPhysicalAnimationProfile::AfterRead()
{
}

void FPhysicalAnimationProfile::BeforeDelete()
{
}

void FConstraintInstanceBase::AfterRead()
{
}

void FConstraintInstanceBase::BeforeDelete()
{
}

void FConstraintBaseParams::AfterRead()
{
}

void FConstraintBaseParams::BeforeDelete()
{
}

void FLinearConstraint::AfterRead()
{
	FConstraintBaseParams::AfterRead();

}

void FLinearConstraint::BeforeDelete()
{
	FConstraintBaseParams::BeforeDelete();

}

void FConeConstraint::AfterRead()
{
	FConstraintBaseParams::AfterRead();

}

void FConeConstraint::BeforeDelete()
{
	FConstraintBaseParams::BeforeDelete();

}

void FTwistConstraint::AfterRead()
{
	FConstraintBaseParams::AfterRead();

}

void FTwistConstraint::BeforeDelete()
{
	FConstraintBaseParams::BeforeDelete();

}

void FConstraintDrive::AfterRead()
{
}

void FConstraintDrive::BeforeDelete()
{
}

void FLinearDriveConstraint::AfterRead()
{
}

void FLinearDriveConstraint::BeforeDelete()
{
}

void FAngularDriveConstraint::AfterRead()
{
}

void FAngularDriveConstraint::BeforeDelete()
{
}

void FConstraintProfileProperties::AfterRead()
{
}

void FConstraintProfileProperties::BeforeDelete()
{
}

void FConstraintInstance::AfterRead()
{
	FConstraintInstanceBase::AfterRead();

}

void FConstraintInstance::BeforeDelete()
{
	FConstraintInstanceBase::BeforeDelete();

}

void FPhysicsConstraintProfileHandle::AfterRead()
{
}

void FPhysicsConstraintProfileHandle::BeforeDelete()
{
}

void FPhysicalSurfaceName::AfterRead()
{
}

void FPhysicalSurfaceName::BeforeDelete()
{
}

void FBroadphaseSettings::AfterRead()
{
}

void FBroadphaseSettings::BeforeDelete()
{
}

void FChaosPhysicsSettings::AfterRead()
{
}

void FChaosPhysicsSettings::BeforeDelete()
{
}

void FEngineShowFlagsSetting::AfterRead()
{
}

void FEngineShowFlagsSetting::BeforeDelete()
{
}

void FPrimaryAssetRules::AfterRead()
{
}

void FPrimaryAssetRules::BeforeDelete()
{
}

void FBPVariableMetaDataEntry::AfterRead()
{
}

void FBPVariableMetaDataEntry::BeforeDelete()
{
}

void FBoneFilter::AfterRead()
{
}

void FBoneFilter::BeforeDelete()
{
}

void FSkeletalMeshOptimizationSettings::AfterRead()
{
}

void FSkeletalMeshOptimizationSettings::BeforeDelete()
{
}

void FSkeletalMeshLODGroupSettings::AfterRead()
{
	READ_PTR_FULL(BakePose, UAnimSequence);
}

void FSkeletalMeshLODGroupSettings::BeforeDelete()
{
	DELE_PTR_FULL(BakePose);
}

void FTentDistribution::AfterRead()
{
}

void FTentDistribution::BeforeDelete()
{
}

void FSoundModulationDestinationSettings::AfterRead()
{
	READ_PTR_FULL(Modulator, USoundModulatorBase);
}

void FSoundModulationDestinationSettings::BeforeDelete()
{
	DELE_PTR_FULL(Modulator);
}

void FSoundModulationDefaultSettings::AfterRead()
{
}

void FSoundModulationDefaultSettings::BeforeDelete()
{
}

void FSoundClassProperties::AfterRead()
{
	READ_PTR_FULL(DefaultSubmix, USoundSubmix);
}

void FSoundClassProperties::BeforeDelete()
{
	DELE_PTR_FULL(DefaultSubmix);
}

void FPassiveSoundMixModifier::AfterRead()
{
	READ_PTR_FULL(SoundMix, USoundMix);
}

void FPassiveSoundMixModifier::BeforeDelete()
{
	DELE_PTR_FULL(SoundMix);
}

void FSourceEffectChainEntry::AfterRead()
{
	READ_PTR_FULL(preset, USoundEffectSourcePreset);
}

void FSourceEffectChainEntry::BeforeDelete()
{
	DELE_PTR_FULL(preset);
}

void FSoundGroup::AfterRead()
{
}

void FSoundGroup::BeforeDelete()
{
}

void FAudioEffectParameters::AfterRead()
{
}

void FAudioEffectParameters::BeforeDelete()
{
}

void FAudioEQEffect::AfterRead()
{
	FAudioEffectParameters::AfterRead();

}

void FAudioEQEffect::BeforeDelete()
{
	FAudioEffectParameters::BeforeDelete();

}

void FSoundClassAdjuster::AfterRead()
{
	READ_PTR_FULL(SoundClassObject, USoundClass);
}

void FSoundClassAdjuster::BeforeDelete()
{
	DELE_PTR_FULL(SoundClassObject);
}

void FDistanceDatum::AfterRead()
{
}

void FDistanceDatum::BeforeDelete()
{
}

void FModulatorContinuousParams::AfterRead()
{
}

void FModulatorContinuousParams::BeforeDelete()
{
}

void FEquirectProps::AfterRead()
{
}

void FEquirectProps::BeforeDelete()
{
}

void FTTEventTrack::AfterRead()
{
	FTTTrackBase::AfterRead();

	READ_PTR_FULL(CurveKeys, UCurveFloat);
}

void FTTEventTrack::BeforeDelete()
{
	FTTTrackBase::BeforeDelete();

	DELE_PTR_FULL(CurveKeys);
}

void FTTFloatTrack::AfterRead()
{
	FTTPropertyTrack::AfterRead();

	READ_PTR_FULL(CurveFloat, UCurveFloat);
}

void FTTFloatTrack::BeforeDelete()
{
	FTTPropertyTrack::BeforeDelete();

	DELE_PTR_FULL(CurveFloat);
}

void FVectorDistribution::AfterRead()
{
}

void FVectorDistribution::BeforeDelete()
{
}

void FVector4Distribution::AfterRead()
{
}

void FVector4Distribution::BeforeDelete()
{
}

void FFloatRK4SpringInterpolator::AfterRead()
{
}

void FFloatRK4SpringInterpolator::BeforeDelete()
{
}

void FVectorRK4SpringInterpolator::AfterRead()
{
}

void FVectorRK4SpringInterpolator::BeforeDelete()
{
}

void FFormatArgumentData::AfterRead()
{
}

void FFormatArgumentData::BeforeDelete()
{
}

void FMaterialAttributesInput::AfterRead()
{
	FExpressionInput::AfterRead();

}

void FMaterialAttributesInput::BeforeDelete()
{
	FExpressionInput::BeforeDelete();

}

void FMaterialInput::AfterRead()
{
}

void FMaterialInput::BeforeDelete()
{
}

void FColorMaterialInput::AfterRead()
{
	FMaterialInput::AfterRead();

}

void FColorMaterialInput::BeforeDelete()
{
	FMaterialInput::BeforeDelete();

}

void FScalarMaterialInput::AfterRead()
{
	FMaterialInput::AfterRead();

}

void FScalarMaterialInput::BeforeDelete()
{
	FMaterialInput::BeforeDelete();

}

void FShadingModelMaterialInput::AfterRead()
{
	FMaterialInput::AfterRead();

}

void FShadingModelMaterialInput::BeforeDelete()
{
	FMaterialInput::BeforeDelete();

}

void FVectorMaterialInput::AfterRead()
{
	FMaterialInput::AfterRead();

}

void FVectorMaterialInput::BeforeDelete()
{
	FMaterialInput::BeforeDelete();

}

void FVector2MaterialInput::AfterRead()
{
	FMaterialInput::AfterRead();

}

void FVector2MaterialInput::BeforeDelete()
{
	FMaterialInput::BeforeDelete();

}

void FBranchingPointNotifyPayload::AfterRead()
{
}

void FBranchingPointNotifyPayload::BeforeDelete()
{
}

void FUniqueNetIdRepl::AfterRead()
{
	FUniqueNetIdWrapper::AfterRead();

}

void FUniqueNetIdRepl::BeforeDelete()
{
	FUniqueNetIdWrapper::BeforeDelete();

}

void FChannelDefinition::AfterRead()
{
	READ_PTR_FULL(ChannelClass, UClass);
}

void FChannelDefinition::BeforeDelete()
{
	DELE_PTR_FULL(ChannelClass);
}

void FActorTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FActorTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FActorComponentTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FActorComponentTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FSimpleMemberReference::AfterRead()
{
	READ_PTR_FULL(MemberParent, UObject);
}

void FSimpleMemberReference::BeforeDelete()
{
	DELE_PTR_FULL(MemberParent);
}

void FSoundConcurrencySettings::AfterRead()
{
}

void FSoundConcurrencySettings::BeforeDelete()
{
}

void FSoundModulationDefaultRoutingSettings::AfterRead()
{
	FSoundModulationDefaultSettings::AfterRead();

}

void FSoundModulationDefaultRoutingSettings::BeforeDelete()
{
	FSoundModulationDefaultSettings::BeforeDelete();

}

void FSoundSubmixSendInfo::AfterRead()
{
	READ_PTR_FULL(SoundSubmix, USoundSubmixBase);
}

void FSoundSubmixSendInfo::BeforeDelete()
{
	DELE_PTR_FULL(SoundSubmix);
}

void FSoundSourceBusSendInfo::AfterRead()
{
	READ_PTR_FULL(SoundSourceBus, USoundSourceBus);
	READ_PTR_FULL(AudioBus, UAudioBus);
}

void FSoundSourceBusSendInfo::BeforeDelete()
{
	DELE_PTR_FULL(SoundSourceBus);
	DELE_PTR_FULL(AudioBus);
}

void FGeomSelection::AfterRead()
{
}

void FGeomSelection::BeforeDelete()
{
}

void FStreamingLevelsToConsider::AfterRead()
{
}

void FStreamingLevelsToConsider::BeforeDelete()
{
}

void FLevelCollection::AfterRead()
{
	READ_PTR_FULL(GameState, AGameStateBase);
	READ_PTR_FULL(NetDriver, UNetDriver);
	READ_PTR_FULL(DemoNetDriver, UDemoNetDriver);
	READ_PTR_FULL(PersistentLevel, ULevel);
}

void FLevelCollection::BeforeDelete()
{
	DELE_PTR_FULL(GameState);
	DELE_PTR_FULL(NetDriver);
	DELE_PTR_FULL(DemoNetDriver);
	DELE_PTR_FULL(PersistentLevel);
}

void FPSCPoolElem::AfterRead()
{
	READ_PTR_FULL(PSC, UParticleSystemComponent);
}

void FPSCPoolElem::BeforeDelete()
{
	DELE_PTR_FULL(PSC);
}

void FPSCPool::AfterRead()
{
}

void FPSCPool::BeforeDelete()
{
}

void FWorldPSCPool::AfterRead()
{
}

void FWorldPSCPool::BeforeDelete()
{
}

void FLightingChannels::AfterRead()
{
}

void FLightingChannels::BeforeDelete()
{
}

void FCustomPrimitiveData::AfterRead()
{
}

void FCustomPrimitiveData::BeforeDelete()
{
}

void FBodyInstance::AfterRead()
{
	FBodyInstanceCore::AfterRead();

	READ_PTR_FULL(PhysMaterialOverride, UPhysicalMaterial);
}

void FBodyInstance::BeforeDelete()
{
	FBodyInstanceCore::BeforeDelete();

	DELE_PTR_FULL(PhysMaterialOverride);
}

void FVertexOffsetUsage::AfterRead()
{
}

void FVertexOffsetUsage::BeforeDelete()
{
}

void FSkelMeshComponentLODInfo::AfterRead()
{
}

void FSkelMeshComponentLODInfo::BeforeDelete()
{
}

void FSingleAnimationPlayData::AfterRead()
{
	READ_PTR_FULL(AnimToPlay, UAnimationAsset);
}

void FSingleAnimationPlayData::BeforeDelete()
{
	DELE_PTR_FULL(AnimToPlay);
}

void FAnimNotifyEventReference::AfterRead()
{
	READ_PTR_FULL(NotifySource, UObject);
}

void FAnimNotifyEventReference::BeforeDelete()
{
	DELE_PTR_FULL(NotifySource);
}

void FAnimNotifyArray::AfterRead()
{
}

void FAnimNotifyArray::BeforeDelete()
{
}

void FAnimNotifyQueue::AfterRead()
{
}

void FAnimNotifyQueue::BeforeDelete()
{
}

void FAnimLinkableElement::AfterRead()
{
	READ_PTR_FULL(LinkedMontage, UAnimMontage);
	READ_PTR_FULL(LinkedSequence, UAnimSequenceBase);
}

void FAnimLinkableElement::BeforeDelete()
{
	DELE_PTR_FULL(LinkedMontage);
	DELE_PTR_FULL(LinkedSequence);
}

void FAnimNotifyEvent::AfterRead()
{
	FAnimLinkableElement::AfterRead();

	READ_PTR_FULL(Notify, UAnimNotify);
	READ_PTR_FULL(NotifyStateClass, UAnimNotifyState);
}

void FAnimNotifyEvent::BeforeDelete()
{
	FAnimLinkableElement::BeforeDelete();

	DELE_PTR_FULL(Notify);
	DELE_PTR_FULL(NotifyStateClass);
}

void FStaticMeshComponentLODInfo::AfterRead()
{
}

void FStaticMeshComponentLODInfo::BeforeDelete()
{
}

void FSkeletalMaterial::AfterRead()
{
	READ_PTR_FULL(MaterialInterface, UMaterialInterface);
}

void FSkeletalMaterial::BeforeDelete()
{
	DELE_PTR_FULL(MaterialInterface);
}

void FBoneMirrorInfo::AfterRead()
{
}

void FBoneMirrorInfo::BeforeDelete()
{
}

void FBoneReference::AfterRead()
{
}

void FBoneReference::BeforeDelete()
{
}

void FSkeletalMeshLODInfo::AfterRead()
{
	READ_PTR_FULL(BakePose, UAnimSequence);
	READ_PTR_FULL(BakePoseOverride, UAnimSequence);
}

void FSkeletalMeshLODInfo::BeforeDelete()
{
	DELE_PTR_FULL(BakePose);
	DELE_PTR_FULL(BakePoseOverride);
}

void FPerPlatformInt::AfterRead()
{
}

void FPerPlatformInt::BeforeDelete()
{
}

void FPerPlatformBool::AfterRead()
{
}

void FPerPlatformBool::BeforeDelete()
{
}

void FSkeletalMeshSamplingRegionMaterialFilter::AfterRead()
{
}

void FSkeletalMeshSamplingRegionMaterialFilter::BeforeDelete()
{
}

void FSkeletalMeshSamplingRegionBoneFilter::AfterRead()
{
}

void FSkeletalMeshSamplingRegionBoneFilter::BeforeDelete()
{
}

void FSkeletalMeshSamplingRegion::AfterRead()
{
}

void FSkeletalMeshSamplingRegion::BeforeDelete()
{
}

void FSkeletalMeshSamplingLODBuiltData::AfterRead()
{
}

void FSkeletalMeshSamplingLODBuiltData::BeforeDelete()
{
}

void FSkeletalMeshSamplingRegionBuiltData::AfterRead()
{
}

void FSkeletalMeshSamplingRegionBuiltData::BeforeDelete()
{
}

void FSkeletalMeshSamplingBuiltData::AfterRead()
{
}

void FSkeletalMeshSamplingBuiltData::BeforeDelete()
{
}

void FSkeletalMeshSamplingInfo::AfterRead()
{
}

void FSkeletalMeshSamplingInfo::BeforeDelete()
{
}

void FSkinWeightProfileInfo::AfterRead()
{
}

void FSkinWeightProfileInfo::BeforeDelete()
{
}

void FAudioComponentParam::AfterRead()
{
	READ_PTR_FULL(SoundWaveParam, USoundWave);
}

void FAudioComponentParam::BeforeDelete()
{
	DELE_PTR_FULL(SoundWaveParam);
}

void FAttenuationSubmixSendSettings::AfterRead()
{
	READ_PTR_FULL(Submix, USoundSubmixBase);
}

void FAttenuationSubmixSendSettings::BeforeDelete()
{
	DELE_PTR_FULL(Submix);
}

void FSoundAttenuationPluginSettings::AfterRead()
{
}

void FSoundAttenuationPluginSettings::BeforeDelete()
{
}

void FSoundAttenuationSettings::AfterRead()
{
	FBaseAttenuationSettings::AfterRead();

}

void FSoundAttenuationSettings::BeforeDelete()
{
	FBaseAttenuationSettings::BeforeDelete();

}

void FFindFloorResult::AfterRead()
{
}

void FFindFloorResult::BeforeDelete()
{
}

void FCharacterMovementComponentPostPhysicsTickFunction::AfterRead()
{
	FTickFunction::AfterRead();

}

void FCharacterMovementComponentPostPhysicsTickFunction::BeforeDelete()
{
	FTickFunction::BeforeDelete();

}

void FReverbSettings::AfterRead()
{
	READ_PTR_FULL(ReverbEffect, UReverbEffect);
	READ_PTR_FULL(ReverbPluginEffect, USoundEffectSubmixPreset);
}

void FReverbSettings::BeforeDelete()
{
	DELE_PTR_FULL(ReverbEffect);
	DELE_PTR_FULL(ReverbPluginEffect);
}

void FInteriorSettings::AfterRead()
{
}

void FInteriorSettings::BeforeDelete()
{
}

void FNetViewer::AfterRead()
{
	READ_PTR_FULL(Connection, UNetConnection);
	READ_PTR_FULL(InViewer, AActor);
	READ_PTR_FULL(ViewTarget, AActor);
}

void FNetViewer::BeforeDelete()
{
	DELE_PTR_FULL(Connection);
	DELE_PTR_FULL(InViewer);
	DELE_PTR_FULL(ViewTarget);
}

void FBPComponentClassOverride::AfterRead()
{
	READ_PTR_FULL(ComponentClass, UClass);
}

void FBPComponentClassOverride::BeforeDelete()
{
	DELE_PTR_FULL(ComponentClass);
}

void FSoundWaveSpectralDataEntry::AfterRead()
{
}

void FSoundWaveSpectralDataEntry::BeforeDelete()
{
}

void FSoundWaveSpectralTimeData::AfterRead()
{
}

void FSoundWaveSpectralTimeData::BeforeDelete()
{
}

void FSoundWaveEnvelopeTimeData::AfterRead()
{
}

void FSoundWaveEnvelopeTimeData::BeforeDelete()
{
}

void FSubtitleCue::AfterRead()
{
}

void FSubtitleCue::BeforeDelete()
{
}

void FInterpolationParameter::AfterRead()
{
}

void FInterpolationParameter::BeforeDelete()
{
}

void FPerBoneInterpolation::AfterRead()
{
}

void FPerBoneInterpolation::BeforeDelete()
{
}

void FBlendSample::AfterRead()
{
	READ_PTR_FULL(Animation, UAnimSequence);
}

void FBlendSample::BeforeDelete()
{
	DELE_PTR_FULL(Animation);
}

void FEditorElement::AfterRead()
{
}

void FEditorElement::BeforeDelete()
{
}

void FBlendParameter::AfterRead()
{
}

void FBlendParameter::BeforeDelete()
{
}

void FCustomAttributeSetting::AfterRead()
{
}

void FCustomAttributeSetting::BeforeDelete()
{
}

void FBakedStateExitTransition::AfterRead()
{
}

void FBakedStateExitTransition::BeforeDelete()
{
}

void FBakedAnimationState::AfterRead()
{
}

void FBakedAnimationState::BeforeDelete()
{
}

void FAnimationStateBase::AfterRead()
{
}

void FAnimationStateBase::BeforeDelete()
{
}

void FAnimationTransitionBetweenStates::AfterRead()
{
	FAnimationStateBase::AfterRead();

	READ_PTR_FULL(CustomCurve, UCurveFloat);
	READ_PTR_FULL(BlendProfile, UBlendProfile);
}

void FAnimationTransitionBetweenStates::BeforeDelete()
{
	FAnimationStateBase::BeforeDelete();

	DELE_PTR_FULL(CustomCurve);
	DELE_PTR_FULL(BlendProfile);
}

void FBakedAnimationStateMachine::AfterRead()
{
}

void FBakedAnimationStateMachine::BeforeDelete()
{
}

void FTimeStretchCurveMarker::AfterRead()
{
}

void FTimeStretchCurveMarker::BeforeDelete()
{
}

void FTimeStretchCurve::AfterRead()
{
}

void FTimeStretchCurve::BeforeDelete()
{
}

void FStringCurveKey::AfterRead()
{
}

void FStringCurveKey::BeforeDelete()
{
}

void FStringCurve::AfterRead()
{
	FIndexedCurve::AfterRead();

}

void FStringCurve::BeforeDelete()
{
	FIndexedCurve::BeforeDelete();

}

void FBakedStringCustomAttribute::AfterRead()
{
}

void FBakedStringCustomAttribute::BeforeDelete()
{
}

void FIntegralKey::AfterRead()
{
}

void FIntegralKey::BeforeDelete()
{
}

void FIntegralCurve::AfterRead()
{
	FIndexedCurve::AfterRead();

}

void FIntegralCurve::BeforeDelete()
{
	FIndexedCurve::BeforeDelete();

}

void FBakedIntegerCustomAttribute::AfterRead()
{
}

void FBakedIntegerCustomAttribute::BeforeDelete()
{
}

void FSimpleCurveKey::AfterRead()
{
}

void FSimpleCurveKey::BeforeDelete()
{
}

void FSimpleCurve::AfterRead()
{
	FRealCurve::AfterRead();

}

void FSimpleCurve::BeforeDelete()
{
	FRealCurve::BeforeDelete();

}

void FBakedFloatCustomAttribute::AfterRead()
{
}

void FBakedFloatCustomAttribute::BeforeDelete()
{
}

void FBakedCustomAttributePerBoneData::AfterRead()
{
}

void FBakedCustomAttributePerBoneData::BeforeDelete()
{
}

void FBuilderPoly::AfterRead()
{
}

void FBuilderPoly::BeforeDelete()
{
}

void FActiveCameraShakeInfo::AfterRead()
{
	READ_PTR_FULL(ShakeInstance, UCameraShakeBase);
}

void FActiveCameraShakeInfo::BeforeDelete()
{
	DELE_PTR_FULL(ShakeInstance);
}

void FPooledCameraShakes::AfterRead()
{
}

void FPooledCameraShakes::BeforeDelete()
{
}

void FFOscillator::AfterRead()
{
}

void FFOscillator::BeforeDelete()
{
}

void FROscillator::AfterRead()
{
}

void FROscillator::BeforeDelete()
{
}

void FCollisionResponseTemplate::AfterRead()
{
}

void FCollisionResponseTemplate::BeforeDelete()
{
}

void FCustomChannelSetup::AfterRead()
{
}

void FCustomChannelSetup::BeforeDelete()
{
}

void FCustomProfile::AfterRead()
{
}

void FCustomProfile::BeforeDelete()
{
}

void FAnimNode_Base::AfterRead()
{
}

void FAnimNode_Base::BeforeDelete()
{
}

void FInputRange::AfterRead()
{
}

void FInputRange::BeforeDelete()
{
}

void FInputScaleBiasClamp::AfterRead()
{
}

void FInputScaleBiasClamp::BeforeDelete()
{
}

void FAlphaBlend::AfterRead()
{
	READ_PTR_FULL(CustomCurve, UCurveFloat);
}

void FAlphaBlend::BeforeDelete()
{
	DELE_PTR_FULL(CustomCurve);
}

void FInputAlphaBoolBlend::AfterRead()
{
	READ_PTR_FULL(CustomCurve, UCurveFloat);
}

void FInputAlphaBoolBlend::BeforeDelete()
{
	DELE_PTR_FULL(CustomCurve);
}

void FInputScaleBias::AfterRead()
{
}

void FInputScaleBias::BeforeDelete()
{
}

void FPoseLinkBase::AfterRead()
{
}

void FPoseLinkBase::BeforeDelete()
{
}

void FComponentSpacePoseLink::AfterRead()
{
	FPoseLinkBase::AfterRead();

}

void FComponentSpacePoseLink::BeforeDelete()
{
	FPoseLinkBase::BeforeDelete();

}

void FAnimInstanceProxy::AfterRead()
{
}

void FAnimInstanceProxy::BeforeDelete()
{
}

void FKeyHandleLookupTable::AfterRead()
{
}

void FKeyHandleLookupTable::BeforeDelete()
{
}

void FTableRowBase::AfterRead()
{
}

void FTableRowBase::BeforeDelete()
{
}

void FRadialDamageParams::AfterRead()
{
}

void FRadialDamageParams::BeforeDelete()
{
}

void FRadialDamageEvent::AfterRead()
{
	FDamageEvent::AfterRead();

}

void FRadialDamageEvent::BeforeDelete()
{
	FDamageEvent::BeforeDelete();

}

void FAnimNode_AssetPlayerBase::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_AssetPlayerBase::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FPoseLink::AfterRead()
{
	FPoseLinkBase::AfterRead();

}

void FPoseLink::BeforeDelete()
{
	FPoseLinkBase::BeforeDelete();

}

void FPerBoneBlendWeight::AfterRead()
{
}

void FPerBoneBlendWeight::BeforeDelete()
{
}

void FBranchFilter::AfterRead()
{
}

void FBranchFilter::BeforeDelete()
{
}

void FInputBlendPose::AfterRead()
{
}

void FInputBlendPose::BeforeDelete()
{
}

void FPoseSnapshot::AfterRead()
{
}

void FPoseSnapshot::BeforeDelete()
{
}

void FAnimNode_Root::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_Root::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimCurveParam::AfterRead()
{
}

void FAnimCurveParam::BeforeDelete()
{
}

void FDirectoryPath::AfterRead()
{
}

void FDirectoryPath::BeforeDelete()
{
}

void FAnimationGroupReference::AfterRead()
{
}

void FAnimationGroupReference::BeforeDelete()
{
}

void FAnimGroupInstance::AfterRead()
{
}

void FAnimGroupInstance::BeforeDelete()
{
}

void FAnimTickRecord::AfterRead()
{
	READ_PTR_FULL(SourceAsset, UAnimationAsset);
}

void FAnimTickRecord::BeforeDelete()
{
	DELE_PTR_FULL(SourceAsset);
}

void FMarkerSyncAnimPosition::AfterRead()
{
}

void FMarkerSyncAnimPosition::BeforeDelete()
{
}

void FBlendFilter::AfterRead()
{
}

void FBlendFilter::BeforeDelete()
{
}

void FBlendSampleData::AfterRead()
{
	READ_PTR_FULL(Animation, UAnimSequence);
}

void FBlendSampleData::BeforeDelete()
{
	DELE_PTR_FULL(Animation);
}

void FAnimationRecordingSettings::AfterRead()
{
}

void FAnimationRecordingSettings::BeforeDelete()
{
}

void FComponentSpacePose::AfterRead()
{
}

void FComponentSpacePose::BeforeDelete()
{
}

void FLocalSpacePose::AfterRead()
{
}

void FLocalSpacePose::BeforeDelete()
{
}

void FNamedTransform::AfterRead()
{
}

void FNamedTransform::BeforeDelete()
{
}

void FNamedColor::AfterRead()
{
}

void FNamedColor::BeforeDelete()
{
}

void FNamedVector::AfterRead()
{
}

void FNamedVector::BeforeDelete()
{
}

void FNamedFloat::AfterRead()
{
}

void FNamedFloat::BeforeDelete()
{
}

void FAnimParentNodeAssetOverride::AfterRead()
{
	READ_PTR_FULL(NewAsset, UAnimationAsset);
}

void FAnimParentNodeAssetOverride::BeforeDelete()
{
	DELE_PTR_FULL(NewAsset);
}

void FAnimGroupInfo::AfterRead()
{
}

void FAnimGroupInfo::BeforeDelete()
{
}

void FAnimBlueprintDebugData::AfterRead()
{
}

void FAnimBlueprintDebugData::BeforeDelete()
{
}

void FAnimationFrameSnapshot::AfterRead()
{
}

void FAnimationFrameSnapshot::BeforeDelete()
{
}

void FStateMachineDebugData::AfterRead()
{
}

void FStateMachineDebugData::BeforeDelete()
{
}

void FStateMachineStateDebugData::AfterRead()
{
}

void FStateMachineStateDebugData::BeforeDelete()
{
}

void FAnimBlueprintFunctionData::AfterRead()
{
}

void FAnimBlueprintFunctionData::BeforeDelete()
{
}

void FAnimGraphBlendOptions::AfterRead()
{
}

void FAnimGraphBlendOptions::BeforeDelete()
{
}

void FGraphAssetPlayerInformation::AfterRead()
{
}

void FGraphAssetPlayerInformation::BeforeDelete()
{
}

void FCachedPoseIndices::AfterRead()
{
}

void FCachedPoseIndices::BeforeDelete()
{
}

void FAnimBlueprintFunction::AfterRead()
{
}

void FAnimBlueprintFunction::BeforeDelete()
{
}

void FAnimSegment::AfterRead()
{
	READ_PTR_FULL(AnimReference, UAnimSequenceBase);
}

void FAnimSegment::BeforeDelete()
{
	DELE_PTR_FULL(AnimReference);
}

void FAnimTrack::AfterRead()
{
}

void FAnimTrack::BeforeDelete()
{
}

void FRootMotionExtractionStep::AfterRead()
{
	READ_PTR_FULL(AnimSequence, UAnimSequence);
}

void FRootMotionExtractionStep::BeforeDelete()
{
	DELE_PTR_FULL(AnimSequence);
}

void FAnimationErrorStats::AfterRead()
{
}

void FAnimationErrorStats::BeforeDelete()
{
}

void FFloatCurve::AfterRead()
{
	FAnimCurveBase::AfterRead();

}

void FFloatCurve::BeforeDelete()
{
	FAnimCurveBase::BeforeDelete();

}

void FRawCurveTracks::AfterRead()
{
}

void FRawCurveTracks::BeforeDelete()
{
}

void FVectorCurve::AfterRead()
{
	FAnimCurveBase::AfterRead();

}

void FVectorCurve::BeforeDelete()
{
	FAnimCurveBase::BeforeDelete();

}

void FTransformCurve::AfterRead()
{
	FAnimCurveBase::AfterRead();

}

void FTransformCurve::BeforeDelete()
{
	FAnimCurveBase::BeforeDelete();

}

void FSlotEvaluationPose::AfterRead()
{
}

void FSlotEvaluationPose::BeforeDelete()
{
}

void FA2Pose::AfterRead()
{
}

void FA2Pose::BeforeDelete()
{
}

void FA2CSPose::AfterRead()
{
	FA2Pose::AfterRead();

}

void FA2CSPose::BeforeDelete()
{
	FA2Pose::BeforeDelete();

}

void FQueuedDrawDebugItem::AfterRead()
{
}

void FQueuedDrawDebugItem::BeforeDelete()
{
}

void FAnimInstanceSubsystemData::AfterRead()
{
}

void FAnimInstanceSubsystemData::BeforeDelete()
{
}

void FAnimMontageInstance::AfterRead()
{
	READ_PTR_FULL(Montage, UAnimMontage);
}

void FAnimMontageInstance::BeforeDelete()
{
	DELE_PTR_FULL(Montage);
}

void FBranchingPointMarker::AfterRead()
{
}

void FBranchingPointMarker::BeforeDelete()
{
}

void FBranchingPoint::AfterRead()
{
	FAnimLinkableElement::AfterRead();

}

void FBranchingPoint::BeforeDelete()
{
	FAnimLinkableElement::BeforeDelete();

}

void FSlotAnimationTrack::AfterRead()
{
}

void FSlotAnimationTrack::BeforeDelete()
{
}

void FCompositeSection::AfterRead()
{
	FAnimLinkableElement::AfterRead();

}

void FCompositeSection::BeforeDelete()
{
	FAnimLinkableElement::BeforeDelete();

}

void FAnimNode_ApplyMeshSpaceAdditive::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_ApplyMeshSpaceAdditive::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_CustomProperty::AfterRead()
{
	FAnimNode_Base::AfterRead();

	READ_PTR_FULL(TargetInstance, UObject);
}

void FAnimNode_CustomProperty::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

	DELE_PTR_FULL(TargetInstance);
}

void FAnimNode_Inertialization::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_Inertialization::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FInertializationPoseDiff::AfterRead()
{
}

void FInertializationPoseDiff::BeforeDelete()
{
}

void FInertializationCurveDiff::AfterRead()
{
}

void FInertializationCurveDiff::BeforeDelete()
{
}

void FInertializationBoneDiff::AfterRead()
{
}

void FInertializationBoneDiff::BeforeDelete()
{
}

void FInertializationPose::AfterRead()
{
}

void FInertializationPose::BeforeDelete()
{
}

void FAnimNode_LinkedAnimGraph::AfterRead()
{
	FAnimNode_CustomProperty::AfterRead();

	READ_PTR_FULL(InstanceClass, UClass);
}

void FAnimNode_LinkedAnimGraph::BeforeDelete()
{
	FAnimNode_CustomProperty::BeforeDelete();

	DELE_PTR_FULL(InstanceClass);
}

void FAnimNode_LinkedAnimLayer::AfterRead()
{
	FAnimNode_LinkedAnimGraph::AfterRead();

	READ_PTR_FULL(Interface, UClass);
}

void FAnimNode_LinkedAnimLayer::BeforeDelete()
{
	FAnimNode_LinkedAnimGraph::BeforeDelete();

	DELE_PTR_FULL(Interface);
}

void FAnimNode_LinkedInputPose::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_LinkedInputPose::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_SaveCachedPose::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_SaveCachedPose::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_SequencePlayer::AfterRead()
{
	FAnimNode_AssetPlayerBase::AfterRead();

	READ_PTR_FULL(Sequence, UAnimSequenceBase);
}

void FAnimNode_SequencePlayer::BeforeDelete()
{
	FAnimNode_AssetPlayerBase::BeforeDelete();

	DELE_PTR_FULL(Sequence);
}

void FAnimNode_StateMachine::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_StateMachine::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimationPotentialTransition::AfterRead()
{
}

void FAnimationPotentialTransition::BeforeDelete()
{
}

void FAnimationActiveTransitionEntry::AfterRead()
{
	READ_PTR_FULL(BlendProfile, UBlendProfile);
}

void FAnimationActiveTransitionEntry::BeforeDelete()
{
	DELE_PTR_FULL(BlendProfile);
}

void FAnimNode_TransitionPoseEvaluator::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_TransitionPoseEvaluator::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_TransitionResult::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_TransitionResult::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_UseCachedPose::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_UseCachedPose::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FExposedValueCopyRecord::AfterRead()
{
}

void FExposedValueCopyRecord::BeforeDelete()
{
}

void FExposedValueHandler::AfterRead()
{
	READ_PTR_FULL(Function, UFunction);
}

void FExposedValueHandler::BeforeDelete()
{
	DELE_PTR_FULL(Function);
}

void FAnimNode_ConvertLocalToComponentSpace::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_ConvertLocalToComponentSpace::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimNode_ConvertComponentToLocalSpace::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_ConvertComponentToLocalSpace::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FCompressedTrack::AfterRead()
{
}

void FCompressedTrack::BeforeDelete()
{
}

void FCurveTrack::AfterRead()
{
}

void FCurveTrack::BeforeDelete()
{
}

void FScaleTrack::AfterRead()
{
}

void FScaleTrack::BeforeDelete()
{
}

void FRotationTrack::AfterRead()
{
}

void FRotationTrack::BeforeDelete()
{
}

void FTranslationTrack::AfterRead()
{
}

void FTranslationTrack::BeforeDelete()
{
}

void FRawAnimSequenceTrack::AfterRead()
{
}

void FRawAnimSequenceTrack::BeforeDelete()
{
}

void FAnimSequenceTrackContainer::AfterRead()
{
}

void FAnimSequenceTrackContainer::BeforeDelete()
{
}

void FAnimSetMeshLinkup::AfterRead()
{
}

void FAnimSetMeshLinkup::BeforeDelete()
{
}

void FAnimSingleNodeInstanceProxy::AfterRead()
{
	FAnimInstanceProxy::AfterRead();

}

void FAnimSingleNodeInstanceProxy::BeforeDelete()
{
	FAnimInstanceProxy::BeforeDelete();

}

void FAnimNode_SingleNode::AfterRead()
{
	FAnimNode_Base::AfterRead();

}

void FAnimNode_SingleNode::BeforeDelete()
{
	FAnimNode_Base::BeforeDelete();

}

void FAnimationTransitionRule::AfterRead()
{
}

void FAnimationTransitionRule::BeforeDelete()
{
}

void FAnimationState::AfterRead()
{
	FAnimationStateBase::AfterRead();

}

void FAnimationState::BeforeDelete()
{
	FAnimationStateBase::BeforeDelete();

}

void FTrackToSkeletonMap::AfterRead()
{
}

void FTrackToSkeletonMap::BeforeDelete()
{
}

void FAnimSyncMarker::AfterRead()
{
}

void FAnimSyncMarker::BeforeDelete()
{
}

void FMarkerSyncData::AfterRead()
{
}

void FMarkerSyncData::BeforeDelete()
{
}

void FAnimNotifyTrack::AfterRead()
{
}

void FAnimNotifyTrack::BeforeDelete()
{
}

void FPerBoneBlendWeights::AfterRead()
{
}

void FPerBoneBlendWeights::BeforeDelete()
{
}

void FAssetImportInfo::AfterRead()
{
}

void FAssetImportInfo::BeforeDelete()
{
}

void FPrimaryAssetRulesCustomOverride::AfterRead()
{
}

void FPrimaryAssetRulesCustomOverride::BeforeDelete()
{
}

void FPrimaryAssetRulesOverride::AfterRead()
{
}

void FPrimaryAssetRulesOverride::BeforeDelete()
{
}

void FAssetManagerRedirect::AfterRead()
{
}

void FAssetManagerRedirect::BeforeDelete()
{
}

void FPrimaryAssetTypeInfo::AfterRead()
{
	READ_PTR_FULL(AssetBaseClassLoaded, UClass);
}

void FPrimaryAssetTypeInfo::BeforeDelete()
{
	DELE_PTR_FULL(AssetBaseClassLoaded);
}

void FAssetMapping::AfterRead()
{
	READ_PTR_FULL(SourceAsset, UAnimationAsset);
	READ_PTR_FULL(TargetAsset, UAnimationAsset);
}

void FAssetMapping::BeforeDelete()
{
	DELE_PTR_FULL(SourceAsset);
	DELE_PTR_FULL(TargetAsset);
}

void FAtmospherePrecomputeInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

}

void FAtmospherePrecomputeInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

}

void FAtmospherePrecomputeParameters::AfterRead()
{
}

void FAtmospherePrecomputeParameters::BeforeDelete()
{
}

void FAudioReverbEffect::AfterRead()
{
	FAudioEffectParameters::AfterRead();

}

void FAudioReverbEffect::BeforeDelete()
{
	FAudioEffectParameters::BeforeDelete();

}

void FAudioQualitySettings::AfterRead()
{
}

void FAudioQualitySettings::BeforeDelete()
{
}

void FAudioVolumeSubmixOverrideSettings::AfterRead()
{
	READ_PTR_FULL(Submix, USoundSubmix);
}

void FAudioVolumeSubmixOverrideSettings::BeforeDelete()
{
	DELE_PTR_FULL(Submix);
}

void FAudioVolumeSubmixSendSettings::AfterRead()
{
}

void FAudioVolumeSubmixSendSettings::BeforeDelete()
{
}

void FFilePath::AfterRead()
{
}

void FFilePath::BeforeDelete()
{
}

void FLaunchOnTestSettings::AfterRead()
{
}

void FLaunchOnTestSettings::BeforeDelete()
{
}

void FEditorMapPerformanceTestDefinition::AfterRead()
{
}

void FEditorMapPerformanceTestDefinition::BeforeDelete()
{
}

void FImportFactorySettingValues::AfterRead()
{
}

void FImportFactorySettingValues::BeforeDelete()
{
}

void FEditorImportWorkflowDefinition::AfterRead()
{
}

void FEditorImportWorkflowDefinition::BeforeDelete()
{
}

void FBuildPromotionImportWorkflowSettings::AfterRead()
{
}

void FBuildPromotionImportWorkflowSettings::BeforeDelete()
{
}

void FBuildPromotionOpenAssetSettings::AfterRead()
{
}

void FBuildPromotionOpenAssetSettings::BeforeDelete()
{
}

void FBuildPromotionNewProjectSettings::AfterRead()
{
}

void FBuildPromotionNewProjectSettings::BeforeDelete()
{
}

void FBuildPromotionTestSettings::AfterRead()
{
}

void FBuildPromotionTestSettings::BeforeDelete()
{
}

void FBlueprintEditorPromotionSettings::AfterRead()
{
}

void FBlueprintEditorPromotionSettings::BeforeDelete()
{
}

void FParticleEditorPromotionSettings::AfterRead()
{
}

void FParticleEditorPromotionSettings::BeforeDelete()
{
}

void FMaterialEditorPromotionSettings::AfterRead()
{
}

void FMaterialEditorPromotionSettings::BeforeDelete()
{
}

void FEditorImportExportTestDefinition::AfterRead()
{
}

void FEditorImportExportTestDefinition::BeforeDelete()
{
}

void FExternalToolDefinition::AfterRead()
{
}

void FExternalToolDefinition::BeforeDelete()
{
}

void FNavAvoidanceData::AfterRead()
{
}

void FNavAvoidanceData::BeforeDelete()
{
}

void FBandwidthTestItem::AfterRead()
{
}

void FBandwidthTestItem::BeforeDelete()
{
}

void FBandwidthTestGenerator::AfterRead()
{
}

void FBandwidthTestGenerator::BeforeDelete()
{
}

void FBlendProfileBoneEntry::AfterRead()
{
}

void FBlendProfileBoneEntry::BeforeDelete()
{
}

void FGridBlendSample::AfterRead()
{
}

void FGridBlendSample::BeforeDelete()
{
}

void FBPEditorBookmarkNode::AfterRead()
{
}

void FBPEditorBookmarkNode::BeforeDelete()
{
}

void FEditedDocumentInfo::AfterRead()
{
	READ_PTR_FULL(EditedObject, UObject);
}

void FEditedDocumentInfo::BeforeDelete()
{
	DELE_PTR_FULL(EditedObject);
}

void FBPInterfaceDescription::AfterRead()
{
	READ_PTR_FULL(Interface, UClass);
}

void FBPInterfaceDescription::BeforeDelete()
{
	DELE_PTR_FULL(Interface);
}

void FEdGraphTerminalType::AfterRead()
{
}

void FEdGraphTerminalType::BeforeDelete()
{
}

void FEdGraphPinType::AfterRead()
{
}

void FEdGraphPinType::BeforeDelete()
{
}

void FBPVariableDescription::AfterRead()
{
}

void FBPVariableDescription::BeforeDelete()
{
}

void FBlueprintMacroCosmeticInfo::AfterRead()
{
}

void FBlueprintMacroCosmeticInfo::BeforeDelete()
{
}

void FCompilerNativizationOptions::AfterRead()
{
}

void FCompilerNativizationOptions::BeforeDelete()
{
}

void FEventGraphFastCallPair::AfterRead()
{
	READ_PTR_FULL(FunctionToPatch, UFunction);
}

void FEventGraphFastCallPair::BeforeDelete()
{
	DELE_PTR_FULL(FunctionToPatch);
}

void FBlueprintDebugData::AfterRead()
{
}

void FBlueprintDebugData::BeforeDelete()
{
}

void FPointerToUberGraphFrame::AfterRead()
{
}

void FPointerToUberGraphFrame::BeforeDelete()
{
}

void FDebuggingInfoForSingleFunction::AfterRead()
{
}

void FDebuggingInfoForSingleFunction::BeforeDelete()
{
}

void FNodeToCodeAssociation::AfterRead()
{
}

void FNodeToCodeAssociation::BeforeDelete()
{
}

void FAnimCurveType::AfterRead()
{
}

void FAnimCurveType::BeforeDelete()
{
}

void FBookmarkBaseJumpToSettings::AfterRead()
{
}

void FBookmarkBaseJumpToSettings::BeforeDelete()
{
}

void FBookmarkJumpToSettings::AfterRead()
{
	FBookmarkBaseJumpToSettings::AfterRead();

}

void FBookmarkJumpToSettings::BeforeDelete()
{
	FBookmarkBaseJumpToSettings::BeforeDelete();

}

void FBookmark2DJumpToSettings::AfterRead()
{
}

void FBookmark2DJumpToSettings::BeforeDelete()
{
}

void FCachedAnimTransitionData::AfterRead()
{
}

void FCachedAnimTransitionData::BeforeDelete()
{
}

void FCachedAnimRelevancyData::AfterRead()
{
}

void FCachedAnimRelevancyData::BeforeDelete()
{
}

void FCachedAnimAssetPlayerData::AfterRead()
{
}

void FCachedAnimAssetPlayerData::BeforeDelete()
{
}

void FCachedAnimStateData::AfterRead()
{
}

void FCachedAnimStateData::BeforeDelete()
{
}

void FCachedAnimStateArray::AfterRead()
{
}

void FCachedAnimStateArray::BeforeDelete()
{
}

void FVOscillator::AfterRead()
{
}

void FVOscillator::BeforeDelete()
{
}

void FCameraShakeDuration::AfterRead()
{
}

void FCameraShakeDuration::BeforeDelete()
{
}

void FCameraShakeInfo::AfterRead()
{
}

void FCameraShakeInfo::BeforeDelete()
{
}

void FCameraShakeUpdateResult::AfterRead()
{
}

void FCameraShakeUpdateResult::BeforeDelete()
{
}

void FCameraShakeUpdateParams::AfterRead()
{
}

void FCameraShakeUpdateParams::BeforeDelete()
{
}

void FDummySpacerCameraTypes::AfterRead()
{
}

void FDummySpacerCameraTypes::BeforeDelete()
{
}

void FCanvasIcon::AfterRead()
{
	READ_PTR_FULL(Texture, UTexture);
}

void FCanvasIcon::BeforeDelete()
{
	DELE_PTR_FULL(Texture);
}

void FWrappedStringElement::AfterRead()
{
}

void FWrappedStringElement::BeforeDelete()
{
}

void FTextSizingParameters::AfterRead()
{
	READ_PTR_FULL(DrawFont, UFont);
}

void FTextSizingParameters::BeforeDelete()
{
	DELE_PTR_FULL(DrawFont);
}

void FChildActorAttachedActorInfo::AfterRead()
{
}

void FChildActorAttachedActorInfo::BeforeDelete()
{
}

void FChildActorComponentInstanceData::AfterRead()
{
	FSceneComponentInstanceData::AfterRead();

	READ_PTR_FULL(ChildActorClass, UClass);
}

void FChildActorComponentInstanceData::BeforeDelete()
{
	FSceneComponentInstanceData::BeforeDelete();

	DELE_PTR_FULL(ChildActorClass);
}

void FBlueprintComponentDelegateBinding::AfterRead()
{
}

void FBlueprintComponentDelegateBinding::BeforeDelete()
{
}

void FAutoCompleteNode::AfterRead()
{
}

void FAutoCompleteNode::BeforeDelete()
{
}

void FCullDistanceSizePair::AfterRead()
{
}

void FCullDistanceSizePair::BeforeDelete()
{
}

void FRuntimeCurveLinearColor::AfterRead()
{
	READ_PTR_FULL(ExternalCurve, UCurveLinearColor);
}

void FRuntimeCurveLinearColor::BeforeDelete()
{
	DELE_PTR_FULL(ExternalCurve);
}

void FNamedCurveValue::AfterRead()
{
}

void FNamedCurveValue::BeforeDelete()
{
}

void FCurveTableRowHandle::AfterRead()
{
	READ_PTR_FULL(CurveTable, UCurveTable);
}

void FCurveTableRowHandle::BeforeDelete()
{
	DELE_PTR_FULL(CurveTable);
}

void FCustomAttribute::AfterRead()
{
}

void FCustomAttribute::BeforeDelete()
{
}

void FCustomAttributePerBoneData::AfterRead()
{
}

void FCustomAttributePerBoneData::BeforeDelete()
{
}

void FDataTableCategoryHandle::AfterRead()
{
	READ_PTR_FULL(DataTable, UDataTable);
}

void FDataTableCategoryHandle::BeforeDelete()
{
	DELE_PTR_FULL(DataTable);
}

void FDataTableRowHandle::AfterRead()
{
	READ_PTR_FULL(DataTable, UDataTable);
}

void FDataTableRowHandle::BeforeDelete()
{
	DELE_PTR_FULL(DataTable);
}

void FDebugCameraControllerSettingsViewModeIndex::AfterRead()
{
}

void FDebugCameraControllerSettingsViewModeIndex::BeforeDelete()
{
}

void FDebugDisplayProperty::AfterRead()
{
	READ_PTR_FULL(Obj, UObject);
	READ_PTR_FULL(WithinClass, UClass);
}

void FDebugDisplayProperty::BeforeDelete()
{
	DELE_PTR_FULL(Obj);
	DELE_PTR_FULL(WithinClass);
}

void UPlayer::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(PlayerController, APlayerController);
}

void UPlayer::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(PlayerController);
}

void UNetConnection::AfterRead()
{
	UPlayer::AfterRead();

	READ_PTR_FULL(Driver, UNetDriver);
	READ_PTR_FULL(PackageMapClass, UClass);
	READ_PTR_FULL(PackageMap, UPackageMap);
	READ_PTR_FULL(ViewTarget, AActor);
	READ_PTR_FULL(OwningActor, AActor);
}

void UNetConnection::BeforeDelete()
{
	UPlayer::BeforeDelete();

	DELE_PTR_FULL(Driver);
	DELE_PTR_FULL(PackageMapClass);
	DELE_PTR_FULL(PackageMap);
	DELE_PTR_FULL(ViewTarget);
	DELE_PTR_FULL(OwningActor);
}

void UNetDriver::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ServerConnection, UNetConnection);
	READ_PTR_FULL(World, UWorld);
	READ_PTR_FULL(WorldPackage, UPackage);
	READ_PTR_FULL(NetConnectionClass, UClass);
	READ_PTR_FULL(ReplicationDriverClass, UClass);
	READ_PTR_FULL(ReplicationDriver, UReplicationDriver);
}

void UNetDriver::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ServerConnection);
	DELE_PTR_FULL(World);
	DELE_PTR_FULL(WorldPackage);
	DELE_PTR_FULL(NetConnectionClass);
	DELE_PTR_FULL(ReplicationDriverClass);
	DELE_PTR_FULL(ReplicationDriver);
}

void UBlueprintFunctionLibrary::AfterRead()
{
	UObject::AfterRead();

}

void UBlueprintFunctionLibrary::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.BlueprintAsyncActionBase.Activate
// ()
void UBlueprintAsyncActionBase::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintAsyncActionBase.Activate"));

	UBlueprintAsyncActionBase_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UBlueprintAsyncActionBase::AfterRead()
{
	UObject::AfterRead();

}

void UBlueprintAsyncActionBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UOnlineBlueprintCallProxyBase::AfterRead()
{
	UBlueprintAsyncActionBase::AfterRead();

}

void UOnlineBlueprintCallProxyBase::BeforeDelete()
{
	UBlueprintAsyncActionBase::BeforeDelete();

}

// Function Engine.Actor.WasRecentlyRendered
// ()
// Parameters:
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::WasRecentlyRendered(float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.WasRecentlyRendered"));

	AActor_WasRecentlyRendered_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.UserConstructionScript
// ()
void AActor::UserConstructionScript()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.UserConstructionScript"));

	AActor_UserConstructionScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.TearOff
// ()
void AActor::TearOff()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.TearOff"));

	AActor_TearOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SnapRootComponentTo
// ()
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SnapRootComponentTo"));

	AActor_SnapRootComponentTo_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetTickGroup
// ()
// Parameters:
// TEnumAsByte<Engine_ETickingGroup> NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickGroup"));

	AActor_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetTickableWhenPaused
// ()
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickableWhenPaused"));

	AActor_SetTickableWhenPaused_Params params;
	params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetReplicates
// ()
// Parameters:
// bool                           bInReplicates                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetReplicates(bool bInReplicates)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicates"));

	AActor_SetReplicates_Params params;
	params.bInReplicates = bInReplicates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetReplicateMovement
// ()
// Parameters:
// bool                           bInReplicateMovement           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetReplicateMovement(bool bInReplicateMovement)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicateMovement"));

	AActor_SetReplicateMovement_Params params;
	params.bInReplicateMovement = bInReplicateMovement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetOwner
// ()
// Parameters:
// class AActor*                  NewOwner                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetOwner"));

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetNetDormancy
// ()
// Parameters:
// TEnumAsByte<Engine_ENetDormancy> NewDormancy                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetNetDormancy(TEnumAsByte<Engine_ENetDormancy> NewDormancy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetNetDormancy"));

	AActor_SetNetDormancy_Params params;
	params.NewDormancy = NewDormancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetLifeSpan
// ()
// Parameters:
// float                          InLifespan                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetLifeSpan(float InLifespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetLifeSpan"));

	AActor_SetLifeSpan_Params params;
	params.InLifespan = InLifespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetAutoDestroyWhenFinished
// ()
// Parameters:
// bool                           bVal                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetAutoDestroyWhenFinished(bool bVal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetAutoDestroyWhenFinished"));

	AActor_SetAutoDestroyWhenFinished_Params params;
	params.bVal = bVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorTickInterval
// ()
// Parameters:
// float                          TickInterval                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorTickInterval(float TickInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorTickInterval"));

	AActor_SetActorTickInterval_Params params;
	params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorTickEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorTickEnabled"));

	AActor_SetActorTickEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorScale3D"));

	AActor_SetActorScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorRelativeScale3D
// ()
// Parameters:
// struct FVector                 NewRelativeScale               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorRelativeScale3D(const struct FVector& NewRelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorRelativeScale3D"));

	AActor_SetActorRelativeScale3D_Params params;
	params.NewRelativeScale = NewRelativeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorHiddenInGame
// ()
// Parameters:
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorHiddenInGame(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorHiddenInGame"));

	AActor_SetActorHiddenInGame_Params params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.SetActorEnableCollision
// ()
// Parameters:
// bool                           bNewActorEnableCollision       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::SetActorEnableCollision(bool bNewActorEnableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorEnableCollision"));

	AActor_SetActorEnableCollision_Params params;
	params.bNewActorEnableCollision = bNewActorEnableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.RemoveTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteComponent"));

	AActor_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.RemoveTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteActor"));

	AActor_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveTick"));

	AActor_ReceiveTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveRadialDamage
// ()
// Parameters:
// float                          DamageReceived                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveRadialDamage"));

	AActor_ReceiveRadialDamage_Params params;
	params.DamageReceived = DamageReceived;
	params.DamageType = DamageType;
	params.Origin = Origin;
	params.HitInfo = HitInfo;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceivePointDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ShotFromDirection              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void AActor::ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceivePointDamage"));

	AActor_ReceivePointDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitComponent = HitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveHit
// ()
// Parameters:
// class UPrimitiveComponent*     MyComp                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSelfMoved                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void AActor::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveHit"));

	AActor_ReceiveHit_Params params;
	params.MyComp = MyComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.bSelfMoved = bSelfMoved;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveEndPlay
// ()
// Parameters:
// TEnumAsByte<Engine_EEndPlayReason> EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveEndPlay"));

	AActor_ReceiveEndPlay_Params params;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveDestroyed
// ()
void AActor::ReceiveDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveDestroyed"));

	AActor_ReceiveDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveBeginPlay
// ()
void AActor::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveBeginPlay"));

	AActor_ReceiveBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveAnyDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveAnyDamage"));

	AActor_ReceiveAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnReleased
// ()
// Parameters:
// struct FKey                    ButtonReleased                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnReleased(const struct FKey& ButtonReleased)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnReleased"));

	AActor_ReceiveActorOnReleased_Params params;
	params.ButtonReleased = ButtonReleased;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnInputTouchLeave
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<InputCore_ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchLeave"));

	AActor_ReceiveActorOnInputTouchLeave_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnInputTouchEnter
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<InputCore_ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnter"));

	AActor_ReceiveActorOnInputTouchEnter_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnInputTouchEnd
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<InputCore_ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnd"));

	AActor_ReceiveActorOnInputTouchEnd_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnInputTouchBegin
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<InputCore_ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchBegin"));

	AActor_ReceiveActorOnInputTouchBegin_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorOnClicked
// ()
// Parameters:
// struct FKey                    ButtonPressed                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorOnClicked(const struct FKey& ButtonPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnClicked"));

	AActor_ReceiveActorOnClicked_Params params;
	params.ButtonPressed = ButtonPressed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorEndOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndOverlap"));

	AActor_ReceiveActorEndOverlap_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorEndCursorOver
// ()
void AActor::ReceiveActorEndCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndCursorOver"));

	AActor_ReceiveActorEndCursorOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorBeginOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginOverlap"));

	AActor_ReceiveActorBeginOverlap_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.ReceiveActorBeginCursorOver
// ()
void AActor::ReceiveActorBeginCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginCursorOver"));

	AActor_ReceiveActorBeginCursorOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.PrestreamTextures
// ()
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableStreaming               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.PrestreamTextures"));

	AActor_PrestreamTextures_Params params;
	params.Seconds = Seconds;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.OnRep_ReplicateMovement
// ()
void AActor::OnRep_ReplicateMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicateMovement"));

	AActor_OnRep_ReplicateMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.OnRep_ReplicatedMovement
// ()
void AActor::OnRep_ReplicatedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicatedMovement"));

	AActor_OnRep_ReplicatedMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.OnRep_Owner
// ()
void AActor::OnRep_Owner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Owner"));

	AActor_OnRep_Owner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.OnRep_Instigator
// ()
void AActor::OnRep_Instigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Instigator"));

	AActor_OnRep_Instigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.OnRep_AttachmentReplication
// ()
void AActor::OnRep_AttachmentReplication()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_AttachmentReplication"));

	AActor_OnRep_AttachmentReplication_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.MakeNoise
// ()
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                   NoiseInstigator                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxRange                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeNoise"));

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseInstigator = NoiseInstigator;
	params.NoiseLocation = NoiseLocation;
	params.MaxRange = MaxRange;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.MakeMIDForMaterial
// ()
// Parameters:
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeMIDForMaterial"));

	AActor_MakeMIDForMaterial_Params params;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_TeleportTo
// ()
// Parameters:
// struct FVector                 DestLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                DestRotation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_TeleportTo"));

	AActor_K2_TeleportTo_Params params;
	params.DestLocation = DestLocation;
	params.DestRotation = DestRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorTransform
// ()
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorTransform"));

	AActor_K2_SetActorTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bTeleportPhysics               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRotation"));

	AActor_K2_SetActorRotation_Params params;
	params.NewRotation = NewRotation;
	params.bTeleportPhysics = bTeleportPhysics;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorRelativeTransform
// ()
// Parameters:
// struct FTransform              NewRelativeTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeTransform"));

	AActor_K2_SetActorRelativeTransform_Params params;
	params.NewRelativeTransform = NewRelativeTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_SetActorRelativeRotation
// ()
// Parameters:
// struct FRotator                NewRelativeRotation            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeRotation"));

	AActor_K2_SetActorRelativeRotation_Params params;
	params.NewRelativeRotation = NewRelativeRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_SetActorRelativeLocation
// ()
// Parameters:
// struct FVector                 NewRelativeLocation            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeLocation"));

	AActor_K2_SetActorRelativeLocation_Params params;
	params.NewRelativeLocation = NewRelativeLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_SetActorLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocationAndRotation"));

	AActor_K2_SetActorLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocation"));

	AActor_K2_SetActorLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_OnReset
// ()
void AActor::K2_OnReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnReset"));

	AActor_K2_OnReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_OnEndViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_OnEndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnEndViewTarget"));

	AActor_K2_OnEndViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_OnBecomeViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_OnBecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnBecomeViewTarget"));

	AActor_K2_OnBecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_GetRootComponent
// ()
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USceneComponent* AActor::K2_GetRootComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetRootComponent"));

	AActor_K2_GetRootComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetComponentsByClass
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
TArray<class UActorComponent*> AActor::K2_GetComponentsByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetComponentsByClass"));

	AActor_K2_GetComponentsByClass_Params params;
	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator AActor::K2_GetActorRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorRotation"));

	AActor_K2_GetActorRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::K2_GetActorLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorLocation"));

	AActor_K2_GetActorLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.K2_DetachFromActor
// ()
// Parameters:
// Engine_EDetachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EDetachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EDetachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_DetachFromActor(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DetachFromActor"));

	AActor_K2_DetachFromActor_Params params;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_DestroyComponent
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_DestroyComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyComponent"));

	AActor_K2_DestroyComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_DestroyActor
// ()
void AActor::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyActor"));

	AActor_K2_DestroyActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_AttachToComponent
// ()
// Parameters:
// class USceneComponent*         Parent                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachToComponent"));

	AActor_K2_AttachToComponent_Params params;
	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_AttachToActor
// ()
// Parameters:
// class AActor*                  ParentActor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachToActor"));

	AActor_K2_AttachToActor_Params params;
	params.ParentActor = ParentActor;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_AttachRootComponentToActor
// ()
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentToActor"));

	AActor_K2_AttachRootComponentToActor_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_AttachRootComponentTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentTo"));

	AActor_K2_AttachRootComponentTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.K2_AddActorWorldTransformKeepScale
// ()
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldTransformKeepScale"));

	AActor_K2_AddActorWorldTransformKeepScale_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorWorldTransform
// ()
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldTransform"));

	AActor_K2_AddActorWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorWorldRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldRotation"));

	AActor_K2_AddActorWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorWorldOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldOffset"));

	AActor_K2_AddActorWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorLocalTransform
// ()
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalTransform"));

	AActor_K2_AddActorLocalTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorLocalRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalRotation"));

	AActor_K2_AddActorLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.K2_AddActorLocalOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalOffset"));

	AActor_K2_AddActorLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.Actor.IsOverlappingActor
// ()
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::IsOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsOverlappingActor"));

	AActor_IsOverlappingActor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.IsChildActor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::IsChildActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsChildActor"));

	AActor_IsChildActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.IsActorTickEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::IsActorTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorTickEnabled"));

	AActor_IsActorTickEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.IsActorBeingDestroyed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::IsActorBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorBeingDestroyed"));

	AActor_IsActorBeingDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.HasAuthority
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::HasAuthority()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.HasAuthority"));

	AActor_HasAuthority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetVerticalDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetVerticalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVerticalDistanceTo"));

	AActor_GetVerticalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVelocity"));

	AActor_GetVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetTransform
// ()
// Parameters:
// struct FTransform              ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform AActor::GetTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTransform"));

	AActor_GetTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetTickableWhenPaused
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::GetTickableWhenPaused()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTickableWhenPaused"));

	AActor_GetTickableWhenPaused_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetSquaredDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetSquaredDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetSquaredDistanceTo"));

	AActor_GetSquaredDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetRemoteRole
// ()
// Parameters:
// TEnumAsByte<Engine_ENetRole>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ENetRole> AActor::GetRemoteRole()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetRemoteRole"));

	AActor_GetRemoteRole_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetParentComponent
// ()
// Parameters:
// class UChildActorComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UChildActorComponent* AActor::GetParentComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetParentComponent"));

	AActor_GetParentComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetParentActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AActor::GetParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetParentActor"));

	AActor_GetParentActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetOwner
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AActor::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOwner"));

	AActor_GetOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetOverlappingComponents
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> OverlappingComponents          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void AActor::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingComponents"));

	AActor_GetOverlappingComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OverlappingComponents != nullptr)
		*OverlappingComponents = params.OverlappingComponents;

}


// Function Engine.Actor.GetOverlappingActors
// ()
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingActors"));

	AActor_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;

}


// Function Engine.Actor.GetLocalRole
// ()
// Parameters:
// TEnumAsByte<Engine_ENetRole>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ENetRole> AActor::GetLocalRole()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetLocalRole"));

	AActor_GetLocalRole_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetLifeSpan
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetLifeSpan()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetLifeSpan"));

	AActor_GetLifeSpan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigatorController
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AController* AActor::GetInstigatorController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigatorController"));

	AActor_GetInstigatorController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigator
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* AActor::GetInstigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigator"));

	AActor_GetInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetInputVectorAxisValue
// ()
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetInputVectorAxisValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputVectorAxisValue"));

	AActor_GetInputVectorAxisValue_Params params;
	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisValue
// ()
// Parameters:
// struct FName                   InputAxisName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetInputAxisValue(const struct FName& InputAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisValue"));

	AActor_GetInputAxisValue_Params params;
	params.InputAxisName = InputAxisName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisKeyValue
// ()
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetInputAxisKeyValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisKeyValue"));

	AActor_GetInputAxisKeyValue_Params params;
	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDotProductTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetHorizontalDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDotProductTo"));

	AActor_GetHorizontalDotProductTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetHorizontalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDistanceTo"));

	AActor_GetHorizontalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetGameTimeSinceCreation
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetGameTimeSinceCreation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetGameTimeSinceCreation"));

	AActor_GetGameTimeSinceCreation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetDotProductTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDotProductTo"));

	AActor_GetDotProductTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDistanceTo"));

	AActor_GetDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByTag
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
TArray<class UActorComponent*> AActor::GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByTag"));

	AActor_GetComponentsByTag_Params params;
	params.ComponentClass = ComponentClass;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByInterface
// ()
// Parameters:
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
TArray<class UActorComponent*> AActor::GetComponentsByInterface(class UClass* Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByInterface"));

	AActor_GetComponentsByInterface_Params params;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentByClass
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UActorComponent* AActor::GetComponentByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentByClass"));

	AActor_GetComponentByClass_Params params;
	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachParentSocketName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName AActor::GetAttachParentSocketName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAttachParentSocketName"));

	AActor_GetAttachParentSocketName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachParentActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AActor::GetAttachParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAttachParentActor"));

	AActor_GetAttachParentActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachedActors
// ()
// Parameters:
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           bResetArray                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::GetAttachedActors(TArray<class AActor*>* OutActors, bool bResetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAttachedActors"));

	AActor_GetAttachedActors_Params params;
	params.bResetArray = bResetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.Actor.GetAllChildActors
// ()
// Parameters:
// TArray<class AActor*>          ChildActors                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           bIncludeDescendants            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::GetAllChildActors(TArray<class AActor*>* ChildActors, bool bIncludeDescendants)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAllChildActors"));

	AActor_GetAllChildActors_Params params;
	params.bIncludeDescendants = bIncludeDescendants;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ChildActors != nullptr)
		*ChildActors = params.ChildActors;

}


// Function Engine.Actor.GetActorUpVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetActorUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorUpVector"));

	AActor_GetActorUpVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorTimeDilation
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetActorTimeDilation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorTimeDilation"));

	AActor_GetActorTimeDilation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorTickInterval
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AActor::GetActorTickInterval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorTickInterval"));

	AActor_GetActorTickInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorScale3D
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetActorScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorScale3D"));

	AActor_GetActorScale3D_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRightVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetActorRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRightVector"));

	AActor_GetActorRightVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRelativeScale3D
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetActorRelativeScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRelativeScale3D"));

	AActor_GetActorRelativeScale3D_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorForwardVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AActor::GetActorForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorForwardVector"));

	AActor_GetActorForwardVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// ()
// Parameters:
// struct FVector                 OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AActor::GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEyesViewPoint"));

	AActor_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

}


// Function Engine.Actor.GetActorEnableCollision
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::GetActorEnableCollision()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEnableCollision"));

	AActor_GetActorEnableCollision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.GetActorBounds
// ()
// Parameters:
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeFromChildActors        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent, bool bIncludeFromChildActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorBounds"));

	AActor_GetActorBounds_Params params;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;
	params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;

}


// Function Engine.Actor.ForceNetUpdate
// ()
void AActor::ForceNetUpdate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ForceNetUpdate"));

	AActor_ForceNetUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.FlushNetDormancy
// ()
void AActor::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.FlushNetDormancy"));

	AActor_FlushNetDormancy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.FinishAddComponent
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AActor::FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.FinishAddComponent"));

	AActor_FinishAddComponent_Params params;
	params.Component = Component;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.EnableInput
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::EnableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.EnableInput"));

	AActor_EnableInput_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.DisableInput
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::DisableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DisableInput"));

	AActor_DisableInput_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.DetachRootComponentFromParent
// ()
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DetachRootComponentFromParent"));

	AActor_DetachRootComponentFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.AddTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteComponent"));

	AActor_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.AddTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AActor::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteActor"));

	AActor_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Actor.AddComponentByClass
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bDeferredFinish                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UActorComponent* AActor::AddComponentByClass(class UClass* Class, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddComponentByClass"));

	AActor_AddComponentByClass_Params params;
	params.Class = Class;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.bDeferredFinish = bDeferredFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.AddComponent
// ()
// Parameters:
// struct FName                   TemplateName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                 ComponentTemplateContext       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDeferredFinish                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UActorComponent* AActor::AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddComponent"));

	AActor_AddComponent_Params params;
	params.TemplateName = TemplateName;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.ComponentTemplateContext = ComponentTemplateContext;
	params.bDeferredFinish = bDeferredFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Actor.ActorHasTag
// ()
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AActor::ActorHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ActorHasTag"));

	AActor_ActorHasTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void AActor::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Owner, AActor);
	READ_PTR_FULL(InputComponent, UInputComponent);
	READ_PTR_FULL(Instigator, APawn);
	READ_PTR_FULL(RootComponent, USceneComponent);
}

void AActor::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Owner);
	DELE_PTR_FULL(InputComponent);
	DELE_PTR_FULL(Instigator);
	DELE_PTR_FULL(RootComponent);
}

void UOnlineEngineInterface::AfterRead()
{
	UObject::AfterRead();

}

void UOnlineEngineInterface::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UOnlineSession::AfterRead()
{
	UObject::AfterRead();

}

void UOnlineSession::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.ActorComponent.ToggleActive
// ()
void UActorComponent::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ToggleActive"));

	UActorComponent_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetTickGroup
// ()
// Parameters:
// TEnumAsByte<Engine_ETickingGroup> NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickGroup"));

	UActorComponent_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetTickableWhenPaused
// ()
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickableWhenPaused"));

	UActorComponent_SetTickableWhenPaused_Params params;
	params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetIsReplicated
// ()
// Parameters:
// bool                           ShouldReplicate                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetIsReplicated(bool ShouldReplicate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetIsReplicated"));

	UActorComponent_SetIsReplicated_Params params;
	params.ShouldReplicate = ShouldReplicate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown
// ()
// Parameters:
// float                          TickInterval                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetComponentTickIntervalAndCooldown(float TickInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown"));

	UActorComponent_SetComponentTickIntervalAndCooldown_Params params;
	params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetComponentTickInterval
// ()
// Parameters:
// float                          TickInterval                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetComponentTickInterval(float TickInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetComponentTickInterval"));

	UActorComponent_SetComponentTickInterval_Params params;
	params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetComponentTickEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetComponentTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetComponentTickEnabled"));

	UActorComponent_SetComponentTickEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetAutoActivate
// ()
// Parameters:
// bool                           bNewAutoActivate               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetAutoActivate(bool bNewAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetAutoActivate"));

	UActorComponent_SetAutoActivate_Params params;
	params.bNewAutoActivate = bNewAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.SetActive
// ()
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::SetActive(bool bNewActive, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetActive"));

	UActorComponent_SetActive_Params params;
	params.bNewActive = bNewActive;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent"));

	UActorComponent_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteActor"));

	UActorComponent_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.ReceiveTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveTick"));

	UActorComponent_ReceiveTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.ReceiveEndPlay
// ()
// Parameters:
// TEnumAsByte<Engine_EEndPlayReason> EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveEndPlay"));

	UActorComponent_ReceiveEndPlay_Params params;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.ReceiveBeginPlay
// ()
void UActorComponent::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveBeginPlay"));

	UActorComponent_ReceiveBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.OnRep_IsActive
// ()
void UActorComponent::OnRep_IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.OnRep_IsActive"));

	UActorComponent_OnRep_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.K2_DestroyComponent
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::K2_DestroyComponent(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.K2_DestroyComponent"));

	UActorComponent_K2_DestroyComponent_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.IsComponentTickEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UActorComponent::IsComponentTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsComponentTickEnabled"));

	UActorComponent_IsComponentTickEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsBeingDestroyed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UActorComponent::IsBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsBeingDestroyed"));

	UActorComponent_IsBeingDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UActorComponent::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsActive"));

	UActorComponent_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetOwner
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UActorComponent::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetOwner"));

	UActorComponent_GetOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetComponentTickInterval
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UActorComponent::GetComponentTickInterval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetComponentTickInterval"));

	UActorComponent_GetComponentTickInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.Deactivate
// ()
void UActorComponent::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Deactivate"));

	UActorComponent_Deactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.ComponentHasTag
// ()
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UActorComponent::ComponentHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ComponentHasTag"));

	UActorComponent_ComponentHasTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ActorComponent.AddTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteComponent"));

	UActorComponent_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.AddTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteActor"));

	UActorComponent_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ActorComponent.Activate
// ()
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UActorComponent::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Activate"));

	UActorComponent_Activate_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UActorComponent::AfterRead()
{
	UObject::AfterRead();

}

void UActorComponent::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SceneComponent.ToggleVisibility
// ()
// Parameters:
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::ToggleVisibility(bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ToggleVisibility"));

	USceneComponent_ToggleVisibility_Params params;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SnapTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::SnapTo(class USceneComponent* InParent, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SnapTo"));

	USceneComponent_SnapTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.SetWorldScale3D
// ()
// Parameters:
// struct FVector                 NewScale                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetWorldScale3D(const struct FVector& NewScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetWorldScale3D"));

	USceneComponent_SetWorldScale3D_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetVisibility
// ()
// Parameters:
// bool                           bNewVisibility                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetVisibility"));

	USceneComponent_SetVisibility_Params params;
	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume
// ()
// Parameters:
// bool                           bInShouldUpdatePhysicsVolume   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume"));

	USceneComponent_SetShouldUpdatePhysicsVolume_Params params;
	params.bInShouldUpdatePhysicsVolume = bInShouldUpdatePhysicsVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetRelativeScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetRelativeScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetRelativeScale3D"));

	USceneComponent_SetRelativeScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetMobility
// ()
// Parameters:
// TEnumAsByte<Engine_EComponentMobility> NewMobility                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetMobility(TEnumAsByte<Engine_EComponentMobility> NewMobility)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetMobility"));

	USceneComponent_SetMobility_Params params;
	params.NewMobility = NewMobility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetHiddenInGame
// ()
// Parameters:
// bool                           NewHidden                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetHiddenInGame"));

	USceneComponent_SetHiddenInGame_Params params;
	params.NewHidden = NewHidden;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.SetAbsolute
// ()
// Parameters:
// bool                           bNewAbsoluteLocation           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewAbsoluteRotation           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewAbsoluteScale              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetAbsolute"));

	USceneComponent_SetAbsolute_Params params;
	params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	params.bNewAbsoluteScale = bNewAbsoluteScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.ResetRelativeTransform
// ()
void USceneComponent::ResetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ResetRelativeTransform"));

	USceneComponent_ResetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.OnRep_Visibility
// ()
// Parameters:
// bool                           OldValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::OnRep_Visibility(bool OldValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Visibility"));

	USceneComponent_OnRep_Visibility_Params params;
	params.OldValue = OldValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.OnRep_Transform
// ()
void USceneComponent::OnRep_Transform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Transform"));

	USceneComponent_OnRep_Transform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.OnRep_AttachSocketName
// ()
void USceneComponent::OnRep_AttachSocketName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_AttachSocketName"));

	USceneComponent_OnRep_AttachSocketName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.OnRep_AttachParent
// ()
void USceneComponent::OnRep_AttachParent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_AttachParent"));

	USceneComponent_OnRep_AttachParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.OnRep_AttachChildren
// ()
void USceneComponent::OnRep_AttachChildren()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_AttachChildren"));

	USceneComponent_OnRep_AttachChildren_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.K2_SetWorldTransform
// ()
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldTransform"));

	USceneComponent_K2_SetWorldTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetWorldRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldRotation"));

	USceneComponent_K2_SetWorldRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation"));

	USceneComponent_K2_SetWorldLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetWorldLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocation"));

	USceneComponent_K2_SetWorldLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetRelativeTransform
// ()
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeTransform"));

	USceneComponent_K2_SetRelativeTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetRelativeRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeRotation"));

	USceneComponent_K2_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation"));

	USceneComponent_K2_SetRelativeLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_SetRelativeLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocation"));

	USceneComponent_K2_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_GetComponentToWorld
// ()
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USceneComponent::K2_GetComponentToWorld()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentToWorld"));

	USceneComponent_K2_GetComponentToWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentScale
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::K2_GetComponentScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentScale"));

	USceneComponent_K2_GetComponentScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USceneComponent::K2_GetComponentRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentRotation"));

	USceneComponent_K2_GetComponentRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::K2_GetComponentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentLocation"));

	USceneComponent_K2_GetComponentLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_DetachFromComponent
// ()
// Parameters:
// Engine_EDetachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EDetachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EDetachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCallModify                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_DetachFromComponent(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule, bool bCallModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_DetachFromComponent"));

	USceneComponent_K2_DetachFromComponent_Params params;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneComponent.K2_AttachToComponent
// ()
// Parameters:
// class USceneComponent*         Parent                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AttachToComponent"));

	USceneComponent_K2_AttachToComponent_Params params;
	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_AttachTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> AttachType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AttachTo"));

	USceneComponent_K2_AttachTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachType = AttachType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_AddWorldTransformKeepScale
// ()
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldTransformKeepScale"));

	USceneComponent_K2_AddWorldTransformKeepScale_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddWorldTransform
// ()
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldTransform"));

	USceneComponent_K2_AddWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddWorldRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldRotation"));

	USceneComponent_K2_AddWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddWorldOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldOffset"));

	USceneComponent_K2_AddWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddRelativeRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeRotation"));

	USceneComponent_K2_AddRelativeRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddRelativeLocation
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeLocation"));

	USceneComponent_K2_AddRelativeLocation_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddLocalTransform
// ()
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalTransform"));

	USceneComponent_K2_AddLocalTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddLocalRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalRotation"));

	USceneComponent_K2_AddLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.K2_AddLocalOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepHitResult                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalOffset"));

	USceneComponent_K2_AddLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

}


// Function Engine.SceneComponent.IsVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::IsVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsVisible"));

	USceneComponent_IsVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsSimulatingPhysics
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::IsSimulatingPhysics(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsSimulatingPhysics"));

	USceneComponent_IsSimulatingPhysics_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsAnySimulatingPhysics
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::IsAnySimulatingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsAnySimulatingPhysics"));

	USceneComponent_IsAnySimulatingPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetUpVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::GetUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetUpVector"));

	USceneComponent_GetUpVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketTransform
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USceneComponent::GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketTransform"));

	USceneComponent_GetSocketTransform_Params params;
	params.InSocketName = InSocketName;
	params.TransformSpace = TransformSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketRotation
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USceneComponent::GetSocketRotation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketRotation"));

	USceneComponent_GetSocketRotation_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketQuaternion
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat USceneComponent::GetSocketQuaternion(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketQuaternion"));

	USceneComponent_GetSocketQuaternion_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketLocation
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::GetSocketLocation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketLocation"));

	USceneComponent_GetSocketLocation_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::GetShouldUpdatePhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume"));

	USceneComponent_GetShouldUpdatePhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRightVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::GetRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRightVector"));

	USceneComponent_GetRightVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRelativeTransform
// ()
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USceneComponent::GetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRelativeTransform"));

	USceneComponent_GetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetPhysicsVolume
// ()
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APhysicsVolume* USceneComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetPhysicsVolume"));

	USceneComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetParentComponents
// ()
// Parameters:
// TArray<class USceneComponent*> Parents                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void USceneComponent::GetParentComponents(TArray<class USceneComponent*>* Parents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetParentComponents"));

	USceneComponent_GetParentComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Parents != nullptr)
		*Parents = params.Parents;

}


// Function Engine.SceneComponent.GetNumChildrenComponents
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USceneComponent::GetNumChildrenComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetNumChildrenComponents"));

	USceneComponent_GetNumChildrenComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetForwardVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::GetForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetForwardVector"));

	USceneComponent_GetForwardVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetComponentVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USceneComponent::GetComponentVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetComponentVelocity"));

	USceneComponent_GetComponentVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetChildrenComponents
// ()
// Parameters:
// bool                           bIncludeAllDescendants         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USceneComponent*> Children                       (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildrenComponents"));

	USceneComponent_GetChildrenComponents_Params params;
	params.bIncludeAllDescendants = bIncludeAllDescendants;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Children != nullptr)
		*Children = params.Children;

}


// Function Engine.SceneComponent.GetChildComponent
// ()
// Parameters:
// int                            ChildIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USceneComponent* USceneComponent::GetChildComponent(int ChildIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildComponent"));

	USceneComponent_GetChildComponent_Params params;
	params.ChildIndex = ChildIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachSocketName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USceneComponent::GetAttachSocketName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachSocketName"));

	USceneComponent_GetAttachSocketName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachParent
// ()
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USceneComponent* USceneComponent::GetAttachParent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachParent"));

	USceneComponent_GetAttachParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAllSocketNames
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FName> USceneComponent::GetAllSocketNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAllSocketNames"));

	USceneComponent_GetAllSocketNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.DoesSocketExist
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USceneComponent::DoesSocketExist(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DoesSocketExist"));

	USceneComponent_DoesSocketExist_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SceneComponent.DetachFromParent
// ()
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCallModify                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DetachFromParent"));

	USceneComponent_DetachFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;
	params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USceneComponent::AfterRead()
{
	UActorComponent::AfterRead();

	READ_PTR_FULL(AttachParent, USceneComponent);
}

void USceneComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

	DELE_PTR_FULL(AttachParent);
}

void USoundBase::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SoundClassObject, USoundClass);
	READ_PTR_FULL(AttenuationSettings, USoundAttenuation);
	READ_PTR_FULL(SoundSubmixObject, USoundSubmixBase);
	READ_PTR_FULL(SourceEffectChain, USoundEffectSourcePresetChain);
}

void USoundBase::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SoundClassObject);
	DELE_PTR_FULL(AttenuationSettings);
	DELE_PTR_FULL(SoundSubmixObject);
	DELE_PTR_FULL(SourceEffectChain);
}

void ABrush::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(Brush, UModel);
	READ_PTR_FULL(BrushComponent, UBrushComponent);
}

void ABrush::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(Brush);
	DELE_PTR_FULL(BrushComponent);
}

void AVolume::AfterRead()
{
	ABrush::AfterRead();

}

void AVolume::BeforeDelete()
{
	ABrush::BeforeDelete();

}

// Function Engine.World.K2_GetWorldSettings
// ()
// Parameters:
// class AWorldSettings*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AWorldSettings* UWorld::K2_GetWorldSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.World.K2_GetWorldSettings"));

	UWorld_K2_GetWorldSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.World.HandleTimelineScrubbed
// ()
void UWorld::HandleTimelineScrubbed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.World.HandleTimelineScrubbed"));

	UWorld_HandleTimelineScrubbed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UWorld::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(PersistentLevel, ULevel);
	READ_PTR_FULL(NetDriver, UNetDriver);
	READ_PTR_FULL(LineBatcher, ULineBatchComponent);
	READ_PTR_FULL(PersistentLineBatcher, ULineBatchComponent);
	READ_PTR_FULL(ForegroundLineBatcher, ULineBatchComponent);
	READ_PTR_FULL(NetworkManager, AGameNetworkManager);
	READ_PTR_FULL(PhysicsCollisionHandler, UPhysicsCollisionHandler);
	READ_PTR_FULL(CurrentLevelPendingVisibility, ULevel);
	READ_PTR_FULL(CurrentLevelPendingInvisibility, ULevel);
	READ_PTR_FULL(DemoNetDriver, UDemoNetDriver);
	READ_PTR_FULL(MyParticleEventManager, AParticleEventManager);
	READ_PTR_FULL(DefaultPhysicsVolume, APhysicsVolume);
	READ_PTR_FULL(NavigationSystem, UNavigationSystemBase);
	READ_PTR_FULL(AuthorityGameMode, AGameModeBase);
	READ_PTR_FULL(GameState, AGameStateBase);
	READ_PTR_FULL(AISystem, UAISystemBase);
	READ_PTR_FULL(AvoidanceManager, UAvoidanceManager);
	READ_PTR_FULL(OwningGameInstance, UGameInstance);
	READ_PTR_FULL(CanvasForRenderingToTarget, UCanvas);
	READ_PTR_FULL(CanvasForDrawMaterialToRenderTarget, UCanvas);
	READ_PTR_FULL(WorldComposition, UWorldComposition);
}

void UWorld::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(PersistentLevel);
	DELE_PTR_FULL(NetDriver);
	DELE_PTR_FULL(LineBatcher);
	DELE_PTR_FULL(PersistentLineBatcher);
	DELE_PTR_FULL(ForegroundLineBatcher);
	DELE_PTR_FULL(NetworkManager);
	DELE_PTR_FULL(PhysicsCollisionHandler);
	DELE_PTR_FULL(CurrentLevelPendingVisibility);
	DELE_PTR_FULL(CurrentLevelPendingInvisibility);
	DELE_PTR_FULL(DemoNetDriver);
	DELE_PTR_FULL(MyParticleEventManager);
	DELE_PTR_FULL(DefaultPhysicsVolume);
	DELE_PTR_FULL(NavigationSystem);
	DELE_PTR_FULL(AuthorityGameMode);
	DELE_PTR_FULL(GameState);
	DELE_PTR_FULL(AISystem);
	DELE_PTR_FULL(AvoidanceManager);
	DELE_PTR_FULL(OwningGameInstance);
	DELE_PTR_FULL(CanvasForRenderingToTarget);
	DELE_PTR_FULL(CanvasForDrawMaterialToRenderTarget);
	DELE_PTR_FULL(WorldComposition);
}

void UInterpTrack::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(TrackInstClass, UClass);
}

void UInterpTrack::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(TrackInstClass);
}

void UInterpTrackVectorBase::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackVectorBase::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackFloatBase::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackFloatBase::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackInst::AfterRead()
{
	UObject::AfterRead();

}

void UInterpTrackInst::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCameraShakeBase::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CameraManager, APlayerCameraManager);
}

void UCameraShakeBase::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CameraManager);
}

// Function Engine.Pawn.SpawnDefaultController
// ()
void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SpawnDefaultController"));

	APawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.SetCanAffectNavigationGeneration
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceUpdate                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SetCanAffectNavigationGeneration"));

	APawn_SetCanAffectNavigationGeneration_Params params;
	params.bNewValue = bNewValue;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.ReceiveUnpossessed
// ()
// Parameters:
// class AController*             OldController                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::ReceiveUnpossessed(class AController* OldController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceiveUnpossessed"));

	APawn_ReceiveUnpossessed_Params params;
	params.OldController = OldController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.ReceivePossessed
// ()
// Parameters:
// class AController*             NewController                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::ReceivePossessed(class AController* NewController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceivePossessed"));

	APawn_ReceivePossessed_Params params;
	params.NewController = NewController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.PawnMakeNoise
// ()
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseNoiseMakerLocation         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.PawnMakeNoise"));

	APawn_PawnMakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;
	params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.OnRep_PlayerState
// ()
void APawn::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_PlayerState"));

	APawn_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.OnRep_Controller
// ()
void APawn::OnRep_Controller()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_Controller"));

	APawn_OnRep_Controller_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.LaunchPawn
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.LaunchPawn"));

	APawn_LaunchPawn_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.K2_GetMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APawn::K2_GetMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.K2_GetMovementInputVector"));

	APawn_K2_GetMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsPlayerControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsPlayerControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsPlayerControlled"));

	APawn_IsPlayerControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsPawnControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsPawnControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsPawnControlled"));

	APawn_IsPawnControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsMoveInputIgnored"));

	APawn_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsLocallyControlled"));

	APawn_IsLocallyControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsControlled"));

	APawn_IsControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.IsBotControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APawn::IsBotControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsBotControlled"));

	APawn_IsBotControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetPendingMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APawn::GetPendingMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetPendingMovementInputVector"));

	APawn_GetPendingMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetNavAgentLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APawn::GetNavAgentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetNavAgentLocation"));

	APawn_GetNavAgentLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementComponent
// ()
// Parameters:
// class UPawnMovementComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPawnMovementComponent* APawn::GetMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementComponent"));

	APawn_GetMovementComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementBaseActor
// ()
// Parameters:
// class APawn*                   Pawn                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* APawn::GetMovementBaseActor(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementBaseActor"));

	APawn_GetMovementBaseActor_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetLastMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APawn::GetLastMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetLastMovementInputVector"));

	APawn_GetLastMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetControlRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator APawn::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetControlRotation"));

	APawn_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetController
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AController* APawn::GetController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetController"));

	APawn_GetController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetBaseAimRotation"));

	APawn_GetBaseAimRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.DetachFromControllerPendingDestroy
// ()
void APawn::DetachFromControllerPendingDestroy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.DetachFromControllerPendingDestroy"));

	APawn_DetachFromControllerPendingDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.ConsumeMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APawn::ConsumeMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ConsumeMovementInputVector"));

	APawn_ConsumeMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Pawn.AddMovementInput
// ()
// Parameters:
// struct FVector                 WorldDirection                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScaleValue                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddMovementInput"));

	APawn_AddMovementInput_Params params;
	params.WorldDirection = WorldDirection;
	params.ScaleValue = ScaleValue;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.AddControllerYawInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::AddControllerYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerYawInput"));

	APawn_AddControllerYawInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.AddControllerRollInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::AddControllerRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerRollInput"));

	APawn_AddControllerRollInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Pawn.AddControllerPitchInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APawn::AddControllerPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerPitchInput"));

	APawn_AddControllerPitchInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void APawn::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(AIControllerClass, UClass);
	READ_PTR_FULL(PlayerState, APlayerState);
	READ_PTR_FULL(LastHitBy, AController);
	READ_PTR_FULL(Controller, AController);
}

void APawn::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(AIControllerClass);
	DELE_PTR_FULL(PlayerState);
	DELE_PTR_FULL(LastHitBy);
	DELE_PTR_FULL(Controller);
}

// Function Engine.PrimitiveComponent.WasRecentlyRendered
// ()
// Parameters:
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::WasRecentlyRendered(float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WasRecentlyRendered"));

	UPrimitiveComponent_WasRecentlyRendered_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeRigidBody"));

	UPrimitiveComponent_WakeRigidBody_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.WakeAllRigidBodies
// ()
void UPrimitiveComponent::WakeAllRigidBodies()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeAllRigidBodies"));

	UPrimitiveComponent_WakeAllRigidBodies_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
// ()
// Parameters:
// struct FWalkableSlopeOverride  NewOverride                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride"));

	UPrimitiveComponent_SetWalkableSlopeOverride_Params params;
	params.NewOverride = NewOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetUseCCD
// ()
// Parameters:
// bool                           InUseCCD                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetUseCCD(bool InUseCCD, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetUseCCD"));

	UPrimitiveComponent_SetUseCCD_Params params;
	params.InUseCCD = InUseCCD;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
// ()
// Parameters:
// int                            NewTranslucentSortPriority     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetTranslucentSortPriority"));

	UPrimitiveComponent_SetTranslucentSortPriority_Params params;
	params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
// ()
// Parameters:
// bool                           bNewSingleSampleShadowFromStationaryLights (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights"));

	UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights_Params params;
	params.bNewSingleSampleShadowFromStationaryLights = bNewSingleSampleShadowFromStationaryLights;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetSimulatePhysics
// ()
// Parameters:
// bool                           bSimulate                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetSimulatePhysics"));

	UPrimitiveComponent_SetSimulatePhysics_Params params;
	params.bSimulate = bSimulate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetRenderInMainPass
// ()
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetRenderInMainPass(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderInMainPass"));

	UPrimitiveComponent_SetRenderInMainPass_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetRenderCustomDepth
// ()
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetRenderCustomDepth(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderCustomDepth"));

	UPrimitiveComponent_SetRenderCustomDepth_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetReceivesDecals
// ()
// Parameters:
// bool                           bNewReceivesDecals             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetReceivesDecals(bool bNewReceivesDecals)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetReceivesDecals"));

	UPrimitiveComponent_SetReceivesDecals_Params params;
	params.bNewReceivesDecals = bNewReceivesDecals;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// ()
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysMaterialOverride"));

	UPrimitiveComponent_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
// ()
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians"));

	UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians_Params params;
	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
// ()
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees"));

	UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees_Params params;
	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
// ()
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity"));

	UPrimitiveComponent_SetPhysicsMaxAngularVelocity_Params params;
	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
// ()
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity"));

	UPrimitiveComponent_SetPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
// ()
// Parameters:
// struct FVector                 NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians"));

	UPrimitiveComponent_SetPhysicsAngularVelocityInRadians_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
// ()
// Parameters:
// struct FVector                 NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees"));

	UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
// ()
// Parameters:
// struct FVector                 NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity"));

	UPrimitiveComponent_SetPhysicsAngularVelocity_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// ()
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOwnerNoSee"));

	UPrimitiveComponent_SetOwnerNoSee_Params params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// ()
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOnlyOwnerSee"));

	UPrimitiveComponent_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// ()
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision"));

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetMaterialByName
// ()
// Parameters:
// struct FName                   MaterialSlotName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMaterialByName"));

	UPrimitiveComponent_SetMaterialByName_Params params;
	params.MaterialSlotName = MaterialSlotName;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMaterial"));

	UPrimitiveComponent_SetMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetMassScale
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetMassScale(const struct FName& BoneName, float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassScale"));

	UPrimitiveComponent_SetMassScale_Params params;
	params.BoneName = BoneName;
	params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetMassOverrideInKg
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MassInKg                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bOverrideMass                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassOverrideInKg"));

	UPrimitiveComponent_SetMassOverrideInKg_Params params;
	params.BoneName = BoneName;
	params.MassInKg = MassInKg;
	params.bOverrideMass = bOverrideMass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetLinearDamping
// ()
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetLinearDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLinearDamping"));

	UPrimitiveComponent_SetLinearDamping_Params params;
	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetLightingChannels
// ()
// Parameters:
// bool                           bChannel0                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bChannel1                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bChannel2                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLightingChannels"));

	UPrimitiveComponent_SetLightingChannels_Params params;
	params.bChannel0 = bChannel0;
	params.bChannel1 = bChannel1;
	params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
// ()
// Parameters:
// bool                           bInLightAttachmentsAsGroup     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup"));

	UPrimitiveComponent_SetLightAttachmentsAsGroup_Params params;
	params.bInLightAttachmentsAsGroup = bInLightAttachmentsAsGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
// ()
// Parameters:
// bool                           bInGenerateOverlapEvents       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetGenerateOverlapEvents(bool bInGenerateOverlapEvents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetGenerateOverlapEvents"));

	UPrimitiveComponent_SetGenerateOverlapEvents_Params params;
	params.bInGenerateOverlapEvents = bInGenerateOverlapEvents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
// ()
// Parameters:
// bool                           bInExcludeFromLightAttachmentGroup (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup"));

	UPrimitiveComponent_SetExcludeFromLightAttachmentGroup_Params params;
	params.bInExcludeFromLightAttachmentGroup = bInExcludeFromLightAttachmentGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetEnableGravity
// ()
// Parameters:
// bool                           bGravityEnabled                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetEnableGravity"));

	UPrimitiveComponent_SetEnableGravity_Params params;
	params.bGravityEnabled = bGravityEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetDefaultCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4"));

	UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetDefaultCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3"));

	UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetDefaultCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2"));

	UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat"));

	UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4"));

	UPrimitiveComponent_SetCustomPrimitiveDataVector4_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3"));

	UPrimitiveComponent_SetCustomPrimitiveDataVector3_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2"));

	UPrimitiveComponent_SetCustomPrimitiveDataVector2_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
// ()
// Parameters:
// int                            DataIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomPrimitiveDataFloat(int DataIndex, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat"));

	UPrimitiveComponent_SetCustomPrimitiveDataFloat_Params params;
	params.DataIndex = DataIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
// ()
// Parameters:
// Engine_ERendererStencilMask    WriteMaskBit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomDepthStencilWriteMask(Engine_ERendererStencilMask WriteMaskBit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask"));

	UPrimitiveComponent_SetCustomDepthStencilWriteMask_Params params;
	params.WriteMaskBit = WriteMaskBit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCustomDepthStencilValue(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue"));

	UPrimitiveComponent_SetCustomDepthStencilValue_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCullDistance
// ()
// Parameters:
// float                          NewCullDistance                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCullDistance"));

	UPrimitiveComponent_SetCullDistance_Params params;
	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetConstraintMode
// ()
// Parameters:
// TEnumAsByte<Engine_EDOFMode>   ConstraintMode                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetConstraintMode(TEnumAsByte<Engine_EDOFMode> ConstraintMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetConstraintMode"));

	UPrimitiveComponent_SetConstraintMode_Params params;
	params.ConstraintMode = ConstraintMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel, TEnumAsByte<Engine_ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel"));

	UPrimitiveComponent_SetCollisionResponseToChannel_Params params;
	params.Channel = Channel;
	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<Engine_ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels"));

	UPrimitiveComponent_SetCollisionResponseToAllChannels_Params params;
	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCollisionProfileName
// ()
// Parameters:
// struct FName                   InCollisionProfileName         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCollisionProfileName(const struct FName& InCollisionProfileName, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionProfileName"));

	UPrimitiveComponent_SetCollisionProfileName_Params params;
	params.InCollisionProfileName = InCollisionProfileName;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCollisionObjectType
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<Engine_ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionObjectType"));

	UPrimitiveComponent_SetCollisionObjectType_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCollisionEnabled
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionEnabled> NewType                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<Engine_ECollisionEnabled> NewType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionEnabled"));

	UPrimitiveComponent_SetCollisionEnabled_Params params;
	params.NewType = NewType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCenterOfMass
// ()
// Parameters:
// struct FVector                 CenterOfMassOffset             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCenterOfMass"));

	UPrimitiveComponent_SetCenterOfMass_Params params;
	params.CenterOfMassOffset = CenterOfMassOffset;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCastShadow
// ()
// Parameters:
// bool                           NewCastShadow                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCastShadow(bool NewCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCastShadow"));

	UPrimitiveComponent_SetCastShadow_Params params;
	params.NewCastShadow = NewCastShadow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetCastInsetShadow
// ()
// Parameters:
// bool                           bInCastInsetShadow             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetCastInsetShadow(bool bInCastInsetShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCastInsetShadow"));

	UPrimitiveComponent_SetCastInsetShadow_Params params;
	params.bInCastInsetShadow = bInCastInsetShadow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetBoundsScale
// ()
// Parameters:
// float                          NewBoundsScale                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetBoundsScale(float NewBoundsScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetBoundsScale"));

	UPrimitiveComponent_SetBoundsScale_Params params;
	params.NewBoundsScale = NewBoundsScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAngularDamping
// ()
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAngularDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAngularDamping"));

	UPrimitiveComponent_SetAngularDamping_Params params;
	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAllUseCCD
// ()
// Parameters:
// bool                           InUseCCD                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAllUseCCD(bool InUseCCD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllUseCCD"));

	UPrimitiveComponent_SetAllUseCCD_Params params;
	params.InUseCCD = InUseCCD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
// ()
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity"));

	UPrimitiveComponent_SetAllPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
// ()
// Parameters:
// struct FVector                 NewAngVel                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians"));

	UPrimitiveComponent_SetAllPhysicsAngularVelocityInRadians_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
// ()
// Parameters:
// struct FVector                 NewAngVel                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees"));

	UPrimitiveComponent_SetAllPhysicsAngularVelocityInDegrees_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.SetAllMassScale
// ()
// Parameters:
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::SetAllMassScale(float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllMassScale"));

	UPrimitiveComponent_SetAllMassScale_Params params;
	params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
// ()
// Parameters:
// struct FVector                 InputVector                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia"));

	UPrimitiveComponent_ScaleByMomentOfInertia_Params params;
	params.InputVector = InputVector;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.PutRigidBodyToSleep"));

	UPrimitiveComponent_PutRigidBodyToSleep_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.K2_SphereTraceComponent
// ()
// Parameters:
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistentShowTrace           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_SphereTraceComponent"));

	UPrimitiveComponent_K2_SphereTraceComponent_Params params;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.SphereRadius = SphereRadius;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;
	params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_SphereOverlapComponent
// ()
// Parameters:
// struct FVector                 InSphereCentre                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InSphereRadius                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistentShowTrace           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_SphereOverlapComponent"));

	UPrimitiveComponent_K2_SphereOverlapComponent_Params params;
	params.InSphereCentre = InSphereCentre;
	params.InSphereRadius = InSphereRadius;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;
	params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_LineTraceComponent
// ()
// Parameters:
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistentShowTrace           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_LineTraceComponent"));

	UPrimitiveComponent_K2_LineTraceComponent_Params params;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;
	params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_IsQueryCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled"));

	UPrimitiveComponent_K2_IsQueryCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_IsPhysicsCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled"));

	UPrimitiveComponent_K2_IsPhysicsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_IsCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_IsCollisionEnabled"));

	UPrimitiveComponent_K2_IsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.K2_BoxOverlapComponent
// ()
// Parameters:
// struct FVector                 InBoxCentre                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                    InBox                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistentShowTrace           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_BoxOverlapComponent"));

	UPrimitiveComponent_K2_BoxOverlapComponent_Params params;
	params.InBoxCentre = InBoxCentre;
	params.InBox = InBox;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;
	params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingComponent
// ()
// Parameters:
// class UPrimitiveComponent*     OtherComp                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::IsOverlappingComponent(class UPrimitiveComponent* OtherComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingComponent"));

	UPrimitiveComponent_IsOverlappingComponent_Params params;
	params.OtherComp = OtherComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingActor
// ()
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::IsOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingActor"));

	UPrimitiveComponent_IsOverlappingActor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsGravityEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::IsGravityEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsGravityEnabled"));

	UPrimitiveComponent_IsGravityEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::IsAnyRigidBodyAwake()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake"));

	UPrimitiveComponent_IsAnyRigidBodyAwake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShouldIgnore                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving"));

	UPrimitiveComponent_IgnoreComponentWhenMoving_Params params;
	params.Component = Component;
	params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShouldIgnore                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving"));

	UPrimitiveComponent_IgnoreActorWhenMoving_Params params;
	params.Actor = Actor;
	params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
// ()
// Parameters:
// struct FWalkableSlopeOverride  ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride"));

	UPrimitiveComponent_GetWalkableSlopeOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint"));

	UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_Params params;
	params.Point = Point;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity"));

	UPrimitiveComponent_GetPhysicsLinearVelocity_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInRadians(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians"));

	UPrimitiveComponent_GetPhysicsAngularVelocityInRadians_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees"));

	UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity"));

	UPrimitiveComponent_GetPhysicsAngularVelocity_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetOverlappingComponents
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> OutOverlappingComponents       (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UPrimitiveComponent::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingComponents"));

	UPrimitiveComponent_GetOverlappingComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutOverlappingComponents != nullptr)
		*OutOverlappingComponents = params.OutOverlappingComponents;

}


// Function Engine.PrimitiveComponent.GetOverlappingActors
// ()
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingActors"));

	UPrimitiveComponent_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;

}


// Function Engine.PrimitiveComponent.GetNumMaterials
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UPrimitiveComponent::GetNumMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetNumMaterials"));

	UPrimitiveComponent_GetNumMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
// ()
// Parameters:
// int                            FaceIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SectionIndex                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* UPrimitiveComponent::GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex"));

	UPrimitiveComponent_GetMaterialFromCollisionFaceIndex_Params params;
	params.FaceIndex = FaceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SectionIndex != nullptr)
		*SectionIndex = params.SectionIndex;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMaterial"));

	UPrimitiveComponent_GetMaterial_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMassScale
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPrimitiveComponent::GetMassScale(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMassScale"));

	UPrimitiveComponent_GetMassScale_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMass
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPrimitiveComponent::GetMass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMass"));

	UPrimitiveComponent_GetMass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetLinearDamping
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPrimitiveComponent::GetLinearDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetLinearDamping"));

	UPrimitiveComponent_GetLinearDamping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetInertiaTensor
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetInertiaTensor(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetInertiaTensor"));

	UPrimitiveComponent_GetInertiaTensor_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetGenerateOverlapEvents
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::GetGenerateOverlapEvents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetGenerateOverlapEvents"));

	UPrimitiveComponent_GetGenerateOverlapEvents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionResponse> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ECollisionResponse> UPrimitiveComponent::GetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel"));

	UPrimitiveComponent_GetCollisionResponseToChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionProfileName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UPrimitiveComponent::GetCollisionProfileName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionProfileName"));

	UPrimitiveComponent_GetCollisionProfileName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionObjectType
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ECollisionChannel> UPrimitiveComponent::GetCollisionObjectType()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionObjectType"));

	UPrimitiveComponent_GetCollisionObjectType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionEnabled
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionEnabled> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ECollisionEnabled> UPrimitiveComponent::GetCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionEnabled"));

	UPrimitiveComponent_GetCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetClosestPointOnCollision
// ()
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutPointOnBody                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPrimitiveComponent::GetClosestPointOnCollision(const struct FVector& Point, struct FVector* OutPointOnBody, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetClosestPointOnCollision"));

	UPrimitiveComponent_GetClosestPointOnCollision_Params params;
	params.Point = Point;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPointOnBody != nullptr)
		*OutPointOnBody = params.OutPointOnBody;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCenterOfMass
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPrimitiveComponent::GetCenterOfMass(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCenterOfMass"));

	UPrimitiveComponent_GetCenterOfMass_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetAngularDamping
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPrimitiveComponent::GetAngularDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetAngularDamping"));

	UPrimitiveComponent_GetAngularDamping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   OptionalName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial, const struct FName& OptionalName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance"));

	UPrimitiveComponent_CreateDynamicMaterialInstance_Params params;
	params.ElementIndex = ElementIndex;
	params.SourceMaterial = SourceMaterial;
	params.OptionalName = OptionalName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial"));

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic"));

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
TArray<class UPrimitiveComponent*> UPrimitiveComponent::CopyArrayOfMoveIgnoreComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents"));

	UPrimitiveComponent_CopyArrayOfMoveIgnoreComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
// ()
// Parameters:
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<class AActor*> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors"));

	UPrimitiveComponent_CopyArrayOfMoveIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents
// ()
void UPrimitiveComponent::ClearMoveIgnoreComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents"));

	UPrimitiveComponent_ClearMoveIgnoreComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
// ()
void UPrimitiveComponent::ClearMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors"));

	UPrimitiveComponent_ClearMoveIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.CanCharacterStepUp
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPrimitiveComponent::CanCharacterStepUp(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CanCharacterStepUp"));

	UPrimitiveComponent_CanCharacterStepUp_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.AddTorqueInRadians
// ()
// Parameters:
// struct FVector                 Torque                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddTorqueInRadians"));

	UPrimitiveComponent_AddTorqueInRadians_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddTorqueInDegrees
// ()
// Parameters:
// struct FVector                 Torque                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddTorqueInDegrees"));

	UPrimitiveComponent_AddTorqueInDegrees_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddTorque
// ()
// Parameters:
// struct FVector                 Torque                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddTorque"));

	UPrimitiveComponent_AddTorque_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialImpulse"));

	UPrimitiveComponent_AddRadialImpulse_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddRadialForce
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<PhysicsCore_ERadialImpulseFalloff> Falloff, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialForce"));

	UPrimitiveComponent_AddRadialForce_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddImpulseAtLocation
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulseAtLocation"));

	UPrimitiveComponent_AddImpulseAtLocation_Params params;
	params.Impulse = Impulse;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulse"));

	UPrimitiveComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddForceAtLocationLocal
// ()
// Parameters:
// struct FVector                 force                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForceAtLocationLocal"));

	UPrimitiveComponent_AddForceAtLocationLocal_Params params;
	params.force = force;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddForceAtLocation
// ()
// Parameters:
// struct FVector                 force                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForceAtLocation"));

	UPrimitiveComponent_AddForceAtLocation_Params params;
	params.force = force;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddForce
// ()
// Parameters:
// struct FVector                 force                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForce"));

	UPrimitiveComponent_AddForce_Params params;
	params.force = force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddAngularImpulseInRadians
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddAngularImpulseInRadians"));

	UPrimitiveComponent_AddAngularImpulseInRadians_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees"));

	UPrimitiveComponent_AddAngularImpulseInDegrees_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PrimitiveComponent.AddAngularImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPrimitiveComponent::AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddAngularImpulse"));

	UPrimitiveComponent_AddAngularImpulse_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPrimitiveComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(LODParentPrimitive, UPrimitiveComponent);
}

void UPrimitiveComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(LODParentPrimitive);
}

// Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
// ()
// Parameters:
// struct FName                   ParameterName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ParameterValue                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshComponent::SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.SetVectorParameterValueOnMaterials"));

	UMeshComponent_SetVectorParameterValueOnMaterials_Params params;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
// ()
// Parameters:
// struct FName                   ParameterName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ParameterValue                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshComponent::SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.SetScalarParameterValueOnMaterials"));

	UMeshComponent_SetScalarParameterValueOnMaterials_Params params;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MeshComponent.PrestreamTextures
// ()
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPrioritizeCharacterTextures   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.PrestreamTextures"));

	UMeshComponent_PrestreamTextures_Params params;
	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MeshComponent.IsMaterialSlotNameValid
// ()
// Parameters:
// struct FName                   MaterialSlotName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UMeshComponent::IsMaterialSlotNameValid(const struct FName& MaterialSlotName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.IsMaterialSlotNameValid"));

	UMeshComponent_IsMaterialSlotNameValid_Params params;
	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MeshComponent.GetMaterialSlotNames
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FName> UMeshComponent::GetMaterialSlotNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.GetMaterialSlotNames"));

	UMeshComponent_GetMaterialSlotNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MeshComponent.GetMaterials
// ()
// Parameters:
// TArray<class UMaterialInterface*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<class UMaterialInterface*> UMeshComponent::GetMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.GetMaterials"));

	UMeshComponent_GetMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MeshComponent.GetMaterialIndex
// ()
// Parameters:
// struct FName                   MaterialSlotName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UMeshComponent::GetMaterialIndex(const struct FName& MaterialSlotName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.GetMaterialIndex"));

	UMeshComponent_GetMaterialIndex_Params params;
	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UMeshComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void UMeshComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

// Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
// ()
// Parameters:
// struct FName                   InProfileName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::UnloadSkinWeightProfile(const struct FName& InProfileName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile"));

	USkinnedMeshComponent_UnloadSkinWeightProfile_Params params;
	params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.UnHideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.UnHideBoneByName"));

	USkinnedMeshComponent_UnHideBoneByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformToBoneSpace"));

	USkinnedMeshComponent_TransformToBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

}


// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace"));

	USkinnedMeshComponent_TransformFromBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

}


// Function Engine.SkinnedMeshComponent.ShowMaterialSection
// ()
// Parameters:
// int                            MaterialID                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SectionIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.ShowMaterialSection"));

	USkinnedMeshComponent_ShowMaterialSection_Params params;
	params.MaterialID = MaterialID;
	params.SectionIndex = SectionIndex;
	params.bShow = bShow;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.ShowAllMaterialSections
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::ShowAllMaterialSections(int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.ShowAllMaterialSections"));

	USkinnedMeshComponent_ShowAllMaterialSections_Params params;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            usage                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetVertexOffsetUsage(int LODIndex, int usage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage"));

	USkinnedMeshComponent_SetVertexOffsetUsage_Params params;
	params.LODIndex = LODIndex;
	params.usage = usage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>    VertexColors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor"));

	USkinnedMeshComponent_SetVertexColorOverride_LinearColor_Params params;
	params.LODIndex = LODIndex;
	params.VertexColors = VertexColors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetSkinWeightProfile
// ()
// Parameters:
// struct FName                   InProfileName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::SetSkinWeightProfile(const struct FName& InProfileName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetSkinWeightProfile"));

	USkinnedMeshComponent_SetSkinWeightProfile_Params params;
	params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSkelMeshSkinWeightInfo> SkinWeights                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetSkinWeightOverride"));

	USkinnedMeshComponent_SetSkinWeightOverride_Params params;
	params.LODIndex = LODIndex;
	params.SkinWeights = SkinWeights;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
// ()
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bReinitPose                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetSkeletalMesh"));

	USkinnedMeshComponent_SetSkeletalMesh_Params params;
	params.NewMesh = NewMesh;
	params.bReinitPose = bReinitPose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetRenderStatic
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetRenderStatic(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetRenderStatic"));

	USkinnedMeshComponent_SetRenderStatic_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>         Offsets                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetPreSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets"));

	USkinnedMeshComponent_SetPreSkinningOffsets_Params params;
	params.LODIndex = LODIndex;
	params.Offsets = Offsets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>         Offsets                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetPostSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets"));

	USkinnedMeshComponent_SetPostSkinningOffsets_Params params;
	params.LODIndex = LODIndex;
	params.Offsets = Offsets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
// ()
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceReInit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetPhysicsAsset"));

	USkinnedMeshComponent_SetPhysicsAsset_Params params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetMinLOD
// ()
// Parameters:
// int                            InNewMinLOD                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetMinLOD(int InNewMinLOD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetMinLOD"));

	USkinnedMeshComponent_SetMinLOD_Params params;
	params.InNewMinLOD = InNewMinLOD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
// ()
// Parameters:
// class USkinnedMeshComponent*   NewMasterBoneComponent         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceUpdate                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent"));

	USkinnedMeshComponent_SetMasterPoseComponent_Params params;
	params.NewMasterBoneComponent = NewMasterBoneComponent;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetForcedLOD
// ()
// Parameters:
// int                            InNewForcedLOD                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetForcedLOD(int InNewForcedLOD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetForcedLOD"));

	USkinnedMeshComponent_SetForcedLOD_Params params;
	params.InNewForcedLOD = InNewForcedLOD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetCastCapsuleIndirectShadow(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow"));

	USkinnedMeshComponent_SetCastCapsuleIndirectShadow_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetCastCapsuleDirectShadow(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow"));

	USkinnedMeshComponent_SetCastCapsuleDirectShadow_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility"));

	USkinnedMeshComponent_SetCapsuleIndirectShadowMinVisibility_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::IsUsingSkinWeightProfile()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile"));

	USkinnedMeshComponent_IsUsingSkinWeightProfile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.IsMaterialSectionShown
// ()
// Parameters:
// int                            MaterialID                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::IsMaterialSectionShown(int MaterialID, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.IsMaterialSectionShown"));

	USkinnedMeshComponent_IsMaterialSectionShown_Params params;
	params.MaterialID = MaterialID;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::IsBoneHiddenByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName"));

	USkinnedMeshComponent_IsBoneHiddenByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.HideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.HideBoneByName"));

	USkinnedMeshComponent_HideBoneByName_Params params;
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkinnedMeshComponent::GetVertexOffsetUsage(int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage"));

	USkinnedMeshComponent_GetVertexOffsetUsage_Params params;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutTwistAngle                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutSwingAngle                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose"));

	USkinnedMeshComponent_GetTwistAndSwingAngleOfDeltaRotationFromRefPose_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTwistAngle != nullptr)
		*OutTwistAngle = params.OutTwistAngle;
	if (OutSwingAngle != nullptr)
		*OutSwingAngle = params.OutSwingAngle;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetSocketBoneName
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkinnedMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetSocketBoneName"));

	USkinnedMeshComponent_GetSocketBoneName_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetRefPosePosition
// ()
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USkinnedMeshComponent::GetRefPosePosition(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetRefPosePosition"));

	USkinnedMeshComponent_GetRefPosePosition_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetParentBone
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkinnedMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetParentBone"));

	USkinnedMeshComponent_GetParentBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetNumLODs
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkinnedMeshComponent::GetNumLODs()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetNumLODs"));

	USkinnedMeshComponent_GetNumLODs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetNumBones
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkinnedMeshComponent::GetNumBones()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetNumBones"));

	USkinnedMeshComponent_GetNumBones_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetForcedLOD
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkinnedMeshComponent::GetForcedLOD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetForcedLOD"));

	USkinnedMeshComponent_GetForcedLOD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BaseName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USkinnedMeshComponent::GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose"));

	USkinnedMeshComponent_GetDeltaTransformFromRefPose_Params params;
	params.BoneName = BoneName;
	params.BaseName = BaseName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkinnedMeshComponent::GetCurrentSkinWeightProfileName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName"));

	USkinnedMeshComponent_GetCurrentSkinWeightProfileName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneName
// ()
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkinnedMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneName"));

	USkinnedMeshComponent_GetBoneName_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneIndex
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkinnedMeshComponent::GetBoneIndex(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneIndex"));

	USkinnedMeshComponent_GetBoneIndex_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.FindClosestBone_K2
// ()
// Parameters:
// struct FVector                 TestLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoneLocation                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          IgnoreScale                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRequirePhysicsAsset           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkinnedMeshComponent::FindClosestBone_K2(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.FindClosestBone_K2"));

	USkinnedMeshComponent_FindClosestBone_K2_Params params;
	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;
	params.bRequirePhysicsAsset = bRequirePhysicsAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BoneLocation != nullptr)
		*BoneLocation = params.BoneLocation;


	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::ClearVertexColorOverride(int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.ClearVertexColorOverride"));

	USkinnedMeshComponent_ClearVertexColorOverride_Params params;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile
// ()
void USkinnedMeshComponent::ClearSkinWeightProfile()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile"));

	USkinnedMeshComponent_ClearSkinWeightProfile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkinnedMeshComponent::ClearSkinWeightOverride(int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride"));

	USkinnedMeshComponent_ClearSkinWeightOverride_Params params;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkinnedMeshComponent.BoneIsChildOf
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParentBoneName                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkinnedMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.BoneIsChildOf"));

	USkinnedMeshComponent_BoneIsChildOf_Params params;
	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USkinnedMeshComponent::AfterRead()
{
	UMeshComponent::AfterRead();

	READ_PTR_FULL(SkeletalMesh, USkeletalMesh);
	READ_PTR_FULL(PhysicsAssetOverride, UPhysicsAsset);
}

void USkinnedMeshComponent::BeforeDelete()
{
	UMeshComponent::BeforeDelete();

	DELE_PTR_FULL(SkeletalMesh);
	DELE_PTR_FULL(PhysicsAssetOverride);
}

// Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::UnlinkAnimClassLayers(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers"));

	USkeletalMeshComponent_UnlinkAnimClassLayers_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
// ()
// Parameters:
// bool                           bRestoreSimulationSpace        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent"));

	USkeletalMeshComponent_UnbindClothFromMasterPoseComponent_Params params;
	params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
// ()
void USkeletalMeshComponent::ToggleDisablePostProcessBlueprint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint"));

	USkeletalMeshComponent_ToggleDisablePostProcessBlueprint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.TermBodiesBelow
// ()
// Parameters:
// struct FName                   ParentBoneName                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::TermBodiesBelow(const struct FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.TermBodiesBelow"));

	USkeletalMeshComponent_TermBodiesBelow_Params params;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SuspendClothingSimulation
// ()
void USkeletalMeshComponent::SuspendClothingSimulation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SuspendClothingSimulation"));

	USkeletalMeshComponent_SuspendClothingSimulation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.Stop
// ()
void USkeletalMeshComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Stop"));

	USkeletalMeshComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SnapshotPose
// ()
// Parameters:
// struct FPoseSnapshot           Snapshot                       (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SnapshotPose(struct FPoseSnapshot* Snapshot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SnapshotPose"));

	USkeletalMeshComponent_SnapshotPose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Snapshot != nullptr)
		*Snapshot = params.Snapshot;

}


// Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor
// ()
// Parameters:
// bool                           NewUpdateState                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetUpdateClothInEditor(bool NewUpdateState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor"));

	USkeletalMeshComponent_SetUpdateClothInEditor_Params params;
	params.NewUpdateState = NewUpdateState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
// ()
// Parameters:
// bool                           NewUpdateState                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetUpdateAnimationInEditor(bool NewUpdateState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor"));

	USkeletalMeshComponent_SetUpdateAnimationInEditor_Params params;
	params.NewUpdateState = NewUpdateState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
// ()
// Parameters:
// float                          Threshold                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetTeleportRotationThreshold(float Threshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold"));

	USkeletalMeshComponent_SetTeleportRotationThreshold_Params params;
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
// ()
// Parameters:
// float                          Threshold                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetTeleportDistanceThreshold(float Threshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold"));

	USkeletalMeshComponent_SetTeleportDistanceThreshold_Params params;
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetPosition
// ()
// Parameters:
// float                          InPos                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPosition"));

	USkeletalMeshComponent_SetPosition_Params params;
	params.InPos = InPos;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetPlayRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetPlayRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPlayRate"));

	USkeletalMeshComponent_SetPlayRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
// ()
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight"));

	USkeletalMeshComponent_SetPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
// ()
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow"));

	USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	params.BoneName = BoneName;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRemoveZeroWeight              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetMorphTarget"));

	USkeletalMeshComponent_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;
	params.bRemoveZeroWeight = bRemoveZeroWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
// ()
// Parameters:
// bool                           bNewBlendPhysics               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending"));

	USkeletalMeshComponent_SetEnablePhysicsBlending_Params params;
	params.bNewBlendPhysics = bNewBlendPhysics;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
// ()
// Parameters:
// bool                           bEnableGravity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow"));

	USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow_Params params;
	params.bEnableGravity = bEnableGravity;
	params.BoneName = BoneName;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
// ()
// Parameters:
// bool                           bEnableGravity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetEnableBodyGravity"));

	USkeletalMeshComponent_SetEnableBodyGravity_Params params;
	params.bEnableGravity = bEnableGravity;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
// ()
// Parameters:
// bool                           bInDisablePostProcess          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetDisablePostProcessBlueprint(bool bInDisablePostProcess)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint"));

	USkeletalMeshComponent_SetDisablePostProcessBlueprint_Params params;
	params.bInDisablePostProcess = bInDisablePostProcess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
// ()
// Parameters:
// bool                           bInDisableAnimCurves           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetDisableAnimCurves(bool bInDisableAnimCurves)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetDisableAnimCurves"));

	USkeletalMeshComponent_SetDisableAnimCurves_Params params;
	params.bInDisableAnimCurves = bInDisableAnimCurves;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
// ()
// Parameters:
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDefaultIfNotFound             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll"));

	USkeletalMeshComponent_SetConstraintProfileForAll_Params params;
	params.ProfileName = ProfileName;
	params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetConstraintProfile
// ()
// Parameters:
// struct FName                   JointName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDefaultIfNotFound             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetConstraintProfile"));

	USkeletalMeshComponent_SetConstraintProfile_Params params;
	params.JointName = JointName;
	params.ProfileName = ProfileName;
	params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
// ()
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale"));

	USkeletalMeshComponent_SetClothMaxDistanceScale_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
// ()
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision"));

	USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAnimClass
// ()
// Parameters:
// class UClass*                  NewClass                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAnimClass(class UClass* NewClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimClass"));

	USkeletalMeshComponent_SetAnimClass_Params params;
	params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAnimationMode
// ()
// Parameters:
// TEnumAsByte<Engine_EAnimationMode> InAnimationMode                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<Engine_EAnimationMode> InAnimationMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimationMode"));

	USkeletalMeshComponent_SetAnimationMode_Params params;
	params.InAnimationMode = InAnimationMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAnimation
// ()
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAnimation(class UAnimationAsset* NewAnimToPlay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimation"));

	USkeletalMeshComponent_SetAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAngularLimits
// ()
// Parameters:
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing1LimitAngle               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TwistLimitAngle                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing2LimitAngle               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAngularLimits"));

	USkeletalMeshComponent_SetAngularLimits_Params params;
	params.InBoneName = InBoneName;
	params.Swing1LimitAngle = Swing1LimitAngle;
	params.TwistLimitAngle = TwistLimitAngle;
	params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
// ()
// Parameters:
// bool                           bInAllow                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bReinitAnim                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode"));

	USkeletalMeshComponent_SetAllowRigidBodyAnimNode_Params params;
	params.bInAllow = bInAllow;
	params.bReinitAnim = bReinitAnim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
// ()
// Parameters:
// TArray<struct FName>           List                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bAllow                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation"));

	USkeletalMeshComponent_SetAllowedAnimCurvesEvaluation_Params params;
	params.List = List;
	params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
// ()
// Parameters:
// bool                           bInAllow                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllowAnimCurveEvaluation(bool bInAllow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation"));

	USkeletalMeshComponent_SetAllowAnimCurveEvaluation_Params params;
	params.bInAllow = bInAllow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive"));

	USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive"));

	USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams"));

	USkeletalMeshComponent_SetAllMotorsAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
// ()
// Parameters:
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics"));

	USkeletalMeshComponent_SetAllBodiesSimulatePhysics_Params params;
	params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
// ()
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight"));

	USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics"));

	USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics_Params params;
	params.InBoneName = InBoneName;
	params.bNewSimulate = bNewSimulate;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight"));

	USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ResumeClothingSimulation
// ()
void USkeletalMeshComponent::ResumeClothingSimulation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResumeClothingSimulation"));

	USkeletalMeshComponent_ResumeClothingSimulation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
// ()
void USkeletalMeshComponent::ResetClothTeleportMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode"));

	USkeletalMeshComponent_ResetClothTeleportMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
// ()
// Parameters:
// Engine_ETeleportType           InTeleportType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::ResetAnimInstanceDynamics(Engine_ETeleportType InTeleportType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics"));

	USkeletalMeshComponent_ResetAnimInstanceDynamics_Params params;
	params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
// ()
void USkeletalMeshComponent::ResetAllowedAnimCurveEvaluation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation"));

	USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
// ()
void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics"));

	USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.PlayAnimation
// ()
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.PlayAnimation"));

	USkeletalMeshComponent_PlayAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.Play
// ()
// Parameters:
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::Play(bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Play"));

	USkeletalMeshComponent_Play_Params params;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.OverrideAnimationData
// ()
// Parameters:
// class UAnimationAsset*         InAnimToPlay                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsPlaying                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          position                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PlayRate                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.OverrideAnimationData"));

	USkeletalMeshComponent_OverrideAnimationData_Params params;
	params.InAnimToPlay = InAnimToPlay;
	params.bIsLooping = bIsLooping;
	params.bIsPlaying = bIsPlaying;
	params.position = position;
	params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag"));

	USkeletalMeshComponent_LinkAnimGraphByTag_Params params;
	params.InTag = InTag;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.LinkAnimClassLayers
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::LinkAnimClassLayers(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.LinkAnimClassLayers"));

	USkeletalMeshComponent_LinkAnimClassLayers_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
// ()
// Parameters:
// struct FVector                 WorldPosition                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ClosestWorldPosition           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Distance                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset"));

	USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset_Params params;
	params.WorldPosition = WorldPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ClosestWorldPosition != nullptr)
		*ClosestWorldPosition = params.ClosestWorldPosition;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
	if (Distance != nullptr)
		*Distance = params.Distance;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.IsPlaying"));

	USkeletalMeshComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::IsClothingSimulationSuspended()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended"));

	USkeletalMeshComponent_IsClothingSimulationSuspended_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::IsBodyGravityEnabled(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled"));

	USkeletalMeshComponent_IsBodyGravityEnabled_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.HasValidAnimationInstance
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::HasValidAnimationInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.HasValidAnimationInstance"));

	USkeletalMeshComponent_HasValidAnimationInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetTeleportRotationThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold"));

	USkeletalMeshComponent_GetTeleportRotationThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetTeleportDistanceThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold"));

	USkeletalMeshComponent_GetTeleportDistanceThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutValue                       (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetStringAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, struct FString* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref"));

	USkeletalMeshComponent_GetStringAttribute_Ref_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetStringAttribute
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 DefaultValue                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutValue                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetStringAttribute(const struct FName& BoneName, const struct FName& AttributeName, const struct FString& DefaultValue, struct FString* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetStringAttribute"));

	USkeletalMeshComponent_GetStringAttribute_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.DefaultValue = DefaultValue;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USkeletalMeshComponent::GetSkeletalCenterOfMass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass"));

	USkeletalMeshComponent_GetSkeletalCenterOfMass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPostProcessInstance
// ()
// Parameters:
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* USkeletalMeshComponent::GetPostProcessInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPostProcessInstance"));

	USkeletalMeshComponent_GetPostProcessInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPosition"));

	USkeletalMeshComponent_GetPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPlayRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPlayRate"));

	USkeletalMeshComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetMorphTarget"));

	USkeletalMeshComponent_GetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
// ()
// Parameters:
// struct FName                   InGroup                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* USkeletalMeshComponent::GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup"));

	USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup_Params params;
	params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* USkeletalMeshComponent::GetLinkedAnimLayerInstanceByClass(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass"));

	USkeletalMeshComponent_GetLinkedAnimLayerInstanceByClass_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimInstance*>   OutLinkedInstances             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag"));

	USkeletalMeshComponent_GetLinkedAnimGraphInstancesByTag_Params params;
	params.InTag = InTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLinkedInstances != nullptr)
		*OutLinkedInstances = params.OutLinkedInstances;

}


// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* USkeletalMeshComponent::GetLinkedAnimGraphInstanceByTag(const struct FName& InTag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag"));

	USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag_Params params;
	params.InTag = InTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutValue                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetIntegerAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, int* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref"));

	USkeletalMeshComponent_GetIntegerAttribute_Ref_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetIntegerAttribute
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            DefaultValue                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetIntegerAttribute(const struct FName& BoneName, const struct FName& AttributeName, int DefaultValue, int* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetIntegerAttribute"));

	USkeletalMeshComponent_GetIntegerAttribute_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.DefaultValue = DefaultValue;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutValue                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetFloatAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, float* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref"));

	USkeletalMeshComponent_GetFloatAttribute_Ref_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetFloatAttribute
// ()
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttributeName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DefaultValue                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECustomBoneAttributeLookup LookupType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetFloatAttribute(const struct FName& BoneName, const struct FName& AttributeName, float DefaultValue, float* OutValue, Engine_ECustomBoneAttributeLookup LookupType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetFloatAttribute"));

	USkeletalMeshComponent_GetFloatAttribute_Params params;
	params.BoneName = BoneName;
	params.AttributeName = AttributeName;
	params.DefaultValue = DefaultValue;
	params.LookupType = LookupType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetDisablePostProcessBlueprint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint"));

	USkeletalMeshComponent_GetDisablePostProcessBlueprint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetDisableAnimCurves()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetDisableAnimCurves"));

	USkeletalMeshComponent_GetDisableAnimCurves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
// ()
// Parameters:
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing1Angle                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TwistAngle                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing2Angle                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetCurrentJointAngles"));

	USkeletalMeshComponent_GetCurrentJointAngles_Params params;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Swing1Angle != nullptr)
		*Swing1Angle = params.Swing1Angle;
	if (TwistAngle != nullptr)
		*TwistAngle = params.TwistAngle;
	if (Swing2Angle != nullptr)
		*Swing2Angle = params.Swing2Angle;

}


// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetClothMaxDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale"));

	USkeletalMeshComponent_GetClothMaxDistanceScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
// ()
// Parameters:
// class UClothingSimulationInteractor* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClothingSimulationInteractor* USkeletalMeshComponent::GetClothingSimulationInteractor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor"));

	USkeletalMeshComponent_GetClothingSimulationInteractor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneMass
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScaleMass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USkeletalMeshComponent::GetBoneMass(const struct FName& BoneName, bool bScaleMass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetBoneMass"));

	USkeletalMeshComponent_GetBoneMass_Params params;
	params.BoneName = BoneName;
	params.bScaleMass = bScaleMass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimInstance
// ()
// Parameters:
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* USkeletalMeshComponent::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimInstance"));

	USkeletalMeshComponent_GetAnimInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* USkeletalMeshComponent::GetAnimClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimClass"));

	USkeletalMeshComponent_GetAnimClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimationMode
// ()
// Parameters:
// TEnumAsByte<Engine_EAnimationMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EAnimationMode> USkeletalMeshComponent::GetAnimationMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimationMode"));

	USkeletalMeshComponent_GetAnimationMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetAllowRigidBodyAnimNode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode"));

	USkeletalMeshComponent_GetAllowRigidBodyAnimNode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMeshComponent::GetAllowedAnimCurveEvaluate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate"));

	USkeletalMeshComponent_GetAllowedAnimCurveEvaluate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
// ()
void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset"));

	USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
// ()
void USkeletalMeshComponent::ForceClothNextUpdateTeleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport"));

	USkeletalMeshComponent_ForceClothNextUpdateTeleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// ()
// Parameters:
// int                            ConstraintIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.FindConstraintBoneName"));

	USkeletalMeshComponent_FindConstraintBoneName_Params params;
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ClearMorphTargets
// ()
void USkeletalMeshComponent::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ClearMorphTargets"));

	USkeletalMeshComponent_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.BreakConstraint
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.BreakConstraint"));

	USkeletalMeshComponent_BreakConstraint_Params params;
	params.Impulse = Impulse;
	params.HitLocation = HitLocation;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
// ()
void USkeletalMeshComponent::BindClothToMasterPoseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent"));

	USkeletalMeshComponent_BindClothToMasterPoseComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
// ()
// Parameters:
// struct FName                   NameOfCurve                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAllow                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation"));

	USkeletalMeshComponent_AllowAnimCurveEvaluation_Params params;
	params.NameOfCurve = NameOfCurve;
	params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow"));

	USkeletalMeshComponent_AddImpulseToAllBodiesBelow_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
// ()
// Parameters:
// struct FVector                 force                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow"));

	USkeletalMeshComponent_AddForceToAllBodiesBelow_Params params;
	params.force = force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AddPhysicsBlendWeight          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight"));

	USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USkeletalMeshComponent::AfterRead()
{
	USkinnedMeshComponent::AfterRead();

	READ_PTR_FULL(AnimBlueprintGeneratedClass, UAnimBlueprintGeneratedClass);
	READ_PTR_FULL(AnimClass, UClass);
	READ_PTR_FULL(AnimScriptInstance, UAnimInstance);
	READ_PTR_FULL(PostProcessAnimInstance, UAnimInstance);
	READ_PTR_FULL(BodySetup, UBodySetup);
	READ_PTR_FULL(ClothingSimulationFactory, UClass);
	READ_PTR_FULL(ClothingInteractor, UClothingSimulationInteractor);
}

void USkeletalMeshComponent::BeforeDelete()
{
	USkinnedMeshComponent::BeforeDelete();

	DELE_PTR_FULL(AnimBlueprintGeneratedClass);
	DELE_PTR_FULL(AnimClass);
	DELE_PTR_FULL(AnimScriptInstance);
	DELE_PTR_FULL(PostProcessAnimInstance);
	DELE_PTR_FULL(BodySetup);
	DELE_PTR_FULL(ClothingSimulationFactory);
	DELE_PTR_FULL(ClothingInteractor);
}

// Function Engine.AnimInstance.UnlockAIResources
// ()
// Parameters:
// bool                           bUnlockMovement                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           UnlockAILogic                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.UnlockAIResources"));

	UAnimInstance_UnlockAIResources_Params params;
	params.bUnlockMovement = bUnlockMovement;
	params.UnlockAILogic = UnlockAILogic;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.UnlinkAnimClassLayers
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::UnlinkAnimClassLayers(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.UnlinkAnimClassLayers"));

	UAnimInstance_UnlinkAnimClassLayers_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.TryGetPawnOwner
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* UAnimInstance::TryGetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.TryGetPawnOwner"));

	UAnimInstance_TryGetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.StopSlotAnimation
// ()
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.StopSlotAnimation"));

	UAnimInstance_StopSlotAnimation_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.SnapshotPose
// ()
// Parameters:
// struct FPoseSnapshot           Snapshot                       (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UAnimInstance::SnapshotPose(struct FPoseSnapshot* Snapshot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SnapshotPose"));

	UAnimInstance_SnapshotPose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Snapshot != nullptr)
		*Snapshot = params.Snapshot;

}


// Function Engine.AnimInstance.SetRootMotionMode
// ()
// Parameters:
// TEnumAsByte<Engine_ERootMotionMode> Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::SetRootMotionMode(TEnumAsByte<Engine_ERootMotionMode> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetRootMotionMode"));

	UAnimInstance_SetRootMotionMode_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
// ()
// Parameters:
// bool                           bSet                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::SetReceiveNotifiesFromLinkedInstances(bool bSet)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances"));

	UAnimInstance_SetReceiveNotifiesFromLinkedInstances_Params params;
	params.bSet = bSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
// ()
// Parameters:
// bool                           bSet                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::SetPropagateNotifiesToLinkedInstances(bool bSet)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances"));

	UAnimInstance_SetPropagateNotifiesToLinkedInstances_Params params;
	params.bSet = bSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.SetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::SetMorphTarget(const struct FName& MorphTargetName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetMorphTarget"));

	UAnimInstance_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.SavePoseSnapshot
// ()
// Parameters:
// struct FName                   SnapshotName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::SavePoseSnapshot(const struct FName& SnapshotName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SavePoseSnapshot"));

	UAnimInstance_SavePoseSnapshot_Params params;
	params.SnapshotName = SnapshotName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.ResetDynamics
// ()
// Parameters:
// Engine_ETeleportType           InTeleportType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::ResetDynamics(Engine_ETeleportType InTeleportType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.ResetDynamics"));

	UAnimInstance_ResetDynamics_Params params;
	params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
// ()
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendOutTriggerTime            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InTimeToStartMontageAt         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimMontage* UAnimInstance::PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage"));

	UAnimInstance_PlaySlotAnimationAsDynamicMontage_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;
	params.BlendOutTriggerTime = BlendOutTriggerTime;
	params.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.PlaySlotAnimation
// ()
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimation"));

	UAnimInstance_PlaySlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_StopGroupByName
// ()
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   GroupName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_StopGroupByName(float InBlendOutTime, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_StopGroupByName"));

	UAnimInstance_Montage_StopGroupByName_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_Stop
// ()
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Stop"));

	UAnimInstance_Montage_Stop_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_SetPosition
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_SetPosition(class UAnimMontage* Montage, float NewPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetPosition"));

	UAnimInstance_Montage_SetPosition_Params params;
	params.Montage = Montage;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_SetPlayRate
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NewPlayRate                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetPlayRate"));

	UAnimInstance_Montage_SetPlayRate_Params params;
	params.Montage = Montage;
	params.NewPlayRate = NewPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_SetNextSection
// ()
// Parameters:
// struct FName                   SectionNameToChange            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   NextSection                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetNextSection"));

	UAnimInstance_Montage_SetNextSection_Params params;
	params.SectionNameToChange = SectionNameToChange;
	params.NextSection = NextSection;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_Resume
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_Resume(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Resume"));

	UAnimInstance_Montage_Resume_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_Play
// ()
// Parameters:
// class UAnimMontage*            MontageToPlay                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EMontagePlayReturnType  ReturnValueType                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InTimeToStartMontageAt         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bStopAllMontages               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, Engine_EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Play"));

	UAnimInstance_Montage_Play_Params params;
	params.MontageToPlay = MontageToPlay;
	params.InPlayRate = InPlayRate;
	params.ReturnValueType = ReturnValueType;
	params.InTimeToStartMontageAt = InTimeToStartMontageAt;
	params.bStopAllMontages = bStopAllMontages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Pause
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_Pause(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Pause"));

	UAnimInstance_Montage_Pause_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
// ()
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSectionsEnd"));

	UAnimInstance_Montage_JumpToSectionsEnd_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_JumpToSection
// ()
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSection"));

	UAnimInstance_Montage_JumpToSection_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.Montage_IsPlaying
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::Montage_IsPlaying(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsPlaying"));

	UAnimInstance_Montage_IsPlaying_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_IsActive
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::Montage_IsActive(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsActive"));

	UAnimInstance_Montage_IsActive_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetPosition
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::Montage_GetPosition(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetPosition"));

	UAnimInstance_Montage_GetPosition_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetPlayRate
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::Montage_GetPlayRate(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetPlayRate"));

	UAnimInstance_Montage_GetPlayRate_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetIsStopped
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::Montage_GetIsStopped(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetIsStopped"));

	UAnimInstance_Montage_GetIsStopped_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetCurrentSection
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UAnimInstance::Montage_GetCurrentSection(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetCurrentSection"));

	UAnimInstance_Montage_GetCurrentSection_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetBlendTime
// ()
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::Montage_GetBlendTime(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetBlendTime"));

	UAnimInstance_Montage_GetBlendTime_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.LockAIResources
// ()
// Parameters:
// bool                           bLockMovement                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           LockAILogic                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.LockAIResources"));

	UAnimInstance_LockAIResources_Params params;
	params.bLockMovement = bLockMovement;
	params.LockAILogic = LockAILogic;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.LinkAnimGraphByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.LinkAnimGraphByTag"));

	UAnimInstance_LinkAnimGraphByTag_Params params;
	params.InTag = InTag;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.LinkAnimClassLayers
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::LinkAnimClassLayers(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.LinkAnimClassLayers"));

	UAnimInstance_LinkAnimClassLayers_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
// ()
// Parameters:
// struct FName                   InSyncGroupName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PreviousMarker                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   NextMarker                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRespectMarkerOrder            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.IsSyncGroupBetweenMarkers"));

	UAnimInstance_IsSyncGroupBetweenMarkers_Params params;
	params.InSyncGroupName = InSyncGroupName;
	params.PreviousMarker = PreviousMarker;
	params.NextMarker = NextMarker;
	params.bRespectMarkerOrder = bRespectMarkerOrder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.IsPlayingSlotAnimation
// ()
// Parameters:
// class UAnimSequenceBase*       Asset                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.IsPlayingSlotAnimation"));

	UAnimInstance_IsPlayingSlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.IsAnyMontagePlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::IsAnyMontagePlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.IsAnyMontagePlaying"));

	UAnimInstance_IsAnyMontagePlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
// ()
// Parameters:
// struct FName                   SyncGroup                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   MarkerName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.HasMarkerBeenHitThisFrame"));

	UAnimInstance_HasMarkerBeenHitThisFrame_Params params;
	params.SyncGroup = SyncGroup;
	params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetTimeToClosestMarker
// ()
// Parameters:
// struct FName                   SyncGroup                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   MarkerName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutMarkerTime                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetTimeToClosestMarker"));

	UAnimInstance_GetTimeToClosestMarker_Params params;
	params.SyncGroup = SyncGroup;
	params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMarkerTime != nullptr)
		*OutMarkerTime = params.OutMarkerTime;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetSyncGroupPosition
// ()
// Parameters:
// struct FName                   InSyncGroupName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarkerSyncAnimPosition ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
struct FMarkerSyncAnimPosition UAnimInstance::GetSyncGroupPosition(const struct FName& InSyncGroupName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetSyncGroupPosition"));

	UAnimInstance_GetSyncGroupPosition_Params params;
	params.InSyncGroupName = InSyncGroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction"));

	UAnimInstance_GetRelevantAnimTimeRemainingFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining"));

	UAnimInstance_GetRelevantAnimTimeRemaining_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeFraction
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeFraction"));

	UAnimInstance_GetRelevantAnimTimeFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTime
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetRelevantAnimTime(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTime"));

	UAnimInstance_GetRelevantAnimTime_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimLength
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetRelevantAnimLength(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimLength"));

	UAnimInstance_GetRelevantAnimLength_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::GetReceiveNotifiesFromLinkedInstances()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances"));

	UAnimInstance_GetReceiveNotifiesFromLinkedInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimInstance::GetPropagateNotifiesToLinkedInstances()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances"));

	UAnimInstance_GetPropagateNotifiesToLinkedInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USkeletalMeshComponent* UAnimInstance::GetOwningComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningComponent"));

	UAnimInstance_GetOwningComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UAnimInstance::GetOwningActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningActor"));

	UAnimInstance_GetOwningActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
// ()
// Parameters:
// struct FName                   InGroup                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimInstance*>   OutLinkedInstances             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UAnimInstance::GetLinkedAnimLayerInstancesByGroup(const struct FName& InGroup, TArray<class UAnimInstance*>* OutLinkedInstances)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup"));

	UAnimInstance_GetLinkedAnimLayerInstancesByGroup_Params params;
	params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLinkedInstances != nullptr)
		*OutLinkedInstances = params.OutLinkedInstances;

}


// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
// ()
// Parameters:
// struct FName                   InGroup                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* UAnimInstance::GetLinkedAnimLayerInstanceByGroupAndClass(const struct FName& InGroup, class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass"));

	UAnimInstance_GetLinkedAnimLayerInstanceByGroupAndClass_Params params;
	params.InGroup = InGroup;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
// ()
// Parameters:
// struct FName                   InGroup                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* UAnimInstance::GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup"));

	UAnimInstance_GetLinkedAnimLayerInstanceByGroup_Params params;
	params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* UAnimInstance::GetLinkedAnimLayerInstanceByClass(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass"));

	UAnimInstance_GetLinkedAnimLayerInstanceByClass_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimInstance*>   OutLinkedInstances             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UAnimInstance::GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag"));

	UAnimInstance_GetLinkedAnimGraphInstancesByTag_Params params;
	params.InTag = InTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLinkedInstances != nullptr)
		*OutLinkedInstances = params.OutLinkedInstances;

}


// Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
// ()
// Parameters:
// struct FName                   InTag                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimInstance* UAnimInstance::GetLinkedAnimGraphInstanceByTag(const struct FName& InTag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag"));

	UAnimInstance_GetLinkedAnimGraphInstanceByTag_Params params;
	params.InTag = InTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction"));

	UAnimInstance_GetInstanceTransitionTimeElapsedFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed"));

	UAnimInstance_GetInstanceTransitionTimeElapsed_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration"));

	UAnimInstance_GetInstanceTransitionCrossfadeDuration_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceStateWeight
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceStateWeight"));

	UAnimInstance_GetInstanceStateWeight_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceMachineWeight
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceMachineWeight(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceMachineWeight"));

	UAnimInstance_GetInstanceMachineWeight_Params params;
	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime"));

	UAnimInstance_GetInstanceCurrentStateElapsedTime_Params params;
	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
// ()
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction"));

	UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
// ()
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd"));

	UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
// ()
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction"));

	UAnimInstance_GetInstanceAssetPlayerTimeFraction_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTime
// ()
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceAssetPlayerTime(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTime"));

	UAnimInstance_GetInstanceAssetPlayerTime_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerLength
// ()
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetInstanceAssetPlayerLength(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerLength"));

	UAnimInstance_GetInstanceAssetPlayerLength_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurveValue
// ()
// Parameters:
// struct FName                   CurveName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::GetCurveValue(const struct FName& CurveName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurveValue"));

	UAnimInstance_GetCurveValue_Params params;
	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateName
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UAnimInstance::GetCurrentStateName(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentStateName"));

	UAnimInstance_GetCurrentStateName_Params params;
	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentActiveMontage
// ()
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimMontage* UAnimInstance::GetCurrentActiveMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentActiveMontage"));

	UAnimInstance_GetCurrentActiveMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAllCurveNames
// ()
// Parameters:
// TArray<struct FName>           OutNames                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UAnimInstance::GetAllCurveNames(TArray<struct FName>* OutNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAllCurveNames"));

	UAnimInstance_GetAllCurveNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutNames != nullptr)
		*OutNames = params.OutNames;

}


// Function Engine.AnimInstance.GetActiveCurveNames
// ()
// Parameters:
// Engine_EAnimCurveType          CurveType                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           OutNames                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UAnimInstance::GetActiveCurveNames(Engine_EAnimCurveType CurveType, TArray<struct FName>* OutNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetActiveCurveNames"));

	UAnimInstance_GetActiveCurveNames_Params params;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutNames != nullptr)
		*OutNames = params.OutNames;

}


// Function Engine.AnimInstance.ClearMorphTargets
// ()
void UAnimInstance::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.ClearMorphTargets"));

	UAnimInstance_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.CalculateDirection
// ()
// Parameters:
// struct FVector                 Velocity                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                BaseRotation                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimInstance::CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.CalculateDirection"));

	UAnimInstance_CalculateDirection_Params params;
	params.Velocity = Velocity;
	params.BaseRotation = BaseRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimInstance.BlueprintUpdateAnimation
// ()
// Parameters:
// float                          DeltaTimeX                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintUpdateAnimation"));

	UAnimInstance_BlueprintUpdateAnimation_Params params;
	params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
// ()
void UAnimInstance::BlueprintPostEvaluateAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation"));

	UAnimInstance_BlueprintPostEvaluateAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
// ()
void UAnimInstance::BlueprintLinkedAnimationLayersInitialized()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized"));

	UAnimInstance_BlueprintLinkedAnimationLayersInitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.BlueprintInitializeAnimation
// ()
void UAnimInstance::BlueprintInitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintInitializeAnimation"));

	UAnimInstance_BlueprintInitializeAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimInstance.BlueprintBeginPlay
// ()
void UAnimInstance::BlueprintBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintBeginPlay"));

	UAnimInstance_BlueprintBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UAnimInstance::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CurrentSkeleton, USkeleton);
}

void UAnimInstance::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CurrentSkeleton);
}

// Function Engine.MovementComponent.StopMovementImmediately
// ()
void UMovementComponent::StopMovementImmediately()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.StopMovementImmediately"));

	UMovementComponent_StopMovementImmediately_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
// ()
void UMovementComponent::SnapUpdatedComponentToPlane()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SnapUpdatedComponentToPlane"));

	UMovementComponent_SnapUpdatedComponentToPlane_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetUpdatedComponent
// ()
// Parameters:
// class USceneComponent*         NewUpdatedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetUpdatedComponent(class USceneComponent* NewUpdatedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetUpdatedComponent"));

	UMovementComponent_SetUpdatedComponent_Params params;
	params.NewUpdatedComponent = NewUpdatedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetPlaneConstraintOrigin
// ()
// Parameters:
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintOrigin"));

	UMovementComponent_SetPlaneConstraintOrigin_Params params;
	params.PlaneOrigin = PlaneOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetPlaneConstraintNormal
// ()
// Parameters:
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetPlaneConstraintNormal(const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintNormal"));

	UMovementComponent_SetPlaneConstraintNormal_Params params;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
// ()
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintFromVectors"));

	UMovementComponent_SetPlaneConstraintFromVectors_Params params;
	params.Forward = Forward;
	params.Up = Up;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetPlaneConstraintEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintEnabled"));

	UMovementComponent_SetPlaneConstraintEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
// ()
// Parameters:
// Engine_EPlaneConstraintAxisSetting NewAxisSetting                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::SetPlaneConstraintAxisSetting(Engine_EPlaneConstraintAxisSetting NewAxisSetting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting"));

	UMovementComponent_SetPlaneConstraintAxisSetting_Params params;
	params.NewAxisSetting = NewAxisSetting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.PhysicsVolumeChanged
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMovementComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.PhysicsVolumeChanged"));

	UMovementComponent_PhysicsVolumeChanged_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MovementComponent.K2_MoveUpdatedComponent
// ()
// Parameters:
// struct FVector                 Delta                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UMovementComponent::K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_MoveUpdatedComponent"));

	UMovementComponent_K2_MoveUpdatedComponent_Params params;
	params.Delta = Delta;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMovementComponent::K2_GetModifiedMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed"));

	UMovementComponent_K2_GetModifiedMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMovementComponent::K2_GetMaxSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetMaxSpeedModifier"));

	UMovementComponent_K2_GetMaxSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.IsExceedingMaxSpeed
// ()
// Parameters:
// float                          MaxSpeed                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.IsExceedingMaxSpeed"));

	UMovementComponent_IsExceedingMaxSpeed_Params params;
	params.MaxSpeed = MaxSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintOrigin
// ()
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UMovementComponent::GetPlaneConstraintOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintOrigin"));

	UMovementComponent_GetPlaneConstraintOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintNormal
// ()
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UMovementComponent::GetPlaneConstraintNormal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintNormal"));

	UMovementComponent_GetPlaneConstraintNormal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
// ()
// Parameters:
// Engine_EPlaneConstraintAxisSetting ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
Engine_EPlaneConstraintAxisSetting UMovementComponent::GetPlaneConstraintAxisSetting()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting"));

	UMovementComponent_GetPlaneConstraintAxisSetting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPhysicsVolume
// ()
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APhysicsVolume* UMovementComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPhysicsVolume"));

	UMovementComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetMaxSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMovementComponent::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetMaxSpeed"));

	UMovementComponent_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetGravityZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMovementComponent::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetGravityZ"));

	UMovementComponent_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainNormalToPlane
// ()
// Parameters:
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UMovementComponent::ConstrainNormalToPlane(const struct FVector& Normal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainNormalToPlane"));

	UMovementComponent_ConstrainNormalToPlane_Params params;
	params.Normal = Normal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainLocationToPlane
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UMovementComponent::ConstrainLocationToPlane(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainLocationToPlane"));

	UMovementComponent_ConstrainLocationToPlane_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainDirectionToPlane
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UMovementComponent::ConstrainDirectionToPlane(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainDirectionToPlane"));

	UMovementComponent_ConstrainDirectionToPlane_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UMovementComponent::AfterRead()
{
	UActorComponent::AfterRead();

	READ_PTR_FULL(UpdatedComponent, USceneComponent);
	READ_PTR_FULL(UpdatedPrimitive, UPrimitiveComponent);
}

void UMovementComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

	DELE_PTR_FULL(UpdatedComponent);
	DELE_PTR_FULL(UpdatedPrimitive);
}

// Function Engine.NavMovementComponent.StopMovementKeepPathing
// ()
void UNavMovementComponent::StopMovementKeepPathing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopMovementKeepPathing"));

	UNavMovementComponent_StopMovementKeepPathing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.NavMovementComponent.StopActiveMovement
// ()
void UNavMovementComponent::StopActiveMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopActiveMovement"));

	UNavMovementComponent_StopActiveMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.NavMovementComponent.IsSwimming
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UNavMovementComponent::IsSwimming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsSwimming"));

	UNavMovementComponent_IsSwimming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsMovingOnGround
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UNavMovementComponent::IsMovingOnGround()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsMovingOnGround"));

	UNavMovementComponent_IsMovingOnGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFlying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UNavMovementComponent::IsFlying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFlying"));

	UNavMovementComponent_IsFlying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFalling
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UNavMovementComponent::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFalling"));

	UNavMovementComponent_IsFalling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsCrouching
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UNavMovementComponent::IsCrouching()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsCrouching"));

	UNavMovementComponent_IsCrouching_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UNavMovementComponent::AfterRead()
{
	UMovementComponent::AfterRead();

	READ_PTR_FULL(PathFollowingComp, UObject);
}

void UNavMovementComponent::BeforeDelete()
{
	UMovementComponent::BeforeDelete();

	DELE_PTR_FULL(PathFollowingComp);
}

// Function Engine.PawnMovementComponent.K2_GetInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPawnMovementComponent::K2_GetInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.K2_GetInputVector"));

	UPawnMovementComponent_K2_GetInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPawnMovementComponent::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.IsMoveInputIgnored"));

	UPawnMovementComponent_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPendingInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPawnMovementComponent::GetPendingInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPendingInputVector"));

	UPawnMovementComponent_GetPendingInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPawnOwner
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* UPawnMovementComponent::GetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPawnOwner"));

	UPawnMovementComponent_GetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetLastInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPawnMovementComponent::GetLastInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetLastInputVector"));

	UPawnMovementComponent_GetLastInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.ConsumeInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPawnMovementComponent::ConsumeInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.ConsumeInputVector"));

	UPawnMovementComponent_ConsumeInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.AddInputVector
// ()
// Parameters:
// struct FVector                 WorldVector                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPawnMovementComponent::AddInputVector(const struct FVector& WorldVector, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.AddInputVector"));

	UPawnMovementComponent_AddInputVector_Params params;
	params.WorldVector = WorldVector;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPawnMovementComponent::AfterRead()
{
	UNavMovementComponent::AfterRead();

	READ_PTR_FULL(PawnOwner, APawn);
}

void UPawnMovementComponent::BeforeDelete()
{
	UNavMovementComponent::BeforeDelete();

	DELE_PTR_FULL(PawnOwner);
}

void UDataAsset::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(NativeClass, UClass);
}

void UDataAsset::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(NativeClass);
}

void UAssetImportData::AfterRead()
{
	UObject::AfterRead();

}

void UAssetImportData::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.FXSystemComponent.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetVectorParameter"));

	UFXSystemComponent_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetUseAutoManageAttachment
// ()
// Parameters:
// bool                           bAutoManage                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetUseAutoManageAttachment(bool bAutoManage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetUseAutoManageAttachment"));

	UFXSystemComponent_SetUseAutoManageAttachment_Params params;
	params.bAutoManage = bAutoManage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetIntParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetIntParameter(const struct FName& ParameterName, int Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetIntParameter"));

	UFXSystemComponent_SetIntParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetFloatParameter"));

	UFXSystemComponent_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetEmitterEnable
// ()
// Parameters:
// struct FName                   EmitterName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewEnableState                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetEmitterEnable"));

	UFXSystemComponent_SetEmitterEnable_Params params;
	params.EmitterName = EmitterName;
	params.bNewEnableState = bNewEnableState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetColorParameter"));

	UFXSystemComponent_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetBoolParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetBoolParameter(const struct FName& ParameterName, bool Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetBoolParameter"));

	UFXSystemComponent_SetBoolParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetAutoAttachmentParameters
// ()
// Parameters:
// class USceneComponent*         Parent                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         LocationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         RotationRule                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAttachmentRule         ScaleRule                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetAutoAttachmentParameters"));

	UFXSystemComponent_SetAutoAttachmentParameters_Params params;
	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UFXSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.SetActorParameter"));

	UFXSystemComponent_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.ReleaseToPool
// ()
void UFXSystemComponent::ReleaseToPool()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.ReleaseToPool"));

	UFXSystemComponent_ReleaseToPool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.FXSystemComponent.GetFXSystemAsset
// ()
// Parameters:
// class UFXSystemAsset*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UFXSystemAsset* UFXSystemComponent::GetFXSystemAsset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FXSystemComponent.GetFXSystemAsset"));

	UFXSystemComponent_GetFXSystemAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UFXSystemComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void UFXSystemComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

void UFXSystemAsset::AfterRead()
{
	UObject::AfterRead();

}

void UFXSystemAsset::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AnimNotify.Received_Notify
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimNotify::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.Received_Notify"));

	UAnimNotify_Received_Notify_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimNotify.GetNotifyName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UAnimNotify::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.GetNotifyName"));

	UAnimNotify_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimNotify::AfterRead()
{
	UObject::AfterRead();

}

void UAnimNotify::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AnimNotifyState.Received_NotifyTick
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FrameDeltaTime                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimNotifyState::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyTick"));

	UAnimNotifyState_Received_NotifyTick_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.FrameDeltaTime = FrameDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyEnd
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimNotifyState::Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyEnd"));

	UAnimNotifyState_Received_NotifyEnd_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyBegin
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TotalDuration                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAnimNotifyState::Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyBegin"));

	UAnimNotifyState_Received_NotifyBegin_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.GetNotifyName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UAnimNotifyState::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.GetNotifyName"));

	UAnimNotifyState_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimNotifyState::AfterRead()
{
	UObject::AfterRead();

}

void UAnimNotifyState::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAssetUserData::AfterRead()
{
	UObject::AfterRead();

}

void UAssetUserData::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.StaticMeshComponent.SetStaticMesh
// ()
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetStaticMesh"));

	UStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetReverseCulling
// ()
// Parameters:
// bool                           ReverseCulling                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::SetReverseCulling(bool ReverseCulling)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetReverseCulling"));

	UStaticMeshComponent_SetReverseCulling_Params params;
	params.ReverseCulling = ReverseCulling;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMeshComponent.SetForcedLodModel
// ()
// Parameters:
// int                            NewForcedLodModel              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::SetForcedLodModel(int NewForcedLodModel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetForcedLodModel"));

	UStaticMeshComponent_SetForcedLodModel_Params params;
	params.NewForcedLodModel = NewForcedLodModel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
// ()
// Parameters:
// bool                           NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing"));

	UStaticMeshComponent_SetEvaluateWorldPositionOffsetInRayTracing_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias"));

	UStaticMeshComponent_SetDistanceFieldSelfShadowBias_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMeshComponent.OnRep_StaticMesh
// ()
// Parameters:
// class UStaticMesh*             OldStaticMesh                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::OnRep_StaticMesh(class UStaticMesh* OldStaticMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.OnRep_StaticMesh"));

	UStaticMeshComponent_OnRep_StaticMesh_Params params;
	params.OldStaticMesh = OldStaticMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMeshComponent.GetLocalBounds
// ()
// Parameters:
// struct FVector                 Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMeshComponent::GetLocalBounds(struct FVector* Min, struct FVector* Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.GetLocalBounds"));

	UStaticMeshComponent_GetLocalBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Min != nullptr)
		*Min = params.Min;
	if (Max != nullptr)
		*Max = params.Max;

}


void UStaticMeshComponent::AfterRead()
{
	UMeshComponent::AfterRead();

	READ_PTR_FULL(StaticMesh, UStaticMesh);
}

void UStaticMeshComponent::BeforeDelete()
{
	UMeshComponent::BeforeDelete();

	DELE_PTR_FULL(StaticMesh);
}

// Function Engine.Controller.UnPossess
// ()
void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.UnPossess"));

	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.StopMovement
// ()
void AController::StopMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.StopMovement"));

	AController_StopMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.SetInitialLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AController::SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetInitialLocationAndRotation"));

	AController_SetInitialLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.SetIgnoreMoveInput
// ()
// Parameters:
// bool                           bNewMoveInput                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::SetIgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetIgnoreMoveInput"));

	AController_SetIgnoreMoveInput_Params params;
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.SetIgnoreLookInput
// ()
// Parameters:
// bool                           bNewLookInput                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::SetIgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetIgnoreLookInput"));

	AController_SetIgnoreLookInput_Params params;
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.SetControlRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AController::SetControlRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetControlRotation"));

	AController_SetControlRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ResetIgnoreMoveInput
// ()
void AController::ResetIgnoreMoveInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ResetIgnoreMoveInput"));

	AController_ResetIgnoreMoveInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ResetIgnoreLookInput
// ()
void AController::ResetIgnoreLookInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ResetIgnoreLookInput"));

	AController_ResetIgnoreLookInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ResetIgnoreInputFlags
// ()
void AController::ResetIgnoreInputFlags()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ResetIgnoreInputFlags"));

	AController_ResetIgnoreInputFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ReceiveUnPossess
// ()
// Parameters:
// class APawn*                   UnpossessedPawn                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::ReceiveUnPossess(class APawn* UnpossessedPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ReceiveUnPossess"));

	AController_ReceiveUnPossess_Params params;
	params.UnpossessedPawn = UnpossessedPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ReceivePossess
// ()
// Parameters:
// class APawn*                   PossessedPawn                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::ReceivePossess(class APawn* PossessedPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ReceivePossess"));

	AController_ReceivePossess_Params params;
	params.PossessedPawn = PossessedPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ReceiveInstigatedAnyDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ReceiveInstigatedAnyDamage"));

	AController_ReceiveInstigatedAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.Possess
// ()
// Parameters:
// class APawn*                   InPawn                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::Possess(class APawn* InPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.Possess"));

	AController_Possess_Params params;
	params.InPawn = InPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.OnRep_PlayerState
// ()
void AController::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_PlayerState"));

	AController_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.OnRep_Pawn
// ()
void AController::OnRep_Pawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_Pawn"));

	AController_OnRep_Pawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.LineOfSightTo
// ()
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ViewPoint                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlternateChecks               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.LineOfSightTo"));

	AController_LineOfSightTo_Params params;
	params.Other = Other;
	params.ViewPoint = ViewPoint;
	params.bAlternateChecks = bAlternateChecks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.K2_GetPawn
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* AController::K2_GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.K2_GetPawn"));

	AController_K2_GetPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.IsPlayerController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::IsPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsPlayerController"));

	AController_IsPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsMoveInputIgnored"));

	AController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.IsLookInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLookInputIgnored"));

	AController_IsLookInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalPlayerController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalPlayerController"));

	AController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalController"));

	AController_IsLocalController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.GetViewTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetViewTarget"));

	AController_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.GetDesiredRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator AController::GetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetDesiredRotation"));

	AController_GetDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.GetControlRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator AController::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetControlRotation"));

	AController_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Controller.ClientSetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bResetCamera                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetRotation"));

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.ClientSetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetLocation"));

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Controller.CastToPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* AController::CastToPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.CastToPlayerController"));

	AController_CastToPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void AController::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(PlayerState, APlayerState);
	READ_PTR_FULL(Pawn, APawn);
	READ_PTR_FULL(Character, ACharacter);
	READ_PTR_FULL(TransformComponent, USceneComponent);
}

void AController::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(PlayerState);
	DELE_PTR_FULL(Pawn);
	DELE_PTR_FULL(Character);
	DELE_PTR_FULL(TransformComponent);
}

// Function Engine.PlayerController.WasInputKeyJustReleased
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::WasInputKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustReleased"));

	APlayerController_WasInputKeyJustReleased_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustPressed
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::WasInputKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustPressed"));

	APlayerController_WasInputKeyJustPressed_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.ToggleSpeaking
// ()
// Parameters:
// bool                           bInSpeaking                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ToggleSpeaking(bool bInSpeaking)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ToggleSpeaking"));

	APlayerController_ToggleSpeaking_Params params;
	params.bInSpeaking = bInSpeaking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.TestServerLevelVisibilityChange
// ()
// Parameters:
// struct FName                   PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Filename                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.TestServerLevelVisibilityChange"));

	APlayerController_TestServerLevelVisibilityChange_Params params;
	params.PackageName = PackageName;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SwitchLevel
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SwitchLevel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SwitchLevel"));

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.StopHapticEffect
// ()
// Parameters:
// InputCore_EControllerHand      Hand                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::StopHapticEffect(InputCore_EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StopHapticEffect"));

	APlayerController_StopHapticEffect_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.StartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StartFire"));

	APlayerController_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetVirtualJoystickVisibility
// ()
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetVirtualJoystickVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetVirtualJoystickVisibility"));

	APlayerController_SetVirtualJoystickVisibility_Params params;
	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetViewTargetWithBlend
// ()
// Parameters:
// class AActor*                  NewViewTarget                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetViewTargetWithBlend"));

	APlayerController_SetViewTargetWithBlend_Params params;
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetName
// ()
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetName"));

	APlayerController_SetName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetMouseLocation
// ()
// Parameters:
// int                            X                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Y                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetMouseLocation(int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetMouseLocation"));

	APlayerController_SetMouseLocation_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetMouseCursorWidget
// ()
// Parameters:
// TEnumAsByte<CoreUObject_EMouseCursor> Cursor                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*             CursorWidget                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetMouseCursorWidget(TEnumAsByte<CoreUObject_EMouseCursor> Cursor, class UUserWidget* CursorWidget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetMouseCursorWidget"));

	APlayerController_SetMouseCursorWidget_Params params;
	params.Cursor = Cursor;
	params.CursorWidget = CursorWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetHapticsByValue
// ()
// Parameters:
// float                          Frequency                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Amplitude                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// InputCore_EControllerHand      Hand                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, InputCore_EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetHapticsByValue"));

	APlayerController_SetHapticsByValue_Params params;
	params.Frequency = Frequency;
	params.Amplitude = Amplitude;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetDisableHaptics
// ()
// Parameters:
// bool                           bNewDisabled                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetDisableHaptics(bool bNewDisabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetDisableHaptics"));

	APlayerController_SetDisableHaptics_Params params;
	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetControllerLightColor
// ()
// Parameters:
// struct FColor                  Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetControllerLightColor(const struct FColor& Color)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetControllerLightColor"));

	APlayerController_SetControllerLightColor_Params params;
	params.Color = Color;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetCinematicMode"));

	APlayerController_SetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetAudioListenerOverride
// ()
// Parameters:
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetAudioListenerOverride"));

	APlayerController_SetAudioListenerOverride_Params params;
	params.AttachToComponent = AttachToComponent;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SetAudioListenerAttenuationOverride
// ()
// Parameters:
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 AttenuationLocationOVerride    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetAudioListenerAttenuationOverride"));

	APlayerController_SetAudioListenerAttenuationOverride_Params params;
	params.AttachToComponent = AttachToComponent;
	params.AttenuationLocationOVerride = AttenuationLocationOVerride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerViewSelf
// ()
// Parameters:
// struct FViewTargetTransitionParams TransitionParams               (Parm, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewSelf"));

	APlayerController_ServerViewSelf_Params params;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerViewPrevPlayer
// ()
void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewPrevPlayer"));

	APlayerController_ServerViewPrevPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerViewNextPlayer
// ()
void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewNextPlayer"));

	APlayerController_ServerViewNextPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerVerifyViewTarget
// ()
void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerVerifyViewTarget"));

	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
// ()
// Parameters:
// TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities              (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void APlayerController::ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility"));

	APlayerController_ServerUpdateMultipleLevelsVisibility_Params params;
	params.LevelVisibilities = LevelVisibilities;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerUpdateLevelVisibility
// ()
// Parameters:
// struct FUpdateLevelVisibilityLevelInfo LevelVisibility                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUpdateLevelVisibility"));

	APlayerController_ServerUpdateLevelVisibility_Params params;
	params.LevelVisibility = LevelVisibility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerUpdateCamera
// ()
// Parameters:
// struct FVector_NetQuantize     CamLoc                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CamPitchAndYaw                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUpdateCamera"));

	APlayerController_ServerUpdateCamera_Params params;
	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUnmutePlayer"));

	APlayerController_ServerUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerToggleAILogging
// ()
void APlayerController::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerToggleAILogging"));

	APlayerController_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerShortTimeout
// ()
void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerShortTimeout"));

	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerSetSpectatorWaiting
// ()
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorWaiting"));

	APlayerController_ServerSetSpectatorWaiting_Params params;
	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// ()
// Parameters:
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRot                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorLocation"));

	APlayerController_ServerSetSpectatorLocation_Params params;
	params.NewLoc = NewLoc;
	params.NewRot = NewRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerRestartPlayer
// ()
void APlayerController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerRestartPlayer"));

	APlayerController_ServerRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerPause
// ()
void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerPause"));

	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// ()
// Parameters:
// struct FName                   WorldPackageName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerNotifyLoadedWorld"));

	APlayerController_ServerNotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerMutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerMutePlayer"));

	APlayerController_ServerMutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerExecRPC
// ()
// Parameters:
// struct FString                 Msg                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerExecRPC(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerExecRPC"));

	APlayerController_ServerExecRPC_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerExec
// ()
// Parameters:
// struct FString                 Msg                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerExec(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerExec"));

	APlayerController_ServerExec_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerCheckClientPossessionReliable
// ()
void APlayerController::ServerCheckClientPossessionReliable()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossessionReliable"));

	APlayerController_ServerCheckClientPossessionReliable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerCheckClientPossession
// ()
void APlayerController::ServerCheckClientPossession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossession"));

	APlayerController_ServerCheckClientPossession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerChangeName
// ()
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerChangeName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerChangeName"));

	APlayerController_ServerChangeName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerCamera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCamera"));

	APlayerController_ServerCamera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ServerAcknowledgePossession
// ()
// Parameters:
// class APawn*                   P                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerAcknowledgePossession"));

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.SendToConsole
// ()
// Parameters:
// struct FString                 Command                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::SendToConsole(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SendToConsole"));

	APlayerController_SendToConsole_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.RestartLevel
// ()
void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.RestartLevel"));

	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ResetControllerLightColor
// ()
void APlayerController::ResetControllerLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetControllerLightColor"));

	APlayerController_ResetControllerLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ProjectWorldLocationToScreen
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPlayerViewportRelative        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ProjectWorldLocationToScreen"));

	APlayerController_ProjectWorldLocationToScreen_Params params;
	params.WorldLocation = WorldLocation;
	params.bPlayerViewportRelative = bPlayerViewportRelative;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ScreenLocation != nullptr)
		*ScreenLocation = params.ScreenLocation;


	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayHapticEffect
// ()
// Parameters:
// class UHapticFeedbackEffect_Base* HapticEffect                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// InputCore_EControllerHand      Hand                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, InputCore_EControllerHand Hand, float Scale, bool bLoop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayHapticEffect"));

	APlayerController_PlayHapticEffect_Params params;
	params.HapticEffect = HapticEffect;
	params.Hand = Hand;
	params.Scale = Scale;
	params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.PlayDynamicForceFeedback
// ()
// Parameters:
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsLeftLarge              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsLeftSmall              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsRightLarge             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsRightSmall             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayDynamicForceFeedback"));

	APlayerController_PlayDynamicForceFeedback_Params params;
	params.Intensity = Intensity;
	params.Duration = Duration;
	params.bAffectsLeftLarge = bAffectsLeftLarge;
	params.bAffectsLeftSmall = bAffectsLeftSmall;
	params.bAffectsRightLarge = bAffectsRightLarge;
	params.bAffectsRightSmall = bAffectsRightSmall;
	params.Action = Action;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.Pause
// ()
void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Pause"));

	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.OnServerStartedVisualLogger
// ()
// Parameters:
// bool                           bIsLogging                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::OnServerStartedVisualLogger(bool bIsLogging)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.OnServerStartedVisualLogger"));

	APlayerController_OnServerStartedVisualLogger_Params params;
	params.bIsLogging = bIsLogging;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.LocalTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::LocalTravel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.LocalTravel"));

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.K2_ClientPlayForceFeedback
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIgnoreTimeDilation            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPlayWhilePaused               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.K2_ClientPlayForceFeedback"));

	APlayerController_K2_ClientPlayForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;
	params.bLooping = bLooping;
	params.bIgnoreTimeDilation = bIgnoreTimeDilation;
	params.bPlayWhilePaused = bPlayWhilePaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.IsInputKeyDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::IsInputKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsInputKeyDown"));

	APlayerController_IsInputKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetViewportSize
// ()
// Parameters:
// int                            SizeX                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SizeY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::GetViewportSize(int* SizeX, int* SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetViewportSize"));

	APlayerController_GetViewportSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;

}


// Function Engine.PlayerController.GetSpectatorPawn
// ()
// Parameters:
// class ASpectatorPawn*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ASpectatorPawn* APlayerController::GetSpectatorPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetSpectatorPawn"));

	APlayerController_GetSpectatorPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetMousePosition
// ()
// Parameters:
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetMousePosition(float* LocationX, float* LocationY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetMousePosition"));

	APlayerController_GetMousePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputVectorKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APlayerController::GetInputVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputVectorKeyState"));

	APlayerController_GetInputVectorKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputTouchState
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::GetInputTouchState(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputTouchState"));

	APlayerController_GetInputTouchState_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;

}


// Function Engine.PlayerController.GetInputMouseDelta
// ()
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMouseDelta"));

	APlayerController_GetInputMouseDelta_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;

}


// Function Engine.PlayerController.GetInputMotionState
// ()
// Parameters:
// struct FVector                 Tilt                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 RotationRate                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Gravity                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Acceleration                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMotionState"));

	APlayerController_GetInputMotionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Tilt != nullptr)
		*Tilt = params.Tilt;
	if (RotationRate != nullptr)
		*RotationRate = params.RotationRate;
	if (Gravity != nullptr)
		*Gravity = params.Gravity;
	if (Acceleration != nullptr)
		*Acceleration = params.Acceleration;

}


// Function Engine.PlayerController.GetInputKeyTimeDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float APlayerController::GetInputKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputKeyTimeDown"));

	APlayerController_GetInputKeyTimeDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputAnalogStickState
// ()
// Parameters:
// TEnumAsByte<Engine_EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::GetInputAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogStickState"));

	APlayerController_GetInputAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;

}


// Function Engine.PlayerController.GetInputAnalogKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float APlayerController::GetInputAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogKeyState"));

	APlayerController_GetInputAnalogKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHUD
// ()
// Parameters:
// class AHUD*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AHUD* APlayerController::GetHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHUD"));

	APlayerController_GetHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerForObjects"));

	APlayerController_GetHitResultUnderFingerForObjects_Params params;
	params.FingerIndex = FingerIndex;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerByChannel"));

	APlayerController_GetHitResultUnderFingerByChannel_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFinger
// ()
// Parameters:
// TEnumAsByte<InputCore_ETouchIndex> FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFinger"));

	APlayerController_GetHitResultUnderFinger_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
// ()
// Parameters:
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorForObjects"));

	APlayerController_GetHitResultUnderCursorForObjects_Params params;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
// ()
// Parameters:
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorByChannel"));

	APlayerController_GetHitResultUnderCursorByChannel_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursor
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitResult                      (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursor"));

	APlayerController_GetHitResultUnderCursor_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;


	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFocalLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APlayerController::GetFocalLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetFocalLocation"));

	APlayerController_GetFocalLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.FOV
// ()
// Parameters:
// float                          NewFOV                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::FOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.FOV"));

	APlayerController_FOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.EnableCheats
// ()
void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.EnableCheats"));

	APlayerController_EnableCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.DeprojectScreenPositionToWorld
// ()
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectScreenPositionToWorld"));

	APlayerController_DeprojectScreenPositionToWorld_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;


	return params.ReturnValue;
}


// Function Engine.PlayerController.DeprojectMousePositionToWorld
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectMousePositionToWorld"));

	APlayerController_DeprojectMousePositionToWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;


	return params.ReturnValue;
}


// Function Engine.PlayerController.ConsoleKey
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ConsoleKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ConsoleKey"));

	APlayerController_ConsoleKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientWasKicked
// ()
// Parameters:
// struct FText                   KickReason                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
void APlayerController::ClientWasKicked(const struct FText& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientWasKicked"));

	APlayerController_ClientWasKicked_Params params;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// ()
void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientVoiceHandshakeComplete"));

	APlayerController_ClientVoiceHandshakeComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
// ()
// Parameters:
// TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void APlayerController::ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus"));

	APlayerController_ClientUpdateMultipleLevelsStreamingStatus_Params params;
	params.LevelStatuses = LevelStatuses;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewShouldBeLoaded             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewShouldBeVisible            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNewShouldBlockOnLoad          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus"));

	APlayerController_ClientUpdateLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUnmutePlayer"));

	APlayerController_ClientUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientTravelInternal
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETravelType> TravelType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientTravelInternal(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravelInternal"));

	APlayerController_ClientTravelInternal_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETravelType> TravelType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravel"));

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientTeamMessage
// ()
// Parameters:
// class APlayerState*            SenderPlayerState              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTeamMessage"));

	APlayerController_ClientTeamMessage_Params params;
	params.SenderPlayerState = SenderPlayerState;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStopForceFeedback
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopForceFeedback"));

	APlayerController_ClientStopForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStopCameraShakesFromSource
// ()
// Parameters:
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraShakesFromSource"));

	APlayerController_ClientStopCameraShakesFromSource_Params params;
	params.SourceComponent = SourceComponent;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStopCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientStopCameraShake(class UClass* Shake, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraShake"));

	APlayerController_ClientStopCameraShake_Params params;
	params.Shake = Shake;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStopCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToStop                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraAnim"));

	APlayerController_ClientStopCameraAnim_Params params;
	params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStartOnlineSession
// ()
void APlayerController::ClientStartOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStartOnlineSession"));

	APlayerController_ClientStartOnlineSession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStartCameraShakeFromSource
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStartCameraShakeFromSource"));

	APlayerController_ClientStartCameraShakeFromSource_Params params;
	params.Shake = Shake;
	params.SourceComponent = SourceComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientStartCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ClientStartCameraShake(class UClass* Shake, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStartCameraShake"));

	APlayerController_ClientStartCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSpawnCameraLensEffect"));

	APlayerController_ClientSpawnCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetViewTarget
// ()
// Parameters:
// class AActor*                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FViewTargetTransitionParams TransitionParams               (Parm, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetViewTarget"));

	APlayerController_ClientSetViewTarget_Params params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetSpectatorWaiting
// ()
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetSpectatorWaiting"));

	APlayerController_ClientSetSpectatorWaiting_Params params;
	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetHUD
// ()
// Parameters:
// class UClass*                  NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetHUD(class UClass* NewHUDClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetHUD"));

	APlayerController_ClientSetHUD_Params params;
	params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident"));

	APlayerController_ClientSetForceMipLevelsToBeResident_Params params;
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCinematicMode"));

	APlayerController_ClientSetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetCameraMode
// ()
// Parameters:
// struct FName                   NewCamMode                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraMode"));

	APlayerController_ClientSetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetCameraFade
// ()
// Parameters:
// bool                           bEnableFading                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  FadeColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               FadeAlpha                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFadeAudio                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHoldWhenFinished              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraFade"));

	APlayerController_ClientSetCameraFade_Params params;
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;
	params.bHoldWhenFinished = bHoldWhenFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// ()
void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading"));

	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
// ()
// Parameters:
// struct FText                   ReturnReason                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
void APlayerController::ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason"));

	APlayerController_ClientReturnToMainMenuWithTextReason_Params params;
	params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientReturnToMainMenu
// ()
// Parameters:
// struct FString                 ReturnReason                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientReturnToMainMenu(const struct FString& ReturnReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReturnToMainMenu"));

	APlayerController_ClientReturnToMainMenu_Params params;
	params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientRetryClientRestart
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientRetryClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRetryClientRestart"));

	APlayerController_ClientRetryClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientRestart
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRestart"));

	APlayerController_ClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientReset
// ()
void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReset"));

	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientRepObjRef
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientRepObjRef(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRepObjRef"));

	APlayerController_ClientRepObjRef_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientReceiveLocalizedMessage
// ()
// Parameters:
// class UClass*                  Message                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Switch                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*            RelatedPlayerState_2           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*            RelatedPlayerState_3           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 OptionalObject                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReceiveLocalizedMessage"));

	APlayerController_ClientReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPlayerState_2 = RelatedPlayerState_2;
	params.RelatedPlayerState_3 = RelatedPlayerState_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPrestreamTextures
// ()
// Parameters:
// class AActor*                  ForcedActor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableStreaming               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrestreamTextures"));

	APlayerController_ClientPrestreamTextures_Params params;
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPrepareMapChange
// ()
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFirst                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLast                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrepareMapChange"));

	APlayerController_ClientPrepareMapChange_Params params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPlaySoundAtLocation
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySoundAtLocation"));

	APlayerController_ClientPlaySoundAtLocation_Params params;
	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPlaySound
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySound"));

	APlayerController_ClientPlaySound_Params params;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPlayForceFeedback_Internal
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceFeedbackParameters Params                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayForceFeedback_Internal"));

	APlayerController_ClientPlayForceFeedback_Internal_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientPlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToPlay                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   Space                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                CustomPlaySpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, Engine_ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayCameraAnim"));

	APlayerController_ClientPlayCameraAnim_Params params;
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientMutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMutePlayer"));

	APlayerController_ClientMutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientMessage
// ()
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMessage"));

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreMoveInput"));

	APlayerController_ClientIgnoreMoveInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientIgnoreLookInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreLookInput"));

	APlayerController_ClientIgnoreLookInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientGotoState
// ()
// Parameters:
// struct FName                   NewState                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientGotoState(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGotoState"));

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientGameEnded
// ()
// Parameters:
// class AActor*                  EndGameFocus                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsWinner                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGameEnded"));

	APlayerController_ClientGameEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientForceGarbageCollection
// ()
void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientForceGarbageCollection"));

	APlayerController_ClientForceGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// ()
void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientFlushLevelStreaming"));

	APlayerController_ClientFlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientEndOnlineSession
// ()
void APlayerController::ClientEndOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEndOnlineSession"));

	APlayerController_ClientEndOnlineSession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientEnableNetworkVoice
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientEnableNetworkVoice(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEnableNetworkVoice"));

	APlayerController_ClientEnableNetworkVoice_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientCommitMapChange
// ()
void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCommitMapChange"));

	APlayerController_ClientCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientClearCameraLensEffects
// ()
void APlayerController::ClientClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientClearCameraLensEffects"));

	APlayerController_ClientClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientCapBandwidth
// ()
// Parameters:
// int                            Cap                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCapBandwidth"));

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// ()
void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCancelPendingMapChange"));

	APlayerController_ClientCancelPendingMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// ()
// Parameters:
// struct FVector                 InLoc                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bOverrideLocation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientAddTextureStreamingLoc"));

	APlayerController_ClientAddTextureStreamingLoc_Params params;
	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClearAudioListenerOverride
// ()
void APlayerController::ClearAudioListenerOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClearAudioListenerOverride"));

	APlayerController_ClearAudioListenerOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ClearAudioListenerAttenuationOverride
// ()
void APlayerController::ClearAudioListenerAttenuationOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClearAudioListenerAttenuationOverride"));

	APlayerController_ClearAudioListenerAttenuationOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.CanRestartPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerController::CanRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.CanRestartPlayer"));

	APlayerController_CanRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerController.Camera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Camera"));

	APlayerController_Camera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.AddYawInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::AddYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddYawInput"));

	APlayerController_AddYawInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.AddRollInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::AddRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddRollInput"));

	APlayerController_AddRollInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.AddPitchInput
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::AddPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddPitchInput"));

	APlayerController_AddPitchInput_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerController.ActivateTouchInterface
// ()
// Parameters:
// class UTouchInterface*         NewTouchInterface              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerController::ActivateTouchInterface(class UTouchInterface* NewTouchInterface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ActivateTouchInterface"));

	APlayerController_ActivateTouchInterface_Params params;
	params.NewTouchInterface = NewTouchInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void APlayerController::AfterRead()
{
	AController::AfterRead();

	READ_PTR_FULL(Player, UPlayer);
	READ_PTR_FULL(AcknowledgedPawn, APawn);
	READ_PTR_FULL(ControllingDirTrackInst, UInterpTrackInstDirector);
	READ_PTR_FULL(MyHUD, AHUD);
	READ_PTR_FULL(PlayerCameraManager, APlayerCameraManager);
	READ_PTR_FULL(PlayerCameraManagerClass, UClass);
	READ_PTR_FULL(CheatManager, UCheatManager);
	READ_PTR_FULL(CheatClass, UClass);
	READ_PTR_FULL(PlayerInput, UPlayerInput);
	READ_PTR_FULL(PendingSwapConnection, UNetConnection);
	READ_PTR_FULL(NetConnection, UNetConnection);
	READ_PTR_FULL(InactiveStateInputComponent, UInputComponent);
	READ_PTR_FULL(CurrentTouchInterface, UTouchInterface);
	READ_PTR_FULL(SpectatorPawn, ASpectatorPawn);
}

void APlayerController::BeforeDelete()
{
	AController::BeforeDelete();

	DELE_PTR_FULL(Player);
	DELE_PTR_FULL(AcknowledgedPawn);
	DELE_PTR_FULL(ControllingDirTrackInst);
	DELE_PTR_FULL(MyHUD);
	DELE_PTR_FULL(PlayerCameraManager);
	DELE_PTR_FULL(PlayerCameraManagerClass);
	DELE_PTR_FULL(CheatManager);
	DELE_PTR_FULL(CheatClass);
	DELE_PTR_FULL(PlayerInput);
	DELE_PTR_FULL(PendingSwapConnection);
	DELE_PTR_FULL(NetConnection);
	DELE_PTR_FULL(InactiveStateInputComponent);
	DELE_PTR_FULL(CurrentTouchInterface);
	DELE_PTR_FULL(SpectatorPawn);
}

void UStreamableRenderAsset::AfterRead()
{
	UObject::AfterRead();

}

void UStreamableRenderAsset::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SkeletalMesh.SetLODSettings
// ()
// Parameters:
// class USkeletalMeshLODSettings* InLODSettings                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMesh::SetLODSettings(class USkeletalMeshLODSettings* InLODSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.SetLODSettings"));

	USkeletalMesh_SetLODSettings_Params params;
	params.InLODSettings = InLODSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMesh.SetDefaultAnimatingRig
// ()
void USkeletalMesh::SetDefaultAnimatingRig()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.SetDefaultAnimatingRig"));

	USkeletalMesh_SetDefaultAnimatingRig_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMesh.NumSockets
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USkeletalMesh::NumSockets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.NumSockets"));

	USkeletalMesh_NumSockets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> USkeletalMesh::K2_GetAllMorphTargetNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames"));

	USkeletalMesh_K2_GetAllMorphTargetNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.IsSectionUsingCloth
// ()
// Parameters:
// int                            InSectionIndex                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCheckCorrespondingSections    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USkeletalMesh::IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.IsSectionUsingCloth"));

	USkeletalMesh_IsSectionUsingCloth_Params params;
	params.InSectionIndex = InSectionIndex;
	params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetSocketByIndex
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USkeletalMeshSocket* USkeletalMesh::GetSocketByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetSocketByIndex"));

	USkeletalMesh_GetSocketByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetNodeMappingContainer
// ()
// Parameters:
// class UBlueprint*              SourceAsset                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNodeMappingContainer*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UNodeMappingContainer* USkeletalMesh::GetNodeMappingContainer(class UBlueprint* SourceAsset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetNodeMappingContainer"));

	USkeletalMesh_GetNodeMappingContainer_Params params;
	params.SourceAsset = SourceAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetImportedBounds
// ()
// Parameters:
// struct FBoxSphereBounds        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FBoxSphereBounds USkeletalMesh::GetImportedBounds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetImportedBounds"));

	USkeletalMesh_GetImportedBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetDefaultAnimatingRig
// ()
void USkeletalMesh::GetDefaultAnimatingRig()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetDefaultAnimatingRig"));

	USkeletalMesh_GetDefaultAnimatingRig_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMesh.GetBounds
// ()
// Parameters:
// struct FBoxSphereBounds        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FBoxSphereBounds USkeletalMesh::GetBounds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetBounds"));

	USkeletalMesh_GetBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.FindSocketInfo
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              OutTransform                   (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int                            OutBoneIndex                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USkeletalMeshSocket* USkeletalMesh::FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.FindSocketInfo"));

	USkeletalMesh_FindSocketInfo_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTransform != nullptr)
		*OutTransform = params.OutTransform;
	if (OutBoneIndex != nullptr)
		*OutBoneIndex = params.OutBoneIndex;
	if (OutIndex != nullptr)
		*OutIndex = params.OutIndex;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.FindSocketAndIndex
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USkeletalMeshSocket* USkeletalMesh::FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.FindSocketAndIndex"));

	USkeletalMesh_FindSocketAndIndex_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutIndex != nullptr)
		*OutIndex = params.OutIndex;


	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.FindSocket
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USkeletalMeshSocket* USkeletalMesh::FindSocket(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.FindSocket"));

	USkeletalMesh_FindSocket_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USkeletalMesh::AfterRead()
{
	UStreamableRenderAsset::AfterRead();

	READ_PTR_FULL(Skeleton, USkeleton);
	READ_PTR_FULL(BodySetup, UBodySetup);
	READ_PTR_FULL(PhysicsAsset, UPhysicsAsset);
	READ_PTR_FULL(ShadowPhysicsAsset, UPhysicsAsset);
	READ_PTR_FULL(PostProcessAnimBlueprint, UClass);
}

void USkeletalMesh::BeforeDelete()
{
	UStreamableRenderAsset::BeforeDelete();

	DELE_PTR_FULL(Skeleton);
	DELE_PTR_FULL(BodySetup);
	DELE_PTR_FULL(PhysicsAsset);
	DELE_PTR_FULL(ShadowPhysicsAsset);
	DELE_PTR_FULL(PostProcessAnimBlueprint);
}

// Function Engine.Character.UnCrouch
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::UnCrouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.UnCrouch"));

	ACharacter_UnCrouch_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.StopJumping
// ()
void ACharacter::StopJumping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopJumping"));

	ACharacter_StopJumping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.StopAnimMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::StopAnimMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopAnimMontage"));

	ACharacter_StopAnimMontage_Params params;
	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMovePacked
// ()
// Parameters:
// struct FCharacterServerMovePackedBits PackedBits                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
void ACharacter::ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMovePacked"));

	ACharacter_ServerMovePacked_Params params;
	params.PackedBits = PackedBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMoveOld
// ()
// Parameters:
// float                          OldTimeStamp                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   OldAccel                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  OldMoveFlags                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMoveOld"));

	ACharacter_ServerMoveOld_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccel = OldAccel;
	params.OldMoveFlags = OldMoveFlags;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMoveNoBase
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100  ClientLoc                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMoveNoBase"));

	ACharacter_ServerMoveNoBase_Params params;
	params.Timestamp = Timestamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementMode = ClientMovementMode;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMoveDualNoBase
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel0                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100  ClientLoc                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMoveDualNoBase"));

	ACharacter_ServerMoveDualNoBase_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.Timestamp = Timestamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementMode = ClientMovementMode;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMoveDualHybridRootMotion
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel0                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100  ClientLoc                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMoveDualHybridRootMotion"));

	ACharacter_ServerMoveDualHybridRootMotion_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.Timestamp = Timestamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMoveDual
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel0                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100  ClientLoc                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMoveDual"));

	ACharacter_ServerMoveDual_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.Timestamp = Timestamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ServerMove
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10   InAccel                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100  ClientLoc                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InCrouchedHalfHeight           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, float InCrouchedHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ServerMove"));

	ACharacter_ServerMove_Params params;
	params.Timestamp = Timestamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;
	params.InCrouchedHalfHeight = InCrouchedHalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.RootMotionDebugClientPrintOnScreen
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::RootMotionDebugClientPrintOnScreen(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.RootMotionDebugClientPrintOnScreen"));

	ACharacter_RootMotionDebugClientPrintOnScreen_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.PlayAnimMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float ACharacter::PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.PlayAnimMontage"));

	ACharacter_PlayAnimMontage_Params params;
	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.OnWalkingOffLedge
// ()
// Parameters:
// struct FVector                 PreviousFloorImpactNormal      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousFloorContactNormal     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousLocation               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TimeDelta                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnWalkingOffLedge"));

	ACharacter_OnWalkingOffLedge_Params params;
	params.PreviousFloorImpactNormal = PreviousFloorImpactNormal;
	params.PreviousFloorContactNormal = PreviousFloorContactNormal;
	params.PreviousLocation = PreviousLocation;
	params.TimeDelta = TimeDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnRep_RootMotion
// ()
void ACharacter::OnRep_RootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_RootMotion"));

	ACharacter_OnRep_RootMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnRep_ReplicatedCrouchedStateAndCapsuleHalfHeight
// ()
void ACharacter::OnRep_ReplicatedCrouchedStateAndCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_ReplicatedCrouchedStateAndCapsuleHalfHeight"));

	ACharacter_OnRep_ReplicatedCrouchedStateAndCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnRep_ReplicatedBasedMovement
// ()
void ACharacter::OnRep_ReplicatedBasedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_ReplicatedBasedMovement"));

	ACharacter_OnRep_ReplicatedBasedMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
// ()
void ACharacter::OnRep_ReplayLastTransformUpdateTimeStamp()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp"));

	ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnLaunched
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLaunched"));

	ACharacter_OnLaunched_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnLanded
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void ACharacter::OnLanded(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLanded"));

	ACharacter_OnLanded_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.OnJumped
// ()
void ACharacter::OnJumped()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnJumped"));

	ACharacter_OnJumped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.LaunchCharacter
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.LaunchCharacter"));

	ACharacter_LaunchCharacter_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.K2_UpdateCustomMovement
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::K2_UpdateCustomMovement(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_UpdateCustomMovement"));

	ACharacter_K2_UpdateCustomMovement_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.K2_OnStartCrouch
// ()
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnStartCrouch"));

	ACharacter_K2_OnStartCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.K2_OnMovementModeChanged
// ()
// Parameters:
// TEnumAsByte<Engine_EMovementMode> PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EMovementMode> NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  PrevCustomMode                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnMovementModeChanged"));

	ACharacter_K2_OnMovementModeChanged_Params params;
	params.PrevMovementMode = PrevMovementMode;
	params.NewMovementMode = NewMovementMode;
	params.PrevCustomMode = PrevCustomMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.K2_OnEndCrouch
// ()
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnEndCrouch"));

	ACharacter_K2_OnEndCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.Jump
// ()
void ACharacter::Jump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Jump"));

	ACharacter_Jump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.IsPlayingRootMotion
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::IsPlayingRootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingRootMotion"));

	ACharacter_IsPlayingRootMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.IsPlayingNetworkedRootMotionMontage
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::IsPlayingNetworkedRootMotionMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingNetworkedRootMotionMontage"));

	ACharacter_IsPlayingNetworkedRootMotionMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.IsJumpProvidingForce
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::IsJumpProvidingForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsJumpProvidingForce"));

	ACharacter_IsJumpProvidingForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.HasAnyRootMotion
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::HasAnyRootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.HasAnyRootMotion"));

	ACharacter_HasAnyRootMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.GetCurrentMontage
// ()
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimMontage* ACharacter::GetCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetCurrentMontage"));

	ACharacter_GetCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.GetBaseTranslationOffset
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector ACharacter::GetBaseTranslationOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetBaseTranslationOffset"));

	ACharacter_GetBaseTranslationOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.GetBaseRotationOffsetRotator
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator ACharacter::GetBaseRotationOffsetRotator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetBaseRotationOffsetRotator"));

	ACharacter_GetBaseRotationOffsetRotator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.GetAnimRootMotionTranslationScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float ACharacter::GetAnimRootMotionTranslationScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetAnimRootMotionTranslationScale"));

	ACharacter_GetAnimRootMotionTranslationScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.Crouch
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::Crouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Crouch"));

	ACharacter_Crouch_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientVeryShortAdjustPosition
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientVeryShortAdjustPosition"));

	ACharacter_ClientVeryShortAdjustPosition_Params params;
	params.Timestamp = Timestamp;
	params.NewLoc = NewLoc;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientMoveResponsePacked
// ()
// Parameters:
// struct FCharacterMoveResponsePackedBits PackedBits                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
void ACharacter::ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientMoveResponsePacked"));

	ACharacter_ClientMoveResponsePacked_Params params;
	params.PackedBits = PackedBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientCheatWalk
// ()
void ACharacter::ClientCheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatWalk"));

	ACharacter_ClientCheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientCheatGhost
// ()
void ACharacter::ClientCheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatGhost"));

	ACharacter_ClientCheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientCheatFly
// ()
void ACharacter::ClientCheatFly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatFly"));

	ACharacter_ClientCheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientAdjustRootMotionSourcePosition
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootMotionSourceGroup  ServerRootMotion               (Parm, NativeAccessSpecifierPublic)
// bool                           bHasAnimRootMotion             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ServerMontageTrackPosition     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ServerLoc                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal ServerRotation                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ServerVelZ                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     ServerBase                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ServerBoneName                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientAdjustRootMotionSourcePosition"));

	ACharacter_ClientAdjustRootMotionSourcePosition_Params params;
	params.Timestamp = Timestamp;
	params.ServerRootMotion = ServerRootMotion;
	params.bHasAnimRootMotion = bHasAnimRootMotion;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientAdjustRootMotionPosition
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ServerMontageTrackPosition     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ServerLoc                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal ServerRotation                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ServerVelZ                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     ServerBase                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ServerBoneName                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientAdjustRootMotionPosition"));

	ACharacter_ClientAdjustRootMotionPosition_Params params;
	params.Timestamp = Timestamp;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientAdjustPosition
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientAdjustPosition"));

	ACharacter_ClientAdjustPosition_Params params;
	params.Timestamp = Timestamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.ClientAckGoodMove
// ()
// Parameters:
// float                          Timestamp                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ACharacter::ClientAckGoodMove(float Timestamp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientAckGoodMove"));

	ACharacter_ClientAckGoodMove_Params params;
	params.Timestamp = Timestamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Character.CanJumpInternal
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::CanJumpInternal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJumpInternal"));

	ACharacter_CanJumpInternal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.CanJump
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::CanJump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJump"));

	ACharacter_CanJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.CanCrouch
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ACharacter::CanCrouch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanCrouch"));

	ACharacter_CanCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Character.CacheInitialMeshOffset
// ()
// Parameters:
// struct FVector                 MeshRelativeLocation           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                MeshRelativeRotation           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void ACharacter::CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CacheInitialMeshOffset"));

	ACharacter_CacheInitialMeshOffset_Params params;
	params.MeshRelativeLocation = MeshRelativeLocation;
	params.MeshRelativeRotation = MeshRelativeRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ACharacter::AfterRead()
{
	APawn::AfterRead();

	READ_PTR_FULL(Mesh, USkeletalMeshComponent);
	READ_PTR_FULL(CharacterMovement, UCharacterMovementComponent);
	READ_PTR_FULL(CapsuleComponent, UCapsuleComponent);
}

void ACharacter::BeforeDelete()
{
	APawn::BeforeDelete();

	DELE_PTR_FULL(Mesh);
	DELE_PTR_FULL(CharacterMovement);
	DELE_PTR_FULL(CapsuleComponent);
}

// Function Engine.SplineComponent.UpdateSpline
// ()
void USplineComponent::UpdateSpline()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.UpdateSpline"));

	USplineComponent_UpdateSpline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint"));

	USplineComponent_SetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetUpVectorAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InUpVector                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetUpVectorAtSplinePoint"));

	USplineComponent_SetUpVectorAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InUpVector = InUpVector;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
// ()
// Parameters:
// struct FLinearColor            SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor"));

	USplineComponent_SetUnselectedSplineSegmentColor_Params params;
	params.SegmentColor = SegmentColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetTangentsAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InArriveTangent                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InLeaveTangent                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetTangentsAtSplinePoint"));

	USplineComponent_SetTangentsAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InArriveTangent = InArriveTangent;
	params.InLeaveTangent = InLeaveTangent;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetTangentColor
// ()
// Parameters:
// struct FLinearColor            TangentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetTangentColor(const struct FLinearColor& TangentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetTangentColor"));

	USplineComponent_SetTangentColor_Params params;
	params.TangentColor = TangentColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InTangent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetTangentAtSplinePoint"));

	USplineComponent_SetTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InTangent = InTangent;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetSplineWorldPoints
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void USplineComponent::SetSplineWorldPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineWorldPoints"));

	USplineComponent_SetSplineWorldPoints_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetSplinePointType
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplinePointType> Type                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<Engine_ESplinePointType> Type, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePointType"));

	USplineComponent_SetSplinePointType_Params params;
	params.PointIndex = PointIndex;
	params.Type = Type;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetSplinePoints
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePoints"));

	USplineComponent_SetSplinePoints_Params params;
	params.Points = Points;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetSplineLocalPoints
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void USplineComponent::SetSplineLocalPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineLocalPoints"));

	USplineComponent_SetSplineLocalPoints_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetSelectedSplineSegmentColor
// ()
// Parameters:
// struct FLinearColor            SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSelectedSplineSegmentColor"));

	USplineComponent_SetSelectedSplineSegmentColor_Params params;
	params.SegmentColor = SegmentColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetScaleAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InScaleVector                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetScaleAtSplinePoint(int PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetScaleAtSplinePoint"));

	USplineComponent_SetScaleAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InScaleVector = InScaleVector;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetRotationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                InRotation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetRotationAtSplinePoint(int PointIndex, const struct FRotator& InRotation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetRotationAtSplinePoint"));

	USplineComponent_SetRotationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InRotation = InRotation;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetLocationAtSplinePoint"));

	USplineComponent_SetLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InLocation = InLocation;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetDrawDebug
// ()
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetDrawDebug(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetDrawDebug"));

	USplineComponent_SetDrawDebug_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetDefaultUpVector
// ()
// Parameters:
// struct FVector                 UpVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetDefaultUpVector"));

	USplineComponent_SetDefaultUpVector_Params params;
	params.UpVector = UpVector;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetClosedLoopAtPosition
// ()
// Parameters:
// bool                           bInClosedLoop                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Key                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetClosedLoopAtPosition"));

	USplineComponent_SetClosedLoopAtPosition_Params params;
	params.bInClosedLoop = bInClosedLoop;
	params.Key = Key;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.SetClosedLoop
// ()
// Parameters:
// bool                           bInClosedLoop                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetClosedLoop"));

	USplineComponent_SetClosedLoop_Params params;
	params.bInClosedLoop = bInClosedLoop;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.RemoveSplinePoint
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::RemoveSplinePoint(int Index, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.RemoveSplinePoint"));

	USplineComponent_RemoveSplinePoint_Params params;
	params.Index = Index;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.IsClosedLoop
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USplineComponent::IsClosedLoop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.IsClosedLoop"));

	USplineComponent_IsClosedLoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline"));

	USplineComponent_GetWorldTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtTime"));

	USplineComponent_GetWorldRotationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline"));

	USplineComponent_GetWorldRotationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtTime"));

	USplineComponent_GetWorldLocationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint"));

	USplineComponent_GetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline"));

	USplineComponent_GetWorldLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtTime"));

	USplineComponent_GetWorldDirectionAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline"));

	USplineComponent_GetWorldDirectionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetVectorPropertyAtSplinePoint(int Index, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint"));

	USplineComponent_GetVectorPropertyAtSplinePoint_Params params;
	params.Index = Index;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey"));

	USplineComponent_GetVectorPropertyAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetUpVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtTime"));

	USplineComponent_GetUpVectorAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtSplinePoint"));

	USplineComponent_GetUpVectorAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtSplineInputKey"));

	USplineComponent_GetUpVectorAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline"));

	USplineComponent_GetUpVectorAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USplineComponent::GetTransformAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtTime"));

	USplineComponent_GetTransformAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USplineComponent::GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtSplinePoint"));

	USplineComponent_GetTransformAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USplineComponent::GetTransformAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtSplineInputKey"));

	USplineComponent_GetTransformAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline"));

	USplineComponent_GetTransformAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetTangentAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtTime"));

	USplineComponent_GetTangentAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtSplinePoint"));

	USplineComponent_GetTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetTangentAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtSplineInputKey"));

	USplineComponent_GetTangentAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline"));

	USplineComponent_GetTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplinePointType
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplinePointType> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ESplinePointType> USplineComponent::GetSplinePointType(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplinePointType"));

	USplineComponent_GetSplinePointType_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplineLength"));

	USplineComponent_GetSplineLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtTime"));

	USplineComponent_GetScaleAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetScaleAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtSplinePoint"));

	USplineComponent_GetScaleAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetScaleAtSplineInputKey(float InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtSplineInputKey"));

	USplineComponent_GetScaleAtSplineInputKey_Params params;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline"));

	USplineComponent_GetScaleAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetRotationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtTime"));

	USplineComponent_GetRotationAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtSplinePoint"));

	USplineComponent_GetRotationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetRotationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtSplineInputKey"));

	USplineComponent_GetRotationAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline"));

	USplineComponent_GetRotationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetRollAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtTime"));

	USplineComponent_GetRollAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetRollAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtSplinePoint"));

	USplineComponent_GetRollAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetRollAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtSplineInputKey"));

	USplineComponent_GetRollAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline"));

	USplineComponent_GetRollAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetRightVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtTime"));

	USplineComponent_GetRightVectorAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtSplinePoint"));

	USplineComponent_GetRightVectorAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtSplineInputKey"));

	USplineComponent_GetRightVectorAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline"));

	USplineComponent_GetRightVectorAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetNumberOfSplineSegments
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USplineComponent::GetNumberOfSplineSegments()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetNumberOfSplineSegments"));

	USplineComponent_GetNumberOfSplineSegments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetNumberOfSplinePoints
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int USplineComponent::GetNumberOfSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetNumberOfSplinePoints"));

	USplineComponent_GetNumberOfSplinePoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetLocationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtTime"));

	USplineComponent_GetLocationAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtSplinePoint"));

	USplineComponent_GetLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetLocationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtSplineInputKey"));

	USplineComponent_GetLocationAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline"));

	USplineComponent_GetLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Tangent                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::GetLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* Location, struct FVector* Tangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint"));

	USplineComponent_GetLocationAndTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Tangent != nullptr)
		*Tangent = params.Tangent;

}


// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LocalLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LocalTangent                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint"));

	USplineComponent_GetLocalLocationAndTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LocalLocation != nullptr)
		*LocalLocation = params.LocalLocation;
	if (LocalTangent != nullptr)
		*LocalTangent = params.LocalTangent;

}


// Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint"));

	USplineComponent_GetLeaveTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline"));

	USplineComponent_GetInputKeyAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetFloatPropertyAtSplinePoint(int Index, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint"));

	USplineComponent_GetFloatPropertyAtSplinePoint_Params params;
	params.Index = Index;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey"));

	USplineComponent_GetFloatPropertyAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint"));

	USplineComponent_GetDistanceAlongSplineAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::GetDistanceAlongSplineAtSplineInputKey(float InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey"));

	USplineComponent_GetDistanceAlongSplineAtSplineInputKey_Params params;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetDirectionAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtTime"));

	USplineComponent_GetDirectionAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtSplinePoint"));

	USplineComponent_GetDirectionAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtSplineInputKey
// ()
// Parameters:
// float                          InKey                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtSplineInputKey"));

	USplineComponent_GetDirectionAtSplineInputKey_Params params;
	params.InKey = InKey;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline"));

	USplineComponent_GetDirectionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDefaultUpVector
// ()
// Parameters:
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetDefaultUpVector(TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDefaultUpVector"));

	USplineComponent_GetDefaultUpVector_Params params;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetArriveTangentAtSplinePoint"));

	USplineComponent_GetArriveTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation"));

	USplineComponent_FindUpVectorClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindTransformClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform USplineComponent::FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindTransformClosestToWorldLocation"));

	USplineComponent_FindTransformClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindTangentClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindTangentClosestToWorldLocation"));

	USplineComponent_FindTangentClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindScaleClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindScaleClosestToWorldLocation(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindScaleClosestToWorldLocation"));

	USplineComponent_FindScaleClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindRotationClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USplineComponent::FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindRotationClosestToWorldLocation"));

	USplineComponent_FindRotationClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindRollClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindRollClosestToWorldLocation"));

	USplineComponent_FindRollClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation"));

	USplineComponent_FindRightVectorClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindLocationClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindLocationClosestToWorldLocation"));

	USplineComponent_FindLocationClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineComponent::FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation"));

	USplineComponent_FindInputKeyClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineComponent::FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.FindDirectionClosestToWorldLocation"));

	USplineComponent_FindDirectionClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineComponent.ClearSplinePoints
// ()
// Parameters:
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::ClearSplinePoints(bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.ClearSplinePoints"));

	USplineComponent_ClearSplinePoints_Params params;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddSplineWorldPoint
// ()
// Parameters:
// struct FVector                 position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddSplineWorldPoint(const struct FVector& position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineWorldPoint"));

	USplineComponent_AddSplineWorldPoint_Params params;
	params.position = position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddSplinePointAtIndex
// ()
// Parameters:
// struct FVector                 position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddSplinePointAtIndex(const struct FVector& position, int Index, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplinePointAtIndex"));

	USplineComponent_AddSplinePointAtIndex_Params params;
	params.position = position;
	params.Index = Index;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddSplinePoint
// ()
// Parameters:
// struct FVector                 position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddSplinePoint(const struct FVector& position, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplinePoint"));

	USplineComponent_AddSplinePoint_Params params;
	params.position = position;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddSplineLocalPoint
// ()
// Parameters:
// struct FVector                 position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddSplineLocalPoint(const struct FVector& position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineLocalPoint"));

	USplineComponent_AddSplineLocalPoint_Params params;
	params.position = position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddPoints
// ()
// Parameters:
// TArray<struct FSplinePoint>    Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddPoints"));

	USplineComponent_AddPoints_Params params;
	params.Points = Points;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineComponent.AddPoint
// ()
// Parameters:
// struct FSplinePoint            Point                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bUpdateSpline                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineComponent::AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddPoint"));

	USplineComponent_AddPoint_Params params;
	params.Point = Point;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USplineComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void USplineComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

// Function Engine.AudioComponent.StopDelayed
// ()
// Parameters:
// float                          DelayTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::StopDelayed(float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.StopDelayed"));

	UAudioComponent_StopDelayed_Params params;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.Stop
// ()
void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Stop"));

	UAudioComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetWaveParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*              InWave                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetWaveParameter"));

	UAudioComponent_SetWaveParameter_Params params;
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetVolumeMultiplier
// ()
// Parameters:
// float                          NewVolumeMultiplier            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetVolumeMultiplier"));

	UAudioComponent_SetVolumeMultiplier_Params params;
	params.NewVolumeMultiplier = NewVolumeMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetUISound
// ()
// Parameters:
// bool                           bInUISound                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetUISound(bool bInUISound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetUISound"));

	UAudioComponent_SetUISound_Params params;
	params.bInUISound = bInUISound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetSubmixSend
// ()
// Parameters:
// class USoundSubmixBase*        Submix                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SendLevel                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSubmixSend"));

	UAudioComponent_SetSubmixSend_Params params;
	params.Submix = Submix;
	params.SendLevel = SendLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetSourceBusSendPreEffect
// ()
// Parameters:
// class USoundSourceBus*         SoundSourceBus                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SourceBusSendLevel             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSourceBusSendPreEffect"));

	UAudioComponent_SetSourceBusSendPreEffect_Params params;
	params.SoundSourceBus = SoundSourceBus;
	params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetSourceBusSendPostEffect
// ()
// Parameters:
// class USoundSourceBus*         SoundSourceBus                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SourceBusSendLevel             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSourceBusSendPostEffect"));

	UAudioComponent_SetSourceBusSendPostEffect_Params params;
	params.SoundSourceBus = SoundSourceBus;
	params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetSound
// ()
// Parameters:
// class USoundBase*              NewSound                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetSound(class USoundBase* NewSound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSound"));

	UAudioComponent_SetSound_Params params;
	params.NewSound = NewSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetPitchMultiplier
// ()
// Parameters:
// float                          NewPitchMultiplier             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetPitchMultiplier"));

	UAudioComponent_SetPitchMultiplier_Params params;
	params.NewPitchMultiplier = NewPitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetPaused
// ()
// Parameters:
// bool                           bPause                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetPaused(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetPaused"));

	UAudioComponent_SetPaused_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetLowPassFilterFrequency
// ()
// Parameters:
// float                          InLowPassFilterFrequency       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetLowPassFilterFrequency"));

	UAudioComponent_SetLowPassFilterFrequency_Params params;
	params.InLowPassFilterFrequency = InLowPassFilterFrequency;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetLowPassFilterEnabled
// ()
// Parameters:
// bool                           InLowPassFilterEnabled         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetLowPassFilterEnabled"));

	UAudioComponent_SetLowPassFilterEnabled_Params params;
	params.InLowPassFilterEnabled = InLowPassFilterEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetIntParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetIntParameter(const struct FName& InName, int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetIntParameter"));

	UAudioComponent_SetIntParameter_Params params;
	params.InName = InName;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetFloatParameter"));

	UAudioComponent_SetFloatParameter_Params params;
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetBoolParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetBoolParameter(const struct FName& InName, bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetBoolParameter"));

	UAudioComponent_SetBoolParameter_Params params;
	params.InName = InName;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetAudioBusSendPreEffect
// ()
// Parameters:
// class UAudioBus*               AudioBus                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AudioBusSendLevel              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetAudioBusSendPreEffect"));

	UAudioComponent_SetAudioBusSendPreEffect_Params params;
	params.AudioBus = AudioBus;
	params.AudioBusSendLevel = AudioBusSendLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.SetAudioBusSendPostEffect
// ()
// Parameters:
// class UAudioBus*               AudioBus                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SourceBusSendLevel             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float SourceBusSendLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetAudioBusSendPostEffect"));

	UAudioComponent_SetAudioBusSendPostEffect_Params params;
	params.AudioBus = AudioBus;
	params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.PlayQuantized
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuartzClockHandle*      InClockHandle                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuartzQuantizationBoundary InQuantizationBoundary         (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FScriptDelegate         InDelegate                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                          InStartTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InFadeInDuration               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InFadeVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioFaderCurve        InFadeCurve                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle** InClockHandle, struct FQuartzQuantizationBoundary* InQuantizationBoundary, const struct FScriptDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, Engine_EAudioFaderCurve InFadeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.PlayQuantized"));

	UAudioComponent_PlayQuantized_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InDelegate = InDelegate;
	params.InStartTime = InStartTime;
	params.InFadeInDuration = InFadeInDuration;
	params.InFadeVolumeLevel = InFadeVolumeLevel;
	params.InFadeCurve = InFadeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InClockHandle != nullptr)
		*InClockHandle = params.InClockHandle;
	if (InQuantizationBoundary != nullptr)
		*InQuantizationBoundary = params.InQuantizationBoundary;

}


// Function Engine.AudioComponent.Play
// ()
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Play"));

	UAudioComponent_Play_Params params;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.IsVirtualized
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::IsVirtualized()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.IsVirtualized"));

	UAudioComponent_IsVirtualized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.IsPlaying"));

	UAudioComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.HasCookedFFTData
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::HasCookedFFTData()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.HasCookedFFTData"));

	UAudioComponent_HasCookedFFTData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::HasCookedAmplitudeEnvelopeData()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData"));

	UAudioComponent_HasCookedAmplitudeEnvelopeData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.GetPlayState
// ()
// Parameters:
// Engine_EAudioComponentPlayState ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
Engine_EAudioComponentPlayState UAudioComponent::GetPlayState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.GetPlayState"));

	UAudioComponent_GetPlayState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
// ()
// Parameters:
// TArray<struct FSoundWaveSpectralDataPerSound> OutSoundWaveSpectralData       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds"));

	UAudioComponent_GetCookedFFTDataForAllPlayingSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSoundWaveSpectralData != nullptr)
		*OutSoundWaveSpectralData = params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.GetCookedFFTData
// ()
// Parameters:
// TArray<float>                  FrequenciesToGet               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSoundWaveSpectralData> OutSoundWaveSpectralData       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.GetCookedFFTData"));

	UAudioComponent_GetCookedFFTData_Params params;
	params.FrequenciesToGet = FrequenciesToGet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSoundWaveSpectralData != nullptr)
		*OutSoundWaveSpectralData = params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
// ()
// Parameters:
// TArray<struct FSoundWaveEnvelopeDataPerSound> OutEnvelopeData                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds"));

	UAudioComponent_GetCookedEnvelopeDataForAllPlayingSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutEnvelopeData != nullptr)
		*OutEnvelopeData = params.OutEnvelopeData;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.GetCookedEnvelopeData
// ()
// Parameters:
// float                          OutEnvelopeData                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::GetCookedEnvelopeData(float* OutEnvelopeData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.GetCookedEnvelopeData"));

	UAudioComponent_GetCookedEnvelopeData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutEnvelopeData != nullptr)
		*OutEnvelopeData = params.OutEnvelopeData;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.FadeOut
// ()
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioFaderCurve        FadeCurve                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel, Engine_EAudioFaderCurve FadeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeOut"));

	UAudioComponent_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.FadeIn
// ()
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioFaderCurve        FadeCurve                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, Engine_EAudioFaderCurve FadeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeIn"));

	UAudioComponent_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.StartTime = StartTime;
	params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
// ()
// Parameters:
// struct FSoundAttenuationSettings OutAttenuationSettings         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAudioComponent::BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply"));

	UAudioComponent_BP_GetAttenuationSettingsToApply_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAttenuationSettings != nullptr)
		*OutAttenuationSettings = params.OutAttenuationSettings;


	return params.ReturnValue;
}


// Function Engine.AudioComponent.AdjustVolume
// ()
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioFaderCurve        FadeCurve                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, Engine_EAudioFaderCurve FadeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustVolume"));

	UAudioComponent_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;
	params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioComponent.AdjustAttenuation
// ()
// Parameters:
// struct FSoundAttenuationSettings InAttenuationSettings          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UAudioComponent::AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustAttenuation"));

	UAudioComponent_AdjustAttenuation_Params params;
	params.InAttenuationSettings = InAttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UAudioComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(Sound, USoundBase);
	READ_PTR_FULL(SoundClassOverride, USoundClass);
	READ_PTR_FULL(SourceEffectChain, USoundEffectSourcePresetChain);
	READ_PTR_FULL(AttenuationSettings, USoundAttenuation);
	READ_PTR_FULL(ConcurrencySettings, USoundConcurrency);
}

void UAudioComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(Sound);
	DELE_PTR_FULL(SoundClassOverride);
	DELE_PTR_FULL(SourceEffectChain);
	DELE_PTR_FULL(AttenuationSettings);
	DELE_PTR_FULL(ConcurrencySettings);
}

void USaveGame::AfterRead()
{
	UObject::AfterRead();

}

void USaveGame::BeforeDelete()
{
	UObject::BeforeDelete();

}

void AInfo::AfterRead()
{
	AActor::AfterRead();

}

void AInfo::BeforeDelete()
{
	AActor::BeforeDelete();

}

// Function Engine.GameModeBase.StartPlay
// ()
void AGameModeBase::StartPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.StartPlay"));

	AGameModeBase_StartPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.SpawnDefaultPawnFor
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* AGameModeBase::SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.SpawnDefaultPawnFor"));

	AGameModeBase_SpawnDefaultPawnFor_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* AGameModeBase::SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.SpawnDefaultPawnAtTransform"));

	AGameModeBase_SpawnDefaultPawnAtTransform_Params params;
	params.NewPlayer = NewPlayer;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.ShouldReset
// ()
// Parameters:
// class AActor*                  ActorToReset                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::ShouldReset(class AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.ShouldReset"));

	AGameModeBase_ShouldReset_Params params;
	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.ReturnToMainMenuHost
// ()
void AGameModeBase::ReturnToMainMenuHost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.ReturnToMainMenuHost"));

	AGameModeBase_ReturnToMainMenuHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.RestartPlayerAtTransform
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void AGameModeBase::RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.RestartPlayerAtTransform"));

	AGameModeBase_RestartPlayerAtTransform_Params params;
	params.NewPlayer = NewPlayer;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.RestartPlayerAtPlayerStart
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.RestartPlayerAtPlayerStart"));

	AGameModeBase_RestartPlayerAtPlayerStart_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.RestartPlayer
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::RestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.RestartPlayer"));

	AGameModeBase_RestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.ResetLevel
// ()
void AGameModeBase::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.ResetLevel"));

	AGameModeBase_ResetLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.PlayerCanRestart
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::PlayerCanRestart(class APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.PlayerCanRestart"));

	AGameModeBase_PlayerCanRestart_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.MustSpectate
// ()
// Parameters:
// class APlayerController*       NewPlayerController            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::MustSpectate(class APlayerController* NewPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.MustSpectate"));

	AGameModeBase_MustSpectate_Params params;
	params.NewPlayerController = NewPlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.K2_PostLogin
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::K2_PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_PostLogin"));

	AGameModeBase_K2_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.K2_OnSwapPlayerControllers
// ()
// Parameters:
// class APlayerController*       OldPC                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       NewPC                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_OnSwapPlayerControllers"));

	AGameModeBase_K2_OnSwapPlayerControllers_Params params;
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.K2_OnRestartPlayer
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::K2_OnRestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_OnRestartPlayer"));

	AGameModeBase_K2_OnRestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.K2_OnLogout
// ()
// Parameters:
// class AController*             ExitingController              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::K2_OnLogout(class AController* ExitingController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_OnLogout"));

	AGameModeBase_K2_OnLogout_Params params;
	params.ExitingController = ExitingController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.K2_OnChangeName
// ()
// Parameters:
// class AController*             Other                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 NewName                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_OnChangeName"));

	AGameModeBase_K2_OnChangeName_Params params;
	params.Other = Other;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.K2_FindPlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 IncomingName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AGameModeBase::K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.K2_FindPlayerStart"));

	AGameModeBase_K2_FindPlayerStart_Params params;
	params.Player = Player;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.InitStartSpot
// ()
// Parameters:
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::InitStartSpot(class AActor* StartSpot, class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.InitStartSpot"));

	AGameModeBase_InitStartSpot_Params params;
	params.StartSpot = StartSpot;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.InitializeHUDForPlayer
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::InitializeHUDForPlayer(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.InitializeHUDForPlayer"));

	AGameModeBase_InitializeHUDForPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.HasMatchStarted
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::HasMatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.HasMatchStarted"));

	AGameModeBase_HasMatchStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.HasMatchEnded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::HasMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.HasMatchEnded"));

	AGameModeBase_HasMatchEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.HandleStartingNewPlayer
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::HandleStartingNewPlayer(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.HandleStartingNewPlayer"));

	AGameModeBase_HandleStartingNewPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.GetNumSpectators
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int AGameModeBase::GetNumSpectators()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.GetNumSpectators"));

	AGameModeBase_GetNumSpectators_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.GetNumPlayers
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int AGameModeBase::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.GetNumPlayers"));

	AGameModeBase_GetNumPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.GetDefaultPawnClassForController
// ()
// Parameters:
// class AController*             InController                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* AGameModeBase::GetDefaultPawnClassForController(class AController* InController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.GetDefaultPawnClassForController"));

	AGameModeBase_GetDefaultPawnClassForController_Params params;
	params.InController = InController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.FindPlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 IncomingName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AGameModeBase::FindPlayerStart(class AController* Player, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.FindPlayerStart"));

	AGameModeBase_FindPlayerStart_Params params;
	params.Player = Player;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.ChoosePlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* AGameModeBase::ChoosePlayerStart(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.ChoosePlayerStart"));

	AGameModeBase_ChoosePlayerStart_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameModeBase.ChangeName
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 NewName                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameModeBase::ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.ChangeName"));

	AGameModeBase_ChangeName_Params params;
	params.Controller = Controller;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameModeBase.CanSpectate
// ()
// Parameters:
// class APlayerController*       Viewer                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*            ViewTarget                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameModeBase::CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameModeBase.CanSpectate"));

	AGameModeBase_CanSpectate_Params params;
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void AGameModeBase::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(GameSessionClass, UClass);
	READ_PTR_FULL(GameStateClass, UClass);
	READ_PTR_FULL(PlayerControllerClass, UClass);
	READ_PTR_FULL(PlayerStateClass, UClass);
	READ_PTR_FULL(HUDClass, UClass);
	READ_PTR_FULL(DefaultPawnClass, UClass);
	READ_PTR_FULL(SpectatorClass, UClass);
	READ_PTR_FULL(ReplaySpectatorPlayerControllerClass, UClass);
	READ_PTR_FULL(ServerStatReplicatorClass, UClass);
	READ_PTR_FULL(GameSession, AGameSession);
	READ_PTR_FULL(GameState, AGameStateBase);
	READ_PTR_FULL(ServerStatReplicator, AServerStatReplicator);
}

void AGameModeBase::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(GameSessionClass);
	DELE_PTR_FULL(GameStateClass);
	DELE_PTR_FULL(PlayerControllerClass);
	DELE_PTR_FULL(PlayerStateClass);
	DELE_PTR_FULL(HUDClass);
	DELE_PTR_FULL(DefaultPawnClass);
	DELE_PTR_FULL(SpectatorClass);
	DELE_PTR_FULL(ReplaySpectatorPlayerControllerClass);
	DELE_PTR_FULL(ServerStatReplicatorClass);
	DELE_PTR_FULL(GameSession);
	DELE_PTR_FULL(GameState);
	DELE_PTR_FULL(ServerStatReplicator);
}

// Function Engine.GameMode.StartMatch
// ()
void AGameMode::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.StartMatch"));

	AGameMode_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.SetBandwidthLimit
// ()
// Parameters:
// float                          AsyncIOBandwidthLimit          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.SetBandwidthLimit"));

	AGameMode_SetBandwidthLimit_Params params;
	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.Say
// ()
// Parameters:
// struct FString                 Msg                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameMode::Say(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.Say"));

	AGameMode_Say_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.RestartGame
// ()
void AGameMode::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.RestartGame"));

	AGameMode_RestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.ReadyToStartMatch
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameMode::ReadyToStartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToStartMatch"));

	AGameMode_ReadyToStartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameMode.ReadyToEndMatch
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameMode::ReadyToEndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToEndMatch"));

	AGameMode_ReadyToEndMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameMode.K2_OnSetMatchState
// ()
// Parameters:
// struct FName                   NewState                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AGameMode::K2_OnSetMatchState(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnSetMatchState"));

	AGameMode_K2_OnSetMatchState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.IsMatchInProgress
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameMode::IsMatchInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.IsMatchInProgress"));

	AGameMode_IsMatchInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameMode.GetMatchState
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName AGameMode::GetMatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetMatchState"));

	AGameMode_GetMatchState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameMode.EndMatch
// ()
void AGameMode::EndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.EndMatch"));

	AGameMode_EndMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameMode.AbortMatch
// ()
void AGameMode::AbortMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.AbortMatch"));

	AGameMode_AbortMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AGameMode::AfterRead()
{
	AGameModeBase::AfterRead();

	READ_PTR_FULL(EngineMessageClass, UClass);
}

void AGameMode::BeforeDelete()
{
	AGameModeBase::BeforeDelete();

	DELE_PTR_FULL(EngineMessageClass);
}

// Function Engine.GameStateBase.OnRep_SpectatorClass
// ()
void AGameStateBase::OnRep_SpectatorClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.OnRep_SpectatorClass"));

	AGameStateBase_OnRep_SpectatorClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
// ()
void AGameStateBase::OnRep_ReplicatedWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds"));

	AGameStateBase_OnRep_ReplicatedWorldTimeSeconds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
// ()
void AGameStateBase::OnRep_ReplicatedHasBegunPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay"));

	AGameStateBase_OnRep_ReplicatedHasBegunPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameStateBase.OnRep_GameModeClass
// ()
void AGameStateBase::OnRep_GameModeClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.OnRep_GameModeClass"));

	AGameStateBase_OnRep_GameModeClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameStateBase.HasMatchStarted
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameStateBase::HasMatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.HasMatchStarted"));

	AGameStateBase_HasMatchStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameStateBase.HasMatchEnded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameStateBase::HasMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.HasMatchEnded"));

	AGameStateBase_HasMatchEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameStateBase.HasBegunPlay
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AGameStateBase::HasBegunPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.HasBegunPlay"));

	AGameStateBase_HasBegunPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameStateBase.GetServerWorldTimeSeconds
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AGameStateBase::GetServerWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.GetServerWorldTimeSeconds"));

	AGameStateBase_GetServerWorldTimeSeconds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameStateBase.GetPlayerStartTime
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AGameStateBase::GetPlayerStartTime(class AController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.GetPlayerStartTime"));

	AGameStateBase_GetPlayerStartTime_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameStateBase.GetPlayerRespawnDelay
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float AGameStateBase::GetPlayerRespawnDelay(class AController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameStateBase.GetPlayerRespawnDelay"));

	AGameStateBase_GetPlayerRespawnDelay_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void AGameStateBase::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(GameModeClass, UClass);
	READ_PTR_FULL(AuthorityGameMode, AGameModeBase);
	READ_PTR_FULL(SpectatorClass, UClass);
}

void AGameStateBase::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(GameModeClass);
	DELE_PTR_FULL(AuthorityGameMode);
	DELE_PTR_FULL(SpectatorClass);
}

// Function Engine.GameState.OnRep_MatchState
// ()
void AGameState::OnRep_MatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_MatchState"));

	AGameState_OnRep_MatchState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameState.OnRep_ElapsedTime
// ()
void AGameState::OnRep_ElapsedTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_ElapsedTime"));

	AGameState_OnRep_ElapsedTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AGameState::AfterRead()
{
	AGameStateBase::AfterRead();

}

void AGameState::BeforeDelete()
{
	AGameStateBase::BeforeDelete();

}

void UApplicationLifecycleComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UApplicationLifecycleComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
// ()
// Parameters:
// float                          InWalkableFloorZ               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorZ"));

	UCharacterMovementComponent_SetWalkableFloorZ_Params params;
	params.InWalkableFloorZ = InWalkableFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
// ()
// Parameters:
// float                          InWalkableFloorAngle           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle"));

	UCharacterMovementComponent_SetWalkableFloorAngle_Params params;
	params.InWalkableFloorAngle = InWalkableFloorAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetMovementMode
// ()
// Parameters:
// TEnumAsByte<Engine_EMovementMode> NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetMovementMode"));

	UCharacterMovementComponent_SetMovementMode_Params params;
	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
// ()
// Parameters:
// struct FNavAvoidanceMask       GroupMask                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask"));

	UCharacterMovementComponent_SetGroupsToIgnoreMask_Params params;
	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToIgnore"));

	UCharacterMovementComponent_SetGroupsToIgnore_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
// ()
// Parameters:
// struct FNavAvoidanceMask       GroupMask                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask"));

	UCharacterMovementComponent_SetGroupsToAvoidMask_Params params;
	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToAvoid"));

	UCharacterMovementComponent_SetGroupsToAvoid_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
// ()
// Parameters:
// struct FNavAvoidanceMask       GroupMask                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask"));

	UCharacterMovementComponent_SetAvoidanceGroupMask_Params params;
	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceGroup"));

	UCharacterMovementComponent_SetAvoidanceGroup_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled"));

	UCharacterMovementComponent_SetAvoidanceEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::K2_GetWalkableFloorZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ"));

	UCharacterMovementComponent_K2_GetWalkableFloorZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::K2_GetWalkableFloorAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle"));

	UCharacterMovementComponent_K2_GetWalkableFloorAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration"));

	UCharacterMovementComponent_K2_GetModifiedMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_FindFloor
// ()
// Parameters:
// struct FVector                 CapsuleLocation                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFindFloorResult        FloorResult                    (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_FindFloor"));

	UCharacterMovementComponent_K2_FindFloor_Params params;
	params.CapsuleLocation = CapsuleLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FloorResult != nullptr)
		*FloorResult = params.FloorResult;

}


// Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
// ()
// Parameters:
// struct FVector                 CapsuleLocation                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LineDistance                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SweepDistance                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SweepRadius                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFindFloorResult        FloorResult                    (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_ComputeFloorDist"));

	UCharacterMovementComponent_K2_ComputeFloorDist_Params params;
	params.CapsuleLocation = CapsuleLocation;
	params.LineDistance = LineDistance;
	params.SweepDistance = SweepDistance;
	params.SweepRadius = SweepRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FloorResult != nullptr)
		*FloorResult = params.FloorResult;

}


// Function Engine.CharacterMovementComponent.IsWalking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UCharacterMovementComponent::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalking"));

	UCharacterMovementComponent_IsWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalkable
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UCharacterMovementComponent::IsWalkable(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalkable"));

	UCharacterMovementComponent_IsWalkable_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetValidPerchRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetValidPerchRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetValidPerchRadius"));

	UCharacterMovementComponent_GetValidPerchRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetPerchRadiusThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold"));

	UCharacterMovementComponent_GetPerchRadiusThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMovementBase
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMovementBase"));

	UCharacterMovementComponent_GetMovementBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetMinAnalogSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMinAnalogSpeed"));

	UCharacterMovementComponent_GetMinAnalogSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetMaxJumpHeightWithJumpTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime"));

	UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetMaxJumpHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxJumpHeight"));

	UCharacterMovementComponent_GetMaxJumpHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetMaxBrakingDeceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration"));

	UCharacterMovementComponent_GetMaxBrakingDeceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxAcceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxAcceleration"));

	UCharacterMovementComponent_GetMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetLastUpdateVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCharacterMovementComponent::GetLastUpdateVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetLastUpdateVelocity"));

	UCharacterMovementComponent_GetLastUpdateVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetLastUpdateRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UCharacterMovementComponent::GetLastUpdateRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetLastUpdateRotation"));

	UCharacterMovementComponent_GetLastUpdateRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetLastUpdateLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCharacterMovementComponent::GetLastUpdateLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetLastUpdateLocation"));

	UCharacterMovementComponent_GetLastUpdateLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity"));

	UCharacterMovementComponent_GetImpartedMovementBaseVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCharacterMovementComponent::GetCurrentAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCurrentAcceleration"));

	UCharacterMovementComponent_GetCurrentAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCharacterOwner
// ()
// Parameters:
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ACharacter* UCharacterMovementComponent::GetCharacterOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCharacterOwner"));

	UCharacterMovementComponent_GetCharacterOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCharacterMovementComponent::GetAnalogInputModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetAnalogInputModifier"));

	UCharacterMovementComponent_GetAnalogInputModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.DisableMovement
// ()
void UCharacterMovementComponent::DisableMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.DisableMovement"));

	UCharacterMovementComponent_DisableMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.ClearAccumulatedForces
// ()
void UCharacterMovementComponent::ClearAccumulatedForces()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClearAccumulatedForces"));

	UCharacterMovementComponent_ClearAccumulatedForces_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.CapsuleTouched
// ()
// Parameters:
// class UPrimitiveComponent*     OverlappedComp                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CapsuleTouched"));

	UCharacterMovementComponent_CapsuleTouched_Params params;
	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.CalcVelocity
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Friction                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFluid                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BrakingDeceleration            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CalcVelocity"));

	UCharacterMovementComponent_CalcVelocity_Params params;
	params.DeltaTime = DeltaTime;
	params.Friction = Friction;
	params.bFluid = bFluid;
	params.BrakingDeceleration = BrakingDeceleration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddImpulse"));

	UCharacterMovementComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CharacterMovementComponent.AddForce
// ()
// Parameters:
// struct FVector                 force                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCharacterMovementComponent::AddForce(const struct FVector& force)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddForce"));

	UCharacterMovementComponent_AddForce_Params params;
	params.force = force;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UCharacterMovementComponent::AfterRead()
{
	UPawnMovementComponent::AfterRead();

	READ_PTR_FULL(CharacterOwner, ACharacter);
	READ_PTR_FULL(DeferredUpdatedMoveComponent, USceneComponent);
}

void UCharacterMovementComponent::BeforeDelete()
{
	UPawnMovementComponent::BeforeDelete();

	DELE_PTR_FULL(CharacterOwner);
	DELE_PTR_FULL(DeferredUpdatedMoveComponent);
}

void USubsystem::AfterRead()
{
	UObject::AfterRead();

}

void USubsystem::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDynamicSubsystem::AfterRead()
{
	USubsystem::AfterRead();

}

void UDynamicSubsystem::BeforeDelete()
{
	USubsystem::BeforeDelete();

}

void UEngineSubsystem::AfterRead()
{
	UDynamicSubsystem::AfterRead();

}

void UEngineSubsystem::BeforeDelete()
{
	UDynamicSubsystem::BeforeDelete();

}

void USoundEffectPreset::AfterRead()
{
	UObject::AfterRead();

}

void USoundEffectPreset::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundEffectSourcePreset::AfterRead()
{
	USoundEffectPreset::AfterRead();

}

void USoundEffectSourcePreset::BeforeDelete()
{
	USoundEffectPreset::BeforeDelete();

}

void USoundEffectSubmixPreset::AfterRead()
{
	USoundEffectPreset::AfterRead();

}

void USoundEffectSubmixPreset::BeforeDelete()
{
	USoundEffectPreset::BeforeDelete();

}

// Function Engine.LightComponentBase.SetSamplesPerPixel
// ()
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetSamplesPerPixel(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetSamplesPerPixel"));

	ULightComponentBase_SetSamplesPerPixel_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetCastVolumetricShadow
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetCastVolumetricShadow(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastVolumetricShadow"));

	ULightComponentBase_SetCastVolumetricShadow_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetCastShadows
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastShadows"));

	ULightComponentBase_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetCastRaytracedShadow
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetCastRaytracedShadow(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastRaytracedShadow"));

	ULightComponentBase_SetCastRaytracedShadow_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetCastDeepShadow
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetCastDeepShadow(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastDeepShadow"));

	ULightComponentBase_SetCastDeepShadow_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetAffectReflection
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetAffectReflection(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetAffectReflection"));

	ULightComponentBase_SetAffectReflection_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.SetAffectGlobalIllumination
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponentBase::SetAffectGlobalIllumination(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetAffectGlobalIllumination"));

	ULightComponentBase_SetAffectGlobalIllumination_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponentBase.GetLightColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor ULightComponentBase::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.GetLightColor"));

	ULightComponentBase_GetLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ULightComponentBase::AfterRead()
{
	USceneComponent::AfterRead();

}

void ULightComponentBase::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

// Function Engine.LightComponent.SetVolumetricScatteringIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetVolumetricScatteringIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetVolumetricScatteringIntensity"));

	ULightComponent_SetVolumetricScatteringIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetUseIESBrightness
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetUseIESBrightness(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetUseIESBrightness"));

	ULightComponent_SetUseIESBrightness_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetTransmission
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetTransmission(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetTransmission"));

	ULightComponent_SetTransmission_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetTemperature
// ()
// Parameters:
// float                          NewTemperature                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetTemperature(float NewTemperature)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetTemperature"));

	ULightComponent_SetTemperature_Params params;
	params.NewTemperature = NewTemperature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetSpecularScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetSpecularScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetSpecularScale"));

	ULightComponent_SetSpecularScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetShadowSlopeBias
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetShadowSlopeBias(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetShadowSlopeBias"));

	ULightComponent_SetShadowSlopeBias_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetShadowBias
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetShadowBias(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetShadowBias"));

	ULightComponent_SetShadowBias_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightingChannels
// ()
// Parameters:
// bool                           bChannel0                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bChannel1                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bChannel2                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightingChannels"));

	ULightComponent_SetLightingChannels_Params params;
	params.bChannel0 = bChannel0;
	params.bChannel1 = bChannel1;
	params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightFunctionScale
// ()
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionScale"));

	ULightComponent_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightFunctionMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionMaterial"));

	ULightComponent_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightFunctionFadeDistance
// ()
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionFadeDistance"));

	ULightComponent_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightFunctionDisabledBrightness
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionDisabledBrightness"));

	ULightComponent_SetLightFunctionDisabledBrightness_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSRGB                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightColor"));

	ULightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;
	params.bSRGB = bSRGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIntensity"));

	ULightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetIndirectLightingIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIndirectLightingIntensity"));

	ULightComponent_SetIndirectLightingIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetIESTexture
// ()
// Parameters:
// class UTextureLightProfile*    NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetIESTexture(class UTextureLightProfile* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIESTexture"));

	ULightComponent_SetIESTexture_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetIESBrightnessScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetIESBrightnessScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIESBrightnessScale"));

	ULightComponent_SetIESBrightnessScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetForceCachedShadowsForMovablePrimitives(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives"));

	ULightComponent_SetForceCachedShadowsForMovablePrimitives_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetEnableLightShaftBloom
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetEnableLightShaftBloom(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetEnableLightShaftBloom"));

	ULightComponent_SetEnableLightShaftBloom_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetBloomTint
// ()
// Parameters:
// struct FColor                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetBloomTint(const struct FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomTint"));

	ULightComponent_SetBloomTint_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetBloomThreshold
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetBloomThreshold(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomThreshold"));

	ULightComponent_SetBloomThreshold_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetBloomScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetBloomScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomScale"));

	ULightComponent_SetBloomScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetBloomMaxBrightness
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetBloomMaxBrightness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomMaxBrightness"));

	ULightComponent_SetBloomMaxBrightness_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetAffectTranslucentLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectTranslucentLighting"));

	ULightComponent_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectDynamicIndirectLighting"));

	ULightComponent_SetAffectDynamicIndirectLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ULightComponent::AfterRead()
{
	ULightComponentBase::AfterRead();

	READ_PTR_FULL(LightFunctionMaterial, UMaterialInterface);
	READ_PTR_FULL(IESTexture, UTextureLightProfile);
}

void ULightComponent::BeforeDelete()
{
	ULightComponentBase::BeforeDelete();

	DELE_PTR_FULL(LightFunctionMaterial);
	DELE_PTR_FULL(IESTexture);
}

// Function Engine.LocalLightComponent.SetIntensityUnits
// ()
// Parameters:
// Engine_ELightUnits             NewIntensityUnits              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULocalLightComponent::SetIntensityUnits(Engine_ELightUnits NewIntensityUnits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LocalLightComponent.SetIntensityUnits"));

	ULocalLightComponent_SetIntensityUnits_Params params;
	params.NewIntensityUnits = NewIntensityUnits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LocalLightComponent.SetAttenuationRadius
// ()
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULocalLightComponent::SetAttenuationRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LocalLightComponent.SetAttenuationRadius"));

	ULocalLightComponent_SetAttenuationRadius_Params params;
	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LocalLightComponent.GetUnitsConversionFactor
// ()
// Parameters:
// Engine_ELightUnits             SrcUnits                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ELightUnits             TargetUnits                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CosHalfConeAngle               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float ULocalLightComponent::GetUnitsConversionFactor(Engine_ELightUnits SrcUnits, Engine_ELightUnits TargetUnits, float CosHalfConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LocalLightComponent.GetUnitsConversionFactor"));

	ULocalLightComponent_GetUnitsConversionFactor_Params params;
	params.SrcUnits = SrcUnits;
	params.TargetUnits = TargetUnits;
	params.CosHalfConeAngle = CosHalfConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ULocalLightComponent::AfterRead()
{
	ULightComponent::AfterRead();

}

void ULocalLightComponent::BeforeDelete()
{
	ULightComponent::BeforeDelete();

}

// Function Engine.PointLightComponent.SetSourceRadius
// ()
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPointLightComponent::SetSourceRadius(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceRadius"));

	UPointLightComponent_SetSourceRadius_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PointLightComponent.SetSourceLength
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPointLightComponent::SetSourceLength(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceLength"));

	UPointLightComponent_SetSourceLength_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PointLightComponent.SetSoftSourceRadius
// ()
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPointLightComponent::SetSoftSourceRadius(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSoftSourceRadius"));

	UPointLightComponent_SetSoftSourceRadius_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PointLightComponent.SetLightFalloffExponent
// ()
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetLightFalloffExponent"));

	UPointLightComponent_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPointLightComponent::AfterRead()
{
	ULocalLightComponent::AfterRead();

}

void UPointLightComponent::BeforeDelete()
{
	ULocalLightComponent::BeforeDelete();

}

void UAssetManager::AfterRead()
{
	UObject::AfterRead();

}

void UAssetManager::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
// ()
void APlayerCameraManager::SwapPendingViewTargetWhenUsingClientSideCameraUpdates()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates"));

	APlayerCameraManager_SwapPendingViewTargetWhenUsingClientSideCameraUpdates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopCameraShake
// ()
// Parameters:
// class UCameraShakeBase*        ShakeInstance                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraShake"));

	APlayerCameraManager_StopCameraShake_Params params;
	params.ShakeInstance = ShakeInstance;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopCameraFade
// ()
void APlayerCameraManager::StopCameraFade()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraFade"));

	APlayerCameraManager_StopCameraFade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopCameraAnimInst
// ()
// Parameters:
// class UCameraAnimInst*         AnimInst                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraAnimInst"));

	APlayerCameraManager_StopCameraAnimInst_Params params;
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource"));

	APlayerCameraManager_StopAllInstancesOfCameraShakeFromSource_Params params;
	params.Shake = Shake;
	params.SourceComponent = SourceComponent;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake"));

	APlayerCameraManager_StopAllInstancesOfCameraShake_Params params;
	params.Shake = Shake;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim"));

	APlayerCameraManager_StopAllInstancesOfCameraAnim_Params params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource
// ()
// Parameters:
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource"));

	APlayerCameraManager_StopAllCameraShakesFromSource_Params params;
	params.SourceComponent = SourceComponent;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllCameraShakes
// ()
// Parameters:
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllCameraShakes(bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraShakes"));

	APlayerCameraManager_StopAllCameraShakes_Params params;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StopAllCameraAnims
// ()
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraAnims"));

	APlayerCameraManager_StopAllCameraAnims_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.StartMatineeCameraShakeFromSource
// ()
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMatineeCameraShake*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMatineeCameraShake* APlayerCameraManager::StartMatineeCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartMatineeCameraShakeFromSource"));

	APlayerCameraManager_StartMatineeCameraShakeFromSource_Params params;
	params.ShakeClass = ShakeClass;
	params.SourceComponent = SourceComponent;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.StartMatineeCameraShake
// ()
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMatineeCameraShake*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMatineeCameraShake* APlayerCameraManager::StartMatineeCameraShake(class UClass* ShakeClass, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartMatineeCameraShake"));

	APlayerCameraManager_StartMatineeCameraShake_Params params;
	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.StartCameraShakeFromSource
// ()
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraShakeSourceComponent* SourceComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UCameraShakeBase*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCameraShakeBase* APlayerCameraManager::StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartCameraShakeFromSource"));

	APlayerCameraManager_StartCameraShakeFromSource_Params params;
	params.ShakeClass = ShakeClass;
	params.SourceComponent = SourceComponent;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.StartCameraShake
// ()
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UCameraShakeBase*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCameraShakeBase* APlayerCameraManager::StartCameraShake(class UClass* ShakeClass, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartCameraShake"));

	APlayerCameraManager_StartCameraShake_Params params;
	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.StartCameraFade
// ()
// Parameters:
// float                          FromAlpha                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ToAlpha                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShouldFadeAudio               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHoldWhenFinished              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartCameraFade"));

	APlayerCameraManager_StartCameraFade_Params params;
	params.FromAlpha = FromAlpha;
	params.ToAlpha = ToAlpha;
	params.Duration = Duration;
	params.Color = Color;
	params.bShouldFadeAudio = bShouldFadeAudio;
	params.bHoldWhenFinished = bHoldWhenFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.SetManualCameraFade
// ()
// Parameters:
// float                          InFadeAmount                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bInFadeAudio                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.SetManualCameraFade"));

	APlayerCameraManager_SetManualCameraFade_Params params;
	params.InFadeAmount = InFadeAmount;
	params.Color = Color;
	params.bInFadeAudio = bInFadeAudio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame
// ()
void APlayerCameraManager::SetGameCameraCutThisFrame()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame"));

	APlayerCameraManager_SetGameCameraCutThisFrame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.RemoveCameraModifier
// ()
// Parameters:
// class UCameraModifier*         ModifierToRemove               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerCameraManager::RemoveCameraModifier(class UCameraModifier* ModifierToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraModifier"));

	APlayerCameraManager_RemoveCameraModifier_Params params;
	params.ModifierToRemove = ModifierToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
// ()
// Parameters:
// class AEmitterCameraLensEffectBase* Emitter                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraLensEffect"));

	APlayerCameraManager_RemoveCameraLensEffect_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.PlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UCameraAnimInst*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PlayCameraAnim"));

	APlayerCameraManager_PlayCameraAnim_Params params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.PhotographyCameraModify
// ()
// Parameters:
// struct FVector                 NewCameraLocation              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousCameraLocation         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OriginalCameraLocation         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ResultCameraLocation           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerCameraManager::PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PhotographyCameraModify"));

	APlayerCameraManager_PhotographyCameraModify_Params params;
	params.NewCameraLocation = NewCameraLocation;
	params.PreviousCameraLocation = PreviousCameraLocation;
	params.OriginalCameraLocation = OriginalCameraLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ResultCameraLocation != nullptr)
		*ResultCameraLocation = params.ResultCameraLocation;

}


// Function Engine.PlayerCameraManager.OnPhotographySessionStart
// ()
void APlayerCameraManager::OnPhotographySessionStart()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.OnPhotographySessionStart"));

	APlayerCameraManager_OnPhotographySessionStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.OnPhotographySessionEnd
// ()
void APlayerCameraManager::OnPhotographySessionEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.OnPhotographySessionEnd"));

	APlayerCameraManager_OnPhotographySessionEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
// ()
void APlayerCameraManager::OnPhotographyMultiPartCaptureStart()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart"));

	APlayerCameraManager_OnPhotographyMultiPartCaptureStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
// ()
void APlayerCameraManager::OnPhotographyMultiPartCaptureEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd"));

	APlayerCameraManager_OnPhotographyMultiPartCaptureEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.GetOwningPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* APlayerCameraManager::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetOwningPlayerController"));

	APlayerCameraManager_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetFOVAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float APlayerCameraManager::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetFOVAngle"));

	APlayerCameraManager_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator APlayerCameraManager::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraRotation"));

	APlayerCameraManager_GetCameraRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector APlayerCameraManager::GetCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraLocation"));

	APlayerCameraManager_GetCameraLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.FindCameraModifierByClass
// ()
// Parameters:
// class UClass*                  ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraModifier*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCameraModifier* APlayerCameraManager::FindCameraModifierByClass(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.FindCameraModifierByClass"));

	APlayerCameraManager_FindCameraModifierByClass_Params params;
	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.ClearCameraLensEffects
// ()
void APlayerCameraManager::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.ClearCameraLensEffects"));

	APlayerCameraManager_ClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
// ()
// Parameters:
// class AActor*                  CameraTarget                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewCameraLocation              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewCameraRotation              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          NewCameraFOV                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool APlayerCameraManager::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.BlueprintUpdateCamera"));

	APlayerCameraManager_BlueprintUpdateCamera_Params params;
	params.CameraTarget = CameraTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewCameraLocation != nullptr)
		*NewCameraLocation = params.NewCameraLocation;
	if (NewCameraRotation != nullptr)
		*NewCameraRotation = params.NewCameraRotation;
	if (NewCameraFOV != nullptr)
		*NewCameraFOV = params.NewCameraFOV;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.AddNewCameraModifier
// ()
// Parameters:
// class UClass*                  ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraModifier*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCameraModifier* APlayerCameraManager::AddNewCameraModifier(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddNewCameraModifier"));

	APlayerCameraManager_AddNewCameraModifier_Params params;
	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.AddCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AEmitterCameraLensEffectBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddCameraLensEffect"));

	APlayerCameraManager_AddCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void APlayerCameraManager::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(PCOwner, APlayerController);
	READ_PTR_FULL(TransformComponent, USceneComponent);
	READ_PTR_FULL(CachedCameraShakeMod, UCameraModifier_CameraShake);
	READ_PTR_FULL(AnimInstPool[0x8], UCameraAnimInst);
	READ_PTR_FULL(AnimCameraActor, ACameraActor);
}

void APlayerCameraManager::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(PCOwner);
	DELE_PTR_FULL(TransformComponent);
	DELE_PTR_FULL(CachedCameraShakeMod);
	DELE_PTR_FULL(AnimInstPool[0x8]);
	DELE_PTR_FULL(AnimCameraActor);
}

// Function Engine.GameInstance.ReceiveShutdown
// ()
void UGameInstance::ReceiveShutdown()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveShutdown"));

	UGameInstance_ReceiveShutdown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameInstance.ReceiveInit
// ()
void UGameInstance::ReceiveInit()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveInit"));

	UGameInstance_ReceiveInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameInstance.HandleTravelError
// ()
// Parameters:
// TEnumAsByte<Engine_ETravelFailure> FailureType                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameInstance::HandleTravelError(TEnumAsByte<Engine_ETravelFailure> FailureType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.HandleTravelError"));

	UGameInstance_HandleTravelError_Params params;
	params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameInstance.HandleNetworkError
// ()
// Parameters:
// TEnumAsByte<Engine_ENetworkFailure> FailureType                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsServer                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameInstance::HandleNetworkError(TEnumAsByte<Engine_ENetworkFailure> FailureType, bool bIsServer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.HandleNetworkError"));

	UGameInstance_HandleNetworkError_Params params;
	params.FailureType = FailureType;
	params.bIsServer = bIsServer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameInstance.DebugRemovePlayer
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameInstance::DebugRemovePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugRemovePlayer"));

	UGameInstance_DebugRemovePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameInstance.DebugCreatePlayer
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameInstance::DebugCreatePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugCreatePlayer"));

	UGameInstance_DebugCreatePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UGameInstance::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(OnlineSession, UOnlineSession);
}

void UGameInstance::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(OnlineSession);
}

void AGameSession::AfterRead()
{
	AInfo::AfterRead();

}

void AGameSession::BeforeDelete()
{
	AInfo::BeforeDelete();

}

// Function Engine.PlayerState.ReceiveOverrideWith
// ()
// Parameters:
// class APlayerState*            OldPlayerState                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerState::ReceiveOverrideWith(class APlayerState* OldPlayerState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.ReceiveOverrideWith"));

	APlayerState_ReceiveOverrideWith_Params params;
	params.OldPlayerState = OldPlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.ReceiveCopyProperties
// ()
// Parameters:
// class APlayerState*            NewPlayerState                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlayerState::ReceiveCopyProperties(class APlayerState* NewPlayerState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.ReceiveCopyProperties"));

	APlayerState_ReceiveCopyProperties_Params params;
	params.NewPlayerState = NewPlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.OnRep_UniqueId
// ()
void APlayerState::OnRep_UniqueId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_UniqueId"));

	APlayerState_OnRep_UniqueId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.OnRep_Score
// ()
void APlayerState::OnRep_Score()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_Score"));

	APlayerState_OnRep_Score_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.OnRep_PlayerName
// ()
void APlayerState::OnRep_PlayerName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_PlayerName"));

	APlayerState_OnRep_PlayerName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.OnRep_PlayerId
// ()
void APlayerState::OnRep_PlayerId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_PlayerId"));

	APlayerState_OnRep_PlayerId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.OnRep_bIsInactive
// ()
void APlayerState::OnRep_bIsInactive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_bIsInactive"));

	APlayerState_OnRep_bIsInactive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerState.GetPlayerName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString APlayerState::GetPlayerName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.GetPlayerName"));

	APlayerState_GetPlayerName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void APlayerState::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(EngineMessageClass, UClass);
	READ_PTR_FULL(PawnPrivate, APawn);
}

void APlayerState::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(EngineMessageClass);
	DELE_PTR_FULL(PawnPrivate);
}

// Function Engine.DefaultPawn.TurnAtRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADefaultPawn::TurnAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.TurnAtRate"));

	ADefaultPawn_TurnAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DefaultPawn.MoveUp_World
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADefaultPawn::MoveUp_World(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveUp_World"));

	ADefaultPawn_MoveUp_World_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DefaultPawn.MoveRight
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADefaultPawn::MoveRight(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveRight"));

	ADefaultPawn_MoveRight_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DefaultPawn.MoveForward
// ()
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADefaultPawn::MoveForward(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveForward"));

	ADefaultPawn_MoveForward_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DefaultPawn.LookUpAtRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADefaultPawn::LookUpAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.LookUpAtRate"));

	ADefaultPawn_LookUpAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ADefaultPawn::AfterRead()
{
	APawn::AfterRead();

	READ_PTR_FULL(MovementComponent, UPawnMovementComponent);
	READ_PTR_FULL(CollisionComponent, USphereComponent);
	READ_PTR_FULL(MeshComponent, UStaticMeshComponent);
}

void ADefaultPawn::BeforeDelete()
{
	APawn::BeforeDelete();

	DELE_PTR_FULL(MovementComponent);
	DELE_PTR_FULL(CollisionComponent);
	DELE_PTR_FULL(MeshComponent);
}

void ASpectatorPawn::AfterRead()
{
	ADefaultPawn::AfterRead();

}

void ASpectatorPawn::BeforeDelete()
{
	ADefaultPawn::BeforeDelete();

}

// Function Engine.SpringArmComponent.IsCollisionFixApplied
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool USpringArmComponent::IsCollisionFixApplied()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpringArmComponent.IsCollisionFixApplied"));

	USpringArmComponent_IsCollisionFixApplied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SpringArmComponent.GetUnfixedCameraPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USpringArmComponent::GetUnfixedCameraPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpringArmComponent.GetUnfixedCameraPosition"));

	USpringArmComponent_GetUnfixedCameraPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SpringArmComponent.GetTargetRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator USpringArmComponent::GetTargetRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpringArmComponent.GetTargetRotation"));

	USpringArmComponent_GetTargetRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USpringArmComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void USpringArmComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

// Function Engine.WorldSettings.OnRep_WorldGravityZ
// ()
void AWorldSettings::OnRep_WorldGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WorldSettings.OnRep_WorldGravityZ"));

	AWorldSettings_OnRep_WorldGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AWorldSettings::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(NavigationSystemConfig, UNavigationSystemConfig);
	READ_PTR_FULL(NavigationSystemConfigOverride, UNavigationSystemConfig);
	READ_PTR_FULL(KillZDamageType, UClass);
	READ_PTR_FULL(DefaultPhysicsVolumeClass, UClass);
	READ_PTR_FULL(PhysicsCollisionHandlerClass, UClass);
	READ_PTR_FULL(DefaultGameMode, UClass);
	READ_PTR_FULL(GameNetworkManagerClass, UClass);
	READ_PTR_FULL(DefaultBaseSoundMix, USoundMix);
	READ_PTR_FULL(Pauser, APlayerState);
	READ_PTR_FULL(PauserPlayerState, APlayerState);
	READ_PTR_FULL(DefaultBookmarkClass, UClass);
	READ_PTR_FULL(LastBookmarkClass, UClass);
}

void AWorldSettings::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(NavigationSystemConfig);
	DELE_PTR_FULL(NavigationSystemConfigOverride);
	DELE_PTR_FULL(KillZDamageType);
	DELE_PTR_FULL(DefaultPhysicsVolumeClass);
	DELE_PTR_FULL(PhysicsCollisionHandlerClass);
	DELE_PTR_FULL(DefaultGameMode);
	DELE_PTR_FULL(GameNetworkManagerClass);
	DELE_PTR_FULL(DefaultBaseSoundMix);
	DELE_PTR_FULL(Pauser);
	DELE_PTR_FULL(PauserPlayerState);
	DELE_PTR_FULL(DefaultBookmarkClass);
	DELE_PTR_FULL(LastBookmarkClass);
}

// Function Engine.CameraActor.GetAutoActivatePlayerIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int ACameraActor::GetAutoActivatePlayerIndex()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraActor.GetAutoActivatePlayerIndex"));

	ACameraActor_GetAutoActivatePlayerIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ACameraActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(CameraComponent, UCameraComponent);
	READ_PTR_FULL(SceneComponent, USceneComponent);
}

void ACameraActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(CameraComponent);
	DELE_PTR_FULL(SceneComponent);
}

void UShapeComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(ShapeBodySetup, UBodySetup);
	READ_PTR_FULL(AreaClass, UClass);
}

void UShapeComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(ShapeBodySetup);
	DELE_PTR_FULL(AreaClass);
}

// Function Engine.CapsuleComponent.SetCapsuleSize
// ()
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InHalfHeight                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleSize"));

	UCapsuleComponent_SetCapsuleSize_Params params;
	params.InRadius = InRadius;
	params.InHalfHeight = InHalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CapsuleComponent.SetCapsuleRadius
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleRadius"));

	UCapsuleComponent_SetCapsuleRadius_Params params;
	params.Radius = Radius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
// ()
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleHalfHeight"));

	UCapsuleComponent_SetCapsuleHalfHeight_Params params;
	params.HalfHeight = HalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutHalfHeightWithoutHemisphere (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere"));

	UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeightWithoutHemisphere != nullptr)
		*OutHalfHeightWithoutHemisphere = params.OutHalfHeightWithoutHemisphere;

}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize"));

	UCapsuleComponent_GetUnscaledCapsuleSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;

}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetUnscaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius"));

	UCapsuleComponent_GetUnscaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere"));

	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetUnscaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight"));

	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetShapeScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetShapeScale"));

	UCapsuleComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutHalfHeightWithoutHemisphere (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere"));

	UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeightWithoutHemisphere != nullptr)
		*OutHalfHeightWithoutHemisphere = params.OutHalfHeightWithoutHemisphere;

}


// Function Engine.CapsuleComponent.GetScaledCapsuleSize
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleSize"));

	UCapsuleComponent_GetScaledCapsuleSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;

}


// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetScaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleRadius"));

	UCapsuleComponent_GetScaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere"));

	UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCapsuleComponent::GetScaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight"));

	UCapsuleComponent_GetScaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCapsuleComponent::AfterRead()
{
	UShapeComponent::AfterRead();

}

void UCapsuleComponent::BeforeDelete()
{
	UShapeComponent::BeforeDelete();

}

void UDamageType::AfterRead()
{
	UObject::AfterRead();

}

void UDamageType::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              NewInstanceTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform"));

	UInstancedStaticMeshComponent_UpdateInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.NewInstanceTransform = NewInstanceTransform;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.SetCustomDataValue
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CustomDataIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CustomDataValue                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.SetCustomDataValue"));

	UInstancedStaticMeshComponent_SetCustomDataValue_Params params;
	params.InstanceIndex = InstanceIndex;
	params.CustomDataIndex = CustomDataIndex;
	params.CustomDataValue = CustomDataValue;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.SetCullDistances
// ()
// Parameters:
// int                            StartCullDistance              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            EndCullDistance                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.SetCullDistances"));

	UInstancedStaticMeshComponent_SetCullDistances_Params params;
	params.StartCullDistance = StartCullDistance;
	params.EndCullDistance = EndCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InstancedStaticMeshComponent.RemoveInstance
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.RemoveInstance"));

	UInstancedStaticMeshComponent_RemoveInstance_Params params;
	params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              OutInstanceTransform           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform"));

	UInstancedStaticMeshComponent_GetInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.bWorldSpace = bWorldSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutInstanceTransform != nullptr)
		*OutInstanceTransform = params.OutInstanceTransform;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
// ()
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSphereInWorldSpace            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere"));

	UInstancedStaticMeshComponent_GetInstancesOverlappingSphere_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.bSphereInWorldSpace = bSphereInWorldSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
// ()
// Parameters:
// struct FBox                    Box                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bBoxInWorldSpace               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox"));

	UInstancedStaticMeshComponent_GetInstancesOverlappingBox_Params params;
	params.Box = Box;
	params.bBoxInWorldSpace = bBoxInWorldSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UInstancedStaticMeshComponent::GetInstanceCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceCount"));

	UInstancedStaticMeshComponent_GetInstanceCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.ClearInstances
// ()
void UInstancedStaticMeshComponent::ClearInstances()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.ClearInstances"));

	UInstancedStaticMeshComponent_ClearInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
// ()
// Parameters:
// int                            StartInstanceIndex             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>      NewInstancesTransforms         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms"));

	UInstancedStaticMeshComponent_BatchUpdateInstancesTransforms_Params params;
	params.StartInstanceIndex = StartInstanceIndex;
	params.NewInstancesTransforms = NewInstancesTransforms;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
// ()
// Parameters:
// int                            StartInstanceIndex             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumInstances                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              NewInstancesTransform          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInstancedStaticMeshComponent::BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform"));

	UInstancedStaticMeshComponent_BatchUpdateInstancesTransform_Params params;
	params.StartInstanceIndex = StartInstanceIndex;
	params.NumInstances = NumInstances;
	params.NewInstancesTransform = NewInstancesTransform;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
// ()
// Parameters:
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const struct FTransform& WorldTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace"));

	UInstancedStaticMeshComponent_AddInstanceWorldSpace_Params params;
	params.WorldTransform = WorldTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstances
// ()
// Parameters:
// TArray<struct FTransform>      InstanceTransforms             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bShouldReturnIndices           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<int> UInstancedStaticMeshComponent::AddInstances(TArray<struct FTransform> InstanceTransforms, bool bShouldReturnIndices)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstances"));

	UInstancedStaticMeshComponent_AddInstances_Params params;
	params.InstanceTransforms = InstanceTransforms;
	params.bShouldReturnIndices = bShouldReturnIndices;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstance
// ()
// Parameters:
// struct FTransform              InstanceTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UInstancedStaticMeshComponent::AddInstance(const struct FTransform& InstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstance"));

	UInstancedStaticMeshComponent_AddInstance_Params params;
	params.InstanceTransform = InstanceTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UInstancedStaticMeshComponent::AfterRead()
{
	UStaticMeshComponent::AfterRead();

}

void UInstancedStaticMeshComponent::BeforeDelete()
{
	UStaticMeshComponent::BeforeDelete();

}

// Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
// ()
// Parameters:
// TArray<int>                    InstancesToRemove              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(TArray<int> InstancesToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances"));

	UHierarchicalInstancedStaticMeshComponent_RemoveInstances_Params params;
	params.InstancesToRemove = InstancesToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UHierarchicalInstancedStaticMeshComponent::AfterRead()
{
	UInstancedStaticMeshComponent::AfterRead();

}

void UHierarchicalInstancedStaticMeshComponent::BeforeDelete()
{
	UInstancedStaticMeshComponent::BeforeDelete();

}

// Function Engine.HUD.ShowHUD
// ()
void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowHUD"));

	AHUD_ShowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ShowDebugToggleSubCategory
// ()
// Parameters:
// struct FName                   Category                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ShowDebugToggleSubCategory(const struct FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugToggleSubCategory"));

	AHUD_ShowDebugToggleSubCategory_Params params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ShowDebugForReticleTargetToggle
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ShowDebugForReticleTargetToggle(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugForReticleTargetToggle"));

	AHUD_ShowDebugForReticleTargetToggle_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ShowDebug
// ()
// Parameters:
// struct FName                   DebugType                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebug"));

	AHUD_ShowDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.RemoveDebugText
// ()
// Parameters:
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLeaveDurationText             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveDebugText"));

	AHUD_RemoveDebugText_Params params;
	params.SrcActor = SrcActor;
	params.bLeaveDurationText = bLeaveDurationText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.RemoveAllDebugStrings
// ()
void AHUD::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveAllDebugStrings"));

	AHUD_RemoveAllDebugStrings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ReceiveHitBoxRelease
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ReceiveHitBoxRelease(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxRelease"));

	AHUD_ReceiveHitBoxRelease_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ReceiveHitBoxEndCursorOver
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ReceiveHitBoxEndCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxEndCursorOver"));

	AHUD_ReceiveHitBoxEndCursorOver_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ReceiveHitBoxClick
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ReceiveHitBoxClick(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxClick"));

	AHUD_ReceiveHitBoxClick_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ReceiveHitBoxBeginCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxBeginCursorOver"));

	AHUD_ReceiveHitBoxBeginCursorOver_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.ReceiveDrawHUD
// ()
// Parameters:
// int                            SizeX                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SizeY                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::ReceiveDrawHUD(int SizeX, int SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveDrawHUD"));

	AHUD_ReceiveDrawHUD_Params params;
	params.SizeX = SizeX;
	params.SizeY = SizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.Project
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector AHUD::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Project"));

	AHUD_Project_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.HUD.PreviousDebugTarget
// ()
void AHUD::PreviousDebugTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.PreviousDebugTarget"));

	AHUD_PreviousDebugTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.NextDebugTarget
// ()
void AHUD::NextDebugTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.NextDebugTarget"));

	AHUD_NextDebugTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.GetTextSize
// ()
// Parameters:
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutWidth                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutHeight                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::GetTextSize(const struct FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetTextSize"));

	AHUD_GetTextSize_Params params;
	params.Text = Text;
	params.Font = Font;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutWidth != nullptr)
		*OutWidth = params.OutWidth;
	if (OutHeight != nullptr)
		*OutHeight = params.OutHeight;

}


// Function Engine.HUD.GetOwningPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* AHUD::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPlayerController"));

	AHUD_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.HUD.GetOwningPawn
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* AHUD::GetOwningPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPawn"));

	AHUD_GetOwningPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.HUD.GetActorsInSelectionRectangle
// ()
// Parameters:
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               FirstPoint                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               SecondPoint                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           bIncludeNonCollidingComponents (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bActorMustBeFullyEnclosed      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetActorsInSelectionRectangle"));

	AHUD_GetActorsInSelectionRectangle_Params params;
	params.ClassFilter = ClassFilter;
	params.FirstPoint = FirstPoint;
	params.SecondPoint = SecondPoint;
	params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.HUD.DrawTextureSimple
// ()
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTextureSimple"));

	AHUD_DrawTextureSimple_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawTexture
// ()
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TextureU                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TextureV                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TextureUWidth                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TextureVHeight                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TintColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBlendMode> BlendMode                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTexture"));

	AHUD_DrawTexture_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.TextureU = TextureU;
	params.TextureV = TextureV;
	params.TextureUWidth = TextureUWidth;
	params.TextureVHeight = TextureVHeight;
	params.TintColor = TintColor;
	params.BlendMode = BlendMode;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawText
// ()
// Parameters:
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawText"));

	AHUD_DrawText_Params params;
	params.Text = Text;
	params.TextColor = TextColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Font = Font;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawRect
// ()
// Parameters:
// struct FLinearColor            RectColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawRect"));

	AHUD_DrawRect_Params params;
	params.RectColor = RectColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawMaterialTriangle
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V0_Pos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V1_Pos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V2_Pos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V0_UV                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V1_UV                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               V2_UV                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            V0_Color                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            V1_Color                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            V2_Color                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialTriangle"));

	AHUD_DrawMaterialTriangle_Params params;
	params.Material = Material;
	params.V0_Pos = V0_Pos;
	params.V1_Pos = V1_Pos;
	params.V2_Pos = V2_Pos;
	params.V0_UV = V0_UV;
	params.V1_UV = V1_UV;
	params.V2_UV = V2_UV;
	params.V0_Color = V0_Color;
	params.V1_Color = V1_Color;
	params.V2_Color = V2_Color;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawMaterialSimple
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialSimple"));

	AHUD_DrawMaterialSimple_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawMaterial
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaterialU                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaterialV                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaterialUWidth                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaterialVHeight                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterial"));

	AHUD_DrawMaterial_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.MaterialU = MaterialU;
	params.MaterialV = MaterialV;
	params.MaterialUWidth = MaterialUWidth;
	params.MaterialVHeight = MaterialVHeight;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.DrawLine
// ()
// Parameters:
// float                          StartScreenX                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartScreenY                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          EndScreenX                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          EndScreenY                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LineThickness                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawLine"));

	AHUD_DrawLine_Params params;
	params.StartScreenX = StartScreenX;
	params.StartScreenY = StartScreenY;
	params.EndScreenX = EndScreenX;
	params.EndScreenY = EndScreenY;
	params.LineColor = LineColor;
	params.LineThickness = LineThickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.Deproject
// ()
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Deproject"));

	AHUD_Deproject_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

}


// Function Engine.HUD.AddHitBox
// ()
// Parameters:
// struct FVector2D               position                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Size                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bConsumesInput                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::AddHitBox(const struct FVector2D& position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddHitBox"));

	AHUD_AddHitBox_Params params;
	params.position = position;
	params.Size = Size;
	params.InName = InName;
	params.bConsumesInput = bConsumesInput;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HUD.AddDebugText
// ()
// Parameters:
// struct FString                 DebugText                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 DesiredOffset                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  TextColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSkipOverwriteCheck            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAbsoluteLocation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bKeepAttachedToActor           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFont*                   InFont                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FontScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDrawShadow                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AHUD::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddDebugText"));

	AHUD_AddDebugText_Params params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.FontScale = FontScale;
	params.bDrawShadow = bDrawShadow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AHUD::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(PlayerOwner, APlayerController);
	READ_PTR_FULL(Canvas, UCanvas);
	READ_PTR_FULL(DebugCanvas, UCanvas);
	READ_PTR_FULL(ShowDebugTargetDesiredClass, UClass);
	READ_PTR_FULL(ShowDebugTargetActor, AActor);
}

void AHUD::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(PlayerOwner);
	DELE_PTR_FULL(Canvas);
	DELE_PTR_FULL(DebugCanvas);
	DELE_PTR_FULL(ShowDebugTargetDesiredClass);
	DELE_PTR_FULL(ShowDebugTargetActor);
}

void ATriggerBase::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(CollisionComponent, UShapeComponent);
}

void ATriggerBase::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(CollisionComponent);
}

void ATriggerBox::AfterRead()
{
	ATriggerBase::AfterRead();

}

void ATriggerBox::BeforeDelete()
{
	ATriggerBase::BeforeDelete();

}

void UParticleModuleEventSendToGame::AfterRead()
{
	UObject::AfterRead();

}

void UParticleModuleEventSendToGame::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.CameraComponent.SetUseFieldOfViewForLOD
// ()
// Parameters:
// bool                           bInUseFieldOfViewForLOD        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetUseFieldOfViewForLOD"));

	UCameraComponent_SetUseFieldOfViewForLOD_Params params;
	params.bInUseFieldOfViewForLOD = bInUseFieldOfViewForLOD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetProjectionMode
// ()
// Parameters:
// TEnumAsByte<Engine_ECameraProjectionMode> InProjectionMode               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetProjectionMode(TEnumAsByte<Engine_ECameraProjectionMode> InProjectionMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetProjectionMode"));

	UCameraComponent_SetProjectionMode_Params params;
	params.InProjectionMode = InProjectionMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetPostProcessBlendWeight
// ()
// Parameters:
// float                          InPostProcessBlendWeight       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetPostProcessBlendWeight"));

	UCameraComponent_SetPostProcessBlendWeight_Params params;
	params.InPostProcessBlendWeight = InPostProcessBlendWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetOrthoWidth
// ()
// Parameters:
// float                          InOrthoWidth                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetOrthoWidth(float InOrthoWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetOrthoWidth"));

	UCameraComponent_SetOrthoWidth_Params params;
	params.InOrthoWidth = InOrthoWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetOrthoNearClipPlane
// ()
// Parameters:
// float                          InOrthoNearClipPlane           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetOrthoNearClipPlane"));

	UCameraComponent_SetOrthoNearClipPlane_Params params;
	params.InOrthoNearClipPlane = InOrthoNearClipPlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetOrthoFarClipPlane
// ()
// Parameters:
// float                          InOrthoFarClipPlane            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetOrthoFarClipPlane"));

	UCameraComponent_SetOrthoFarClipPlane_Params params;
	params.InOrthoFarClipPlane = InOrthoFarClipPlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetFieldOfView
// ()
// Parameters:
// float                          InFieldOfView                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetFieldOfView(float InFieldOfView)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetFieldOfView"));

	UCameraComponent_SetFieldOfView_Params params;
	params.InFieldOfView = InFieldOfView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetConstraintAspectRatio
// ()
// Parameters:
// bool                           bInConstrainAspectRatio        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetConstraintAspectRatio(bool bInConstrainAspectRatio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetConstraintAspectRatio"));

	UCameraComponent_SetConstraintAspectRatio_Params params;
	params.bInConstrainAspectRatio = bInConstrainAspectRatio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.SetAspectRatio
// ()
// Parameters:
// float                          InAspectRatio                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::SetAspectRatio(float InAspectRatio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.SetAspectRatio"));

	UCameraComponent_SetAspectRatio_Params params;
	params.InAspectRatio = InAspectRatio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.RemoveBlendable
// ()
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
void UCameraComponent::RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.RemoveBlendable"));

	UCameraComponent_RemoveBlendable_Params params;
	params.InBlendableObject = InBlendableObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.OnCameraMeshHiddenChanged
// ()
void UCameraComponent::OnCameraMeshHiddenChanged()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.OnCameraMeshHiddenChanged"));

	UCameraComponent_OnCameraMeshHiddenChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraComponent.GetCameraView
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo        DesiredView                    (Parm, OutParm, NativeAccessSpecifierPublic)
void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.GetCameraView"));

	UCameraComponent_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DesiredView != nullptr)
		*DesiredView = params.DesiredView;

}


// Function Engine.CameraComponent.AddOrUpdateBlendable
// ()
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.AddOrUpdateBlendable"));

	UCameraComponent_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UCameraComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void UCameraComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

// Function Engine.ProjectileMovementComponent.StopSimulating
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::StopSimulating(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.StopSimulating"));

	UProjectileMovementComponent_StopSimulating_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::SetVelocityInLocalSpace(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace"));

	UProjectileMovementComponent_SetVelocityInLocalSpace_Params params;
	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ProjectileMovementComponent.SetInterpolatedComponent
// ()
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::SetInterpolatedComponent(class USceneComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.SetInterpolatedComponent"));

	UProjectileMovementComponent_SetInterpolatedComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ProjectileMovementComponent.ResetInterpolation
// ()
void UProjectileMovementComponent::ResetInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.ResetInterpolation"));

	UProjectileMovementComponent_ResetInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature"));

	UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature"));

	UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ProjectileMovementComponent.MoveInterpolationTarget
// ()
// Parameters:
// struct FVector                 NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UProjectileMovementComponent::MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.MoveInterpolationTarget"));

	UProjectileMovementComponent_MoveInterpolationTarget_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ProjectileMovementComponent.LimitVelocity
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UProjectileMovementComponent::LimitVelocity(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.LimitVelocity"));

	UProjectileMovementComponent_LimitVelocity_Params params;
	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UProjectileMovementComponent::IsVelocityUnderSimulationThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold"));

	UProjectileMovementComponent_IsVelocityUnderSimulationThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ProjectileMovementComponent.IsInterpolationComplete
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UProjectileMovementComponent::IsInterpolationComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.IsInterpolationComplete"));

	UProjectileMovementComponent_IsInterpolationComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UProjectileMovementComponent::AfterRead()
{
	UMovementComponent::AfterRead();

}

void UProjectileMovementComponent::BeforeDelete()
{
	UMovementComponent::BeforeDelete();

}

// Function Engine.PostProcessVolume.AddOrUpdateBlendable
// ()
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APostProcessVolume::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessVolume.AddOrUpdateBlendable"));

	APostProcessVolume_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void APostProcessVolume::AfterRead()
{
	AVolume::AfterRead();

}

void APostProcessVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

// Function Engine.BoxComponent.SetBoxExtent
// ()
// Parameters:
// struct FVector                 InBoxExtent                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBoxComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.SetBoxExtent"));

	UBoxComponent_SetBoxExtent_Params params;
	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BoxComponent.GetUnscaledBoxExtent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UBoxComponent::GetUnscaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetUnscaledBoxExtent"));

	UBoxComponent_GetUnscaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BoxComponent.GetScaledBoxExtent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UBoxComponent::GetScaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetScaledBoxExtent"));

	UBoxComponent_GetScaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UBoxComponent::AfterRead()
{
	UShapeComponent::AfterRead();

}

void UBoxComponent::BeforeDelete()
{
	UShapeComponent::BeforeDelete();

}

void ASceneCapture::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(MeshComp, UStaticMeshComponent);
	READ_PTR_FULL(SceneComponent, USceneComponent);
}

void ASceneCapture::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(MeshComp);
	DELE_PTR_FULL(SceneComponent);
}

// Function Engine.SceneCapture2D.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ASceneCapture2D::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCapture2D.OnInterpToggle"));

	ASceneCapture2D_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ASceneCapture2D::AfterRead()
{
	ASceneCapture::AfterRead();

	READ_PTR_FULL(CaptureComponent2D, USceneCaptureComponent2D);
}

void ASceneCapture2D::BeforeDelete()
{
	ASceneCapture::BeforeDelete();

	DELE_PTR_FULL(CaptureComponent2D);
}

// Function Engine.SkyLight.OnRep_bEnabled
// ()
void ASkyLight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLight.OnRep_bEnabled"));

	ASkyLight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ASkyLight::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(LightComponent, USkyLightComponent);
}

void ASkyLight::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(LightComponent);
}

void UTexture::AfterRead()
{
	UStreamableRenderAsset::AfterRead();

}

void UTexture::BeforeDelete()
{
	UStreamableRenderAsset::BeforeDelete();

}

void UTextureCube::AfterRead()
{
	UTexture::AfterRead();

}

void UTextureCube::BeforeDelete()
{
	UTexture::BeforeDelete();

}

// Function Engine.StaticMeshActor.SetMobility
// ()
// Parameters:
// TEnumAsByte<Engine_EComponentMobility> InMobility                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AStaticMeshActor::SetMobility(TEnumAsByte<Engine_EComponentMobility> InMobility)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshActor.SetMobility"));

	AStaticMeshActor_SetMobility_Params params;
	params.InMobility = InMobility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AStaticMeshActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(StaticMeshComponent, UStaticMeshComponent);
}

void AStaticMeshActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(StaticMeshComponent);
}

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// ()
// Parameters:
// bool                           OverrideForceMiplevelsToBeResident (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceMiplevelsToBeResidentValue (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFastResponse                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident"));

	UMaterialInterface_SetForceMipLevelsToBeResident_Params params;
	params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;
	params.bFastResponse = bFastResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInterface.GetPhysicalMaterialMask
// ()
// Parameters:
// class UPhysicalMaterialMask*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPhysicalMaterialMask* UMaterialInterface::GetPhysicalMaterialMask()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetPhysicalMaterialMask"));

	UMaterialInterface_GetPhysicalMaterialMask_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterialFromMap
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterialFromMap(int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetPhysicalMaterialFromMap"));

	UMaterialInterface_GetPhysicalMaterialFromMap_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// ()
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetPhysicalMaterial"));

	UMaterialInterface_GetPhysicalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetParameterInfo
// ()
// Parameters:
// TEnumAsByte<Engine_EMaterialParameterAssociation> Association                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialFunctionInterface* LayerFunction                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMaterialParameterInfo  ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FMaterialParameterInfo UMaterialInterface::GetParameterInfo(TEnumAsByte<Engine_EMaterialParameterAssociation> Association, const struct FName& ParameterName, class UMaterialFunctionInterface* LayerFunction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetParameterInfo"));

	UMaterialInterface_GetParameterInfo_Params params;
	params.Association = Association;
	params.ParameterName = ParameterName;
	params.LayerFunction = LayerFunction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetBaseMaterial
// ()
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterial* UMaterialInterface::GetBaseMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetBaseMaterial"));

	UMaterialInterface_GetBaseMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UMaterialInterface::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SubsurfaceProfile, USubsurfaceProfile);
}

void UMaterialInterface::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SubsurfaceProfile);
}

void UMaterialInstance::AfterRead()
{
	UMaterialInterface::AfterRead();

	READ_PTR_FULL(PhysMaterial, UPhysicalMaterial);
	READ_PTR_FULL(PhysicalMaterialMap[0x8], UPhysicalMaterial);
	READ_PTR_FULL(Parent, UMaterialInterface);
}

void UMaterialInstance::BeforeDelete()
{
	UMaterialInterface::BeforeDelete();

	DELE_PTR_FULL(PhysMaterial);
	DELE_PTR_FULL(PhysicalMaterialMap[0x8]);
	DELE_PTR_FULL(Parent);
}

// Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UMaterialInstanceConstant::K2_GetVectorParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue"));

	UMaterialInstanceConstant_K2_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture* UMaterialInstanceConstant::K2_GetTextureParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue"));

	UMaterialInstanceConstant_K2_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMaterialInstanceConstant::K2_GetScalarParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue"));

	UMaterialInstanceConstant_K2_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UMaterialInstanceConstant::AfterRead()
{
	UMaterialInstance::AfterRead();

	READ_PTR_FULL(PhysMaterialMask, UPhysicalMaterialMask);
}

void UMaterialInstanceConstant::BeforeDelete()
{
	UMaterialInstance::BeforeDelete();

	DELE_PTR_FULL(PhysMaterialMask);
}

void UEngineCustomTimeStep::AfterRead()
{
	UObject::AfterRead();

}

void UEngineCustomTimeStep::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.TimecodeProvider.GetTimecode
// ()
// Parameters:
// struct FTimecode               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimecode UTimecodeProvider::GetTimecode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetTimecode"));

	UTimecodeProvider_GetTimecode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.GetSynchronizationState
// ()
// Parameters:
// Engine_ETimecodeProviderSynchronizationState ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
Engine_ETimecodeProviderSynchronizationState UTimecodeProvider::GetSynchronizationState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetSynchronizationState"));

	UTimecodeProvider_GetSynchronizationState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.GetQualifiedFrameTime
// ()
// Parameters:
// struct FQualifiedFrameTime     ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FQualifiedFrameTime UTimecodeProvider::GetQualifiedFrameTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetQualifiedFrameTime"));

	UTimecodeProvider_GetQualifiedFrameTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.GetFrameRate
// ()
// Parameters:
// struct FFrameRate              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FFrameRate UTimecodeProvider::GetFrameRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetFrameRate"));

	UTimecodeProvider_GetFrameRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.GetDelayedTimecode
// ()
// Parameters:
// struct FTimecode               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimecode UTimecodeProvider::GetDelayedTimecode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetDelayedTimecode"));

	UTimecodeProvider_GetDelayedTimecode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
// ()
// Parameters:
// struct FQualifiedFrameTime     ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FQualifiedFrameTime UTimecodeProvider::GetDelayedQualifiedFrameTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime"));

	UTimecodeProvider_GetDelayedQualifiedFrameTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.FetchTimecode
// ()
// Parameters:
// struct FQualifiedFrameTime     OutFrameTime                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTimecodeProvider::FetchTimecode(struct FQualifiedFrameTime* OutFrameTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.FetchTimecode"));

	UTimecodeProvider_FetchTimecode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutFrameTime != nullptr)
		*OutFrameTime = params.OutFrameTime;


	return params.ReturnValue;
}


// Function Engine.TimecodeProvider.FetchAndUpdate
// ()
void UTimecodeProvider::FetchAndUpdate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimecodeProvider.FetchAndUpdate"));

	UTimecodeProvider_FetchAndUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UTimecodeProvider::AfterRead()
{
	UObject::AfterRead();

}

void UTimecodeProvider::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDynamicBlueprintBinding::AfterRead()
{
	UObject::AfterRead();

}

void UDynamicBlueprintBinding::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UBlueprintGeneratedClass::AfterRead()
{
	UClass::AfterRead();

	READ_PTR_FULL(SimpleConstructionScript, USimpleConstructionScript);
	READ_PTR_FULL(InheritableComponentHandler, UInheritableComponentHandler);
	READ_PTR_FULL(UberGraphFramePointerProperty, UStructProperty);
	READ_PTR_FULL(UberGraphFunction, UFunction);
}

void UBlueprintGeneratedClass::BeforeDelete()
{
	UClass::BeforeDelete();

	DELE_PTR_FULL(SimpleConstructionScript);
	DELE_PTR_FULL(InheritableComponentHandler);
	DELE_PTR_FULL(UberGraphFramePointerProperty);
	DELE_PTR_FULL(UberGraphFunction);
}

void USoundWave::AfterRead()
{
	USoundBase::AfterRead();

	READ_PTR_FULL(Curves, UCurveTable);
	READ_PTR_FULL(InternalCurves, UCurveTable);
}

void USoundWave::BeforeDelete()
{
	USoundBase::BeforeDelete();

	DELE_PTR_FULL(Curves);
	DELE_PTR_FULL(InternalCurves);
}

void USoundWaveProcedural::AfterRead()
{
	USoundWave::AfterRead();

}

void USoundWaveProcedural::BeforeDelete()
{
	USoundWave::BeforeDelete();

}

void UBlueprintCore::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SkeletonGeneratedClass, UClass);
	READ_PTR_FULL(GeneratedClass, UClass);
}

void UBlueprintCore::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SkeletonGeneratedClass);
	DELE_PTR_FULL(GeneratedClass);
}

void UBlueprint::AfterRead()
{
	UBlueprintCore::AfterRead();

	READ_PTR_FULL(ParentClass, UClass);
	READ_PTR_FULL(SimpleConstructionScript, USimpleConstructionScript);
	READ_PTR_FULL(InheritableComponentHandler, UInheritableComponentHandler);
}

void UBlueprint::BeforeDelete()
{
	UBlueprintCore::BeforeDelete();

	DELE_PTR_FULL(ParentClass);
	DELE_PTR_FULL(SimpleConstructionScript);
	DELE_PTR_FULL(InheritableComponentHandler);
}

void UModel::AfterRead()
{
	UObject::AfterRead();

}

void UModel::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UChannel::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Connection, UNetConnection);
}

void UChannel::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Connection);
}

void UActorChannel::AfterRead()
{
	UChannel::AfterRead();

	READ_PTR_FULL(Actor, AActor);
}

void UActorChannel::BeforeDelete()
{
	UChannel::BeforeDelete();

	DELE_PTR_FULL(Actor);
}

void UAnimationAsset::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Skeleton, USkeleton);
}

void UAnimationAsset::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Skeleton);
}

void UBlendSpaceBase::AfterRead()
{
	UAnimationAsset::AfterRead();

}

void UBlendSpaceBase::BeforeDelete()
{
	UAnimationAsset::BeforeDelete();

}

void UBlendSpace::AfterRead()
{
	UBlendSpaceBase::AfterRead();

}

void UBlendSpace::BeforeDelete()
{
	UBlendSpaceBase::BeforeDelete();

}

void UAimOffsetBlendSpace::AfterRead()
{
	UBlendSpace::AfterRead();

}

void UAimOffsetBlendSpace::BeforeDelete()
{
	UBlendSpace::BeforeDelete();

}

void UBlendSpace1D::AfterRead()
{
	UBlendSpaceBase::AfterRead();

}

void UBlendSpace1D::BeforeDelete()
{
	UBlendSpaceBase::BeforeDelete();

}

void UAimOffsetBlendSpace1D::AfterRead()
{
	UBlendSpace1D::AfterRead();

}

void UAimOffsetBlendSpace1D::BeforeDelete()
{
	UBlendSpace1D::BeforeDelete();

}

void UAISystemBase::AfterRead()
{
	UObject::AfterRead();

}

void UAISystemBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AmbientSound.Stop
// ()
void AAmbientSound::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Stop"));

	AAmbientSound_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AmbientSound.Play
// ()
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAmbientSound::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Play"));

	AAmbientSound_Play_Params params;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AmbientSound.FadeOut
// ()
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeOut"));

	AAmbientSound_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AmbientSound.FadeIn
// ()
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeIn"));

	AAmbientSound_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AmbientSound.AdjustVolume
// ()
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.AdjustVolume"));

	AAmbientSound_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AAmbientSound::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(AudioComponent, UAudioComponent);
}

void AAmbientSound::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(AudioComponent);
}

void UAnimationSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UAnimationSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UAnimBlueprint::AfterRead()
{
	UBlueprint::AfterRead();

	READ_PTR_FULL(TargetSkeleton, USkeleton);
}

void UAnimBlueprint::BeforeDelete()
{
	UBlueprint::BeforeDelete();

	DELE_PTR_FULL(TargetSkeleton);
}

void UAnimBlueprintGeneratedClass::AfterRead()
{
	UBlueprintGeneratedClass::AfterRead();

	READ_PTR_FULL(TargetSkeleton, USkeleton);
}

void UAnimBlueprintGeneratedClass::BeforeDelete()
{
	UBlueprintGeneratedClass::BeforeDelete();

	DELE_PTR_FULL(TargetSkeleton);
}

void UAnimBoneCompressionCodec::AfterRead()
{
	UObject::AfterRead();

}

void UAnimBoneCompressionCodec::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAnimBoneCompressionSettings::AfterRead()
{
	UObject::AfterRead();

}

void UAnimBoneCompressionSettings::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAnimClassData::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(TargetSkeleton, USkeleton);
}

void UAnimClassData::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(TargetSkeleton);
}

void UAnimClassInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UAnimClassInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

// Function Engine.AnimSequenceBase.GetPlayLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimSequenceBase::GetPlayLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSequenceBase.GetPlayLength"));

	UAnimSequenceBase_GetPlayLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimSequenceBase::AfterRead()
{
	UAnimationAsset::AfterRead();

}

void UAnimSequenceBase::BeforeDelete()
{
	UAnimationAsset::BeforeDelete();

}

void UAnimCompositeBase::AfterRead()
{
	UAnimSequenceBase::AfterRead();

}

void UAnimCompositeBase::BeforeDelete()
{
	UAnimSequenceBase::BeforeDelete();

}

void UAnimComposite::AfterRead()
{
	UAnimCompositeBase::AfterRead();

}

void UAnimComposite::BeforeDelete()
{
	UAnimCompositeBase::BeforeDelete();

}

void UAnimCompress::AfterRead()
{
	UAnimBoneCompressionCodec::AfterRead();

}

void UAnimCompress::BeforeDelete()
{
	UAnimBoneCompressionCodec::BeforeDelete();

}

void UAnimCompress_BitwiseCompressOnly::AfterRead()
{
	UAnimCompress::AfterRead();

}

void UAnimCompress_BitwiseCompressOnly::BeforeDelete()
{
	UAnimCompress::BeforeDelete();

}

void UAnimCompress_LeastDestructive::AfterRead()
{
	UAnimCompress_BitwiseCompressOnly::AfterRead();

}

void UAnimCompress_LeastDestructive::BeforeDelete()
{
	UAnimCompress_BitwiseCompressOnly::BeforeDelete();

}

void UAnimCompress_RemoveLinearKeys::AfterRead()
{
	UAnimCompress::AfterRead();

}

void UAnimCompress_RemoveLinearKeys::BeforeDelete()
{
	UAnimCompress::BeforeDelete();

}

void UAnimCompress_PerTrackCompression::AfterRead()
{
	UAnimCompress_RemoveLinearKeys::AfterRead();

}

void UAnimCompress_PerTrackCompression::BeforeDelete()
{
	UAnimCompress_RemoveLinearKeys::BeforeDelete();

}

void UAnimCompress_RemoveEverySecondKey::AfterRead()
{
	UAnimCompress::AfterRead();

}

void UAnimCompress_RemoveEverySecondKey::BeforeDelete()
{
	UAnimCompress::BeforeDelete();

}

void UAnimCompress_RemoveTrivialKeys::AfterRead()
{
	UAnimCompress::AfterRead();

}

void UAnimCompress_RemoveTrivialKeys::BeforeDelete()
{
	UAnimCompress::BeforeDelete();

}

void UAnimCurveCompressionCodec::AfterRead()
{
	UObject::AfterRead();

}

void UAnimCurveCompressionCodec::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAnimCurveCompressionCodec_CompressedRichCurve::AfterRead()
{
	UAnimCurveCompressionCodec::AfterRead();

}

void UAnimCurveCompressionCodec_CompressedRichCurve::BeforeDelete()
{
	UAnimCurveCompressionCodec::BeforeDelete();

}

void UAnimCurveCompressionCodec_UniformIndexable::AfterRead()
{
	UAnimCurveCompressionCodec::AfterRead();

}

void UAnimCurveCompressionCodec_UniformIndexable::BeforeDelete()
{
	UAnimCurveCompressionCodec::BeforeDelete();

}

void UAnimCurveCompressionCodec_UniformlySampled::AfterRead()
{
	UAnimCurveCompressionCodec::AfterRead();

}

void UAnimCurveCompressionCodec_UniformlySampled::BeforeDelete()
{
	UAnimCurveCompressionCodec::BeforeDelete();

}

void UAnimCurveCompressionSettings::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Codec, UAnimCurveCompressionCodec);
}

void UAnimCurveCompressionSettings::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Codec);
}

void UAnimLayerInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UAnimLayerInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UAnimMetaData::AfterRead()
{
	UObject::AfterRead();

}

void UAnimMetaData::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AnimMontage.GetDefaultBlendOutTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimMontage::GetDefaultBlendOutTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimMontage.GetDefaultBlendOutTime"));

	UAnimMontage_GetDefaultBlendOutTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimMontage::AfterRead()
{
	UAnimCompositeBase::AfterRead();

}

void UAnimMontage::BeforeDelete()
{
	UAnimCompositeBase::BeforeDelete();

}

void UAnimNotify_PauseClothingSimulation::AfterRead()
{
	UAnimNotify::AfterRead();

}

void UAnimNotify_PauseClothingSimulation::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

}

void UAnimNotify_PlayParticleEffect::AfterRead()
{
	UAnimNotify::AfterRead();

	READ_PTR_FULL(PSTemplate, UParticleSystem);
}

void UAnimNotify_PlayParticleEffect::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

	DELE_PTR_FULL(PSTemplate);
}

void UAnimNotify_PlaySound::AfterRead()
{
	UAnimNotify::AfterRead();

	READ_PTR_FULL(Sound, USoundBase);
}

void UAnimNotify_PlaySound::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

	DELE_PTR_FULL(Sound);
}

void UAnimNotify_ResetClothingSimulation::AfterRead()
{
	UAnimNotify::AfterRead();

}

void UAnimNotify_ResetClothingSimulation::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

}

void UAnimNotify_ResetDynamics::AfterRead()
{
	UAnimNotify::AfterRead();

}

void UAnimNotify_ResetDynamics::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

}

void UAnimNotify_ResumeClothingSimulation::AfterRead()
{
	UAnimNotify::AfterRead();

}

void UAnimNotify_ResumeClothingSimulation::BeforeDelete()
{
	UAnimNotify::BeforeDelete();

}

void UAnimNotifyState_DisableRootMotion::AfterRead()
{
	UAnimNotifyState::AfterRead();

}

void UAnimNotifyState_DisableRootMotion::BeforeDelete()
{
	UAnimNotifyState::BeforeDelete();

}

void UAnimNotifyState_TimedParticleEffect::AfterRead()
{
	UAnimNotifyState::AfterRead();

	READ_PTR_FULL(PSTemplate, UParticleSystem);
}

void UAnimNotifyState_TimedParticleEffect::BeforeDelete()
{
	UAnimNotifyState::BeforeDelete();

	DELE_PTR_FULL(PSTemplate);
}

// Function Engine.AnimNotifyState_Trail.OverridePSTemplate
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UParticleSystem* UAnimNotifyState_Trail::OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState_Trail.OverridePSTemplate"));

	UAnimNotifyState_Trail_OverridePSTemplate_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimNotifyState_Trail::AfterRead()
{
	UAnimNotifyState::AfterRead();

	READ_PTR_FULL(PSTemplate, UParticleSystem);
}

void UAnimNotifyState_Trail::BeforeDelete()
{
	UAnimNotifyState::BeforeDelete();

	DELE_PTR_FULL(PSTemplate);
}

void UAnimSequence::AfterRead()
{
	UAnimSequenceBase::AfterRead();

	READ_PTR_FULL(BoneCompressionSettings, UAnimBoneCompressionSettings);
	READ_PTR_FULL(CurveCompressionSettings, UAnimCurveCompressionSettings);
	READ_PTR_FULL(RefPoseSeq, UAnimSequence);
}

void UAnimSequence::BeforeDelete()
{
	UAnimSequenceBase::BeforeDelete();

	DELE_PTR_FULL(BoneCompressionSettings);
	DELE_PTR_FULL(CurveCompressionSettings);
	DELE_PTR_FULL(RefPoseSeq);
}

void UAnimSet::AfterRead()
{
	UObject::AfterRead();

}

void UAnimSet::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AnimSingleNodeInstance.StopAnim
// ()
void UAnimSingleNodeInstance::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.StopAnim"));

	UAnimSingleNodeInstance_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetReverse
// ()
// Parameters:
// bool                           bInReverse                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetReverse(bool bInReverse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetReverse"));

	UAnimSingleNodeInstance_SetReverse_Params params;
	params.bInReverse = bInReverse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
// ()
// Parameters:
// struct FName                   PoseName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRemoveIfZero                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride"));

	UAnimSingleNodeInstance_SetPreviewCurveOverride_Params params;
	params.PoseName = PoseName;
	params.Value = Value;
	params.bRemoveIfZero = bRemoveIfZero;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
// ()
// Parameters:
// float                          InPosition                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPreviousTime                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime"));

	UAnimSingleNodeInstance_SetPositionWithPreviousTime_Params params;
	params.InPosition = InPosition;
	params.InPreviousTime = InPreviousTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetPosition
// ()
// Parameters:
// float                          InPosition                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPosition"));

	UAnimSingleNodeInstance_SetPosition_Params params;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetPlayRate
// ()
// Parameters:
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlayRate"));

	UAnimSingleNodeInstance_SetPlayRate_Params params;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetPlaying
// ()
// Parameters:
// bool                           bIsPlaying                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlaying"));

	UAnimSingleNodeInstance_SetPlaying_Params params;
	params.bIsPlaying = bIsPlaying;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetLooping
// ()
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetLooping(bool bIsLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetLooping"));

	UAnimSingleNodeInstance_SetLooping_Params params;
	params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
// ()
// Parameters:
// struct FVector                 InBlendInput                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetBlendSpaceInput(const struct FVector& InBlendInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput"));

	UAnimSingleNodeInstance_SetBlendSpaceInput_Params params;
	params.InBlendInput = InBlendInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
// ()
// Parameters:
// class UAnimationAsset*         NewAsset                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetAnimationAsset"));

	UAnimSingleNodeInstance_SetAnimationAsset_Params params;
	params.NewAsset = NewAsset;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.PlayAnim
// ()
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InStartPosition                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.PlayAnim"));

	UAnimSingleNodeInstance_PlayAnim_Params params;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;
	params.InStartPosition = InStartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AnimSingleNodeInstance.GetLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UAnimSingleNodeInstance::GetLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.GetLength"));

	UAnimSingleNodeInstance_GetLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AnimSingleNodeInstance.GetAnimationAsset
// ()
// Parameters:
// class UAnimationAsset*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAnimationAsset* UAnimSingleNodeInstance::GetAnimationAsset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.GetAnimationAsset"));

	UAnimSingleNodeInstance_GetAnimationAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAnimSingleNodeInstance::AfterRead()
{
	UAnimInstance::AfterRead();

	READ_PTR_FULL(CurrentAsset, UAnimationAsset);
}

void UAnimSingleNodeInstance::BeforeDelete()
{
	UAnimInstance::BeforeDelete();

	DELE_PTR_FULL(CurrentAsset);
}

void UAnimStateMachineTypes::AfterRead()
{
	UObject::AfterRead();

}

void UAnimStateMachineTypes::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAnimStreamable::AfterRead()
{
	UAnimSequenceBase::AfterRead();

	READ_PTR_FULL(BoneCompressionSettings, UAnimBoneCompressionSettings);
	READ_PTR_FULL(CurveCompressionSettings, UAnimCurveCompressionSettings);
}

void UAnimStreamable::BeforeDelete()
{
	UAnimSequenceBase::BeforeDelete();

	DELE_PTR_FULL(BoneCompressionSettings);
	DELE_PTR_FULL(CurveCompressionSettings);
}

// Function Engine.ArrowComponent.SetArrowColor
// ()
// Parameters:
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UArrowComponent::SetArrowColor(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ArrowComponent.SetArrowColor"));

	UArrowComponent_SetArrowColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UArrowComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void UArrowComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

void UAssetExportTask::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Object, UObject);
	READ_PTR_FULL(Exporter, UExporter);
	READ_PTR_FULL(Options, UObject);
}

void UAssetExportTask::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Object);
	DELE_PTR_FULL(Exporter);
	DELE_PTR_FULL(Options);
}

void UAssetManagerSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UAssetManagerSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UAssetMappingTable::AfterRead()
{
	UObject::AfterRead();

}

void UAssetMappingTable::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USaveGame*               SaveGameObject                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionHandleSaveGame* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionHandleSaveGame* UAsyncActionHandleSaveGame::AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot"));

	UAsyncActionHandleSaveGame_AsyncSaveGameToSlot_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionHandleSaveGame* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionHandleSaveGame* UAsyncActionHandleSaveGame::AsyncLoadGameFromSlot(class UObject* WorldContextObject, const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot"));

	UAsyncActionHandleSaveGame_AsyncLoadGameFromSlot_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionHandleSaveGame::AfterRead()
{
	UBlueprintAsyncActionBase::AfterRead();

	READ_PTR_FULL(SaveGameObject, USaveGame);
}

void UAsyncActionHandleSaveGame::BeforeDelete()
{
	UBlueprintAsyncActionBase::BeforeDelete();

	DELE_PTR_FULL(SaveGameObject);
}

void UAsyncActionLoadPrimaryAssetBase::AfterRead()
{
	UBlueprintAsyncActionBase::AfterRead();

}

void UAsyncActionLoadPrimaryAssetBase::BeforeDelete()
{
	UBlueprintAsyncActionBase::BeforeDelete();

}

// Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         PrimaryAsset                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           LoadBundles                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionLoadPrimaryAsset* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionLoadPrimaryAsset* UAsyncActionLoadPrimaryAsset::AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset"));

	UAsyncActionLoadPrimaryAsset_AsyncLoadPrimaryAsset_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PrimaryAsset = PrimaryAsset;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionLoadPrimaryAsset::AfterRead()
{
	UAsyncActionLoadPrimaryAssetBase::AfterRead();

}

void UAsyncActionLoadPrimaryAsset::BeforeDelete()
{
	UAsyncActionLoadPrimaryAssetBase::BeforeDelete();

}

// Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         PrimaryAsset                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           LoadBundles                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionLoadPrimaryAssetClass* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionLoadPrimaryAssetClass* UAsyncActionLoadPrimaryAssetClass::AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass"));

	UAsyncActionLoadPrimaryAssetClass_AsyncLoadPrimaryAssetClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PrimaryAsset = PrimaryAsset;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionLoadPrimaryAssetClass::AfterRead()
{
	UAsyncActionLoadPrimaryAssetBase::AfterRead();

}

void UAsyncActionLoadPrimaryAssetClass::BeforeDelete()
{
	UAsyncActionLoadPrimaryAssetBase::BeforeDelete();

}

// Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId> PrimaryAssetList               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           LoadBundles                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionLoadPrimaryAssetList* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionLoadPrimaryAssetList* UAsyncActionLoadPrimaryAssetList::AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList"));

	UAsyncActionLoadPrimaryAssetList_AsyncLoadPrimaryAssetList_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionLoadPrimaryAssetList::AfterRead()
{
	UAsyncActionLoadPrimaryAssetBase::AfterRead();

}

void UAsyncActionLoadPrimaryAssetList::BeforeDelete()
{
	UAsyncActionLoadPrimaryAssetBase::BeforeDelete();

}

// Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId> PrimaryAssetList               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           LoadBundles                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionLoadPrimaryAssetClassList* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionLoadPrimaryAssetClassList* UAsyncActionLoadPrimaryAssetClassList::AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList"));

	UAsyncActionLoadPrimaryAssetClassList_AsyncLoadPrimaryAssetClassList_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionLoadPrimaryAssetClassList::AfterRead()
{
	UAsyncActionLoadPrimaryAssetBase::AfterRead();

}

void UAsyncActionLoadPrimaryAssetClassList::BeforeDelete()
{
	UAsyncActionLoadPrimaryAssetBase::BeforeDelete();

}

// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId> PrimaryAssetList               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           AddBundles                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           RemoveBundles                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionChangePrimaryAssetBundles* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionChangePrimaryAssetBundles* UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList"));

	UAsyncActionChangePrimaryAssetBundles_AsyncChangeBundleStateForPrimaryAssetList_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.AddBundles = AddBundles;
	params.RemoveBundles = RemoveBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           NewBundles                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           OldBundles                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncActionChangePrimaryAssetBundles* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAsyncActionChangePrimaryAssetBundles* UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets"));

	UAsyncActionChangePrimaryAssetBundles_AsyncChangeBundleStateForMatchingPrimaryAssets_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NewBundles = NewBundles;
	params.OldBundles = OldBundles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAsyncActionChangePrimaryAssetBundles::AfterRead()
{
	UAsyncActionLoadPrimaryAssetBase::AfterRead();

}

void UAsyncActionChangePrimaryAssetBundles::BeforeDelete()
{
	UAsyncActionLoadPrimaryAssetBase::BeforeDelete();

}

void AAtmosphericFog::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(AtmosphericFogComponent, UAtmosphericFogComponent);
}

void AAtmosphericFog::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(AtmosphericFogComponent);
}

// Function Engine.AtmosphericFogComponent.StartPrecompute
// ()
void UAtmosphericFogComponent::StartPrecompute()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.StartPrecompute"));

	UAtmosphericFogComponent_StartPrecompute_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetSunMultiplier
// ()
// Parameters:
// float                          NewSunMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetSunMultiplier"));

	UAtmosphericFogComponent_SetSunMultiplier_Params params;
	params.NewSunMultiplier = NewSunMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetStartDistance
// ()
// Parameters:
// float                          NewStartDistance               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetStartDistance"));

	UAtmosphericFogComponent_SetStartDistance_Params params;
	params.NewStartDistance = NewStartDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
// ()
// Parameters:
// float                          DensityHeight                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaxScatteringOrder             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            InscatterAltitudeSampleNum     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetPrecomputeParams"));

	UAtmosphericFogComponent_SetPrecomputeParams_Params params;
	params.DensityHeight = DensityHeight;
	params.MaxScatteringOrder = MaxScatteringOrder;
	params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetFogMultiplier
// ()
// Parameters:
// float                          NewFogMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetFogMultiplier"));

	UAtmosphericFogComponent_SetFogMultiplier_Params params;
	params.NewFogMultiplier = NewFogMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDistanceScale
// ()
// Parameters:
// float                          NewDistanceScale               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceScale"));

	UAtmosphericFogComponent_SetDistanceScale_Params params;
	params.NewDistanceScale = NewDistanceScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDistanceOffset
// ()
// Parameters:
// float                          NewDistanceOffset              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceOffset"));

	UAtmosphericFogComponent_SetDistanceOffset_Params params;
	params.NewDistanceOffset = NewDistanceOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDensityOffset
// ()
// Parameters:
// float                          NewDensityOffset               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityOffset"));

	UAtmosphericFogComponent_SetDensityOffset_Params params;
	params.NewDensityOffset = NewDensityOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
// ()
// Parameters:
// float                          NewDensityMultiplier           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityMultiplier"));

	UAtmosphericFogComponent_SetDensityMultiplier_Params params;
	params.NewDensityMultiplier = NewDensityMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDefaultLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultLightColor"));

	UAtmosphericFogComponent_SetDefaultLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
// ()
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultBrightness"));

	UAtmosphericFogComponent_SetDefaultBrightness_Params params;
	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.SetAltitudeScale
// ()
// Parameters:
// float                          NewAltitudeScale               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetAltitudeScale"));

	UAtmosphericFogComponent_SetAltitudeScale_Params params;
	params.NewAltitudeScale = NewAltitudeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.DisableSunDisk
// ()
// Parameters:
// bool                           NewSunDisk                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableSunDisk"));

	UAtmosphericFogComponent_DisableSunDisk_Params params;
	params.NewSunDisk = NewSunDisk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AtmosphericFogComponent.DisableGroundScattering
// ()
// Parameters:
// bool                           NewGroundScattering            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableGroundScattering"));

	UAtmosphericFogComponent_DisableGroundScattering_Params params;
	params.NewGroundScattering = NewGroundScattering;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UAtmosphericFogComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(TransmittanceTexture, UTexture2D);
	READ_PTR_FULL(IrradianceTexture, UTexture2D);
}

void UAtmosphericFogComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(TransmittanceTexture);
	DELE_PTR_FULL(IrradianceTexture);
}

void UAudioBus::AfterRead()
{
	UObject::AfterRead();

}

void UAudioBus::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UAudioSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UAudioSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

// Function Engine.AudioVolume.SetSubmixSendSettings
// ()
// Parameters:
// TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void AAudioVolume::SetSubmixSendSettings(TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetSubmixSendSettings"));

	AAudioVolume_SetSubmixSendSettings_Params params;
	params.NewSubmixSendSettings = NewSubmixSendSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.SetSubmixOverrideSettings
// ()
// Parameters:
// TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void AAudioVolume::SetSubmixOverrideSettings(TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetSubmixOverrideSettings"));

	AAudioVolume_SetSubmixOverrideSettings_Params params;
	params.NewSubmixOverrideSettings = NewSubmixOverrideSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.SetReverbSettings
// ()
// Parameters:
// struct FReverbSettings         NewReverbSettings              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void AAudioVolume::SetReverbSettings(const struct FReverbSettings& NewReverbSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetReverbSettings"));

	AAudioVolume_SetReverbSettings_Params params;
	params.NewReverbSettings = NewReverbSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.SetPriority
// ()
// Parameters:
// float                          NewPriority                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAudioVolume::SetPriority(float NewPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetPriority"));

	AAudioVolume_SetPriority_Params params;
	params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.SetInteriorSettings
// ()
// Parameters:
// struct FInteriorSettings       NewInteriorSettings            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void AAudioVolume::SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetInteriorSettings"));

	AAudioVolume_SetInteriorSettings_Params params;
	params.NewInteriorSettings = NewInteriorSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.SetEnabled
// ()
// Parameters:
// bool                           bNewEnabled                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AAudioVolume::SetEnabled(bool bNewEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.SetEnabled"));

	AAudioVolume_SetEnabled_Params params;
	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.AudioVolume.OnRep_bEnabled
// ()
void AAudioVolume::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioVolume.OnRep_bEnabled"));

	AAudioVolume_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AAudioVolume::AfterRead()
{
	AVolume::AfterRead();

}

void AAudioVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void UWorldSubsystem::AfterRead()
{
	USubsystem::AfterRead();

}

void UWorldSubsystem::BeforeDelete()
{
	USubsystem::BeforeDelete();

}

// Function Engine.AutoDestroySubsystem.OnActorEndPlay
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEndPlayReason> EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UAutoDestroySubsystem::OnActorEndPlay(class AActor* Actor, TEnumAsByte<Engine_EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AutoDestroySubsystem.OnActorEndPlay"));

	UAutoDestroySubsystem_OnActorEndPlay_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UAutoDestroySubsystem::AfterRead()
{
	UWorldSubsystem::AfterRead();

}

void UAutoDestroySubsystem::BeforeDelete()
{
	UWorldSubsystem::BeforeDelete();

}

void UAutomationTestSettings::AfterRead()
{
	UObject::AfterRead();

}

void UAutomationTestSettings::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.AvoidanceManager.RegisterMovementComponent
// ()
// Parameters:
// class UMovementComponent*      MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AvoidanceWeight                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UAvoidanceManager::RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.RegisterMovementComponent"));

	UAvoidanceManager_RegisterMovementComponent_Params params;
	params.MovementComp = MovementComp;
	params.AvoidanceWeight = AvoidanceWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetObjectCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UAvoidanceManager::GetObjectCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetObjectCount"));

	UAvoidanceManager_GetObjectCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetNewAvoidanceUID
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UAvoidanceManager::GetNewAvoidanceUID()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetNewAvoidanceUID"));

	UAvoidanceManager_GetNewAvoidanceUID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
// ()
// Parameters:
// class UMovementComponent*      MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent"));

	UAvoidanceManager_GetAvoidanceVelocityForComponent_Params params;
	params.MovementComp = MovementComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UAvoidanceManager::AfterRead()
{
	UObject::AfterRead();

}

void UAvoidanceManager::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ABandwidthTestActor::AfterRead()
{
	AActor::AfterRead();

}

void ABandwidthTestActor::BeforeDelete()
{
	AActor::BeforeDelete();

}

// Function Engine.BillboardComponent.SetUV
// ()
// Parameters:
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetUV"));

	UBillboardComponent_SetUV_Params params;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BillboardComponent.SetSpriteAndUV
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBillboardComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSpriteAndUV"));

	UBillboardComponent_SetSpriteAndUV_Params params;
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BillboardComponent.SetSprite
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBillboardComponent::SetSprite(class UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSprite"));

	UBillboardComponent_SetSprite_Params params;
	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UBillboardComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(Sprite, UTexture2D);
}

void UBillboardComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(Sprite);
}

void UBlendableInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UBlendableInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void USkeleton::AfterRead()
{
	UObject::AfterRead();

}

void USkeleton::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UBlendProfile::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(OwningSkeleton, USkeleton);
}

void UBlendProfile::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(OwningSkeleton);
}

void ABlockingVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ABlockingVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void UBlueprintExtension::AfterRead()
{
	UObject::AfterRead();

}

void UBlueprintExtension::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.BlueprintMapLibrary.SetMapPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<int, int>                 Value                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UBlueprintMapLibrary::SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.SetMapPropertyByName"));

	UBlueprintMapLibrary_SetMapPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintMapLibrary.Map_Values
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int>                    Values                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UBlueprintMapLibrary::Map_Values(TMap<int, int> TargetMap, TArray<int>* Values)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Values"));

	UBlueprintMapLibrary_Map_Values_Params params;
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

}


// Function Engine.BlueprintMapLibrary.Map_Remove
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintMapLibrary::Map_Remove(TMap<int, int> TargetMap, int Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Remove"));

	UBlueprintMapLibrary_Map_Remove_Params params;
	params.TargetMap = TargetMap;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintMapLibrary.Map_Length
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UBlueprintMapLibrary::Map_Length(TMap<int, int> TargetMap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Length"));

	UBlueprintMapLibrary_Map_Length_Params params;
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintMapLibrary.Map_Keys
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int>                    Keys                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UBlueprintMapLibrary::Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Keys"));

	UBlueprintMapLibrary_Map_Keys_Params params;
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Keys != nullptr)
		*Keys = params.Keys;

}


// Function Engine.BlueprintMapLibrary.Map_Find
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Value                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintMapLibrary::Map_Find(TMap<int, int> TargetMap, int Key, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Find"));

	UBlueprintMapLibrary_Map_Find_Params params;
	params.TargetMap = TargetMap;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function Engine.BlueprintMapLibrary.Map_Contains
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintMapLibrary::Map_Contains(TMap<int, int> TargetMap, int Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Contains"));

	UBlueprintMapLibrary_Map_Contains_Params params;
	params.TargetMap = TargetMap;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintMapLibrary.Map_Clear
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UBlueprintMapLibrary::Map_Clear(TMap<int, int> TargetMap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Clear"));

	UBlueprintMapLibrary_Map_Clear_Params params;
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintMapLibrary.Map_Add
// ()
// Parameters:
// TMap<int, int>                 TargetMap                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintMapLibrary::Map_Add(TMap<int, int> TargetMap, int Key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintMapLibrary.Map_Add"));

	UBlueprintMapLibrary_Map_Add_Params params;
	params.TargetMap = TargetMap;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UBlueprintMapLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UBlueprintMapLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.BlueprintPathsLibrary.VideoCaptureDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::VideoCaptureDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.VideoCaptureDir"));

	UBlueprintPathsLibrary_VideoCaptureDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ValidatePath
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDidSucceed                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   OutReason                      (Parm, OutParm, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::ValidatePath(const struct FString& InPath, bool* bDidSucceed, struct FText* OutReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ValidatePath"));

	UBlueprintPathsLibrary_ValidatePath_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bDidSucceed != nullptr)
		*bDidSucceed = params.bDidSucceed;
	if (OutReason != nullptr)
		*OutReason = params.OutReason;

}


// Function Engine.BlueprintPathsLibrary.Split
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 PathPart                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FilenamePart                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ExtensionPart                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::Split(const struct FString& InPath, struct FString* PathPart, struct FString* FilenamePart, struct FString* ExtensionPart)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.Split"));

	UBlueprintPathsLibrary_Split_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PathPart != nullptr)
		*PathPart = params.PathPart;
	if (FilenamePart != nullptr)
		*FilenamePart = params.FilenamePart;
	if (ExtensionPart != nullptr)
		*ExtensionPart = params.ExtensionPart;

}


// Function Engine.BlueprintPathsLibrary.SourceConfigDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::SourceConfigDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.SourceConfigDir"));

	UBlueprintPathsLibrary_SourceConfigDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::ShouldSaveToUserDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir"));

	UBlueprintPathsLibrary_ShouldSaveToUserDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ShaderWorkingDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ShaderWorkingDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ShaderWorkingDir"));

	UBlueprintPathsLibrary_ShaderWorkingDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.SetProjectFilePath
// ()
// Parameters:
// struct FString                 NewGameProjectFilePath         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::SetProjectFilePath(const struct FString& NewGameProjectFilePath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.SetProjectFilePath"));

	UBlueprintPathsLibrary_SetProjectFilePath_Params params;
	params.NewGameProjectFilePath = NewGameProjectFilePath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintPathsLibrary.SetExtension
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InNewExtension                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::SetExtension(const struct FString& InPath, const struct FString& InNewExtension)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.SetExtension"));

	UBlueprintPathsLibrary_SetExtension_Params params;
	params.InPath = InPath;
	params.InNewExtension = InNewExtension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ScreenShotDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ScreenShotDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ScreenShotDir"));

	UBlueprintPathsLibrary_ScreenShotDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.SandboxesDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::SandboxesDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.SandboxesDir"));

	UBlueprintPathsLibrary_SandboxesDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.RootDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::RootDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.RootDir"));

	UBlueprintPathsLibrary_RootDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::RemoveDuplicateSlashes(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes"));

	UBlueprintPathsLibrary_RemoveDuplicateSlashes_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;

}


// Function Engine.BlueprintPathsLibrary.ProjectUserDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectUserDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectUserDir"));

	UBlueprintPathsLibrary_ProjectUserDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectSavedDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectSavedDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectSavedDir"));

	UBlueprintPathsLibrary_ProjectSavedDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectPluginsDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectPluginsDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectPluginsDir"));

	UBlueprintPathsLibrary_ProjectPluginsDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectPersistentDownloadDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir"));

	UBlueprintPathsLibrary_ProjectPersistentDownloadDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectModsDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectModsDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectModsDir"));

	UBlueprintPathsLibrary_ProjectModsDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectLogDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectLogDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectLogDir"));

	UBlueprintPathsLibrary_ProjectLogDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectIntermediateDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir"));

	UBlueprintPathsLibrary_ProjectIntermediateDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectDir"));

	UBlueprintPathsLibrary_ProjectDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectContentDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectContentDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectContentDir"));

	UBlueprintPathsLibrary_ProjectContentDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProjectConfigDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProjectConfigDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProjectConfigDir"));

	UBlueprintPathsLibrary_ProjectConfigDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ProfilingDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ProfilingDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ProfilingDir"));

	UBlueprintPathsLibrary_ProfilingDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.NormalizeFilename
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::NormalizeFilename(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.NormalizeFilename"));

	UBlueprintPathsLibrary_NormalizeFilename_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;

}


// Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::NormalizeDirectoryName(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName"));

	UBlueprintPathsLibrary_NormalizeDirectoryName_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;

}


// Function Engine.BlueprintPathsLibrary.MakeValidFileName
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InReplacementChar              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::MakeValidFileName(const struct FString& inString, const struct FString& InReplacementChar)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.MakeValidFileName"));

	UBlueprintPathsLibrary_MakeValidFileName_Params params;
	params.inString = inString;
	params.InReplacementChar = InReplacementChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.MakeStandardFilename
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::MakeStandardFilename(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.MakeStandardFilename"));

	UBlueprintPathsLibrary_MakeStandardFilename_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;

}


// Function Engine.BlueprintPathsLibrary.MakePlatformFilename
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPathsLibrary::MakePlatformFilename(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.MakePlatformFilename"));

	UBlueprintPathsLibrary_MakePlatformFilename_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;

}


// Function Engine.BlueprintPathsLibrary.MakePathRelativeTo
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InRelativeTo                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::MakePathRelativeTo(const struct FString& InPath, const struct FString& InRelativeTo, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.MakePathRelativeTo"));

	UBlueprintPathsLibrary_MakePathRelativeTo_Params params;
	params.InPath = InPath;
	params.InRelativeTo = InRelativeTo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.LaunchDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::LaunchDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.LaunchDir"));

	UBlueprintPathsLibrary_LaunchDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.IsSamePath
// ()
// Parameters:
// struct FString                 PathA                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 PathB                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::IsSamePath(const struct FString& PathA, const struct FString& PathB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.IsSamePath"));

	UBlueprintPathsLibrary_IsSamePath_Params params;
	params.PathA = PathA;
	params.PathB = PathB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.IsRestrictedPath
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::IsRestrictedPath(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.IsRestrictedPath"));

	UBlueprintPathsLibrary_IsRestrictedPath_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.IsRelative
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::IsRelative(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.IsRelative"));

	UBlueprintPathsLibrary_IsRelative_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::IsProjectFilePathSet()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet"));

	UBlueprintPathsLibrary_IsProjectFilePathSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.IsDrive
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::IsDrive(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.IsDrive"));

	UBlueprintPathsLibrary_IsDrive_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::HasProjectPersistentDownloadDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir"));

	UBlueprintPathsLibrary_HasProjectPersistentDownloadDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetToolTipLocalizationPaths()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths"));

	UBlueprintPathsLibrary_GetToolTipLocalizationPaths_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetRestrictedFolderNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames"));

	UBlueprintPathsLibrary_GetRestrictedFolderNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetRelativePathToRoot()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot"));

	UBlueprintPathsLibrary_GetRelativePathToRoot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetPropertyNameLocalizationPaths()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths"));

	UBlueprintPathsLibrary_GetPropertyNameLocalizationPaths_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetProjectFilePath
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetProjectFilePath()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetProjectFilePath"));

	UBlueprintPathsLibrary_GetProjectFilePath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetPath
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetPath(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetPath"));

	UBlueprintPathsLibrary_GetPath_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetInvalidFileSystemChars()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars"));

	UBlueprintPathsLibrary_GetInvalidFileSystemChars_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetGameLocalizationPaths()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths"));

	UBlueprintPathsLibrary_GetGameLocalizationPaths_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetExtension
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeDot                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetExtension(const struct FString& InPath, bool bIncludeDot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetExtension"));

	UBlueprintPathsLibrary_GetExtension_Params params;
	params.InPath = InPath;
	params.bIncludeDot = bIncludeDot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetEngineLocalizationPaths()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths"));

	UBlueprintPathsLibrary_GetEngineLocalizationPaths_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
TArray<struct FString> UBlueprintPathsLibrary::GetEditorLocalizationPaths()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths"));

	UBlueprintPathsLibrary_GetEditorLocalizationPaths_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetCleanFilename
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetCleanFilename(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetCleanFilename"));

	UBlueprintPathsLibrary_GetCleanFilename_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GetBaseFilename
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRemovePath                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GetBaseFilename(const struct FString& InPath, bool bRemovePath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GetBaseFilename"));

	UBlueprintPathsLibrary_GetBaseFilename_Params params;
	params.InPath = InPath;
	params.bRemovePath = bRemovePath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GeneratedConfigDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GeneratedConfigDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GeneratedConfigDir"));

	UBlueprintPathsLibrary_GeneratedConfigDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GameUserDeveloperDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir"));

	UBlueprintPathsLibrary_GameUserDeveloperDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GameSourceDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GameSourceDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GameSourceDir"));

	UBlueprintPathsLibrary_GameSourceDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GameDevelopersDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GameDevelopersDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GameDevelopersDir"));

	UBlueprintPathsLibrary_GameDevelopersDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::GameAgnosticSavedDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir"));

	UBlueprintPathsLibrary_GameAgnosticSavedDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.FileExists
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::FileExists(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.FileExists"));

	UBlueprintPathsLibrary_FileExists_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.FeaturePackDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::FeaturePackDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.FeaturePackDir"));

	UBlueprintPathsLibrary_FeaturePackDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EnterprisePluginsDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir"));

	UBlueprintPathsLibrary_EnterprisePluginsDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EnterpriseFeaturePackDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir"));

	UBlueprintPathsLibrary_EnterpriseFeaturePackDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EnterpriseDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EnterpriseDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EnterpriseDir"));

	UBlueprintPathsLibrary_EnterpriseDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineVersionAgnosticUserDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir"));

	UBlueprintPathsLibrary_EngineVersionAgnosticUserDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineUserDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineUserDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineUserDir"));

	UBlueprintPathsLibrary_EngineUserDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineSourceDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineSourceDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineSourceDir"));

	UBlueprintPathsLibrary_EngineSourceDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineSavedDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineSavedDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineSavedDir"));

	UBlueprintPathsLibrary_EngineSavedDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EnginePluginsDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EnginePluginsDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EnginePluginsDir"));

	UBlueprintPathsLibrary_EnginePluginsDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineIntermediateDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineIntermediateDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineIntermediateDir"));

	UBlueprintPathsLibrary_EngineIntermediateDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineDir"));

	UBlueprintPathsLibrary_EngineDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineContentDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineContentDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineContentDir"));

	UBlueprintPathsLibrary_EngineContentDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.EngineConfigDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::EngineConfigDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.EngineConfigDir"));

	UBlueprintPathsLibrary_EngineConfigDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.DirectoryExists
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::DirectoryExists(const struct FString& InPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.DirectoryExists"));

	UBlueprintPathsLibrary_DirectoryExists_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.DiffDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::DiffDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.DiffDir"));

	UBlueprintPathsLibrary_DiffDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.CreateTempFilename
// ()
// Parameters:
// struct FString                 Path                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Extension                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::CreateTempFilename(const struct FString& Path, const struct FString& prefix, const struct FString& Extension)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.CreateTempFilename"));

	UBlueprintPathsLibrary_CreateTempFilename_Params params;
	params.Path = Path;
	params.prefix = prefix;
	params.Extension = Extension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InSandboxName                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ConvertToSandboxPath(const struct FString& InPath, const struct FString& InSandboxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath"));

	UBlueprintPathsLibrary_ConvertToSandboxPath_Params params;
	params.InPath = InPath;
	params.InSandboxName = InSandboxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InBasePath                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ConvertRelativePathToFull(const struct FString& InPath, const struct FString& InBasePath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull"));

	UBlueprintPathsLibrary_ConvertRelativePathToFull_Params params;
	params.InPath = InPath;
	params.InBasePath = InBasePath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InSandboxName                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ConvertFromSandboxPath(const struct FString& InPath, const struct FString& InSandboxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath"));

	UBlueprintPathsLibrary_ConvertFromSandboxPath_Params params;
	params.InPath = InPath;
	params.InSandboxName = InSandboxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.Combine
// ()
// Parameters:
// TArray<struct FString>         InPaths                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::Combine(TArray<struct FString> InPaths)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.Combine"));

	UBlueprintPathsLibrary_Combine_Params params;
	params.InPaths = InPaths;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutPath                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintPathsLibrary::CollapseRelativeDirectories(const struct FString& InPath, struct FString* OutPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories"));

	UBlueprintPathsLibrary_CollapseRelativeDirectories_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPath != nullptr)
		*OutPath = params.OutPath;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.CloudDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::CloudDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.CloudDir"));

	UBlueprintPathsLibrary_CloudDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.ChangeExtension
// ()
// Parameters:
// struct FString                 InPath                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InNewExtension                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::ChangeExtension(const struct FString& InPath, const struct FString& InNewExtension)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.ChangeExtension"));

	UBlueprintPathsLibrary_ChangeExtension_Params params;
	params.InPath = InPath;
	params.InNewExtension = InNewExtension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.BugItDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::BugItDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.BugItDir"));

	UBlueprintPathsLibrary_BugItDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.AutomationTransientDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::AutomationTransientDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.AutomationTransientDir"));

	UBlueprintPathsLibrary_AutomationTransientDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.AutomationLogDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::AutomationLogDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.AutomationLogDir"));

	UBlueprintPathsLibrary_AutomationLogDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPathsLibrary.AutomationDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UBlueprintPathsLibrary::AutomationDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPathsLibrary.AutomationDir"));

	UBlueprintPathsLibrary_AutomationDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UBlueprintPathsLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UBlueprintPathsLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UPlatformGameInstance::AfterRead()
{
	UGameInstance::AfterRead();

}

void UPlatformGameInstance::BeforeDelete()
{
	UGameInstance::BeforeDelete();

}

// Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
// ()
// Parameters:
// int                            inSecondsFromNow               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   Title                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   Body                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   Action                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 ActivationEvent                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UBlueprintPlatformLibrary::ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow"));

	UBlueprintPlatformLibrary_ScheduleLocalNotificationFromNow_Params params;
	params.inSecondsFromNow = inSecondsFromNow;
	params.Title = Title;
	params.Body = Body;
	params.Action = Action;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
// ()
// Parameters:
// int                            inSecondsFromNow               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ActivationEvent                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const struct FString& ActivationEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow"));

	UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeFromNow_Params params;
	params.inSecondsFromNow = inSecondsFromNow;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
// ()
// Parameters:
// struct FDateTime               FireDateTime                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           LocalTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ActivationEvent                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FString& ActivationEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime"));

	UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeAtTime_Params params;
	params.FireDateTime = FireDateTime;
	params.LocalTime = LocalTime;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
// ()
// Parameters:
// struct FDateTime               FireDateTime                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           LocalTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   Title                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   Body                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   Action                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 ActivationEvent                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UBlueprintPlatformLibrary::ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime"));

	UBlueprintPlatformLibrary_ScheduleLocalNotificationAtTime_Params params;
	params.FireDateTime = FireDateTime;
	params.LocalTime = LocalTime;
	params.Title = Title;
	params.Body = Body;
	params.Action = Action;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPlatformLibrary.GetLaunchNotification
// ()
// Parameters:
// bool                           NotificationLaunchedApp        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ActivationEvent                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            FireDate                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPlatformLibrary::GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.GetLaunchNotification"));

	UBlueprintPlatformLibrary_GetLaunchNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NotificationLaunchedApp != nullptr)
		*NotificationLaunchedApp = params.NotificationLaunchedApp;
	if (ActivationEvent != nullptr)
		*ActivationEvent = params.ActivationEvent;
	if (FireDate != nullptr)
		*FireDate = params.FireDate;

}


// Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation
// ()
// Parameters:
// TEnumAsByte<Engine_EScreenOrientation> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EScreenOrientation> UBlueprintPlatformLibrary::GetDeviceOrientation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation"));

	UBlueprintPlatformLibrary_GetDeviceOrientation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
// ()
void UBlueprintPlatformLibrary::ClearAllLocalNotifications()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications"));

	UBlueprintPlatformLibrary_ClearAllLocalNotifications_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
// ()
// Parameters:
// int                            NotificationId                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPlatformLibrary::CancelLocalNotificationById(int NotificationId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById"));

	UBlueprintPlatformLibrary_CancelLocalNotificationById_Params params;
	params.NotificationId = NotificationId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintPlatformLibrary.CancelLocalNotification
// ()
// Parameters:
// struct FString                 ActivationEvent                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintPlatformLibrary::CancelLocalNotification(const struct FString& ActivationEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintPlatformLibrary.CancelLocalNotification"));

	UBlueprintPlatformLibrary_CancelLocalNotification_Params params;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UBlueprintPlatformLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UBlueprintPlatformLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.BlueprintSetLibrary.SetSetPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintSetLibrary::SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.SetSetPropertyByName"));

	UBlueprintSetLibrary_SetSetPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_Union
// ()
void UBlueprintSetLibrary::Set_Union()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Union"));

	UBlueprintSetLibrary_Set_Union_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_ToArray
// ()
// Parameters:
// TArray<int>                    Result                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UBlueprintSetLibrary::Set_ToArray(TArray<int>* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_ToArray"));

	UBlueprintSetLibrary_Set_ToArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function Engine.BlueprintSetLibrary.Set_RemoveItems
// ()
// Parameters:
// TArray<int>                    Items                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UBlueprintSetLibrary::Set_RemoveItems(TArray<int> Items)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_RemoveItems"));

	UBlueprintSetLibrary_Set_RemoveItems_Params params;
	params.Items = Items;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_Remove
// ()
// Parameters:
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintSetLibrary::Set_Remove(int Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Remove"));

	UBlueprintSetLibrary_Set_Remove_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintSetLibrary.Set_Length
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UBlueprintSetLibrary::Set_Length()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Length"));

	UBlueprintSetLibrary_Set_Length_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintSetLibrary.Set_Intersection
// ()
void UBlueprintSetLibrary::Set_Intersection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Intersection"));

	UBlueprintSetLibrary_Set_Intersection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_Difference
// ()
void UBlueprintSetLibrary::Set_Difference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Difference"));

	UBlueprintSetLibrary_Set_Difference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_Contains
// ()
// Parameters:
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UBlueprintSetLibrary::Set_Contains(int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Contains"));

	UBlueprintSetLibrary_Set_Contains_Params params;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.BlueprintSetLibrary.Set_Clear
// ()
void UBlueprintSetLibrary::Set_Clear()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Clear"));

	UBlueprintSetLibrary_Set_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_AddItems
// ()
// Parameters:
// TArray<int>                    NewItems                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UBlueprintSetLibrary::Set_AddItems(TArray<int> NewItems)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_AddItems"));

	UBlueprintSetLibrary_Set_AddItems_Params params;
	params.NewItems = NewItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.BlueprintSetLibrary.Set_Add
// ()
// Parameters:
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UBlueprintSetLibrary::Set_Add(int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintSetLibrary.Set_Add"));

	UBlueprintSetLibrary_Set_Add_Params params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UBlueprintSetLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UBlueprintSetLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UBoneMaskFilter::AfterRead()
{
	UObject::AfterRead();

}

void UBoneMaskFilter::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UBookmarkBase::AfterRead()
{
	UObject::AfterRead();

}

void UBookmarkBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UBookMark::AfterRead()
{
	UBookmarkBase::AfterRead();

}

void UBookMark::BeforeDelete()
{
	UBookmarkBase::BeforeDelete();

}

void UBookMark2D::AfterRead()
{
	UBookmarkBase::AfterRead();

}

void UBookMark2D::BeforeDelete()
{
	UBookmarkBase::BeforeDelete();

}

void UBoundsCopyComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UBoundsCopyComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

void AReflectionCapture::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(CaptureComponent, UReflectionCaptureComponent);
}

void AReflectionCapture::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(CaptureComponent);
}

void ABoxReflectionCapture::AfterRead()
{
	AReflectionCapture::AfterRead();

}

void ABoxReflectionCapture::BeforeDelete()
{
	AReflectionCapture::BeforeDelete();

}

void UReflectionCaptureComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(CaptureOffsetComponent, UBillboardComponent);
	READ_PTR_FULL(Cubemap, UTextureCube);
	READ_PTR_FULL(CachedEncodedHDRCubemap, UTextureCube);
}

void UReflectionCaptureComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(CaptureOffsetComponent);
	DELE_PTR_FULL(Cubemap);
	DELE_PTR_FULL(CachedEncodedHDRCubemap);
}

void UBoxReflectionCaptureComponent::AfterRead()
{
	UReflectionCaptureComponent::AfterRead();

	READ_PTR_FULL(PreviewInfluenceBox, UBoxComponent);
	READ_PTR_FULL(PreviewCaptureBox, UBoxComponent);
}

void UBoxReflectionCaptureComponent::BeforeDelete()
{
	UReflectionCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(PreviewInfluenceBox);
	DELE_PTR_FULL(PreviewCaptureBox);
}

void UBreakpoint::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Node, UEdGraphNode);
}

void UBreakpoint::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Node);
}

void UBrushBuilder::AfterRead()
{
	UObject::AfterRead();

}

void UBrushBuilder::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UBrushComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(Brush, UModel);
	READ_PTR_FULL(BrushBodySetup, UBodySetup);
}

void UBrushComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(Brush);
	DELE_PTR_FULL(BrushBodySetup);
}

void ABrushShape::AfterRead()
{
	ABrush::AfterRead();

}

void ABrushShape::BeforeDelete()
{
	ABrush::BeforeDelete();

}

void UButtonStyleAsset::AfterRead()
{
	UObject::AfterRead();

}

void UButtonStyleAsset::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCameraAnim::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CameraInterpGroup, UInterpGroup);
}

void UCameraAnim::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CameraInterpGroup);
}

// Function Engine.CameraAnimInst.Stop
// ()
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.Stop"));

	UCameraAnimInst_Stop_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraAnimInst.SetScale
// ()
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraAnimInst::SetScale(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetScale"));

	UCameraAnimInst_SetScale_Params params;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraAnimInst.SetDuration
// ()
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraAnimInst::SetDuration(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetDuration"));

	UCameraAnimInst_SetDuration_Params params;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UCameraAnimInst::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CamAnim, UCameraAnim);
	READ_PTR_FULL(InterpGroupInst, UInterpGroupInst);
	READ_PTR_FULL(MoveTrack, UInterpTrackMove);
	READ_PTR_FULL(MoveInst, UInterpTrackInstMove);
}

void UCameraAnimInst::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CamAnim);
	DELE_PTR_FULL(InterpGroupInst);
	DELE_PTR_FULL(MoveTrack);
	DELE_PTR_FULL(MoveInst);
}

void ACameraBlockingVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ACameraBlockingVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

// Function Engine.CameraModifier.IsDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.IsDisabled"));

	UCameraModifier_IsDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CameraModifier.GetViewTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UCameraModifier::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.GetViewTarget"));

	UCameraModifier_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CameraModifier.EnableModifier
// ()
void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.EnableModifier"));

	UCameraModifier_EnableModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraModifier.DisableModifier
// ()
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraModifier::DisableModifier(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.DisableModifier"));

	UCameraModifier_DisableModifier_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraModifier.BlueprintModifyPostProcess
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PostProcessBlendWeight         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPostProcessSettings    PostProcessSettings            (Parm, OutParm, NativeAccessSpecifierPublic)
void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyPostProcess"));

	UCameraModifier_BlueprintModifyPostProcess_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PostProcessBlendWeight != nullptr)
		*PostProcessBlendWeight = params.PostProcessBlendWeight;
	if (PostProcessSettings != nullptr)
		*PostProcessSettings = params.PostProcessSettings;

}


// Function Engine.CameraModifier.BlueprintModifyCamera
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          FOV                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewViewLocation                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewViewRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          NewFOV                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraModifier::BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyCamera"));

	UCameraModifier_BlueprintModifyCamera_Params params;
	params.DeltaTime = DeltaTime;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;
	params.FOV = FOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewViewLocation != nullptr)
		*NewViewLocation = params.NewViewLocation;
	if (NewViewRotation != nullptr)
		*NewViewRotation = params.NewViewRotation;
	if (NewFOV != nullptr)
		*NewFOV = params.NewFOV;

}


void UCameraModifier::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CameraOwner, APlayerCameraManager);
}

void UCameraModifier::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CameraOwner);
}

void UCameraModifier_CameraShake::AfterRead()
{
	UCameraModifier::AfterRead();

}

void UCameraModifier_CameraShake::BeforeDelete()
{
	UCameraModifier::BeforeDelete();

}

// Function Engine.MatineeCameraShake.ReceiveStopShake
// ()
// Parameters:
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMatineeCameraShake::ReceiveStopShake(bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeCameraShake.ReceiveStopShake"));

	UMatineeCameraShake_ReceiveStopShake_Params params;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeCameraShake.ReceivePlayShake
// ()
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMatineeCameraShake::ReceivePlayShake(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeCameraShake.ReceivePlayShake"));

	UMatineeCameraShake_ReceivePlayShake_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeCameraShake.ReceiveIsFinished
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UMatineeCameraShake::ReceiveIsFinished()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeCameraShake.ReceiveIsFinished"));

	UMatineeCameraShake_ReceiveIsFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MatineeCameraShake.BlueprintUpdateCameraShake
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo        POV                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo        ModifiedPOV                    (Parm, OutParm, NativeAccessSpecifierPublic)
void UMatineeCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeCameraShake.BlueprintUpdateCameraShake"));

	UMatineeCameraShake_BlueprintUpdateCameraShake_Params params;
	params.DeltaTime = DeltaTime;
	params.Alpha = Alpha;
	params.POV = POV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ModifiedPOV != nullptr)
		*ModifiedPOV = params.ModifiedPOV;

}


void UMatineeCameraShake::AfterRead()
{
	UCameraShakeBase::AfterRead();

	READ_PTR_FULL(Anim, UCameraAnim);
	READ_PTR_FULL(AnimInst, UCameraAnimInst);
}

void UMatineeCameraShake::BeforeDelete()
{
	UCameraShakeBase::BeforeDelete();

	DELE_PTR_FULL(Anim);
	DELE_PTR_FULL(AnimInst);
}

void ACameraShakeSourceActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(CameraShakeSourceComponent, UCameraShakeSourceComponent);
}

void ACameraShakeSourceActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(CameraShakeSourceComponent);
}

// Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
// ()
// Parameters:
// class UClass*                  InCameraShake                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraShakeSourceComponent::StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType"));

	UCameraShakeSourceComponent_StopAllCameraShakesOfType_Params params;
	params.InCameraShake = InCameraShake;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraShakeSourceComponent.StopAllCameraShakes
// ()
// Parameters:
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCameraShakeSourceComponent::StopAllCameraShakes(bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShakeSourceComponent.StopAllCameraShakes"));

	UCameraShakeSourceComponent_StopAllCameraShakes_Params params;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraShakeSourceComponent.StartCameraShake
// ()
// Parameters:
// class UClass*                  InCameraShake                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_ECameraShakePlaySpace   PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UCameraShakeSourceComponent::StartCameraShake(class UClass* InCameraShake, float Scale, Engine_ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShakeSourceComponent.StartCameraShake"));

	UCameraShakeSourceComponent_StartCameraShake_Params params;
	params.InCameraShake = InCameraShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraShakeSourceComponent.Start
// ()
void UCameraShakeSourceComponent::Start()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShakeSourceComponent.Start"));

	UCameraShakeSourceComponent_Start_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CameraShakeSourceComponent.GetAttenuationFactor
// ()
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCameraShakeSourceComponent::GetAttenuationFactor(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShakeSourceComponent.GetAttenuationFactor"));

	UCameraShakeSourceComponent_GetAttenuationFactor_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCameraShakeSourceComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(CameraShake, UClass);
}

void UCameraShakeSourceComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(CameraShake);
}

// Function Engine.Canvas.K2_TextSize
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 RenderText                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UCanvas::K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_TextSize"));

	UCanvas_K2_TextSize_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Canvas.K2_StrLen
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 RenderText                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UCanvas::K2_StrLen(class UFont* RenderFont, const struct FString& RenderText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_StrLen"));

	UCanvas_K2_StrLen_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Canvas.K2_Project
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCanvas::K2_Project(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Project"));

	UCanvas_K2_Project_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Canvas.K2_DrawTriangle
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTriangle"));

	UCanvas_K2_DrawTriangle_Params params;
	params.RenderTexture = RenderTexture;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawTexture
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBlendMode> BlendMode                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTexture"));

	UCanvas_K2_DrawTexture_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawText
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 RenderText                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Kerning                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ShadowColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ShadowOffset                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCentreX                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCentreY                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bOutlined                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            OutlineColor                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawText"));

	UCanvas_K2_DrawText_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.ScreenPosition = ScreenPosition;
	params.Scale = Scale;
	params.RenderColor = RenderColor;
	params.Kerning = Kerning;
	params.ShadowColor = ShadowColor;
	params.ShadowOffset = ShadowOffset;
	params.bCentreX = bCentreX;
	params.bCentreY = bCentreY;
	params.bOutlined = bOutlined;
	params.OutlineColor = OutlineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawPolygon
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumberOfSides                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawPolygon"));

	UCanvas_K2_DrawPolygon_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.Radius = Radius;
	params.NumberOfSides = NumberOfSides;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawMaterialTriangle
// ()
// Parameters:
// class UMaterialInterface*      RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterialTriangle"));

	UCanvas_K2_DrawMaterialTriangle_Params params;
	params.RenderMaterial = RenderMaterial;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawMaterial
// ()
// Parameters:
// class UMaterialInterface*      RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterial"));

	UCanvas_K2_DrawMaterial_Params params;
	params.RenderMaterial = RenderMaterial;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawLine
// ()
// Parameters:
// struct FVector2D               ScreenPositionA                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPositionB                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawLine"));

	UCanvas_K2_DrawLine_Params params;
	params.ScreenPositionA = ScreenPositionA;
	params.ScreenPositionB = ScreenPositionB;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawBox
// ()
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBox"));

	UCanvas_K2_DrawBox_Params params;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_DrawBorder
// ()
// Parameters:
// class UTexture*                BorderTexture                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                BackgroundTexture              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                LeftBorderTexture              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                RightBorderTexture             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                TopBorderTexture               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                BottomBorderTexture            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               BorderScale                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               BackgroundScale                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               CornerSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBorder"));

	UCanvas_K2_DrawBorder_Params params;
	params.BorderTexture = BorderTexture;
	params.BackgroundTexture = BackgroundTexture;
	params.LeftBorderTexture = LeftBorderTexture;
	params.RightBorderTexture = RightBorderTexture;
	params.TopBorderTexture = TopBorderTexture;
	params.BottomBorderTexture = BottomBorderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BorderScale = BorderScale;
	params.BackgroundScale = BackgroundScale;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;
	params.CornerSize = CornerSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Canvas.K2_Deproject
// ()
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldOrigin                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvas::K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Deproject"));

	UCanvas_K2_Deproject_Params params;
	params.ScreenPosition = ScreenPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

}


void UCanvas::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(DefaultTexture, UTexture2D);
	READ_PTR_FULL(GradientTexture0, UTexture2D);
	READ_PTR_FULL(ReporterGraph, UReporterGraph);
}

void UCanvas::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(DefaultTexture);
	DELE_PTR_FULL(GradientTexture0);
	DELE_PTR_FULL(ReporterGraph);
}

void UTextureRenderTarget::AfterRead()
{
	UTexture::AfterRead();

}

void UTextureRenderTarget::BeforeDelete()
{
	UTexture::BeforeDelete();

}

void UTextureRenderTarget2D::AfterRead()
{
	UTextureRenderTarget::AfterRead();

}

void UTextureRenderTarget2D::BeforeDelete()
{
	UTextureRenderTarget::BeforeDelete();

}

// Function Engine.CanvasRenderTarget2D.UpdateResource
// ()
void UCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.UpdateResource"));

	UCanvasRenderTarget2D_UpdateResource_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvasRenderTarget2D::ReceiveUpdate(class UCanvas* Canvas, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.ReceiveUpdate"));

	UCanvasRenderTarget2D_ReceiveUpdate_Params params;
	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CanvasRenderTarget2D.GetSize
// ()
// Parameters:
// int                            Width                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCanvasRenderTarget2D::GetSize(int* Width, int* Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.GetSize"));

	UCanvasRenderTarget2D_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;

}


// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  CanvasRenderTarget2DClass      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvasRenderTarget2D*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UCanvasRenderTarget2D* UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D"));

	UCanvasRenderTarget2D_CreateCanvasRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCanvasRenderTarget2D::AfterRead()
{
	UTextureRenderTarget2D::AfterRead();

}

void UCanvasRenderTarget2D::BeforeDelete()
{
	UTextureRenderTarget2D::BeforeDelete();

}

// Function Engine.CheatManager.Walk
// ()
void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Walk"));

	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ViewSelf
// ()
void UCheatManager::ViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewSelf"));

	UCheatManager_ViewSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ViewPlayer
// ()
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::ViewPlayer(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewPlayer"));

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ViewClass
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::ViewClass(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewClass"));

	UCheatManager_ViewClass_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ViewActor
// ()
// Parameters:
// struct FName                   ActorName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::ViewActor(const struct FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewActor"));

	UCheatManager_ViewActor_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.UpdateSafeArea
// ()
void UCheatManager::UpdateSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.UpdateSafeArea"));

	UCheatManager_UpdateSafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
// ()
void UCheatManager::ToggleServerStatReplicatorUpdateStatNet()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet"));

	UCheatManager_ToggleServerStatReplicatorUpdateStatNet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
// ()
void UCheatManager::ToggleServerStatReplicatorClientOverwrite()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite"));

	UCheatManager_ToggleServerStatReplicatorClientOverwrite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ToggleDebugCamera
// ()
void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleDebugCamera"));

	UCheatManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ToggleAILogging
// ()
void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleAILogging"));

	UCheatManager_ToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.TestCollisionDistance
// ()
void UCheatManager::TestCollisionDistance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.TestCollisionDistance"));

	UCheatManager_TestCollisionDistance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.Teleport
// ()
void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Teleport"));

	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.Summon
// ()
// Parameters:
// struct FString                 ClassName                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::Summon(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Summon"));

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.StreamLevelOut
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelOut"));

	UCheatManager_StreamLevelOut_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.StreamLevelIn
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelIn"));

	UCheatManager_StreamLevelIn_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.SpawnServerStatReplicator
// ()
void UCheatManager::SpawnServerStatReplicator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SpawnServerStatReplicator"));

	UCheatManager_SpawnServerStatReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.Slomo
// ()
// Parameters:
// float                          NewTimeDilation                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::Slomo(float NewTimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Slomo"));

	UCheatManager_Slomo_Params params;
	params.NewTimeDilation = NewTimeDilation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.SetWorldOrigin
// ()
void UCheatManager::SetWorldOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetWorldOrigin"));

	UCheatManager_SetWorldOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.SetMouseSensitivityToDefault
// ()
void UCheatManager::SetMouseSensitivityToDefault()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetMouseSensitivityToDefault"));

	UCheatManager_SetMouseSensitivityToDefault_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ServerToggleAILogging
// ()
void UCheatManager::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ServerToggleAILogging"));

	UCheatManager_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ReceiveInitCheatManager
// ()
void UCheatManager::ReceiveInitCheatManager()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ReceiveInitCheatManager"));

	UCheatManager_ReceiveInitCheatManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ReceiveEndPlay
// ()
void UCheatManager::ReceiveEndPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ReceiveEndPlay"));

	UCheatManager_ReceiveEndPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.PlayersOnly
// ()
void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.PlayersOnly"));

	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.OnlyLoadLevel
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.OnlyLoadLevel"));

	UCheatManager_OnlyLoadLevel_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.LogLoc
// ()
void UCheatManager::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.LogLoc"));

	UCheatManager_LogLoc_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.InvertMouse
// ()
void UCheatManager::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.InvertMouse"));

	UCheatManager_InvertMouse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.God
// ()
void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.God"));

	UCheatManager_God_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.Ghost
// ()
void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Ghost"));

	UCheatManager_Ghost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.FreezeFrame
// ()
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FreezeFrame"));

	UCheatManager_FreezeFrame_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.Fly
// ()
void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Fly"));

	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.FlushLog
// ()
void UCheatManager::FlushLog()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FlushLog"));

	UCheatManager_FlushLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.EnableDebugCamera
// ()
void UCheatManager::EnableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.EnableDebugCamera"));

	UCheatManager_EnableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DumpVoiceMutingState
// ()
void UCheatManager::DumpVoiceMutingState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpVoiceMutingState"));

	UCheatManager_DumpVoiceMutingState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DumpPartyState
// ()
void UCheatManager::DumpPartyState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpPartyState"));

	UCheatManager_DumpPartyState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DumpOnlineSessionState
// ()
void UCheatManager::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpOnlineSessionState"));

	UCheatManager_DumpOnlineSessionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DumpChatState
// ()
void UCheatManager::DumpChatState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpChatState"));

	UCheatManager_DumpChatState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DisableDebugCamera
// ()
void UCheatManager::DisableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DisableDebugCamera"));

	UCheatManager_DisableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DestroyTarget
// ()
void UCheatManager::DestroyTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyTarget"));

	UCheatManager_DestroyTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DestroyServerStatReplicator
// ()
void UCheatManager::DestroyServerStatReplicator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyServerStatReplicator"));

	UCheatManager_DestroyServerStatReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DestroyPawns
// ()
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DestroyPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyPawns"));

	UCheatManager_DestroyPawns_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DestroyAllPawnsExceptTarget
// ()
void UCheatManager::DestroyAllPawnsExceptTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAllPawnsExceptTarget"));

	UCheatManager_DestroyAllPawnsExceptTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DestroyAll
// ()
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DestroyAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAll"));

	UCheatManager_DestroyAll_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepSize
// ()
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepSize"));

	UCheatManager_DebugCapsuleSweepSize_Params params;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepPawn
// ()
void UCheatManager::DebugCapsuleSweepPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepPawn"));

	UCheatManager_DebugCapsuleSweepPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepComplex
// ()
// Parameters:
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepComplex"));

	UCheatManager_DebugCapsuleSweepComplex_Params params;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepClear
// ()
void UCheatManager::DebugCapsuleSweepClear()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepClear"));

	UCheatManager_DebugCapsuleSweepClear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepChannel
// ()
// Parameters:
// TEnumAsByte<Engine_ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<Engine_ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepChannel"));

	UCheatManager_DebugCapsuleSweepChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweepCapture
// ()
void UCheatManager::DebugCapsuleSweepCapture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepCapture"));

	UCheatManager_DebugCapsuleSweepCapture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DebugCapsuleSweep
// ()
void UCheatManager::DebugCapsuleSweep()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweep"));

	UCheatManager_DebugCapsuleSweep_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.DamageTarget
// ()
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::DamageTarget(float DamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DamageTarget"));

	UCheatManager_DamageTarget_Params params;
	params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.CheatScript
// ()
// Parameters:
// struct FString                 ScriptName                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::CheatScript(const struct FString& ScriptName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.CheatScript"));

	UCheatManager_CheatScript_Params params;
	params.ScriptName = ScriptName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.ChangeSize
// ()
// Parameters:
// float                          F                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ChangeSize"));

	UCheatManager_ChangeSize_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.BugItStringCreator
// ()
// Parameters:
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 GoString                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 LocString                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItStringCreator"));

	UCheatManager_BugItStringCreator_Params params;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;

}


// Function Engine.CheatManager.BugItGo
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItGo"));

	UCheatManager_BugItGo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.CheatManager.BugIt
// ()
// Parameters:
// struct FString                 ScreenShotDescription          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCheatManager::BugIt(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugIt"));

	UCheatManager_BugIt_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UCheatManager::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(DebugCameraControllerRef, ADebugCameraController);
	READ_PTR_FULL(DebugCameraControllerClass, UClass);
}

void UCheatManager::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(DebugCameraControllerRef);
	DELE_PTR_FULL(DebugCameraControllerClass);
}

void UCheckBoxStyleAsset::AfterRead()
{
	UObject::AfterRead();

}

void UCheckBoxStyleAsset::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.ChildActorComponent.SetChildActorClass
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UChildActorComponent::SetChildActorClass(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ChildActorComponent.SetChildActorClass"));

	UChildActorComponent_SetChildActorClass_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UChildActorComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(ChildActorClass, UClass);
	READ_PTR_FULL(ChildActor, AActor);
	READ_PTR_FULL(ChildActorTemplate, AActor);
}

void UChildActorComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(ChildActorClass);
	DELE_PTR_FULL(ChildActor);
	DELE_PTR_FULL(ChildActorTemplate);
}

void UChildConnection::AfterRead()
{
	UNetConnection::AfterRead();

	READ_PTR_FULL(Parent, UNetConnection);
}

void UChildConnection::BeforeDelete()
{
	UNetConnection::BeforeDelete();

	DELE_PTR_FULL(Parent);
}

void UPlatformInterfaceBase::AfterRead()
{
	UObject::AfterRead();

}

void UPlatformInterfaceBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCloudStorageBase::AfterRead()
{
	UPlatformInterfaceBase::AfterRead();

}

void UCloudStorageBase::BeforeDelete()
{
	UPlatformInterfaceBase::BeforeDelete();

}

void UCollisionProfile::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UCollisionProfile::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UComponentDelegateBinding::AfterRead()
{
	UDynamicBlueprintBinding::AfterRead();

}

void UComponentDelegateBinding::BeforeDelete()
{
	UDynamicBlueprintBinding::BeforeDelete();

}

void UActorComponentInstanceDataTransientOuter::AfterRead()
{
	UObject::AfterRead();

}

void UActorComponentInstanceDataTransientOuter::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCurveTable::AfterRead()
{
	UObject::AfterRead();

}

void UCurveTable::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCompositeCurveTable::AfterRead()
{
	UCurveTable::AfterRead();

}

void UCompositeCurveTable::BeforeDelete()
{
	UCurveTable::BeforeDelete();

}

void UDataTable::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(RowStruct, UScriptStruct);
}

void UDataTable::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(RowStruct);
}

void UCompositeDataTable::AfterRead()
{
	UDataTable::AfterRead();

}

void UCompositeDataTable::BeforeDelete()
{
	UDataTable::BeforeDelete();

}

void UEngine::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(TinyFont, UFont);
	READ_PTR_FULL(SmallFont, UFont);
	READ_PTR_FULL(MediumFont, UFont);
	READ_PTR_FULL(LargeFont, UFont);
	READ_PTR_FULL(SubtitleFont, UFont);
	READ_PTR_FULL(ConsoleClass, UClass);
	READ_PTR_FULL(GameViewportClientClass, UClass);
	READ_PTR_FULL(LocalPlayerClass, UClass);
	READ_PTR_FULL(WorldSettingsClass, UClass);
	READ_PTR_FULL(NavigationSystemClass, UClass);
	READ_PTR_FULL(NavigationSystemConfigClass, UClass);
	READ_PTR_FULL(AvoidanceManagerClass, UClass);
	READ_PTR_FULL(PhysicsCollisionHandlerClass, UClass);
	READ_PTR_FULL(GameUserSettingsClass, UClass);
	READ_PTR_FULL(GameUserSettings, UGameUserSettings);
	READ_PTR_FULL(LevelScriptActorClass, UClass);
	READ_PTR_FULL(GameSingleton, UObject);
	READ_PTR_FULL(AssetManager, UAssetManager);
	READ_PTR_FULL(DefaultTexture, UTexture2D);
	READ_PTR_FULL(DefaultDiffuseTexture, UTexture);
	READ_PTR_FULL(DefaultBSPVertexTexture, UTexture2D);
	READ_PTR_FULL(HighFrequencyNoiseTexture, UTexture2D);
	READ_PTR_FULL(DefaultBokehTexture, UTexture2D);
	READ_PTR_FULL(DefaultBloomKernelTexture, UTexture2D);
	READ_PTR_FULL(WireframeMaterial, UMaterial);
	READ_PTR_FULL(DebugMeshMaterial, UMaterial);
	READ_PTR_FULL(EmissiveMeshMaterial, UMaterial);
	READ_PTR_FULL(LevelColorationLitMaterial, UMaterial);
	READ_PTR_FULL(LevelColorationUnlitMaterial, UMaterial);
	READ_PTR_FULL(LightingTexelDensityMaterial, UMaterial);
	READ_PTR_FULL(ShadedLevelColorationLitMaterial, UMaterial);
	READ_PTR_FULL(ShadedLevelColorationUnlitMaterial, UMaterial);
	READ_PTR_FULL(RemoveSurfaceMaterial, UMaterial);
	READ_PTR_FULL(VertexColorMaterial, UMaterial);
	READ_PTR_FULL(VertexColorViewModeMaterial_ColorOnly, UMaterial);
	READ_PTR_FULL(VertexColorViewModeMaterial_AlphaAsColor, UMaterial);
	READ_PTR_FULL(VertexColorViewModeMaterial_RedOnly, UMaterial);
	READ_PTR_FULL(VertexColorViewModeMaterial_GreenOnly, UMaterial);
	READ_PTR_FULL(VertexColorViewModeMaterial_BlueOnly, UMaterial);
	READ_PTR_FULL(ConstraintLimitMaterial, UMaterial);
	READ_PTR_FULL(ConstraintLimitMaterialX, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialXAxis, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialY, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialYAxis, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialZ, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialZAxis, UMaterialInstanceDynamic);
	READ_PTR_FULL(ConstraintLimitMaterialPrismatic, UMaterialInstanceDynamic);
	READ_PTR_FULL(InvalidLightmapSettingsMaterial, UMaterial);
	READ_PTR_FULL(PreviewShadowsIndicatorMaterial, UMaterial);
	READ_PTR_FULL(ArrowMaterial, UMaterial);
	READ_PTR_FULL(ArrowMaterialYellow, UMaterialInstanceDynamic);
	READ_PTR_FULL(DefaultPhysMaterial, UPhysicalMaterial);
	READ_PTR_FULL(PreIntegratedSkinBRDFTexture, UTexture2D);
	READ_PTR_FULL(BlueNoiseTexture, UTexture2D);
	READ_PTR_FULL(MiniFontTexture, UTexture2D);
	READ_PTR_FULL(WeightMapPlaceholderTexture, UTexture);
	READ_PTR_FULL(LightMapDensityTexture, UTexture2D);
	READ_PTR_FULL(GameViewport, UGameViewportClient);
	READ_PTR_FULL(CustomTimeStep, UEngineCustomTimeStep);
	READ_PTR_FULL(TimecodeProvider, UTimecodeProvider);
}

void UEngine::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(TinyFont);
	DELE_PTR_FULL(SmallFont);
	DELE_PTR_FULL(MediumFont);
	DELE_PTR_FULL(LargeFont);
	DELE_PTR_FULL(SubtitleFont);
	DELE_PTR_FULL(ConsoleClass);
	DELE_PTR_FULL(GameViewportClientClass);
	DELE_PTR_FULL(LocalPlayerClass);
	DELE_PTR_FULL(WorldSettingsClass);
	DELE_PTR_FULL(NavigationSystemClass);
	DELE_PTR_FULL(NavigationSystemConfigClass);
	DELE_PTR_FULL(AvoidanceManagerClass);
	DELE_PTR_FULL(PhysicsCollisionHandlerClass);
	DELE_PTR_FULL(GameUserSettingsClass);
	DELE_PTR_FULL(GameUserSettings);
	DELE_PTR_FULL(LevelScriptActorClass);
	DELE_PTR_FULL(GameSingleton);
	DELE_PTR_FULL(AssetManager);
	DELE_PTR_FULL(DefaultTexture);
	DELE_PTR_FULL(DefaultDiffuseTexture);
	DELE_PTR_FULL(DefaultBSPVertexTexture);
	DELE_PTR_FULL(HighFrequencyNoiseTexture);
	DELE_PTR_FULL(DefaultBokehTexture);
	DELE_PTR_FULL(DefaultBloomKernelTexture);
	DELE_PTR_FULL(WireframeMaterial);
	DELE_PTR_FULL(DebugMeshMaterial);
	DELE_PTR_FULL(EmissiveMeshMaterial);
	DELE_PTR_FULL(LevelColorationLitMaterial);
	DELE_PTR_FULL(LevelColorationUnlitMaterial);
	DELE_PTR_FULL(LightingTexelDensityMaterial);
	DELE_PTR_FULL(ShadedLevelColorationLitMaterial);
	DELE_PTR_FULL(ShadedLevelColorationUnlitMaterial);
	DELE_PTR_FULL(RemoveSurfaceMaterial);
	DELE_PTR_FULL(VertexColorMaterial);
	DELE_PTR_FULL(VertexColorViewModeMaterial_ColorOnly);
	DELE_PTR_FULL(VertexColorViewModeMaterial_AlphaAsColor);
	DELE_PTR_FULL(VertexColorViewModeMaterial_RedOnly);
	DELE_PTR_FULL(VertexColorViewModeMaterial_GreenOnly);
	DELE_PTR_FULL(VertexColorViewModeMaterial_BlueOnly);
	DELE_PTR_FULL(ConstraintLimitMaterial);
	DELE_PTR_FULL(ConstraintLimitMaterialX);
	DELE_PTR_FULL(ConstraintLimitMaterialXAxis);
	DELE_PTR_FULL(ConstraintLimitMaterialY);
	DELE_PTR_FULL(ConstraintLimitMaterialYAxis);
	DELE_PTR_FULL(ConstraintLimitMaterialZ);
	DELE_PTR_FULL(ConstraintLimitMaterialZAxis);
	DELE_PTR_FULL(ConstraintLimitMaterialPrismatic);
	DELE_PTR_FULL(InvalidLightmapSettingsMaterial);
	DELE_PTR_FULL(PreviewShadowsIndicatorMaterial);
	DELE_PTR_FULL(ArrowMaterial);
	DELE_PTR_FULL(ArrowMaterialYellow);
	DELE_PTR_FULL(DefaultPhysMaterial);
	DELE_PTR_FULL(PreIntegratedSkinBRDFTexture);
	DELE_PTR_FULL(BlueNoiseTexture);
	DELE_PTR_FULL(MiniFontTexture);
	DELE_PTR_FULL(WeightMapPlaceholderTexture);
	DELE_PTR_FULL(LightMapDensityTexture);
	DELE_PTR_FULL(GameViewport);
	DELE_PTR_FULL(CustomTimeStep);
	DELE_PTR_FULL(TimecodeProvider);
}

void UScriptViewportClient::AfterRead()
{
	UObject::AfterRead();

}

void UScriptViewportClient::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.GameViewportClient.SSSwapControllers
// ()
void UGameViewportClient::SSSwapControllers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SSSwapControllers"));

	UGameViewportClient_SSSwapControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameViewportClient.ShowTitleSafeArea
// ()
void UGameViewportClient::ShowTitleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.ShowTitleSafeArea"));

	UGameViewportClient_ShowTitleSafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameViewportClient.SetConsoleTarget
// ()
// Parameters:
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SetConsoleTarget"));

	UGameViewportClient_SetConsoleTarget_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UGameViewportClient::AfterRead()
{
	UScriptViewportClient::AfterRead();

	READ_PTR_FULL(ViewportConsole, UConsole);
	READ_PTR_FULL(World, UWorld);
	READ_PTR_FULL(GameInstance, UGameInstance);
}

void UGameViewportClient::BeforeDelete()
{
	UScriptViewportClient::BeforeDelete();

	DELE_PTR_FULL(ViewportConsole);
	DELE_PTR_FULL(World);
	DELE_PTR_FULL(GameInstance);
}

void UConsole::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ConsoleTargetPlayer, ULocalPlayer);
	READ_PTR_FULL(DefaultTexture_Black, UTexture2D);
	READ_PTR_FULL(DefaultTexture_White, UTexture2D);
}

void UConsole::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ConsoleTargetPlayer);
	DELE_PTR_FULL(DefaultTexture_Black);
	DELE_PTR_FULL(DefaultTexture_White);
}

void UControlChannel::AfterRead()
{
	UChannel::AfterRead();

}

void UControlChannel::BeforeDelete()
{
	UChannel::BeforeDelete();

}

void UStreamingSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UStreamingSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UGarbageCollectionSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UGarbageCollectionSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void ACullDistanceVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ACullDistanceVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

// Function Engine.CurveBase.GetValueRange
// ()
// Parameters:
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCurveBase::GetValueRange(float* MinValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetValueRange"));

	UCurveBase_GetValueRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MinValue != nullptr)
		*MinValue = params.MinValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

}


// Function Engine.CurveBase.GetTimeRange
// ()
// Parameters:
// float                          MinTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetTimeRange"));

	UCurveBase_GetTimeRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MinTime != nullptr)
		*MinTime = params.MinTime;
	if (MaxTime != nullptr)
		*MaxTime = params.MaxTime;

}


void UCurveBase::AfterRead()
{
	UObject::AfterRead();

}

void UCurveBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UCurveEdPresetCurve::AfterRead()
{
	UObject::AfterRead();

}

void UCurveEdPresetCurve::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.CurveFloat.GetFloatValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCurveFloat::GetFloatValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveFloat.GetFloatValue"));

	UCurveFloat_GetFloatValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCurveFloat::AfterRead()
{
	UCurveBase::AfterRead();

}

void UCurveFloat::BeforeDelete()
{
	UCurveBase::BeforeDelete();

}

// Function Engine.CurveLinearColor.GetLinearColorValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveLinearColor.GetLinearColorValue"));

	UCurveLinearColor_GetLinearColorValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CurveLinearColor.GetClampedLinearColorValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UCurveLinearColor::GetClampedLinearColorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveLinearColor.GetClampedLinearColorValue"));

	UCurveLinearColor_GetClampedLinearColorValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCurveLinearColor::AfterRead()
{
	UCurveBase::AfterRead();

}

void UCurveLinearColor::BeforeDelete()
{
	UCurveBase::BeforeDelete();

}

// Function Engine.Texture2D.Blueprint_GetSizeY
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UTexture2D::Blueprint_GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeY"));

	UTexture2D_Blueprint_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Texture2D.Blueprint_GetSizeX
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UTexture2D::Blueprint_GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeX"));

	UTexture2D_Blueprint_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UTexture2D::AfterRead()
{
	UTexture::AfterRead();

}

void UTexture2D::BeforeDelete()
{
	UTexture::BeforeDelete();

}

// Function Engine.CurveLinearColorAtlas.GetCurvePosition
// ()
// Parameters:
// class UCurveLinearColor*       InCurve                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          position                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UCurveLinearColorAtlas::GetCurvePosition(class UCurveLinearColor* InCurve, float* position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveLinearColorAtlas.GetCurvePosition"));

	UCurveLinearColorAtlas_GetCurvePosition_Params params;
	params.InCurve = InCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (position != nullptr)
		*position = params.position;


	return params.ReturnValue;
}


void UCurveLinearColorAtlas::AfterRead()
{
	UTexture2D::AfterRead();

}

void UCurveLinearColorAtlas::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

// Function Engine.CurveSourceInterface.GetCurveValue
// ()
// Parameters:
// struct FName                   CurveName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UCurveSourceInterface::GetCurveValue(const struct FName& CurveName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveSourceInterface.GetCurveValue"));

	UCurveSourceInterface_GetCurveValue_Params params;
	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.CurveSourceInterface.GetCurves
// ()
// Parameters:
// TArray<struct FNamedCurveValue> OutValues                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UCurveSourceInterface::GetCurves(TArray<struct FNamedCurveValue>* OutValues)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveSourceInterface.GetCurves"));

	UCurveSourceInterface_GetCurves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValues != nullptr)
		*OutValues = params.OutValues;

}


// Function Engine.CurveSourceInterface.GetBindingName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UCurveSourceInterface::GetBindingName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveSourceInterface.GetBindingName"));

	UCurveSourceInterface_GetBindingName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCurveSourceInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UCurveSourceInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

// Function Engine.CurveVector.GetVectorValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UCurveVector::GetVectorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveVector.GetVectorValue"));

	UCurveVector_GetVectorValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UCurveVector::AfterRead()
{
	UCurveBase::AfterRead();

}

void UCurveVector::BeforeDelete()
{
	UCurveBase::BeforeDelete();

}

// Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
// ()
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           OutRowNames                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UDataTableFunctionLibrary::GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowNames"));

	UDataTableFunctionLibrary_GetDataTableRowNames_Params params;
	params.Table = Table;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRowNames != nullptr)
		*OutRowNames = params.OutRowNames;

}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
// ()
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTableRowBase           OutRow                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UDataTableFunctionLibrary::GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName"));

	UDataTableFunctionLibrary_GetDataTableRowFromName_Params params;
	params.Table = Table;
	params.RowName = RowName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRow != nullptr)
		*OutRow = params.OutRow;


	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
// ()
// Parameters:
// class UDataTable*              DataTable                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UDataTableFunctionLibrary::GetDataTableColumnAsString(class UDataTable* DataTable, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString"));

	UDataTableFunctionLibrary_GetDataTableColumnAsString_Params params;
	params.DataTable = DataTable;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
// ()
// Parameters:
// class UCurveTable*             CurveTable                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InXY                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEvaluateCurveTableResult> OutResult                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutXY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ContextString                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDataTableFunctionLibrary::EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY, const struct FString& ContextString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow"));

	UDataTableFunctionLibrary_EvaluateCurveTableRow_Params params;
	params.CurveTable = CurveTable;
	params.RowName = RowName;
	params.InXY = InXY;
	params.ContextString = ContextString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutResult != nullptr)
		*OutResult = params.OutResult;
	if (OutXY != nullptr)
		*OutXY = params.OutXY;

}


// Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist
// ()
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UDataTableFunctionLibrary::DoesDataTableRowExist(class UDataTable* Table, const struct FName& RowName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist"));

	UDataTableFunctionLibrary_DoesDataTableRowExist_Params params;
	params.Table = Table;
	params.RowName = RowName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UDataTableFunctionLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UDataTableFunctionLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.DebugCameraController.ToggleDisplay
// ()
void ADebugCameraController::ToggleDisplay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ToggleDisplay"));

	ADebugCameraController_ToggleDisplay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// ()
void ADebugCameraController::ShowDebugSelectedInfo()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ShowDebugSelectedInfo"));

	ADebugCameraController_ShowDebugSelectedInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.SetPawnMovementSpeedScale
// ()
// Parameters:
// float                          NewSpeedScale                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.SetPawnMovementSpeedScale"));

	ADebugCameraController_SetPawnMovementSpeedScale_Params params;
	params.NewSpeedScale = NewSpeedScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.ReceiveOnDeactivate
// ()
// Parameters:
// class APlayerController*       RestoredPC                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADebugCameraController::ReceiveOnDeactivate(class APlayerController* RestoredPC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ReceiveOnDeactivate"));

	ADebugCameraController_ReceiveOnDeactivate_Params params;
	params.RestoredPC = RestoredPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.ReceiveOnActorSelected
// ()
// Parameters:
// class AActor*                  NewSelectedActor               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SelectHitLocation              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SelectHitNormal                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void ADebugCameraController::ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ReceiveOnActorSelected"));

	ADebugCameraController_ReceiveOnActorSelected_Params params;
	params.NewSelectedActor = NewSelectedActor;
	params.SelectHitLocation = SelectHitLocation;
	params.SelectHitNormal = SelectHitNormal;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.ReceiveOnActivate
// ()
// Parameters:
// class APlayerController*       OriginalPC                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADebugCameraController::ReceiveOnActivate(class APlayerController* OriginalPC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ReceiveOnActivate"));

	ADebugCameraController_ReceiveOnActivate_Params params;
	params.OriginalPC = OriginalPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DebugCameraController.GetSelectedActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* ADebugCameraController::GetSelectedActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.GetSelectedActor"));

	ADebugCameraController_GetSelectedActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ADebugCameraController::AfterRead()
{
	APlayerController::AfterRead();

	READ_PTR_FULL(DrawFrustum, UDrawFrustumComponent);
	READ_PTR_FULL(SelectedActor, AActor);
	READ_PTR_FULL(SelectedComponent, UPrimitiveComponent);
	READ_PTR_FULL(OriginalControllerRef, APlayerController);
	READ_PTR_FULL(OriginalPlayer, UPlayer);
}

void ADebugCameraController::BeforeDelete()
{
	APlayerController::BeforeDelete();

	DELE_PTR_FULL(DrawFrustum);
	DELE_PTR_FULL(SelectedActor);
	DELE_PTR_FULL(SelectedComponent);
	DELE_PTR_FULL(OriginalControllerRef);
	DELE_PTR_FULL(OriginalPlayer);
}

void UDebugCameraControllerSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UDebugCameraControllerSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void ADebugCameraHUD::AfterRead()
{
	AHUD::AfterRead();

}

void ADebugCameraHUD::BeforeDelete()
{
	AHUD::BeforeDelete();

}

void UDebugDrawService::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UDebugDrawService::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.DecalActor.SetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ADecalActor::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.SetDecalMaterial"));

	ADecalActor_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalActor.GetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* ADecalActor::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.GetDecalMaterial"));

	ADecalActor_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalActor.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.CreateDynamicMaterialInstance"));

	ADecalActor_CreateDynamicMaterialInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ADecalActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(Decal, UDecalComponent);
}

void ADecalActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(Decal);
}

// Function Engine.DecalComponent.SetSortOrder
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDecalComponent::SetSortOrder(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetSortOrder"));

	UDecalComponent_SetSortOrder_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalComponent.SetFadeScreenSize
// ()
// Parameters:
// float                          NewFadeScreenSize              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDecalComponent::SetFadeScreenSize(float NewFadeScreenSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetFadeScreenSize"));

	UDecalComponent_SetFadeScreenSize_Params params;
	params.NewFadeScreenSize = NewFadeScreenSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalComponent.SetFadeOut
// ()
// Parameters:
// float                          StartDelay                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           DestroyOwnerAfterFade          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDecalComponent::SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetFadeOut"));

	UDecalComponent_SetFadeOut_Params params;
	params.StartDelay = StartDelay;
	params.Duration = Duration;
	params.DestroyOwnerAfterFade = DestroyOwnerAfterFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalComponent.SetFadeIn
// ()
// Parameters:
// float                          StartDelay                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duaration                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDecalComponent::SetFadeIn(float StartDelay, float Duaration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetFadeIn"));

	UDecalComponent_SetFadeIn_Params params;
	params.StartDelay = StartDelay;
	params.Duaration = Duaration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalComponent.SetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetDecalMaterial"));

	UDecalComponent_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DecalComponent.GetFadeStartDelay
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UDecalComponent::GetFadeStartDelay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetFadeStartDelay"));

	UDecalComponent_GetFadeStartDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetFadeInStartDelay
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UDecalComponent::GetFadeInStartDelay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetFadeInStartDelay"));

	UDecalComponent_GetFadeInStartDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetFadeInDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UDecalComponent::GetFadeInDuration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetFadeInDuration"));

	UDecalComponent_GetFadeInDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetFadeDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UDecalComponent::GetFadeDuration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetFadeDuration"));

	UDecalComponent_GetFadeDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetDecalMaterial"));

	UDecalComponent_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.DecalComponent.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UDecalComponent::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.CreateDynamicMaterialInstance"));

	UDecalComponent_CreateDynamicMaterialInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UDecalComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(DecalMaterial, UMaterialInterface);
}

void UDecalComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(DecalMaterial);
}

void APhysicsVolume::AfterRead()
{
	AVolume::AfterRead();

}

void APhysicsVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void ADefaultPhysicsVolume::AfterRead()
{
	APhysicsVolume::AfterRead();

}

void ADefaultPhysicsVolume::BeforeDelete()
{
	APhysicsVolume::BeforeDelete();

}

void UDemoNetConnection::AfterRead()
{
	UNetConnection::AfterRead();

}

void UDemoNetConnection::BeforeDelete()
{
	UNetConnection::BeforeDelete();

}

void UDemoNetDriver::AfterRead()
{
	UNetDriver::AfterRead();

}

void UDemoNetDriver::BeforeDelete()
{
	UNetDriver::BeforeDelete();

}

void UPendingNetGame::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(NetDriver, UNetDriver);
	READ_PTR_FULL(DemoNetDriver, UDemoNetDriver);
}

void UPendingNetGame::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(NetDriver);
	DELE_PTR_FULL(DemoNetDriver);
}

void UDemoPendingNetGame::AfterRead()
{
	UPendingNetGame::AfterRead();

}

void UDemoPendingNetGame::BeforeDelete()
{
	UPendingNetGame::BeforeDelete();

}

void UDestructibleInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UDestructibleInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UTextureLODSettings::AfterRead()
{
	UObject::AfterRead();

}

void UTextureLODSettings::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDeviceProfile::AfterRead()
{
	UTextureLODSettings::AfterRead();

	READ_PTR_FULL(Parent, UObject);
}

void UDeviceProfile::BeforeDelete()
{
	UTextureLODSettings::BeforeDelete();

	DELE_PTR_FULL(Parent);
}

void UDeviceProfileFragment::AfterRead()
{
	UObject::AfterRead();

}

void UDeviceProfileFragment::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDeviceProfileManager::AfterRead()
{
	UObject::AfterRead();

}

void UDeviceProfileManager::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDialogueSoundWaveProxy::AfterRead()
{
	USoundBase::AfterRead();

}

void UDialogueSoundWaveProxy::BeforeDelete()
{
	USoundBase::BeforeDelete();

}

void UDialogueVoice::AfterRead()
{
	UObject::AfterRead();

}

void UDialogueVoice::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDialogueWave::AfterRead()
{
	UObject::AfterRead();

}

void UDialogueWave::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.Light.ToggleEnabled
// ()
void ALight::ToggleEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.ToggleEnabled"));

	ALight_ToggleEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetLightFunctionScale
// ()
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionScale"));

	ALight_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetLightFunctionMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionMaterial"));

	ALight_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetLightFunctionFadeDistance
// ()
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionFadeDistance"));

	ALight_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightColor"));

	ALight_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetEnabled"));

	ALight_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetCastShadows
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetCastShadows"));

	ALight_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetBrightness
// ()
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetBrightness"));

	ALight_SetBrightness_Params params;
	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.SetAffectTranslucentLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALight::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetAffectTranslucentLighting"));

	ALight_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.OnRep_bEnabled
// ()
void ALight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.OnRep_bEnabled"));

	ALight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Light.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ALight::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.IsEnabled"));

	ALight_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Light.GetLightColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor ALight::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetLightColor"));

	ALight_GetLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Light.GetBrightness
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float ALight::GetBrightness()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetBrightness"));

	ALight_GetBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ALight::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(LightComponent, ULightComponent);
}

void ALight::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(LightComponent);
}

void ADirectionalLight::AfterRead()
{
	ALight::AfterRead();

}

void ADirectionalLight::BeforeDelete()
{
	ALight::BeforeDelete();

}

// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction"));

	UDirectionalLightComponent_SetShadowDistanceFadeoutFraction_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetShadowAmount
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetShadowAmount(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowAmount"));

	UDirectionalLightComponent_SetShadowAmount_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness"));

	UDirectionalLightComponent_SetOcclusionMaskDarkness_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
// ()
// Parameters:
// struct FVector                 NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetLightShaftOverrideDirection(const struct FVector& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection"));

	UDirectionalLightComponent_SetLightShaftOverrideDirection_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion"));

	UDirectionalLightComponent_SetEnableLightShaftOcclusion_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight"));

	UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight"));

	UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
// ()
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades"));

	UDirectionalLightComponent_SetDynamicShadowCascades_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction"));

	UDirectionalLightComponent_SetCascadeTransitionFraction_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent"));

	UDirectionalLightComponent_SetCascadeDistributionExponent_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
// ()
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetAtmosphereSunLightIndex(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex"));

	UDirectionalLightComponent_SetAtmosphereSunLightIndex_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.DirectionalLightComponent.SetAtmosphereSunLight
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UDirectionalLightComponent::SetAtmosphereSunLight(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetAtmosphereSunLight"));

	UDirectionalLightComponent_SetAtmosphereSunLight_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UDirectionalLightComponent::AfterRead()
{
	ULightComponent::AfterRead();

}

void UDirectionalLightComponent::BeforeDelete()
{
	ULightComponent::BeforeDelete();

}

void UDistribution::AfterRead()
{
	UObject::AfterRead();

}

void UDistribution::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDistributionFloat::AfterRead()
{
	UDistribution::AfterRead();

}

void UDistributionFloat::BeforeDelete()
{
	UDistribution::BeforeDelete();

}

void UDistributionFloatConstant::AfterRead()
{
	UDistributionFloat::AfterRead();

}

void UDistributionFloatConstant::BeforeDelete()
{
	UDistributionFloat::BeforeDelete();

}

void UDistributionFloatConstantCurve::AfterRead()
{
	UDistributionFloat::AfterRead();

}

void UDistributionFloatConstantCurve::BeforeDelete()
{
	UDistributionFloat::BeforeDelete();

}

void UDistributionFloatParameterBase::AfterRead()
{
	UDistributionFloatConstant::AfterRead();

}

void UDistributionFloatParameterBase::BeforeDelete()
{
	UDistributionFloatConstant::BeforeDelete();

}

void UDistributionFloatParticleParameter::AfterRead()
{
	UDistributionFloatParameterBase::AfterRead();

}

void UDistributionFloatParticleParameter::BeforeDelete()
{
	UDistributionFloatParameterBase::BeforeDelete();

}

void UDistributionFloatUniform::AfterRead()
{
	UDistributionFloat::AfterRead();

}

void UDistributionFloatUniform::BeforeDelete()
{
	UDistributionFloat::BeforeDelete();

}

void UDistributionFloatUniformCurve::AfterRead()
{
	UDistributionFloat::AfterRead();

}

void UDistributionFloatUniformCurve::BeforeDelete()
{
	UDistributionFloat::BeforeDelete();

}

void UDistributionVector::AfterRead()
{
	UDistribution::AfterRead();

}

void UDistributionVector::BeforeDelete()
{
	UDistribution::BeforeDelete();

}

void UDistributionVectorConstant::AfterRead()
{
	UDistributionVector::AfterRead();

}

void UDistributionVectorConstant::BeforeDelete()
{
	UDistributionVector::BeforeDelete();

}

void UDistributionVectorConstantCurve::AfterRead()
{
	UDistributionVector::AfterRead();

}

void UDistributionVectorConstantCurve::BeforeDelete()
{
	UDistributionVector::BeforeDelete();

}

void UDistributionVectorParameterBase::AfterRead()
{
	UDistributionVectorConstant::AfterRead();

}

void UDistributionVectorParameterBase::BeforeDelete()
{
	UDistributionVectorConstant::BeforeDelete();

}

void UDistributionVectorParticleParameter::AfterRead()
{
	UDistributionVectorParameterBase::AfterRead();

}

void UDistributionVectorParticleParameter::BeforeDelete()
{
	UDistributionVectorParameterBase::BeforeDelete();

}

void UDistributionVectorUniform::AfterRead()
{
	UDistributionVector::AfterRead();

}

void UDistributionVectorUniform::BeforeDelete()
{
	UDistributionVector::BeforeDelete();

}

void UDistributionVectorUniformCurve::AfterRead()
{
	UDistributionVector::AfterRead();

}

void UDistributionVectorUniformCurve::BeforeDelete()
{
	UDistributionVector::BeforeDelete();

}

void ADocumentationActor::AfterRead()
{
	AActor::AfterRead();

}

void ADocumentationActor::BeforeDelete()
{
	AActor::BeforeDelete();

}

void UDPICustomScalingRule::AfterRead()
{
	UObject::AfterRead();

}

void UDPICustomScalingRule::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UDrawFrustumComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(Texture, UTexture);
}

void UDrawFrustumComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(Texture);
}

// Function Engine.SphereComponent.SetSphereRadius
// ()
// Parameters:
// float                          InSphereRadius                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.SetSphereRadius"));

	USphereComponent_SetSphereRadius_Params params;
	params.InSphereRadius = InSphereRadius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SphereComponent.GetUnscaledSphereRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USphereComponent::GetUnscaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetUnscaledSphereRadius"));

	USphereComponent_GetUnscaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetShapeScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USphereComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetShapeScale"));

	USphereComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetScaledSphereRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USphereComponent::GetScaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetScaledSphereRadius"));

	USphereComponent_GetScaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USphereComponent::AfterRead()
{
	UShapeComponent::AfterRead();

}

void USphereComponent::BeforeDelete()
{
	UShapeComponent::BeforeDelete();

}

void UDrawSphereComponent::AfterRead()
{
	USphereComponent::AfterRead();

}

void UDrawSphereComponent::BeforeDelete()
{
	USphereComponent::BeforeDelete();

}

void UEdGraph::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Schema, UClass);
}

void UEdGraph::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Schema);
}

void UGraphNodeContextMenuContext::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Blueprint, UBlueprint);
	READ_PTR_FULL(Graph, UEdGraph);
	READ_PTR_FULL(Node, UEdGraphNode);
}

void UGraphNodeContextMenuContext::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Blueprint);
	DELE_PTR_FULL(Graph);
	DELE_PTR_FULL(Node);
}

void UEdGraphNode::AfterRead()
{
	UObject::AfterRead();

}

void UEdGraphNode::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UEdGraphNode_Documentation::AfterRead()
{
	UEdGraphNode::AfterRead();

}

void UEdGraphNode_Documentation::BeforeDelete()
{
	UEdGraphNode::BeforeDelete();

}

void UEdGraphPin_Deprecated::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(DefaultObject, UObject);
	READ_PTR_FULL(ParentPin, UEdGraphPin_Deprecated);
	READ_PTR_FULL(ReferencePassThroughConnection, UEdGraphPin_Deprecated);
}

void UEdGraphPin_Deprecated::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(DefaultObject);
	DELE_PTR_FULL(ParentPin);
	DELE_PTR_FULL(ReferencePassThroughConnection);
}

void UEdGraphSchema::AfterRead()
{
	UObject::AfterRead();

}

void UEdGraphSchema::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.Emitter.ToggleActive
// ()
void AEmitter::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.ToggleActive"));

	AEmitter_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetVectorParameter"));

	AEmitter_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetTemplate"));

	AEmitter_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetMaterialParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetMaterialParameter"));

	AEmitter_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetFloatParameter"));

	AEmitter_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetColorParameter"));

	AEmitter_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetActorParameter"));

	AEmitter_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.OnRep_bCurrentlyActive
// ()
void AEmitter::OnRep_bCurrentlyActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnRep_bCurrentlyActive"));

	AEmitter_OnRep_bCurrentlyActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.OnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnParticleSystemFinished"));

	AEmitter_OnParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.IsActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool AEmitter::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.IsActive"));

	AEmitter_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Emitter.Deactivate
// ()
void AEmitter::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Deactivate"));

	AEmitter_Deactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.Emitter.Activate
// ()
void AEmitter::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Activate"));

	AEmitter_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AEmitter::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(ParticleSystemComponent, UParticleSystemComponent);
}

void AEmitter::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(ParticleSystemComponent);
}

void AEmitterCameraLensEffectBase::AfterRead()
{
	AEmitter::AfterRead();

	READ_PTR_FULL(PS_CameraEffect, UParticleSystem);
	READ_PTR_FULL(PS_CameraEffectNonExtremeContent, UParticleSystem);
	READ_PTR_FULL(BaseCamera, APlayerCameraManager);
}

void AEmitterCameraLensEffectBase::BeforeDelete()
{
	AEmitter::BeforeDelete();

	DELE_PTR_FULL(PS_CameraEffect);
	DELE_PTR_FULL(PS_CameraEffectNonExtremeContent);
	DELE_PTR_FULL(BaseCamera);
}

void UViewModeUtils::AfterRead()
{
	UObject::AfterRead();

}

void UViewModeUtils::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UEngineBaseTypes::AfterRead()
{
	UObject::AfterRead();

}

void UEngineBaseTypes::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UEngineHandlerComponentFactory::AfterRead()
{
	UHandlerComponentFactory::AfterRead();

}

void UEngineHandlerComponentFactory::BeforeDelete()
{
	UHandlerComponentFactory::BeforeDelete();

}

void ULocalMessage::AfterRead()
{
	UObject::AfterRead();

}

void ULocalMessage::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UEngineMessage::AfterRead()
{
	ULocalMessage::AfterRead();

}

void UEngineMessage::BeforeDelete()
{
	ULocalMessage::BeforeDelete();

}

void UEngineTypes::AfterRead()
{
	UObject::AfterRead();

}

void UEngineTypes::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.ExponentialHeightFog.OnRep_bEnabled
// ()
void AExponentialHeightFog::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFog.OnRep_bEnabled"));

	AExponentialHeightFog_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AExponentialHeightFog::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(Component, UExponentialHeightFogComponent);
}

void AExponentialHeightFog::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(Component);
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution"));

	UExponentialHeightFogComponent_SetVolumetricFogScatteringDistribution_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFogExtinctionScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale"));

	UExponentialHeightFogComponent_SetVolumetricFogExtinctionScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFogEmissive(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive"));

	UExponentialHeightFogComponent_SetVolumetricFogEmissive_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance"));

	UExponentialHeightFogComponent_SetVolumetricFogDistance_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
// ()
// Parameters:
// struct FColor                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFogAlbedo(const struct FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo"));

	UExponentialHeightFogComponent_SetVolumetricFogAlbedo_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetVolumetricFog(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetVolumetricFog"));

	UExponentialHeightFogComponent_SetVolumetricFog_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetStartDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetStartDistance"));

	UExponentialHeightFogComponent_SetStartDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance"));

	UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
// ()
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetInscatteringTextureTint(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint"));

	UExponentialHeightFogComponent_SetInscatteringTextureTint_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle"));

	UExponentialHeightFogComponent_SetInscatteringColorCubemapAngle_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
// ()
// Parameters:
// class UTextureCube*            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetInscatteringColorCubemap(class UTextureCube* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap"));

	UExponentialHeightFogComponent_SetInscatteringColorCubemap_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance"));

	UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity"));

	UExponentialHeightFogComponent_SetFogMaxOpacity_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
// ()
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFogInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor"));

	UExponentialHeightFogComponent_SetFogInscatteringColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff"));

	UExponentialHeightFogComponent_SetFogHeightFalloff_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFogDensity
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFogDensity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogDensity"));

	UExponentialHeightFogComponent_SetFogDensity_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetFogCutoffDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance"));

	UExponentialHeightFogComponent_SetFogCutoffDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringExponent_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
// ()
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UExponentialHeightFogComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(InscatteringColorCubemap, UTextureCube);
}

void UExponentialHeightFogComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(InscatteringColorCubemap);
}

// Function Engine.Exporter.ScriptRunAssetExportTask
// ()
// Parameters:
// class UAssetExportTask*        Task                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UExporter::ScriptRunAssetExportTask(class UAssetExportTask* Task)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Exporter.ScriptRunAssetExportTask"));

	UExporter_ScriptRunAssetExportTask_Params params;
	params.Task = Task;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Exporter.RunAssetExportTasks
// ()
// Parameters:
// TArray<class UAssetExportTask*> ExportTasks                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UExporter::RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Exporter.RunAssetExportTasks"));

	UExporter_RunAssetExportTasks_Params params;
	params.ExportTasks = ExportTasks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.Exporter.RunAssetExportTask
// ()
// Parameters:
// class UAssetExportTask*        Task                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UExporter::RunAssetExportTask(class UAssetExportTask* Task)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Exporter.RunAssetExportTask"));

	UExporter_RunAssetExportTask_Params params;
	params.Task = Task;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UExporter::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SupportedClass, UClass);
	READ_PTR_FULL(ExportRootScope, UObject);
	READ_PTR_FULL(ExportTask, UAssetExportTask);
}

void UExporter::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SupportedClass);
	DELE_PTR_FULL(ExportRootScope);
	DELE_PTR_FULL(ExportTask);
}

void UFont::AfterRead()
{
	UObject::AfterRead();

}

void UFont::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UFontFace::AfterRead()
{
	UObject::AfterRead();

}

void UFontFace::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UFontImportOptions::AfterRead()
{
	UObject::AfterRead();

}

void UFontImportOptions::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UForceFeedbackAttenuation::AfterRead()
{
	UObject::AfterRead();

}

void UForceFeedbackAttenuation::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.ForceFeedbackComponent.Stop
// ()
void UForceFeedbackComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.Stop"));

	UForceFeedbackComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
// ()
// Parameters:
// float                          NewIntensityMultiplier         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.SetIntensityMultiplier"));

	UForceFeedbackComponent_SetIntensityMultiplier_Params params;
	params.NewIntensityMultiplier = NewIntensityMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
// ()
// Parameters:
// class UForceFeedbackEffect*    NewForceFeedbackEffect         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UForceFeedbackComponent::SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect"));

	UForceFeedbackComponent_SetForceFeedbackEffect_Params params;
	params.NewForceFeedbackEffect = NewForceFeedbackEffect;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ForceFeedbackComponent.Play
// ()
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UForceFeedbackComponent::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.Play"));

	UForceFeedbackComponent_Play_Params params;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
// ()
// Parameters:
// struct FForceFeedbackAttenuationSettings OutAttenuationSettings         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UForceFeedbackComponent::BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply"));

	UForceFeedbackComponent_BP_GetAttenuationSettingsToApply_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAttenuationSettings != nullptr)
		*OutAttenuationSettings = params.OutAttenuationSettings;


	return params.ReturnValue;
}


// Function Engine.ForceFeedbackComponent.AdjustAttenuation
// ()
// Parameters:
// struct FForceFeedbackAttenuationSettings InAttenuationSettings          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UForceFeedbackComponent::AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ForceFeedbackComponent.AdjustAttenuation"));

	UForceFeedbackComponent_AdjustAttenuation_Params params;
	params.InAttenuationSettings = InAttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UForceFeedbackComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(ForceFeedbackEffect, UForceFeedbackEffect);
	READ_PTR_FULL(AttenuationSettings, UForceFeedbackAttenuation);
}

void UForceFeedbackComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(ForceFeedbackEffect);
	DELE_PTR_FULL(AttenuationSettings);
}

void UForceFeedbackEffect::AfterRead()
{
	UObject::AfterRead();

}

void UForceFeedbackEffect::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UGameEngine::AfterRead()
{
	UEngine::AfterRead();

	READ_PTR_FULL(GameInstance, UGameInstance);
}

void UGameEngine::BeforeDelete()
{
	UEngine::BeforeDelete();

	DELE_PTR_FULL(GameInstance);
}

void AGameNetworkManager::AfterRead()
{
	AInfo::AfterRead();

}

void AGameNetworkManager::BeforeDelete()
{
	AInfo::BeforeDelete();

}

// Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bShouldBlockOnUnload           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr"));

	UGameplayStatics_UnloadStreamLevelBySoftObjectPtr_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;
	params.bShouldBlockOnUnload = bShouldBlockOnUnload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.UnloadStreamLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bShouldBlockOnUnload           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.UnloadStreamLevel"));

	UGameplayStatics_UnloadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.LatentInfo = LatentInfo;
	params.bShouldBlockOnUnload = bShouldBlockOnUnload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutLaunchVelocity              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ArcParam                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc"));

	UGameplayStatics_SuggestProjectileVelocity_CustomArc_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.EndPos = EndPos;
	params.OverrideGravityZ = OverrideGravityZ;
	params.ArcParam = ArcParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLaunchVelocity != nullptr)
		*OutLaunchVelocity = params.OutLaunchVelocity;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSoundAttached
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAttached"));

	UGameplayStatics_SpawnSoundAttached_Params params;
	params.Sound = Sound;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSoundAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAtLocation"));

	UGameplayStatics_SpawnSoundAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSound2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistAcrossLevelTransition  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSound2D"));

	UGameplayStatics_SpawnSound2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnObject
// ()
// Parameters:
// class UClass*                  ObjectClass                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UGameplayStatics::SpawnObject(class UClass* ObjectClass, class UObject* Outer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnObject"));

	UGameplayStatics_SpawnObject_Params params;
	params.ObjectClass = ObjectClass;
	params.Outer = Outer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnForceFeedbackAttached
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          IntensityMultiplier            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UForceFeedbackAttenuation* AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UForceFeedbackComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UForceFeedbackComponent* UGameplayStatics::SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnForceFeedbackAttached"));

	UGameplayStatics_SpawnForceFeedbackAttached_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.bLooping = bLooping;
	params.IntensityMultiplier = IntensityMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          IntensityMultiplier            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UForceFeedbackAttenuation* AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UForceFeedbackComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UForceFeedbackComponent* UGameplayStatics::SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation"));

	UGameplayStatics_SpawnForceFeedbackAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bLooping = bLooping;
	params.IntensityMultiplier = IntensityMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAttached
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EPSCPoolMethod          PoolingMethod                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoActivate                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAttached"));

	UGameplayStatics_SpawnEmitterAttached_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.LocationType = LocationType;
	params.bAutoDestroy = bAutoDestroy;
	params.PoolingMethod = PoolingMethod;
	params.bAutoActivate = bAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EPSCPoolMethod          PoolingMethod                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoActivateSystem            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAtLocation"));

	UGameplayStatics_SpawnEmitterAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.EmitterTemplate = EmitterTemplate;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.bAutoDestroy = bAutoDestroy;
	params.PoolingMethod = PoolingMethod;
	params.bAutoActivateSystem = bAutoActivateSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAttached
// ()
// Parameters:
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAttached"));

	UGameplayStatics_SpawnDialogueAttached_Params params;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAtLocation"));

	UGameplayStatics_SpawnDialogueAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogue2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogue2D"));

	UGameplayStatics_SpawnDialogue2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAttached
// ()
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UDecalComponent* UGameplayStatics::SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAttached"));

	UGameplayStatics_SpawnDecalAttached_Params params;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.LifeSpan = LifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UDecalComponent* UGameplayStatics::SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAtLocation"));

	UGameplayStatics_SpawnDecalAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LifeSpan = LifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetWorldOriginLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetWorldOriginLocation"));

	UGameplayStatics_SetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetViewportMouseCaptureMode
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EMouseCaptureMode       MouseCaptureMode               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetViewportMouseCaptureMode(class UObject* WorldContextObject, Engine_EMouseCaptureMode MouseCaptureMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetViewportMouseCaptureMode"));

	UGameplayStatics_SetViewportMouseCaptureMode_Params params;
	params.WorldContextObject = WorldContextObject;
	params.MouseCaptureMode = MouseCaptureMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetSubtitlesEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetSubtitlesEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetSubtitlesEnabled"));

	UGameplayStatics_SetSubtitlesEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetSoundMixClassOverride
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundClass*             InSoundClass                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bApplyToChildren               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetSoundMixClassOverride"));

	UGameplayStatics_SetSoundMixClassOverride_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;
	params.InSoundClass = InSoundClass;
	params.Volume = Volume;
	params.Pitch = Pitch;
	params.FadeInTime = FadeInTime;
	params.bApplyToChildren = bApplyToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetSoundClassDistanceScale
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundClass*             SoundClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DistanceAttenuationScale       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TimeSec                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetSoundClassDistanceScale"));

	UGameplayStatics_SetSoundClassDistanceScale_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SoundClass = SoundClass;
	params.DistanceAttenuationScale = DistanceAttenuationScale;
	params.TimeSec = TimeSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetPlayerControllerID
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetPlayerControllerID(class APlayerController* Player, int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetPlayerControllerID"));

	UGameplayStatics_SetPlayerControllerID_Params params;
	params.Player = Player;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetMaxAudioChannelsScaled
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxChannelCountScale           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetMaxAudioChannelsScaled"));

	UGameplayStatics_SetMaxAudioChannelsScaled_Params params;
	params.WorldContextObject = WorldContextObject;
	params.MaxChannelCountScale = MaxChannelCountScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetGlobalTimeDilation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TimeDilation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGlobalTimeDilation"));

	UGameplayStatics_SetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TimeDilation = TimeDilation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetGlobalPitchModulation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchModulation                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TimeSec                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGlobalPitchModulation"));

	UGameplayStatics_SetGlobalPitchModulation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PitchModulation = PitchModulation;
	params.TimeSec = TimeSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetGlobalListenerFocusParameters
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FocusAzimuthScale              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NonFocusAzimuthScale           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FocusDistanceScale             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NonFocusDistanceScale          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FocusVolumeScale               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NonFocusVolumeScale            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FocusPriorityScale             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NonFocusPriorityScale          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGlobalListenerFocusParameters"));

	UGameplayStatics_SetGlobalListenerFocusParameters_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FocusAzimuthScale = FocusAzimuthScale;
	params.NonFocusAzimuthScale = NonFocusAzimuthScale;
	params.FocusDistanceScale = FocusDistanceScale;
	params.NonFocusDistanceScale = NonFocusDistanceScale;
	params.FocusVolumeScale = FocusVolumeScale;
	params.NonFocusVolumeScale = NonFocusVolumeScale;
	params.FocusPriorityScale = FocusPriorityScale;
	params.NonFocusPriorityScale = NonFocusPriorityScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetGamePaused
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPaused                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::SetGamePaused(class UObject* WorldContextObject, bool bPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGamePaused"));

	UGameplayStatics_SetGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetForceDisableSplitscreen
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDisable                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetForceDisableSplitscreen"));

	UGameplayStatics_SetForceDisableSplitscreen_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetEnableWorldRendering
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetEnableWorldRendering"));

	UGameplayStatics_SetEnableWorldRendering_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SetBaseSoundMix
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMix*               InSoundMix                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetBaseSoundMix"));

	UGameplayStatics_SetBaseSoundMix_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMix = InSoundMix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.SaveGameToSlot
// ()
// Parameters:
// class USaveGame*               SaveGameObject                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SaveGameToSlot"));

	UGameplayStatics_SaveGameToSlot_Params params;
	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.RemovePlayer
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDestroyPawn                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::RemovePlayer(class APlayerController* Player, bool bDestroyPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.RemovePlayer"));

	UGameplayStatics_RemovePlayer_Params params;
	params.Player = Player;
	params.bDestroyPawn = bDestroyPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UGameplayStatics::RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal"));

	UGameplayStatics_RebaseZeroOriginOntoLocal_Params params;
	params.WorldContextObject = WorldContextObject;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.RebaseLocalOriginOntoZero
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UGameplayStatics::RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.RebaseLocalOriginOntoZero"));

	UGameplayStatics_RebaseLocalOriginOntoZero_Params params;
	params.WorldContextObject = WorldContextObject;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PushSoundMixModifier
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PushSoundMixModifier"));

	UGameplayStatics_PushSoundMixModifier_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.ProjectWorldToScreen
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldPosition                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPlayerViewportRelative        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ProjectWorldToScreen"));

	UGameplayStatics_ProjectWorldToScreen_Params params;
	params.Player = Player;
	params.WorldPosition = WorldPosition;
	params.bPlayerViewportRelative = bPlayerViewportRelative;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PrimeSound
// ()
// Parameters:
// class USoundBase*              InSound                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PrimeSound(class USoundBase* InSound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PrimeSound"));

	UGameplayStatics_PrimeSound_Params params;
	params.InSound = InSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PopSoundMixModifier
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PopSoundMixModifier"));

	UGameplayStatics_PopSoundMixModifier_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PlayWorldCameraShake
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Epicenter                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InnerRadius                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OuterRadius                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Falloff                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bOrientShakeTowardsEpicenter   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayWorldCameraShake"));

	UGameplayStatics_PlayWorldCameraShake_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Shake = Shake;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PlaySoundAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  OwningActor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySoundAtLocation"));

	UGameplayStatics_PlaySoundAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.OwningActor = OwningActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PlaySound2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  OwningActor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsUISound                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySound2D"));

	UGameplayStatics_PlaySound2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.OwningActor = OwningActor;
	params.bIsUISound = bIsUISound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PlayDialogueAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogueAtLocation"));

	UGameplayStatics_PlayDialogueAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.PlayDialogue2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogue2D"));

	UGameplayStatics_PlayDialogue2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.ParseOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UGameplayStatics::ParseOption(const struct FString& Options, const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ParseOption"));

	UGameplayStatics_ParseOption_Params params;
	params.Options = Options;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Options                        (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bAbsolute, const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr"));

	UGameplayStatics_OpenLevelBySoftObjectPtr_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.OpenLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Options                        (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.OpenLevel"));

	UGameplayStatics_OpenLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.MakeHitResult
// ()
// Parameters:
// bool                           bBlockingHit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bInitialOverlap                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ImpactPoint                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ImpactNormal                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*       PhysMat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   HitBoneName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            HitItem                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            FaceIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
struct FHitResult UGameplayStatics::MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.MakeHitResult"));

	UGameplayStatics_MakeHitResult_Params params;
	params.bBlockingHit = bBlockingHit;
	params.bInitialOverlap = bInitialOverlap;
	params.Time = Time;
	params.Distance = Distance;
	params.Location = Location;
	params.ImpactPoint = ImpactPoint;
	params.Normal = Normal;
	params.ImpactNormal = ImpactNormal;
	params.PhysMat = PhysMat;
	params.HitActor = HitActor;
	params.HitComponent = HitComponent;
	params.HitBoneName = HitBoneName;
	params.HitItem = HitItem;
	params.FaceIndex = FaceIndex;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMakeVisibleAfterLoad          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShouldBlockOnLoad             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UGameplayStatics::LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr"));

	UGameplayStatics_LoadStreamLevelBySoftObjectPtr_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.LoadStreamLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bMakeVisibleAfterLoad          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShouldBlockOnLoad             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UGameplayStatics::LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadStreamLevel"));

	UGameplayStatics_LoadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.LoadGameFromSlot
// ()
// Parameters:
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USaveGame* UGameplayStatics::LoadGameFromSlot(const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadGameFromSlot"));

	UGameplayStatics_LoadGameFromSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsSplitscreenForceDisabled
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::IsSplitscreenForceDisabled(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.IsSplitscreenForceDisabled"));

	UGameplayStatics_IsSplitscreenForceDisabled_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsGamePaused
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::IsGamePaused(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.IsGamePaused"));

	UGameplayStatics_IsGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.HasOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InKey                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::HasOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.HasOption"));

	UGameplayStatics_HasOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.HasLaunchOption
// ()
// Parameters:
// struct FString                 OptionToCheck                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::HasLaunchOption(const struct FString& OptionToCheck)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.HasLaunchOption"));

	UGameplayStatics_HasLaunchOption_Params params;
	params.OptionToCheck = OptionToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GrassOverlappingSphereCount
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*             StaticMesh                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 CenterPosition                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameplayStatics::GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GrassOverlappingSphereCount"));

	UGameplayStatics_GrassOverlappingSphereCount_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StaticMesh = StaticMesh;
	params.CenterPosition = CenterPosition;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldOriginLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntVector UGameplayStatics::GetWorldOriginLocation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldOriginLocation"));

	UGameplayStatics_GetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldDeltaSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetWorldDeltaSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldDeltaSeconds"));

	UGameplayStatics_GetWorldDeltaSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetViewProjectionMatrix
// ()
// Parameters:
// struct FMinimalViewInfo        DesiredView                    (Parm, NativeAccessSpecifierPublic)
// struct FMatrix                 ViewMatrix                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ProjectionMatrix               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ViewProjectionMatrix           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UGameplayStatics::GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetViewProjectionMatrix"));

	UGameplayStatics_GetViewProjectionMatrix_Params params;
	params.DesiredView = DesiredView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ViewMatrix != nullptr)
		*ViewMatrix = params.ViewMatrix;
	if (ProjectionMatrix != nullptr)
		*ProjectionMatrix = params.ProjectionMatrix;
	if (ViewProjectionMatrix != nullptr)
		*ViewProjectionMatrix = params.ViewProjectionMatrix;

}


// Function Engine.GameplayStatics.GetViewportMouseCaptureMode
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EMouseCaptureMode       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
Engine_EMouseCaptureMode UGameplayStatics::GetViewportMouseCaptureMode(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetViewportMouseCaptureMode"));

	UGameplayStatics_GetViewportMouseCaptureMode_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetUnpausedTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetUnpausedTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetUnpausedTimeSeconds"));

	UGameplayStatics_GetUnpausedTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetTimeSeconds"));

	UGameplayStatics_GetTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetSurfaceType
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TEnumAsByte<PhysicsCore_EPhysicalSurface> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<PhysicsCore_EPhysicalSurface> UGameplayStatics::GetSurfaceType(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetSurfaceType"));

	UGameplayStatics_GetSurfaceType_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetStreamingLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULevelStreaming* UGameplayStatics::GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetStreamingLevel"));

	UGameplayStatics_GetStreamingLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetRealTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetRealTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetRealTimeSeconds"));

	UGameplayStatics_GetRealTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerPawn
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APawn* UGameplayStatics::GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerPawn"));

	UGameplayStatics_GetPlayerPawn_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerControllerID
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameplayStatics::GetPlayerControllerID(class APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerControllerID"));

	UGameplayStatics_GetPlayerControllerID_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerControllerFromID
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* UGameplayStatics::GetPlayerControllerFromID(class UObject* WorldContextObject, int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerControllerFromID"));

	UGameplayStatics_GetPlayerControllerFromID_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerController
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* UGameplayStatics::GetPlayerController(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerController"));

	UGameplayStatics_GetPlayerController_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCharacter
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ACharacter* UGameplayStatics::GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCharacter"));

	UGameplayStatics_GetPlayerCharacter_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCameraManager
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerCameraManager* UGameplayStatics::GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCameraManager"));

	UGameplayStatics_GetPlayerCameraManager_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlatformName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UGameplayStatics::GetPlatformName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlatformName"));

	UGameplayStatics_GetPlatformName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetObjectClass
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* UGameplayStatics::GetObjectClass(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetObjectClass"));

	UGameplayStatics_GetObjectClass_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetMaxAudioChannelCount
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameplayStatics::GetMaxAudioChannelCount(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetMaxAudioChannelCount"));

	UGameplayStatics_GetMaxAudioChannelCount_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetKeyValue
// ()
// Parameters:
// struct FString                 Pair                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Value                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetKeyValue"));

	UGameplayStatics_GetKeyValue_Params params;
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;

}


// Function Engine.GameplayStatics.GetIntOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            DefaultValue                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameplayStatics::GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetIntOption"));

	UGameplayStatics_GetIntOption_Params params;
	params.Options = Options;
	params.Key = Key;
	params.DefaultValue = DefaultValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGlobalTimeDilation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetGlobalTimeDilation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGlobalTimeDilation"));

	UGameplayStatics_GetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameState
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameStateBase*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AGameStateBase* UGameplayStatics::GetGameState(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameState"));

	UGameplayStatics_GetGameState_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameMode
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameModeBase*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AGameModeBase* UGameplayStatics::GetGameMode(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameMode"));

	UGameplayStatics_GetGameMode_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UGameInstance* UGameplayStatics::GetGameInstance(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameInstance"));

	UGameplayStatics_GetGameInstance_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetEnableWorldRendering
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::GetEnableWorldRendering(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetEnableWorldRendering"));

	UGameplayStatics_GetEnableWorldRendering_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetCurrentReverbEffect
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UReverbEffect*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UReverbEffect* UGameplayStatics::GetCurrentReverbEffect(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetCurrentReverbEffect"));

	UGameplayStatics_GetCurrentReverbEffect_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetCurrentLevelName
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRemovePrefixString            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UGameplayStatics::GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetCurrentLevelName"));

	UGameplayStatics_GetCurrentLevelName_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bRemovePrefixString = bRemovePrefixString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetClosestListenerLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaximumRange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAllowAttenuationOverride      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ListenerPosition               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector* ListenerPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetClosestListenerLocation"));

	UGameplayStatics_GetClosestListenerLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.MaximumRange = MaximumRange;
	params.bAllowAttenuationOverride = bAllowAttenuationOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ListenerPosition != nullptr)
		*ListenerPosition = params.ListenerPosition;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAudioTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::GetAudioTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAudioTimeSeconds"));

	UGameplayStatics_GetAudioTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAllActorsWithTag
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UGameplayStatics::GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsWithTag"));

	UGameplayStatics_GetAllActorsWithTag_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.GameplayStatics.GetAllActorsWithInterface
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UGameplayStatics::GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsWithInterface"));

	UGameplayStatics_GetAllActorsWithInterface_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.GameplayStatics.GetAllActorsOfClassWithTag
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UGameplayStatics::GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, const struct FName& Tag, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsOfClassWithTag"));

	UGameplayStatics_GetAllActorsOfClassWithTag_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.GameplayStatics.GetAllActorsOfClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UGameplayStatics::GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsOfClass"));

	UGameplayStatics_GetAllActorsOfClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

}


// Function Engine.GameplayStatics.GetActorOfClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UGameplayStatics::GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorOfClass"));

	UGameplayStatics_GetActorOfClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetActorArrayBounds
// ()
// Parameters:
// TArray<class AActor*>          Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Center                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayBounds"));

	UGameplayStatics_GetActorArrayBounds_Params params;
	params.Actors = Actors;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Center != nullptr)
		*Center = params.Center;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;

}


// Function Engine.GameplayStatics.GetActorArrayAverageLocation
// ()
// Parameters:
// TArray<class AActor*>          Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UGameplayStatics::GetActorArrayAverageLocation(TArray<class AActor*> Actors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayAverageLocation"));

	UGameplayStatics_GetActorArrayAverageLocation_Params params;
	params.Actors = Actors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAccurateRealTime
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PartialSeconds                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAccurateRealTime"));

	UGameplayStatics_GetAccurateRealTime_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (PartialSeconds != nullptr)
		*PartialSeconds = params.PartialSeconds;

}


// Function Engine.GameplayStatics.FlushLevelStreaming
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::FlushLevelStreaming(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FlushLevelStreaming"));

	UGameplayStatics_FlushLevelStreaming_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.FinishSpawningActor
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UGameplayStatics::FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FinishSpawningActor"));

	UGameplayStatics_FinishSpawningActor_Params params;
	params.Actor = Actor;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.FindCollisionUV
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int                            UVChannel                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               UV                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FindCollisionUV"));

	UGameplayStatics_FindCollisionUV_Params params;
	params.Hit = Hit;
	params.UVChannel = UVChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (UV != nullptr)
		*UV = params.UV;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.EnableLiveStreaming
// ()
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::EnableLiveStreaming(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.EnableLiveStreaming"));

	UGameplayStatics_EnableLiveStreaming_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.DoesSaveGameExist
// ()
// Parameters:
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::DoesSaveGameExist(const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DoesSaveGameExist"));

	UGameplayStatics_DoesSaveGameExist_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeprojectScreenToWorld
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ScreenPosition                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeprojectScreenToWorld"));

	UGameplayStatics_DeprojectScreenToWorld_Params params;
	params.Player = Player;
	params.ScreenPosition = ScreenPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeleteGameInSlot
// ()
// Parameters:
// struct FString                 SlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::DeleteGameInSlot(const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeleteGameInSlot"));

	UGameplayStatics_DeleteGameInSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeactivateReverbEffect
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeactivateReverbEffect"));

	UGameplayStatics_DeactivateReverbEffect_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TagName = TagName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.CreateSound2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*       ConcurrencySettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPersistAcrossLevelTransition  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UAudioComponent* UGameplayStatics::CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSound2D"));

	UGameplayStatics_CreateSound2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreateSaveGameObject
// ()
// Parameters:
// class UClass*                  SaveGameClass                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class USaveGame* UGameplayStatics::CreateSaveGameObject(class UClass* SaveGameClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSaveGameObject"));

	UGameplayStatics_CreateSaveGameObject_Params params;
	params.SaveGameClass = SaveGameClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreatePlayer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSpawnPlayerController         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class APlayerController* UGameplayStatics::CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreatePlayer"));

	UGameplayStatics_CreatePlayer_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;
	params.bSpawnPlayerController = bSpawnPlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ClearSoundMixModifiers
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::ClearSoundMixModifiers(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ClearSoundMixModifiers"));

	UGameplayStatics_ClearSoundMixModifiers_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.ClearSoundMixClassOverride
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundClass*             InSoundClass                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ClearSoundMixClassOverride"));

	UGameplayStatics_ClearSoundMixClassOverride_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;
	params.InSoundClass = InSoundClass;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.CancelAsyncLoading
// ()
void UGameplayStatics::CancelAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CancelAsyncLoading"));

	UGameplayStatics_CancelAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.BreakHitResult
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bBlockingHit                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bInitialOverlap                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Distance                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ImpactPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ImpactNormal                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*       PhysMat                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  HitActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     HitComponent                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   HitBoneName                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            HitItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            FaceIndex                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceStart                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TraceEnd                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BreakHitResult"));

	UGameplayStatics_BreakHitResult_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bBlockingHit != nullptr)
		*bBlockingHit = params.bBlockingHit;
	if (bInitialOverlap != nullptr)
		*bInitialOverlap = params.bInitialOverlap;
	if (Time != nullptr)
		*Time = params.Time;
	if (Distance != nullptr)
		*Distance = params.Distance;
	if (Location != nullptr)
		*Location = params.Location;
	if (ImpactPoint != nullptr)
		*ImpactPoint = params.ImpactPoint;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (ImpactNormal != nullptr)
		*ImpactNormal = params.ImpactNormal;
	if (PhysMat != nullptr)
		*PhysMat = params.PhysMat;
	if (HitActor != nullptr)
		*HitActor = params.HitActor;
	if (HitComponent != nullptr)
		*HitComponent = params.HitComponent;
	if (HitBoneName != nullptr)
		*HitBoneName = params.HitBoneName;
	if (HitItem != nullptr)
		*HitItem = params.HitItem;
	if (FaceIndex != nullptr)
		*FaceIndex = params.FaceIndex;
	if (TraceStart != nullptr)
		*TraceStart = params.TraceStart;
	if (TraceEnd != nullptr)
		*TraceEnd = params.TraceEnd;

}


// Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TossVelocity                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 StartLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 EndLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LaunchSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CollisionRadius                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFavorHighArc                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity"));

	UGameplayStatics_BlueprintSuggestProjectileVelocity_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.LaunchSpeed = LaunchSpeed;
	params.OverrideGravityZ = OverrideGravityZ;
	params.TraceOption = TraceOption;
	params.CollisionRadius = CollisionRadius;
	params.bFavorHighArc = bFavorHighArc;
	params.bDrawDebug = bDrawDebug;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FVector>         OutPathPositions               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FVector                 OutLastTraceDestination        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTracePath                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ProjectileRadius               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawDebugTime                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SimFrequency                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxSimTime                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel"));

	UGameplayStatics_Blueprint_PredictProjectilePath_ByTraceChannel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.LaunchVelocity = LaunchVelocity;
	params.bTracePath = bTracePath;
	params.ProjectileRadius = ProjectileRadius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.DrawDebugTime = DrawDebugTime;
	params.SimFrequency = SimFrequency;
	params.MaxSimTime = MaxSimTime;
	params.OverrideGravityZ = OverrideGravityZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;
	if (OutPathPositions != nullptr)
		*OutPathPositions = params.OutPathPositions;
	if (OutLastTraceDestination != nullptr)
		*OutLastTraceDestination = params.OutLastTraceDestination;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FVector>         OutPathPositions               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FVector                 OutLastTraceDestination        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTracePath                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ProjectileRadius               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawDebugTime                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SimFrequency                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxSimTime                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType"));

	UGameplayStatics_Blueprint_PredictProjectilePath_ByObjectType_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.LaunchVelocity = LaunchVelocity;
	params.bTracePath = bTracePath;
	params.ProjectileRadius = ProjectileRadius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.DrawDebugTime = DrawDebugTime;
	params.SimFrequency = SimFrequency;
	params.MaxSimTime = MaxSimTime;
	params.OverrideGravityZ = OverrideGravityZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;
	if (OutPathPositions != nullptr)
		*OutPathPositions = params.OutPathPositions;
	if (OutLastTraceDestination != nullptr)
		*OutLastTraceDestination = params.OutLastTraceDestination;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPredictProjectilePathParams PredictParams                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPredictProjectilePathResult PredictResult                  (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced"));

	UGameplayStatics_Blueprint_PredictProjectilePath_Advanced_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PredictParams = PredictParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PredictResult != nullptr)
		*PredictResult = params.PredictResult;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UGameplayStatics::BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromClass"));

	UGameplayStatics_BeginSpawningActorFromClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*              Blueprint                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UGameplayStatics::BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint"));

	UGameplayStatics_BeginSpawningActorFromBlueprint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Blueprint = Blueprint;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// Engine_ESpawnActorCollisionHandlingMethod CollisionHandlingOverride      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class AActor* UGameplayStatics::BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, Engine_ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass"));

	UGameplayStatics_BeginDeferredActorSpawnFromClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.CollisionHandlingOverride = CollisionHandlingOverride;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AreSubtitlesEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::AreSubtitlesEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.AreSubtitlesEnabled"));

	UGameplayStatics_AreSubtitlesEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AreAnyListenersWithinRange
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaximumRange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.AreAnyListenersWithinRange"));

	UGameplayStatics_AreAnyListenersWithinRange_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.MaximumRange = MaximumRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinimumDamage                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DamageInnerRadius              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DamageOuterRadius              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DamageFalloff                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff"));

	UGameplayStatics_ApplyRadialDamageWithFalloff_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.MinimumDamage = MinimumDamage;
	params.Origin = Origin;
	params.DamageInnerRadius = DamageInnerRadius;
	params.DamageOuterRadius = DamageOuterRadius;
	params.DamageFalloff = DamageFalloff;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.DamagePreventionChannel = DamagePreventionChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamage
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDoFullDamage                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameplayStatics::ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamage"));

	UGameplayStatics_ApplyRadialDamage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyPointDamage
// ()
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HitFromDirection               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*             eventInstigator                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* eventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyPointDamage"));

	UGameplayStatics_ApplyPointDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.HitFromDirection = HitFromDirection;
	params.HitInfo = HitInfo;
	params.eventInstigator = eventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyDamage
// ()
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*             eventInstigator                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameplayStatics::ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* eventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyDamage"));

	UGameplayStatics_ApplyDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.eventInstigator = eventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AnnounceAccessibleString
// ()
// Parameters:
// struct FString                 AnnouncementString             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::AnnounceAccessibleString(const struct FString& AnnouncementString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.AnnounceAccessibleString"));

	UGameplayStatics_AnnounceAccessibleString_Params params;
	params.AnnouncementString = AnnouncementString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameplayStatics.ActivateReverbEffect
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UReverbEffect*           ReverbEffect                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Priority                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameplayStatics::ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ActivateReverbEffect"));

	UGameplayStatics_ActivateReverbEffect_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ReverbEffect = ReverbEffect;
	params.TagName = TagName;
	params.Priority = Priority;
	params.Volume = Volume;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UGameplayStatics::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UGameplayStatics::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.GameUserSettings.ValidateSettings
// ()
void UGameUserSettings::ValidateSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ValidateSettings"));

	UGameUserSettings_ValidateSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SupportsHDRDisplayOutput
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::SupportsHDRDisplayOutput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SupportsHDRDisplayOutput"));

	UGameUserSettings_SupportsHDRDisplayOutput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.SetVSyncEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetVSyncEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetVSyncEnabled"));

	UGameUserSettings_SetVSyncEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetVisualEffectQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetVisualEffectQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetVisualEffectQuality"));

	UGameUserSettings_SetVisualEffectQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetViewDistanceQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetViewDistanceQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetViewDistanceQuality"));

	UGameUserSettings_SetViewDistanceQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetToDefaults
// ()
void UGameUserSettings::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetToDefaults"));

	UGameUserSettings_SetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetTextureQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetTextureQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetTextureQuality"));

	UGameUserSettings_SetTextureQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetShadowQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetShadowQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetShadowQuality"));

	UGameUserSettings_SetShadowQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetShadingQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetShadingQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetShadingQuality"));

	UGameUserSettings_SetShadingQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetScreenResolution
// ()
// Parameters:
// struct FIntPoint               Resolution                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetScreenResolution(const struct FIntPoint& Resolution)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetScreenResolution"));

	UGameUserSettings_SetScreenResolution_Params params;
	params.Resolution = Resolution;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetResolutionScaleValueEx
// ()
// Parameters:
// float                          NewScaleValue                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetResolutionScaleValueEx"));

	UGameUserSettings_SetResolutionScaleValueEx_Params params;
	params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetResolutionScaleValue
// ()
// Parameters:
// int                            NewScaleValue                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetResolutionScaleValue(int NewScaleValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetResolutionScaleValue"));

	UGameUserSettings_SetResolutionScaleValue_Params params;
	params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetResolutionScaleNormalized
// ()
// Parameters:
// float                          NewScaleNormalized             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetResolutionScaleNormalized"));

	UGameUserSettings_SetResolutionScaleNormalized_Params params;
	params.NewScaleNormalized = NewScaleNormalized;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetPostProcessingQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetPostProcessingQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetPostProcessingQuality"));

	UGameUserSettings_SetPostProcessingQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetOverallScalabilityLevel
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetOverallScalabilityLevel(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetOverallScalabilityLevel"));

	UGameUserSettings_SetOverallScalabilityLevel_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetFullscreenMode
// ()
// Parameters:
// TEnumAsByte<Engine_EWindowMode> InFullscreenMode               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetFullscreenMode(TEnumAsByte<Engine_EWindowMode> InFullscreenMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetFullscreenMode"));

	UGameUserSettings_SetFullscreenMode_Params params;
	params.InFullscreenMode = InFullscreenMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetFrameRateLimit
// ()
// Parameters:
// float                          NewLimit                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetFrameRateLimit(float NewLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetFrameRateLimit"));

	UGameUserSettings_SetFrameRateLimit_Params params;
	params.NewLimit = NewLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetFoliageQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetFoliageQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetFoliageQuality"));

	UGameUserSettings_SetFoliageQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetDynamicResolutionEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetDynamicResolutionEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetDynamicResolutionEnabled"));

	UGameUserSettings_SetDynamicResolutionEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetBenchmarkFallbackValues
// ()
void UGameUserSettings::SetBenchmarkFallbackValues()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetBenchmarkFallbackValues"));

	UGameUserSettings_SetBenchmarkFallbackValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetAudioQualityLevel
// ()
// Parameters:
// int                            QualityLevel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetAudioQualityLevel(int QualityLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetAudioQualityLevel"));

	UGameUserSettings_SetAudioQualityLevel_Params params;
	params.QualityLevel = QualityLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SetAntiAliasingQuality
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::SetAntiAliasingQuality(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SetAntiAliasingQuality"));

	UGameUserSettings_SetAntiAliasingQuality_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.SaveSettings
// ()
void UGameUserSettings::SaveSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.SaveSettings"));

	UGameUserSettings_SaveSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.RunHardwareBenchmark
// ()
// Parameters:
// int                            WorkScale                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CPUMultiplier                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          GPUMultiplier                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.RunHardwareBenchmark"));

	UGameUserSettings_RunHardwareBenchmark_Params params;
	params.WorkScale = WorkScale;
	params.CPUMultiplier = CPUMultiplier;
	params.GPUMultiplier = GPUMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.RevertVideoMode
// ()
void UGameUserSettings::RevertVideoMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.RevertVideoMode"));

	UGameUserSettings_RevertVideoMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ResetToCurrentSettings
// ()
void UGameUserSettings::ResetToCurrentSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ResetToCurrentSettings"));

	UGameUserSettings_ResetToCurrentSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.LoadSettings
// ()
// Parameters:
// bool                           bForceReload                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::LoadSettings(bool bForceReload)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.LoadSettings"));

	UGameUserSettings_LoadSettings_Params params;
	params.bForceReload = bForceReload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.IsVSyncEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsVSyncEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsVSyncEnabled"));

	UGameUserSettings_IsVSyncEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsVSyncDirty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsVSyncDirty()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsVSyncDirty"));

	UGameUserSettings_IsVSyncDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsScreenResolutionDirty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsScreenResolutionDirty()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsScreenResolutionDirty"));

	UGameUserSettings_IsScreenResolutionDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsHDREnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsHDREnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsHDREnabled"));

	UGameUserSettings_IsHDREnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsFullscreenModeDirty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsFullscreenModeDirty()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsFullscreenModeDirty"));

	UGameUserSettings_IsFullscreenModeDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsDynamicResolutionEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsDynamicResolutionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsDynamicResolutionEnabled"));

	UGameUserSettings_IsDynamicResolutionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsDynamicResolutionDirty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsDynamicResolutionDirty()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsDynamicResolutionDirty"));

	UGameUserSettings_IsDynamicResolutionDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.IsDirty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UGameUserSettings::IsDirty()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.IsDirty"));

	UGameUserSettings_IsDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetVisualEffectQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetVisualEffectQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetVisualEffectQuality"));

	UGameUserSettings_GetVisualEffectQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetViewDistanceQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetViewDistanceQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetViewDistanceQuality"));

	UGameUserSettings_GetViewDistanceQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetTextureQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetTextureQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetTextureQuality"));

	UGameUserSettings_GetTextureQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetSyncInterval
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetSyncInterval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetSyncInterval"));

	UGameUserSettings_GetSyncInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetShadowQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetShadowQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetShadowQuality"));

	UGameUserSettings_GetShadowQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetShadingQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetShadingQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetShadingQuality"));

	UGameUserSettings_GetShadingQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetScreenResolution
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UGameUserSettings::GetScreenResolution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetScreenResolution"));

	UGameUserSettings_GetScreenResolution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetResolutionScaleNormalized
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameUserSettings::GetResolutionScaleNormalized()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetResolutionScaleNormalized"));

	UGameUserSettings_GetResolutionScaleNormalized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetResolutionScaleInformationEx
// ()
// Parameters:
// float                          CurrentScaleNormalized         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CurrentScaleValue              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinScaleValue                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxScaleValue                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetResolutionScaleInformationEx"));

	UGameUserSettings_GetResolutionScaleInformationEx_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CurrentScaleNormalized != nullptr)
		*CurrentScaleNormalized = params.CurrentScaleNormalized;
	if (CurrentScaleValue != nullptr)
		*CurrentScaleValue = params.CurrentScaleValue;
	if (MinScaleValue != nullptr)
		*MinScaleValue = params.MinScaleValue;
	if (MaxScaleValue != nullptr)
		*MaxScaleValue = params.MaxScaleValue;

}


// Function Engine.GameUserSettings.GetResolutionScaleInformation
// ()
// Parameters:
// float                          CurrentScaleNormalized         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            CurrentScaleValue              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinScaleValue                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaxScaleValue                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetResolutionScaleInformation"));

	UGameUserSettings_GetResolutionScaleInformation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CurrentScaleNormalized != nullptr)
		*CurrentScaleNormalized = params.CurrentScaleNormalized;
	if (CurrentScaleValue != nullptr)
		*CurrentScaleValue = params.CurrentScaleValue;
	if (MinScaleValue != nullptr)
		*MinScaleValue = params.MinScaleValue;
	if (MaxScaleValue != nullptr)
		*MaxScaleValue = params.MaxScaleValue;

}


// Function Engine.GameUserSettings.GetRecommendedResolutionScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameUserSettings::GetRecommendedResolutionScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetRecommendedResolutionScale"));

	UGameUserSettings_GetRecommendedResolutionScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetPreferredFullscreenMode
// ()
// Parameters:
// TEnumAsByte<Engine_EWindowMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EWindowMode> UGameUserSettings::GetPreferredFullscreenMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetPreferredFullscreenMode"));

	UGameUserSettings_GetPreferredFullscreenMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetPostProcessingQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetPostProcessingQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetPostProcessingQuality"));

	UGameUserSettings_GetPostProcessingQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetOverallScalabilityLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetOverallScalabilityLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetOverallScalabilityLevel"));

	UGameUserSettings_GetOverallScalabilityLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UGameUserSettings::GetLastConfirmedScreenResolution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetLastConfirmedScreenResolution"));

	UGameUserSettings_GetLastConfirmedScreenResolution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
// ()
// Parameters:
// TEnumAsByte<Engine_EWindowMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EWindowMode> UGameUserSettings::GetLastConfirmedFullscreenMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode"));

	UGameUserSettings_GetLastConfirmedFullscreenMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetGameUserSettings
// ()
// Parameters:
// class UGameUserSettings*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UGameUserSettings* UGameUserSettings::GetGameUserSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetGameUserSettings"));

	UGameUserSettings_GetGameUserSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetFullscreenMode
// ()
// Parameters:
// TEnumAsByte<Engine_EWindowMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EWindowMode> UGameUserSettings::GetFullscreenMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetFullscreenMode"));

	UGameUserSettings_GetFullscreenMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetFrameRateLimit
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameUserSettings::GetFrameRateLimit()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetFrameRateLimit"));

	UGameUserSettings_GetFrameRateLimit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetFramePace
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetFramePace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetFramePace"));

	UGameUserSettings_GetFramePace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetFoliageQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetFoliageQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetFoliageQuality"));

	UGameUserSettings_GetFoliageQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetDesktopResolution
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UGameUserSettings::GetDesktopResolution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetDesktopResolution"));

	UGameUserSettings_GetDesktopResolution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetDefaultWindowPosition
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UGameUserSettings::GetDefaultWindowPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetDefaultWindowPosition"));

	UGameUserSettings_GetDefaultWindowPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetDefaultWindowMode
// ()
// Parameters:
// TEnumAsByte<Engine_EWindowMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_EWindowMode> UGameUserSettings::GetDefaultWindowMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetDefaultWindowMode"));

	UGameUserSettings_GetDefaultWindowMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetDefaultResolutionScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UGameUserSettings::GetDefaultResolutionScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetDefaultResolutionScale"));

	UGameUserSettings_GetDefaultResolutionScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetDefaultResolution
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UGameUserSettings::GetDefaultResolution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetDefaultResolution"));

	UGameUserSettings_GetDefaultResolution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetCurrentHDRDisplayNits
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetCurrentHDRDisplayNits()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetCurrentHDRDisplayNits"));

	UGameUserSettings_GetCurrentHDRDisplayNits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetAudioQualityLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetAudioQualityLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetAudioQualityLevel"));

	UGameUserSettings_GetAudioQualityLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.GetAntiAliasingQuality
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UGameUserSettings::GetAntiAliasingQuality()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.GetAntiAliasingQuality"));

	UGameUserSettings_GetAntiAliasingQuality_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.GameUserSettings.EnableHDRDisplayOutput
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            DisplayNits                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::EnableHDRDisplayOutput(bool bEnable, int DisplayNits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.EnableHDRDisplayOutput"));

	UGameUserSettings_EnableHDRDisplayOutput_Params params;
	params.bEnable = bEnable;
	params.DisplayNits = DisplayNits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ConfirmVideoMode
// ()
void UGameUserSettings::ConfirmVideoMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ConfirmVideoMode"));

	UGameUserSettings_ConfirmVideoMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ApplySettings
// ()
// Parameters:
// bool                           bCheckForCommandLineOverrides  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::ApplySettings(bool bCheckForCommandLineOverrides)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ApplySettings"));

	UGameUserSettings_ApplySettings_Params params;
	params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ApplyResolutionSettings
// ()
// Parameters:
// bool                           bCheckForCommandLineOverrides  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UGameUserSettings::ApplyResolutionSettings(bool bCheckForCommandLineOverrides)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ApplyResolutionSettings"));

	UGameUserSettings_ApplyResolutionSettings_Params params;
	params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ApplyNonResolutionSettings
// ()
void UGameUserSettings::ApplyNonResolutionSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ApplyNonResolutionSettings"));

	UGameUserSettings_ApplyNonResolutionSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults
// ()
void UGameUserSettings::ApplyHardwareBenchmarkResults()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults"));

	UGameUserSettings_ApplyHardwareBenchmarkResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UGameUserSettings::AfterRead()
{
	UObject::AfterRead();

}

void UGameUserSettings::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SpotLight.SetOuterConeAngle
// ()
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetOuterConeAngle"));

	ASpotLight_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SpotLight.SetInnerConeAngle
// ()
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetInnerConeAngle"));

	ASpotLight_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ASpotLight::AfterRead()
{
	ALight::AfterRead();

	READ_PTR_FULL(SpotLightComponent, USpotLightComponent);
}

void ASpotLight::BeforeDelete()
{
	ALight::BeforeDelete();

	DELE_PTR_FULL(SpotLightComponent);
}

void AGeneratedMeshAreaLight::AfterRead()
{
	ASpotLight::AfterRead();

}

void AGeneratedMeshAreaLight::BeforeDelete()
{
	ASpotLight::BeforeDelete();

}

void UHapticFeedbackEffect_Base::AfterRead()
{
	UObject::AfterRead();

}

void UHapticFeedbackEffect_Base::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UHapticFeedbackEffect_Buffer::AfterRead()
{
	UHapticFeedbackEffect_Base::AfterRead();

}

void UHapticFeedbackEffect_Buffer::BeforeDelete()
{
	UHapticFeedbackEffect_Base::BeforeDelete();

}

void UHapticFeedbackEffect_Curve::AfterRead()
{
	UHapticFeedbackEffect_Base::AfterRead();

}

void UHapticFeedbackEffect_Curve::BeforeDelete()
{
	UHapticFeedbackEffect_Base::BeforeDelete();

}

void UHapticFeedbackEffect_SoundWave::AfterRead()
{
	UHapticFeedbackEffect_Base::AfterRead();

	READ_PTR_FULL(SoundWave, USoundWave);
}

void UHapticFeedbackEffect_SoundWave::BeforeDelete()
{
	UHapticFeedbackEffect_Base::BeforeDelete();

	DELE_PTR_FULL(SoundWave);
}

// Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
// ()
void UHealthSnapshotBlueprintLibrary::StopPerformanceSnapshots()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots"));

	UHealthSnapshotBlueprintLibrary_StopPerformanceSnapshots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
// ()
void UHealthSnapshotBlueprintLibrary::StartPerformanceSnapshots()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots"));

	UHealthSnapshotBlueprintLibrary_StartPerformanceSnapshots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
// ()
// Parameters:
// struct FString                 SnapshotTitle                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bResetStats                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UHealthSnapshotBlueprintLibrary::LogPerformanceSnapshot(const struct FString& SnapshotTitle, bool bResetStats)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot"));

	UHealthSnapshotBlueprintLibrary_LogPerformanceSnapshot_Params params;
	params.SnapshotTitle = SnapshotTitle;
	params.bResetStats = bResetStats;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UHealthSnapshotBlueprintLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UHealthSnapshotBlueprintLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UHLODEngineSubsystem::AfterRead()
{
	UEngineSubsystem::AfterRead();

}

void UHLODEngineSubsystem::BeforeDelete()
{
	UEngineSubsystem::BeforeDelete();

}

void UHLODProxy::AfterRead()
{
	UObject::AfterRead();

}

void UHLODProxy::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UHLODProxyDesc::AfterRead()
{
	UObject::AfterRead();

}

void UHLODProxyDesc::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.ImportanceSamplingLibrary.RandomSobolFloat
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Dimension                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Seed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UImportanceSamplingLibrary::RandomSobolFloat(int Index, int Dimension, float Seed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.RandomSobolFloat"));

	UImportanceSamplingLibrary_RandomSobolFloat_Params params;
	params.Index = Index;
	params.Dimension = Dimension;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumCells                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Cell                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Seed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UImportanceSamplingLibrary::RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D"));

	UImportanceSamplingLibrary_RandomSobolCell3D_Params params;
	params.Index = Index;
	params.NumCells = NumCells;
	params.Cell = Cell;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumCells                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Cell                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Seed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UImportanceSamplingLibrary::RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D"));

	UImportanceSamplingLibrary_RandomSobolCell2D_Params params;
	params.Index = Index;
	params.NumCells = NumCells;
	params.Cell = Cell;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.NextSobolFloat
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Dimension                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PreviousValue                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UImportanceSamplingLibrary::NextSobolFloat(int Index, int Dimension, float PreviousValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.NextSobolFloat"));

	UImportanceSamplingLibrary_NextSobolFloat_Params params;
	params.Index = Index;
	params.Dimension = Dimension;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.NextSobolCell3D
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumCells                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousValue                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UImportanceSamplingLibrary::NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.NextSobolCell3D"));

	UImportanceSamplingLibrary_NextSobolCell3D_Params params;
	params.Index = Index;
	params.NumCells = NumCells;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.NextSobolCell2D
// ()
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumCells                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               PreviousValue                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UImportanceSamplingLibrary::NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.NextSobolCell2D"));

	UImportanceSamplingLibrary_NextSobolCell2D_Params params;
	params.Index = Index;
	params.NumCells = NumCells;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture
// ()
// Parameters:
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EImportanceWeight> WeightingFunc                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FImportanceTexture      ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FImportanceTexture UImportanceSamplingLibrary::MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<Engine_EImportanceWeight> WeightingFunc)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture"));

	UImportanceSamplingLibrary_MakeImportanceTexture_Params params;
	params.Texture = Texture;
	params.WeightingFunc = WeightingFunc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ImportanceSamplingLibrary.ImportanceSample
// ()
// Parameters:
// struct FImportanceTexture      Texture                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D               Rand                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Samples                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               SamplePosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            SampleColor                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SampleIntensity                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SampleSize                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UImportanceSamplingLibrary::ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.ImportanceSample"));

	UImportanceSamplingLibrary_ImportanceSample_Params params;
	params.Texture = Texture;
	params.Rand = Rand;
	params.Samples = Samples;
	params.Intensity = Intensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SamplePosition != nullptr)
		*SamplePosition = params.SamplePosition;
	if (SampleColor != nullptr)
		*SampleColor = params.SampleColor;
	if (SampleIntensity != nullptr)
		*SampleIntensity = params.SampleIntensity;
	if (SampleSize != nullptr)
		*SampleSize = params.SampleSize;

}


// Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture
// ()
// Parameters:
// struct FImportanceTexture      ImportanceTexture              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*              Texture                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EImportanceWeight> WeightingFunc                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UImportanceSamplingLibrary::BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, TEnumAsByte<Engine_EImportanceWeight>* WeightingFunc)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture"));

	UImportanceSamplingLibrary_BreakImportanceTexture_Params params;
	params.ImportanceTexture = ImportanceTexture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Texture != nullptr)
		*Texture = params.Texture;
	if (WeightingFunc != nullptr)
		*WeightingFunc = params.WeightingFunc;

}


void UImportanceSamplingLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UImportanceSamplingLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UImportantToggleSettingInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UImportantToggleSettingInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UInGameAdManager::AfterRead()
{
	UPlatformInterfaceBase::AfterRead();

}

void UInGameAdManager::BeforeDelete()
{
	UPlatformInterfaceBase::BeforeDelete();

}

void UInheritableComponentHandler::AfterRead()
{
	UObject::AfterRead();

}

void UInheritableComponentHandler::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UInputDelegateBinding::AfterRead()
{
	UDynamicBlueprintBinding::AfterRead();

}

void UInputDelegateBinding::BeforeDelete()
{
	UDynamicBlueprintBinding::BeforeDelete();

}

void UInputActionDelegateBinding::AfterRead()
{
	UInputDelegateBinding::AfterRead();

}

void UInputActionDelegateBinding::BeforeDelete()
{
	UInputDelegateBinding::BeforeDelete();

}

void UInputAxisDelegateBinding::AfterRead()
{
	UInputDelegateBinding::AfterRead();

}

void UInputAxisDelegateBinding::BeforeDelete()
{
	UInputDelegateBinding::BeforeDelete();

}

void UInputAxisKeyDelegateBinding::AfterRead()
{
	UInputDelegateBinding::AfterRead();

}

void UInputAxisKeyDelegateBinding::BeforeDelete()
{
	UInputDelegateBinding::BeforeDelete();

}

// Function Engine.InputComponent.WasControllerKeyJustReleased
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInputComponent::WasControllerKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustReleased"));

	UInputComponent_WasControllerKeyJustReleased_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputComponent.WasControllerKeyJustPressed
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInputComponent::WasControllerKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustPressed"));

	UInputComponent_WasControllerKeyJustPressed_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputComponent.IsControllerKeyDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UInputComponent::IsControllerKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.IsControllerKeyDown"));

	UInputComponent_IsControllerKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputComponent.GetTouchState
// ()
// Parameters:
// int                            FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetTouchState"));

	UInputComponent_GetTouchState_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;

}


// Function Engine.InputComponent.GetControllerVectorKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UInputComponent::GetControllerVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerVectorKeyState"));

	UInputComponent_GetControllerVectorKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerMouseDelta
// ()
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerMouseDelta"));

	UInputComponent_GetControllerMouseDelta_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;

}


// Function Engine.InputComponent.GetControllerKeyTimeDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UInputComponent::GetControllerKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerKeyTimeDown"));

	UInputComponent_GetControllerKeyTimeDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerAnalogStickState
// ()
// Parameters:
// TEnumAsByte<Engine_EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogStickState"));

	UInputComponent_GetControllerAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;

}


// Function Engine.InputComponent.GetControllerAnalogKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UInputComponent::GetControllerAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogKeyState"));

	UInputComponent_GetControllerAnalogKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UInputComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UInputComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

void UInputKeyDelegateBinding::AfterRead()
{
	UInputDelegateBinding::AfterRead();

}

void UInputKeyDelegateBinding::BeforeDelete()
{
	UInputDelegateBinding::BeforeDelete();

}

// Function Engine.InputSettings.SaveKeyMappings
// ()
void UInputSettings::SaveKeyMappings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.SaveKeyMappings"));

	UInputSettings_SaveKeyMappings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InputSettings.RemoveAxisMapping
// ()
// Parameters:
// struct FInputAxisKeyMapping    KeyMapping                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bForceRebuildKeymaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputSettings::RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.RemoveAxisMapping"));

	UInputSettings_RemoveAxisMapping_Params params;
	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InputSettings.RemoveActionMapping
// ()
// Parameters:
// struct FInputActionKeyMapping  KeyMapping                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bForceRebuildKeymaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputSettings::RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.RemoveActionMapping"));

	UInputSettings_RemoveActionMapping_Params params;
	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InputSettings.GetInputSettings
// ()
// Parameters:
// class UInputSettings*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UInputSettings* UInputSettings::GetInputSettings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.GetInputSettings"));

	UInputSettings_GetInputSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.InputSettings.GetAxisNames
// ()
// Parameters:
// TArray<struct FName>           AxisNames                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UInputSettings::GetAxisNames(TArray<struct FName>* AxisNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.GetAxisNames"));

	UInputSettings_GetAxisNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (AxisNames != nullptr)
		*AxisNames = params.AxisNames;

}


// Function Engine.InputSettings.GetAxisMappingByName
// ()
// Parameters:
// struct FName                   InAxisName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputAxisKeyMapping> OutMappings                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UInputSettings::GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.GetAxisMappingByName"));

	UInputSettings_GetAxisMappingByName_Params params;
	params.InAxisName = InAxisName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMappings != nullptr)
		*OutMappings = params.OutMappings;

}


// Function Engine.InputSettings.GetActionNames
// ()
// Parameters:
// TArray<struct FName>           ActionNames                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UInputSettings::GetActionNames(TArray<struct FName>* ActionNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.GetActionNames"));

	UInputSettings_GetActionNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActionNames != nullptr)
		*ActionNames = params.ActionNames;

}


// Function Engine.InputSettings.GetActionMappingByName
// ()
// Parameters:
// struct FName                   InActionName                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputActionKeyMapping> OutMappings                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UInputSettings::GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.GetActionMappingByName"));

	UInputSettings_GetActionMappingByName_Params params;
	params.InActionName = InActionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMappings != nullptr)
		*OutMappings = params.OutMappings;

}


// Function Engine.InputSettings.ForceRebuildKeymaps
// ()
void UInputSettings::ForceRebuildKeymaps()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.ForceRebuildKeymaps"));

	UInputSettings_ForceRebuildKeymaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InputSettings.AddAxisMapping
// ()
// Parameters:
// struct FInputAxisKeyMapping    KeyMapping                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bForceRebuildKeymaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputSettings::AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.AddAxisMapping"));

	UInputSettings_AddAxisMapping_Params params;
	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InputSettings.AddActionMapping
// ()
// Parameters:
// struct FInputActionKeyMapping  KeyMapping                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bForceRebuildKeymaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInputSettings::AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputSettings.AddActionMapping"));

	UInputSettings_AddActionMapping_Params params;
	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UInputSettings::AfterRead()
{
	UObject::AfterRead();

}

void UInputSettings::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UInputTouchDelegateBinding::AfterRead()
{
	UInputDelegateBinding::AfterRead();

}

void UInputTouchDelegateBinding::BeforeDelete()
{
	UInputDelegateBinding::BeforeDelete();

}

void UInputVectorAxisDelegateBinding::AfterRead()
{
	UInputAxisKeyDelegateBinding::AfterRead();

}

void UInputVectorAxisDelegateBinding::BeforeDelete()
{
	UInputAxisKeyDelegateBinding::BeforeDelete();

}

void UInterface_AssetUserData::AfterRead()
{
	UInterface::AfterRead();

}

void UInterface_AssetUserData::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UBoneReferenceSkeletonProvider::AfterRead()
{
	UInterface::AfterRead();

}

void UBoneReferenceSkeletonProvider::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UInterface_CollisionDataProvider::AfterRead()
{
	UInterface::AfterRead();

}

void UInterface_CollisionDataProvider::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UInterface_PostProcessVolume::AfterRead()
{
	UInterface::AfterRead();

}

void UInterface_PostProcessVolume::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UInterface_PreviewMeshProvider::AfterRead()
{
	UInterface::AfterRead();

}

void UInterface_PreviewMeshProvider::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UInterpCurveEdSetup::AfterRead()
{
	UObject::AfterRead();

}

void UInterpCurveEdSetup::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UInterpData::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(CurveEdSetup, UInterpCurveEdSetup);
	READ_PTR_FULL(CachedDirectorGroup, UInterpGroupDirector);
}

void UInterpData::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(CurveEdSetup);
	DELE_PTR_FULL(CachedDirectorGroup);
}

void UInterpFilter::AfterRead()
{
	UObject::AfterRead();

}

void UInterpFilter::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UInterpFilter_Classes::AfterRead()
{
	UInterpFilter::AfterRead();

}

void UInterpFilter_Classes::BeforeDelete()
{
	UInterpFilter::BeforeDelete();

}

void UInterpFilter_Custom::AfterRead()
{
	UInterpFilter::AfterRead();

}

void UInterpFilter_Custom::BeforeDelete()
{
	UInterpFilter::BeforeDelete();

}

void UInterpGroup::AfterRead()
{
	UObject::AfterRead();

}

void UInterpGroup::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UInterpGroupCamera::AfterRead()
{
	UInterpGroup::AfterRead();

	READ_PTR_FULL(CameraAnimInst, UCameraAnim);
}

void UInterpGroupCamera::BeforeDelete()
{
	UInterpGroup::BeforeDelete();

	DELE_PTR_FULL(CameraAnimInst);
}

void UInterpGroupDirector::AfterRead()
{
	UInterpGroup::AfterRead();

}

void UInterpGroupDirector::BeforeDelete()
{
	UInterpGroup::BeforeDelete();

}

void UInterpGroupInst::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Group, UInterpGroup);
	READ_PTR_FULL(GroupActor, AActor);
}

void UInterpGroupInst::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Group);
	DELE_PTR_FULL(GroupActor);
}

void UInterpGroupInstCamera::AfterRead()
{
	UInterpGroupInst::AfterRead();

}

void UInterpGroupInstCamera::BeforeDelete()
{
	UInterpGroupInst::BeforeDelete();

}

void UInterpGroupInstDirector::AfterRead()
{
	UInterpGroupInst::AfterRead();

}

void UInterpGroupInstDirector::BeforeDelete()
{
	UInterpGroupInst::BeforeDelete();

}

// Function Engine.InterpToMovementComponent.StopSimulating
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::StopSimulating(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InterpToMovementComponent.StopSimulating"));

	UInterpToMovementComponent_StopSimulating_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InterpToMovementComponent.RestartMovement
// ()
// Parameters:
// float                          InitialDirection               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::RestartMovement(float InitialDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InterpToMovementComponent.RestartMovement"));

	UInterpToMovementComponent_RestartMovement_Params params;
	params.InitialDirection = InitialDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.InterpToMovementComponent.FinaliseControlPoints
// ()
void UInterpToMovementComponent::FinaliseControlPoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InterpToMovementComponent.FinaliseControlPoints"));

	UInterpToMovementComponent_FinaliseControlPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UInterpToMovementComponent::AfterRead()
{
	UMovementComponent::AfterRead();

}

void UInterpToMovementComponent::BeforeDelete()
{
	UMovementComponent::BeforeDelete();

}

void UInterpTrackAnimControl::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackAnimControl::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackAudioMaster::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackAudioMaster::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackBoolProp::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackBoolProp::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackColorProp::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackColorProp::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackColorScale::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackColorScale::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackDirector::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackDirector::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackEvent::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackEvent::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackFade::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackFade::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackFloatAnimBPParam::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

	READ_PTR_FULL(AnimBlueprintClass, UAnimBlueprintGeneratedClass);
	READ_PTR_FULL(AnimClass, UClass);
}

void UInterpTrackFloatAnimBPParam::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

	DELE_PTR_FULL(AnimBlueprintClass);
	DELE_PTR_FULL(AnimClass);
}

void UInterpTrackFloatMaterialParam::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackFloatMaterialParam::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackFloatParticleParam::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackFloatParticleParam::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackFloatProp::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackFloatProp::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackInstAnimControl::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstAnimControl::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstAudioMaster::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstAudioMaster::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstProperty::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(PropertyOuterObjectInst, UObject);
}

void UInterpTrackInstProperty::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(PropertyOuterObjectInst);
}

void UInterpTrackInstBoolProp::AfterRead()
{
	UInterpTrackInstProperty::AfterRead();

}

void UInterpTrackInstBoolProp::BeforeDelete()
{
	UInterpTrackInstProperty::BeforeDelete();

}

void UInterpTrackInstColorProp::AfterRead()
{
	UInterpTrackInstProperty::AfterRead();

}

void UInterpTrackInstColorProp::BeforeDelete()
{
	UInterpTrackInstProperty::BeforeDelete();

}

void UInterpTrackInstColorScale::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstColorScale::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstDirector::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(OldViewTarget, AActor);
}

void UInterpTrackInstDirector::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(OldViewTarget);
}

void UInterpTrackInstEvent::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstEvent::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstFade::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstFade::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstFloatAnimBPParam::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(AnimScriptInstance, UAnimInstance);
}

void UInterpTrackInstFloatAnimBPParam::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(AnimScriptInstance);
}

void UInterpTrackInstFloatMaterialParam::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(InstancedTrack, UInterpTrackFloatMaterialParam);
}

void UInterpTrackInstFloatMaterialParam::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(InstancedTrack);
}

void UInterpTrackInstFloatParticleParam::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstFloatParticleParam::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstFloatProp::AfterRead()
{
	UInterpTrackInstProperty::AfterRead();

}

void UInterpTrackInstFloatProp::BeforeDelete()
{
	UInterpTrackInstProperty::BeforeDelete();

}

void UInterpTrackInstLinearColorProp::AfterRead()
{
	UInterpTrackInstProperty::AfterRead();

}

void UInterpTrackInstLinearColorProp::BeforeDelete()
{
	UInterpTrackInstProperty::BeforeDelete();

}

void UInterpTrackInstMove::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstMove::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstParticleReplay::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstParticleReplay::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstSlomo::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstSlomo::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstSound::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(PlayAudioComp, UAudioComponent);
}

void UInterpTrackInstSound::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(PlayAudioComp);
}

void UInterpTrackInstToggle::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstToggle::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackInstVectorMaterialParam::AfterRead()
{
	UInterpTrackInst::AfterRead();

	READ_PTR_FULL(InstancedTrack, UInterpTrackVectorMaterialParam);
}

void UInterpTrackInstVectorMaterialParam::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

	DELE_PTR_FULL(InstancedTrack);
}

void UInterpTrackInstVectorProp::AfterRead()
{
	UInterpTrackInstProperty::AfterRead();

}

void UInterpTrackInstVectorProp::BeforeDelete()
{
	UInterpTrackInstProperty::BeforeDelete();

}

void UInterpTrackInstVisibility::AfterRead()
{
	UInterpTrackInst::AfterRead();

}

void UInterpTrackInstVisibility::BeforeDelete()
{
	UInterpTrackInst::BeforeDelete();

}

void UInterpTrackLinearColorBase::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackLinearColorBase::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackLinearColorProp::AfterRead()
{
	UInterpTrackLinearColorBase::AfterRead();

}

void UInterpTrackLinearColorProp::BeforeDelete()
{
	UInterpTrackLinearColorBase::BeforeDelete();

}

void UInterpTrackMove::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackMove::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackMoveAxis::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackMoveAxis::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackParticleReplay::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackParticleReplay::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackSlomo::AfterRead()
{
	UInterpTrackFloatBase::AfterRead();

}

void UInterpTrackSlomo::BeforeDelete()
{
	UInterpTrackFloatBase::BeforeDelete();

}

void UInterpTrackSound::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackSound::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackToggle::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackToggle::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UInterpTrackVectorMaterialParam::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackVectorMaterialParam::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackVectorProp::AfterRead()
{
	UInterpTrackVectorBase::AfterRead();

}

void UInterpTrackVectorProp::BeforeDelete()
{
	UInterpTrackVectorBase::BeforeDelete();

}

void UInterpTrackVisibility::AfterRead()
{
	UInterpTrack::AfterRead();

}

void UInterpTrackVisibility::BeforeDelete()
{
	UInterpTrack::BeforeDelete();

}

void UIntSerialization::AfterRead()
{
	UObject::AfterRead();

}

void UIntSerialization::BeforeDelete()
{
	UObject::BeforeDelete();

}

void AKillZVolume::AfterRead()
{
	APhysicsVolume::AfterRead();

}

void AKillZVolume::BeforeDelete()
{
	APhysicsVolume::BeforeDelete();

}

// Function Engine.KismetArrayLibrary.SetArrayPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int>                    Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.SetArrayPropertyByName"));

	UKismetArrayLibrary_SetArrayPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.FilterArray
// ()
// Parameters:
// TArray<class AActor*>          TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          FilteredArray                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.FilterArray"));

	UKismetArrayLibrary_FilterArray_Params params;
	params.TargetArray = TargetArray;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FilteredArray != nullptr)
		*FilteredArray = params.FilteredArray;

}


// Function Engine.KismetArrayLibrary.Array_Swap
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            FirstIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SecondIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Swap"));

	UKismetArrayLibrary_Array_Swap_Params params;
	params.TargetArray = TargetArray;
	params.FirstIndex = FirstIndex;
	params.SecondIndex = SecondIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Shuffle
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Shuffle(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Shuffle"));

	UKismetArrayLibrary_Array_Shuffle_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Set
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSizeToFit                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Set"));

	UKismetArrayLibrary_Array_Set_Params params;
	params.TargetArray = TargetArray;
	params.Index = Index;
	params.Item = Item;
	params.bSizeToFit = bSizeToFit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Reverse
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Reverse(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Reverse"));

	UKismetArrayLibrary_Array_Reverse_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Resize
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Resize(TArray<int> TargetArray, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Resize"));

	UKismetArrayLibrary_Array_Resize_Params params;
	params.TargetArray = TargetArray;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_RemoveItem
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetArrayLibrary::Array_RemoveItem(TArray<int> TargetArray, int Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_RemoveItem"));

	UKismetArrayLibrary_Array_RemoveItem_Params params;
	params.TargetArray = TargetArray;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Remove
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexToRemove                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Remove(TArray<int> TargetArray, int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Remove"));

	UKismetArrayLibrary_Array_Remove_Params params;
	params.TargetArray = TargetArray;
	params.IndexToRemove = IndexToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_RandomFromStream
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRandomStream           RandomStream                   (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            OutItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_RandomFromStream(TArray<int> TargetArray, struct FRandomStream* RandomStream, int* OutItem, int* OutIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_RandomFromStream"));

	UKismetArrayLibrary_Array_RandomFromStream_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RandomStream != nullptr)
		*RandomStream = params.RandomStream;
	if (OutItem != nullptr)
		*OutItem = params.OutItem;
	if (OutIndex != nullptr)
		*OutIndex = params.OutIndex;

}


// Function Engine.KismetArrayLibrary.Array_Random
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            OutItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            OutIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Random(TArray<int> TargetArray, int* OutItem, int* OutIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Random"));

	UKismetArrayLibrary_Array_Random_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutItem != nullptr)
		*OutItem = params.OutItem;
	if (OutIndex != nullptr)
		*OutIndex = params.OutIndex;

}


// Function Engine.KismetArrayLibrary.Array_Length
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetArrayLibrary::Array_Length(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Length"));

	UKismetArrayLibrary_Array_Length_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_LastIndex
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetArrayLibrary::Array_LastIndex(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_LastIndex"));

	UKismetArrayLibrary_Array_LastIndex_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_IsValidIndex
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexToTest                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetArrayLibrary::Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_IsValidIndex"));

	UKismetArrayLibrary_Array_IsValidIndex_Params params;
	params.TargetArray = TargetArray;
	params.IndexToTest = IndexToTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Insert
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Insert(TArray<int> TargetArray, int NewItem, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Insert"));

	UKismetArrayLibrary_Array_Insert_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Identical
// ()
// Parameters:
// TArray<int>                    ArrayA                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int>                    ArrayB                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetArrayLibrary::Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Identical"));

	UKismetArrayLibrary_Array_Identical_Params params;
	params.ArrayA = ArrayA;
	params.ArrayB = ArrayB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Get
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Item                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Get(TArray<int> TargetArray, int Index, int* Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Get"));

	UKismetArrayLibrary_Array_Get_Params params;
	params.TargetArray = TargetArray;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Item != nullptr)
		*Item = params.Item;

}


// Function Engine.KismetArrayLibrary.Array_Find
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetArrayLibrary::Array_Find(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Find"));

	UKismetArrayLibrary_Array_Find_Params params;
	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Contains
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetArrayLibrary::Array_Contains(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Contains"));

	UKismetArrayLibrary_Array_Contains_Params params;
	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Clear
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Clear(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Clear"));

	UKismetArrayLibrary_Array_Clear_Params params;
	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_Append
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int>                    SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetArrayLibrary::Array_Append(TArray<int> TargetArray, TArray<int> SourceArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Append"));

	UKismetArrayLibrary_Array_Append_Params params;
	params.TargetArray = TargetArray;
	params.SourceArray = SourceArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetArrayLibrary.Array_AddUnique
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetArrayLibrary::Array_AddUnique(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_AddUnique"));

	UKismetArrayLibrary_Array_AddUnique_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Add
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetArrayLibrary::Array_Add(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Add"));

	UKismetArrayLibrary_Array_Add_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetArrayLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetArrayLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetGuidLibrary.Parse_StringToGuid
// ()
// Parameters:
// struct FString                 GuidString                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                   OutGuid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           Success                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetGuidLibrary::Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Parse_StringToGuid"));

	UKismetGuidLibrary_Parse_StringToGuid_Params params;
	params.GuidString = GuidString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutGuid != nullptr)
		*OutGuid = params.OutGuid;
	if (Success != nullptr)
		*Success = params.Success;

}


// Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
// ()
// Parameters:
// struct FGuid                   A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                   B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetGuidLibrary::NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NotEqual_GuidGuid"));

	UKismetGuidLibrary_NotEqual_GuidGuid_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.NewGuid
// ()
// Parameters:
// struct FGuid                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FGuid UKismetGuidLibrary::NewGuid()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NewGuid"));

	UKismetGuidLibrary_NewGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.IsValid_Guid
// ()
// Parameters:
// struct FGuid                   InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetGuidLibrary::IsValid_Guid(const struct FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.IsValid_Guid"));

	UKismetGuidLibrary_IsValid_Guid_Params params;
	params.InGuid = InGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Invalidate_Guid
// ()
// Parameters:
// struct FGuid                   InGuid                         (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetGuidLibrary::Invalidate_Guid(struct FGuid* InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Invalidate_Guid"));

	UKismetGuidLibrary_Invalidate_Guid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InGuid != nullptr)
		*InGuid = params.InGuid;

}


// Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
// ()
// Parameters:
// struct FGuid                   A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                   B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetGuidLibrary::EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid"));

	UKismetGuidLibrary_EqualEqual_GuidGuid_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Conv_GuidToString
// ()
// Parameters:
// struct FGuid                   InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetGuidLibrary::Conv_GuidToString(const struct FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Conv_GuidToString"));

	UKismetGuidLibrary_Conv_GuidToString_Params params;
	params.InGuid = InGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetGuidLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetGuidLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::PointerEvent_IsTouchEvent(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent"));

	UKismetInputLibrary_PointerEvent_IsTouchEvent_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                    MouseButton                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown"));

	UKismetInputLibrary_PointerEvent_IsMouseButtonDown_Params params;
	params.Input = Input;
	params.MouseButton = MouseButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetInputLibrary::PointerEvent_GetWheelDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta"));

	UKismetInputLibrary_PointerEvent_GetWheelDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetInputLibrary::PointerEvent_GetUserIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex"));

	UKismetInputLibrary_PointerEvent_GetUserIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetInputLibrary::PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex"));

	UKismetInputLibrary_PointerEvent_GetTouchpadIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition"));

	UKismetInputLibrary_PointerEvent_GetScreenSpacePosition_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetInputLibrary::PointerEvent_GetPointerIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex"));

	UKismetInputLibrary_PointerEvent_GetPointerIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition"));

	UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetGestureType
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// Engine_ESlateGesture           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
Engine_ESlateGesture UKismetInputLibrary::PointerEvent_GetGestureType(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetGestureType"));

	UKismetInputLibrary_PointerEvent_GetGestureType_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetInputLibrary::PointerEvent_GetGestureDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta"));

	UKismetInputLibrary_PointerEvent_GetGestureDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FKey UKismetInputLibrary::PointerEvent_GetEffectingButton(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton"));

	UKismetInputLibrary_PointerEvent_GetEffectingButton_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetInputLibrary::PointerEvent_GetCursorDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta"));

	UKismetInputLibrary_PointerEvent_GetCursorDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsVectorAxis
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsVectorAxis(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsVectorAxis"));

	UKismetInputLibrary_Key_IsVectorAxis_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsValid
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsValid(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsValid"));

	UKismetInputLibrary_Key_IsValid_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsMouseButton
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsMouseButton(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsMouseButton"));

	UKismetInputLibrary_Key_IsMouseButton_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsModifierKey
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsModifierKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsModifierKey"));

	UKismetInputLibrary_Key_IsModifierKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsKeyboardKey
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsKeyboardKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsKeyboardKey"));

	UKismetInputLibrary_Key_IsKeyboardKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsGamepadKey
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsGamepadKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsGamepadKey"));

	UKismetInputLibrary_Key_IsGamepadKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsDigital
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsDigital(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsDigital"));

	UKismetInputLibrary_Key_IsDigital_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsButtonAxis
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsButtonAxis(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsButtonAxis"));

	UKismetInputLibrary_Key_IsButtonAxis_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsAxis3D
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsAxis3D(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsAxis3D"));

	UKismetInputLibrary_Key_IsAxis3D_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsAxis2D
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsAxis2D(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsAxis2D"));

	UKismetInputLibrary_Key_IsAxis2D_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsAxis1D
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsAxis1D(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsAxis1D"));

	UKismetInputLibrary_Key_IsAxis1D_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsAnalog
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::Key_IsAnalog(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsAnalog"));

	UKismetInputLibrary_Key_IsAnalog_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
// ()
// Parameters:
// struct FKeyEvent               InKeyEvent                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// SlateCore_EUINavigation        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
SlateCore_EUINavigation UKismetInputLibrary::Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey"));

	UKismetInputLibrary_Key_GetNavigationDirectionFromKey_Params params;
	params.InKeyEvent = InKeyEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
// ()
// Parameters:
// struct FAnalogInputEvent       InAnalogEvent                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// SlateCore_EUINavigation        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
SlateCore_EUINavigation UKismetInputLibrary::Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog"));

	UKismetInputLibrary_Key_GetNavigationDirectionFromAnalog_Params params;
	params.InAnalogEvent = InAnalogEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
// ()
// Parameters:
// struct FKeyEvent               InKeyEvent                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// SlateCore_EUINavigationAction  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
SlateCore_EUINavigationAction UKismetInputLibrary::Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey"));

	UKismetInputLibrary_Key_GetNavigationActionFromKey_Params params;
	params.InKeyEvent = InKeyEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetNavigationAction
// ()
// Parameters:
// struct FKey                    InKey                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// SlateCore_EUINavigationAction  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
SlateCore_EUINavigationAction UKismetInputLibrary::Key_GetNavigationAction(const struct FKey& InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetNavigationAction"));

	UKismetInputLibrary_Key_GetNavigationAction_Params params;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetDisplayName
// ()
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetInputLibrary::Key_GetDisplayName(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetDisplayName"));

	UKismetInputLibrary_Key_GetDisplayName_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsShiftDown"));

	UKismetInputLibrary_InputEvent_IsShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsRightShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown"));

	UKismetInputLibrary_InputEvent_IsRightShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsRightControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown"));

	UKismetInputLibrary_InputEvent_IsRightControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsRightCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown"));

	UKismetInputLibrary_InputEvent_IsRightCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsRightAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown"));

	UKismetInputLibrary_InputEvent_IsRightAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRepeat
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsRepeat(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRepeat"));

	UKismetInputLibrary_InputEvent_IsRepeat_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsLeftShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown"));

	UKismetInputLibrary_InputEvent_IsLeftShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsLeftControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown"));

	UKismetInputLibrary_InputEvent_IsLeftControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsLeftCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown"));

	UKismetInputLibrary_InputEvent_IsLeftCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsLeftAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown"));

	UKismetInputLibrary_InputEvent_IsLeftAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsControlDown"));

	UKismetInputLibrary_InputEvent_IsControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsCommandDown"));

	UKismetInputLibrary_InputEvent_IsCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::InputEvent_IsAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsAltDown"));

	UKismetInputLibrary_InputEvent_IsAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputChord_GetDisplayName
// ()
// Parameters:
// struct FInputChord             Key                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetInputLibrary::InputChord_GetDisplayName(const struct FInputChord& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputChord_GetDisplayName"));

	UKismetInputLibrary_InputChord_GetDisplayName_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetUserIndex
// ()
// Parameters:
// struct FKeyEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetInputLibrary::GetUserIndex(const struct FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetUserIndex"));

	UKismetInputLibrary_GetUserIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetKey
// ()
// Parameters:
// struct FKeyEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FKey UKismetInputLibrary::GetKey(const struct FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetKey"));

	UKismetInputLibrary_GetKey_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetAnalogValue
// ()
// Parameters:
// struct FAnalogInputEvent       Input                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetInputLibrary::GetAnalogValue(const struct FAnalogInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetAnalogValue"));

	UKismetInputLibrary_GetAnalogValue_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.EqualEqual_KeyKey
// ()
// Parameters:
// struct FKey                    A                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                    B                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.EqualEqual_KeyKey"));

	UKismetInputLibrary_EqualEqual_KeyKey_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
// ()
// Parameters:
// struct FInputChord             A                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputChord             B                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInputLibrary::EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord"));

	UKismetInputLibrary_EqualEqual_InputChordInputChord_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.CalibrateTilt
// ()
void UKismetInputLibrary::CalibrateTilt()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.CalibrateTilt"));

	UKismetInputLibrary_CalibrateTilt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UKismetInputLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetInputLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetInternationalizationLibrary.SetCurrentLocale
// ()
// Parameters:
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInternationalizationLibrary::SetCurrentLocale(const struct FString& Culture, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.SetCurrentLocale"));

	UKismetInternationalizationLibrary_SetCurrentLocale_Params params;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
// ()
// Parameters:
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInternationalizationLibrary::SetCurrentLanguageAndLocale(const struct FString& Culture, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale"));

	UKismetInternationalizationLibrary_SetCurrentLanguageAndLocale_Params params;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage
// ()
// Parameters:
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInternationalizationLibrary::SetCurrentLanguage(const struct FString& Culture, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage"));

	UKismetInternationalizationLibrary_SetCurrentLanguage_Params params;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.SetCurrentCulture
// ()
// Parameters:
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInternationalizationLibrary::SetCurrentCulture(const struct FString& Culture, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.SetCurrentCulture"));

	UKismetInternationalizationLibrary_SetCurrentCulture_Params params;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
// ()
// Parameters:
// struct FName                   AssetGroup                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetInternationalizationLibrary::SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const struct FString& Culture, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture"));

	UKismetInternationalizationLibrary_SetCurrentAssetGroupCulture_Params params;
	params.AssetGroup = AssetGroup;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetSuitableCulture
// ()
// Parameters:
// TArray<struct FString>         AvailableCultures              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 CultureToMatch                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FallbackCulture                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetSuitableCulture(TArray<struct FString> AvailableCultures, const struct FString& CultureToMatch, const struct FString& FallbackCulture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetSuitableCulture"));

	UKismetInternationalizationLibrary_GetSuitableCulture_Params params;
	params.AvailableCultures = AvailableCultures;
	params.CultureToMatch = CultureToMatch;
	params.FallbackCulture = FallbackCulture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetNativeCulture
// ()
// Parameters:
// CoreUObject_ELocalizedTextSourceCategory TextCategory                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetNativeCulture(CoreUObject_ELocalizedTextSourceCategory TextCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetNativeCulture"));

	UKismetInternationalizationLibrary_GetNativeCulture_Params params;
	params.TextCategory = TextCategory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures
// ()
// Parameters:
// bool                           IncludeGame                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           IncludeEngine                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           IncludeEditor                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           IncludeAdditional              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UKismetInternationalizationLibrary::GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures"));

	UKismetInternationalizationLibrary_GetLocalizedCultures_Params params;
	params.IncludeGame = IncludeGame;
	params.IncludeEngine = IncludeEngine;
	params.IncludeEditor = IncludeEditor;
	params.IncludeAdditional = IncludeAdditional;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetCurrentLocale
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetCurrentLocale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetCurrentLocale"));

	UKismetInternationalizationLibrary_GetCurrentLocale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetCurrentLanguage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage"));

	UKismetInternationalizationLibrary_GetCurrentLanguage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetCurrentCulture
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetCurrentCulture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetCurrentCulture"));

	UKismetInternationalizationLibrary_GetCurrentCulture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
// ()
// Parameters:
// struct FName                   AssetGroup                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetCurrentAssetGroupCulture(const struct FName& AssetGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture"));

	UKismetInternationalizationLibrary_GetCurrentAssetGroupCulture_Params params;
	params.AssetGroup = AssetGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName
// ()
// Parameters:
// struct FString                 Culture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           Localized                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetInternationalizationLibrary::GetCultureDisplayName(const struct FString& Culture, bool Localized)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName"));

	UKismetInternationalizationLibrary_GetCultureDisplayName_Params params;
	params.Culture = Culture;
	params.Localized = Localized;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
// ()
// Parameters:
// struct FName                   AssetGroup                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           SaveToConfig                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetInternationalizationLibrary::ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture"));

	UKismetInternationalizationLibrary_ClearCurrentAssetGroupCulture_Params params;
	params.AssetGroup = AssetGroup;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UKismetInternationalizationLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetInternationalizationLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetMaterialLibrary.SetVectorParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ParameterValue                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMaterialLibrary::SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetVectorParameterValue"));

	UKismetMaterialLibrary_SetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetMaterialLibrary.SetScalarParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ParameterValue                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMaterialLibrary::SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetScalarParameterValue"));

	UKismetMaterialLibrary_SetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetMaterialLibrary.GetVectorParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMaterialLibrary::GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetVectorParameterValue"));

	UKismetMaterialLibrary_GetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.GetScalarParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMaterialLibrary::GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetScalarParameterValue"));

	UKismetMaterialLibrary_GetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   OptionalName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EMIDCreationFlags       CreationFlags                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UKismetMaterialLibrary::CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, const struct FName& OptionalName, Engine_EMIDCreationFlags CreationFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance"));

	UKismetMaterialLibrary_CreateDynamicMaterialInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Parent = Parent;
	params.OptionalName = OptionalName;
	params.CreationFlags = CreationFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetMaterialLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetMaterialLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetMathLibrary.Xor_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Xor_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Xor_IntInt"));

	UKismetMathLibrary_Xor_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Xor_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Xor_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Xor_Int64Int64"));

	UKismetMathLibrary_Xor_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Wrap
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Wrap(int Value, int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Wrap"));

	UKismetMathLibrary_Wrap_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector
// ()
// Parameters:
// struct FVector                 CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Weight                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector"));

	UKismetMathLibrary_WeightedMovingAverage_FVector_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
// ()
// Parameters:
// struct FRotator                CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Weight                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator"));

	UKismetMathLibrary_WeightedMovingAverage_FRotator_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.WeightedMovingAverage_Float
// ()
// Parameters:
// float                          CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Weight                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.WeightedMovingAverage_Float"));

	UKismetMathLibrary_WeightedMovingAverage_Float_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeXYSquared
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSizeXYSquared(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSizeXYSquared"));

	UKismetMathLibrary_VSizeXYSquared_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeXY
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSizeXY(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSizeXY"));

	UKismetMathLibrary_VSizeXY_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeSquared
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSizeSquared(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSizeSquared"));

	UKismetMathLibrary_VSizeSquared_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2DSquared
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSize2DSquared(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2DSquared"));

	UKismetMathLibrary_VSize2DSquared_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSize2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2D"));

	UKismetMathLibrary_VSize2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::VSize(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize"));

	UKismetMathLibrary_VSize_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VLerp
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::VLerp(const struct FVector& A, const struct FVector& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VLerp"));

	UKismetMathLibrary_VLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant
// ()
// Parameters:
// struct FVector                 Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo_Constant"));

	UKismetMathLibrary_VInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo
// ()
// Parameters:
// struct FVector                 Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo"));

	UKismetMathLibrary_VInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VectorSpringInterp
// ()
// Parameters:
// struct FVector                 Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVectorSpringState      SpringState                    (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                          Stiffness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CriticalDampingFactor          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Mass                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, struct FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VectorSpringInterp"));

	UKismetMathLibrary_VectorSpringInterp_Params params;
	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SpringState != nullptr)
		*SpringState = params.SpringState;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Zero
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Zero()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Zero"));

	UKismetMathLibrary_Vector_Zero_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Up
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Up()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Up"));

	UKismetMathLibrary_Vector_Up_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_UnwindEuler
// ()
// Parameters:
// struct FVector                 A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector_UnwindEuler(struct FVector* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_UnwindEuler"));

	UKismetMathLibrary_Vector_UnwindEuler_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector_UnitCartesianToSpherical(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical"));

	UKismetMathLibrary_Vector_UnitCartesianToSpherical_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ToRadians
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ToRadians(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ToRadians"));

	UKismetMathLibrary_Vector_ToRadians_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ToDegrees
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ToDegrees(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ToDegrees"));

	UKismetMathLibrary_Vector_ToDegrees_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_SnappedToGrid
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InGridSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_SnappedToGrid"));

	UKismetMathLibrary_Vector_SnappedToGrid_Params params;
	params.InVect = InVect;
	params.InGridSize = InGridSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Set
// ()
// Parameters:
// struct FVector                 A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector_Set(struct FVector* A, float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Set"));

	UKismetMathLibrary_Vector_Set_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector_Right
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Right()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Right"));

	UKismetMathLibrary_Vector_Right_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Reciprocal
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Reciprocal(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Reciprocal"));

	UKismetMathLibrary_Vector_Reciprocal_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal
// ()
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InNormal                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal"));

	UKismetMathLibrary_Vector_ProjectOnToNormal_Params params;
	params.V = V;
	params.InNormal = InNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_One
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_One()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_One"));

	UKismetMathLibrary_Vector_One_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_NormalUnsafe
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_NormalUnsafe(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_NormalUnsafe"));

	UKismetMathLibrary_Vector_NormalUnsafe_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Normalize
// ()
// Parameters:
// struct FVector                 A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector_Normalize(struct FVector* A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Normalize"));

	UKismetMathLibrary_Vector_Normalize_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector_Normal2D
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Normal2D(const struct FVector& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Normal2D"));

	UKismetMathLibrary_Vector_Normal2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_MirrorByPlane
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                  InPlane                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_MirrorByPlane"));

	UKismetMathLibrary_Vector_MirrorByPlane_Params params;
	params.A = A;
	params.InPlane = InPlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Left
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Left()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Left"));

	UKismetMathLibrary_Vector_Left_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsZero
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsZero(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsZero"));

	UKismetMathLibrary_Vector_IsZero_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsUnit
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SquaredLenthTolerance          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsUnit"));

	UKismetMathLibrary_Vector_IsUnit_Params params;
	params.A = A;
	params.SquaredLenthTolerance = SquaredLenthTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsUniform
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsUniform(const struct FVector& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsUniform"));

	UKismetMathLibrary_Vector_IsUniform_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsNormal
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsNormal(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsNormal"));

	UKismetMathLibrary_Vector_IsNormal_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsNearlyZero
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsNearlyZero(const struct FVector& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsNearlyZero"));

	UKismetMathLibrary_Vector_IsNearlyZero_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_IsNAN
// ()
// Parameters:
// struct FVector                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector_IsNAN(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_IsNAN"));

	UKismetMathLibrary_Vector_IsNAN_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_HeadingAngle
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_HeadingAngle(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_HeadingAngle"));

	UKismetMathLibrary_Vector_HeadingAngle_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_GetSignVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_GetSignVector(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_GetSignVector"));

	UKismetMathLibrary_Vector_GetSignVector_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_GetProjection
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_GetProjection(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_GetProjection"));

	UKismetMathLibrary_Vector_GetProjection_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_GetAbsMin
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_GetAbsMin(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_GetAbsMin"));

	UKismetMathLibrary_Vector_GetAbsMin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_GetAbsMax
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_GetAbsMax(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_GetAbsMax"));

	UKismetMathLibrary_Vector_GetAbsMax_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_GetAbs
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_GetAbs(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_GetAbs"));

	UKismetMathLibrary_Vector_GetAbs_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Forward
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Forward()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Forward"));

	UKismetMathLibrary_Vector_Forward_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Down
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Down()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Down"));

	UKismetMathLibrary_Vector_Down_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_DistanceSquared
// ()
// Parameters:
// struct FVector                 v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_DistanceSquared"));

	UKismetMathLibrary_Vector_DistanceSquared_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Distance2DSquared
// ()
// Parameters:
// struct FVector                 v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Distance2DSquared"));

	UKismetMathLibrary_Vector_Distance2DSquared_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Distance2D
// ()
// Parameters:
// struct FVector                 v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_Distance2D(const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Distance2D"));

	UKismetMathLibrary_Vector_Distance2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Distance
// ()
// Parameters:
// struct FVector                 v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_Distance(const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Distance"));

	UKismetMathLibrary_Vector_Distance_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_CosineAngle2D
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_CosineAngle2D"));

	UKismetMathLibrary_Vector_CosineAngle2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ComponentMin
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ComponentMin(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ComponentMin"));

	UKismetMathLibrary_Vector_ComponentMin_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ComponentMax
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ComponentMax(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ComponentMax"));

	UKismetMathLibrary_Vector_ComponentMax_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ClampSizeMax2D(const struct FVector& A, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D"));

	UKismetMathLibrary_Vector_ClampSizeMax2D_Params params;
	params.A = A;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ClampSizeMax
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ClampSizeMax(const struct FVector& A, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ClampSizeMax"));

	UKismetMathLibrary_Vector_ClampSizeMax_Params params;
	params.A = A;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_ClampSize2D
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_ClampSize2D(const struct FVector& A, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_ClampSize2D"));

	UKismetMathLibrary_Vector_ClampSize2D_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_BoundedToCube
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_BoundedToCube(const struct FVector& InVect, float InRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_BoundedToCube"));

	UKismetMathLibrary_Vector_BoundedToCube_Params params;
	params.InVect = InVect;
	params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_BoundedToBox
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InBoxMin                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InBoxMax                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_BoundedToBox"));

	UKismetMathLibrary_Vector_BoundedToBox_Params params;
	params.InVect = InVect;
	params.InBoxMin = InBoxMin;
	params.InBoxMax = InBoxMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Backward
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Vector_Backward()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Backward"));

	UKismetMathLibrary_Vector_Backward_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector_Assign
// ()
// Parameters:
// struct FVector                 A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector_Assign(struct FVector* A, const struct FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_Assign"));

	UKismetMathLibrary_Vector_Assign_Params params;
	params.InVector = InVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector_AddBounded
// ()
// Parameters:
// struct FVector                 A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InAddVect                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector_AddBounded(struct FVector* A, const struct FVector& InAddVect, float InRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector_AddBounded"));

	UKismetMathLibrary_Vector_AddBounded_Params params;
	params.InAddVect = InAddVect;
	params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector4_Zero
// ()
// Parameters:
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_Zero()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Zero"));

	UKismetMathLibrary_Vector4_Zero_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_SizeSquared3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_SizeSquared3(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_SizeSquared3"));

	UKismetMathLibrary_Vector4_SizeSquared3_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_SizeSquared
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_SizeSquared(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_SizeSquared"));

	UKismetMathLibrary_Vector4_SizeSquared_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Size3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_Size3(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Size3"));

	UKismetMathLibrary_Vector4_Size3_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Size
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_Size(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Size"));

	UKismetMathLibrary_Vector4_Size_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Set
// ()
// Parameters:
// struct FVector4                A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          W                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector4_Set(struct FVector4* A, float X, float Y, float Z, float W)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Set"));

	UKismetMathLibrary_Vector4_Set_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_NormalUnsafe3(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3"));

	UKismetMathLibrary_Vector4_NormalUnsafe3_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Normalize3
// ()
// Parameters:
// struct FVector4                A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector4_Normalize3(struct FVector4* A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Normalize3"));

	UKismetMathLibrary_Vector4_Normalize3_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector4_Normal3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_Normal3(const struct FVector4& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Normal3"));

	UKismetMathLibrary_Vector4_Normal3_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Negated
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_Negated(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Negated"));

	UKismetMathLibrary_Vector4_Negated_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_MirrorByVector3
// ()
// Parameters:
// struct FVector4                Direction                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                SurfaceNormal                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_MirrorByVector3"));

	UKismetMathLibrary_Vector4_MirrorByVector3_Params params;
	params.Direction = Direction;
	params.SurfaceNormal = SurfaceNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_IsZero
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector4_IsZero(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_IsZero"));

	UKismetMathLibrary_Vector4_IsZero_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_IsUnit3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SquaredLenthTolerance          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_IsUnit3"));

	UKismetMathLibrary_Vector4_IsUnit3_Params params;
	params.A = A;
	params.SquaredLenthTolerance = SquaredLenthTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_IsNormal3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector4_IsNormal3(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_IsNormal3"));

	UKismetMathLibrary_Vector4_IsNormal3_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3"));

	UKismetMathLibrary_Vector4_IsNearlyZero3_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_IsNAN
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Vector4_IsNAN(const struct FVector4& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_IsNAN"));

	UKismetMathLibrary_Vector4_IsNAN_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_DotProduct3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_DotProduct3"));

	UKismetMathLibrary_Vector4_DotProduct3_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_DotProduct
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_DotProduct"));

	UKismetMathLibrary_Vector4_DotProduct_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_CrossProduct3
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_CrossProduct3"));

	UKismetMathLibrary_Vector4_CrossProduct3_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector4_Assign
// ()
// Parameters:
// struct FVector4                A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                InVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Vector4_Assign(struct FVector4* A, const struct FVector4& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector4_Assign"));

	UKismetMathLibrary_Vector4_Assign_Params params;
	params.InVector = InVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
// ()
// Parameters:
// struct FVector2D               Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant"));

	UKismetMathLibrary_Vector2DInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2DInterpTo
// ()
// Parameters:
// struct FVector2D               Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo"));

	UKismetMathLibrary_Vector2DInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2D_Zero
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector2D_Zero()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2D_Zero"));

	UKismetMathLibrary_Vector2D_Zero_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2D_Unit45Deg
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector2D_Unit45Deg()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2D_Unit45Deg"));

	UKismetMathLibrary_Vector2D_Unit45Deg_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2D_One
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Vector2D_One()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2D_One"));

	UKismetMathLibrary_Vector2D_One_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VEase
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEasingFunc> EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VEase"));

	UKismetMathLibrary_VEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.UtcNow
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::UtcNow()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.UtcNow"));

	UKismetMathLibrary_UtcNow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformVector4
// ()
// Parameters:
// struct FMatrix                 Matrix                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector4                Vec4                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformVector4"));

	UKismetMathLibrary_TransformVector4_Params params;
	params.Matrix = Matrix;
	params.Vec4 = Vec4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformRotation
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::TransformRotation(const struct FTransform& T, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformRotation"));

	UKismetMathLibrary_TransformRotation_Params params;
	params.T = T;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformLocation
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::TransformLocation(const struct FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformLocation"));

	UKismetMathLibrary_TransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformDirection
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::TransformDirection(const struct FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformDirection"));

	UKismetMathLibrary_TransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Transform_Determinant
// ()
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Transform_Determinant(const struct FTransform& Transform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Transform_Determinant"));

	UKismetMathLibrary_Transform_Determinant_Params params;
	params.Transform = Transform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ToSign2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::ToSign2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ToSign2D"));

	UKismetMathLibrary_ToSign2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ToRounded2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::ToRounded2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ToRounded2D"));

	UKismetMathLibrary_ToRounded2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ToDirectionAndLength2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               OutDir                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutLength                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, float* OutLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ToDirectionAndLength2D"));

	UKismetMathLibrary_ToDirectionAndLength2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutDir != nullptr)
		*OutDir = params.OutDir;
	if (OutLength != nullptr)
		*OutLength = params.OutLength;

}


// Function Engine.KismetMathLibrary.Today
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::Today()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Today"));

	UKismetMathLibrary_Today_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TLerp
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ELerpInterpolationMode> InterpMode                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_ELerpInterpolationMode> InterpMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TLerp"));

	UKismetMathLibrary_TLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.InterpMode = InterpMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TInterpTo
// ()
// Parameters:
// struct FTransform              Current                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TInterpTo"));

	UKismetMathLibrary_TInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanZeroValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::TimespanZeroValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanZeroValue"));

	UKismetMathLibrary_TimespanZeroValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanRatio
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::TimespanRatio(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanRatio"));

	UKismetMathLibrary_TimespanRatio_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMinValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::TimespanMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMinValue"));

	UKismetMathLibrary_TimespanMinValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMaxValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::TimespanMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMaxValue"));

	UKismetMathLibrary_TimespanMaxValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanFromString
// ()
// Parameters:
// struct FString                 TimespanString                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               Result                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanFromString"));

	UKismetMathLibrary_TimespanFromString_Params params;
	params.TimespanString = TimespanString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TEase
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEasingFunc> EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TEase"));

	UKismetMathLibrary_TEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Tan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Tan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Tan"));

	UKismetMathLibrary_Tan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Subtract_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorVector"));

	UKismetMathLibrary_Subtract_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorInt
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Subtract_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorInt"));

	UKismetMathLibrary_Subtract_VectorInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Subtract_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorFloat"));

	UKismetMathLibrary_Subtract_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector4Vector4"));

	UKismetMathLibrary_Subtract_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D"));

	UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat"));

	UKismetMathLibrary_Subtract_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan"));

	UKismetMathLibrary_Subtract_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_QuatQuat
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_QuatQuat"));

	UKismetMathLibrary_Subtract_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor"));

	UKismetMathLibrary_Subtract_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint"));

	UKismetMathLibrary_Subtract_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntPointInt
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Subtract_IntPointInt(const struct FIntPoint& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_IntPointInt"));

	UKismetMathLibrary_Subtract_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Subtract_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_IntInt"));

	UKismetMathLibrary_Subtract_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Subtract_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Int64Int64"));

	UKismetMathLibrary_Subtract_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Subtract_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_FloatFloat"));

	UKismetMathLibrary_Subtract_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan"));

	UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime"));

	UKismetMathLibrary_Subtract_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Subtract_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_ByteByte"));

	UKismetMathLibrary_Subtract_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Square
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Square(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Square"));

	UKismetMathLibrary_Square_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sqrt
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Sqrt(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sqrt"));

	UKismetMathLibrary_Sqrt_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Spherical2DToUnitCartesian(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian"));

	UKismetMathLibrary_Spherical2DToUnitCartesian_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Sin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sin"));

	UKismetMathLibrary_Sin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfInteger64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::SignOfInteger64(int64_t A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfInteger64"));

	UKismetMathLibrary_SignOfInteger64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfInteger
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::SignOfInteger(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfInteger"));

	UKismetMathLibrary_SignOfInteger_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::SignOfFloat(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfFloat"));

	UKismetMathLibrary_SignOfFloat_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SetRandomStreamSeed
// ()
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            NewSeed                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SetRandomStreamSeed"));

	UKismetMathLibrary_SetRandomStreamSeed_Params params;
	params.NewSeed = NewSeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Stream != nullptr)
		*Stream = params.Stream;

}


// Function Engine.KismetMathLibrary.Set2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Set2D(struct FVector2D* A, float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Set2D"));

	UKismetMathLibrary_Set2D_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.SelectVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectVector"));

	UKismetMathLibrary_SelectVector_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectTransform
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectTransform"));

	UKismetMathLibrary_SelectTransform_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectString
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetMathLibrary::SelectString(const struct FString& A, const struct FString& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectString"));

	UKismetMathLibrary_SelectString_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectRotator"));

	UKismetMathLibrary_SelectRotator_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetMathLibrary::SelectObject(class UObject* A, class UObject* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectObject"));

	UKismetMathLibrary_SelectObject_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::SelectInt(int A, int B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectInt"));

	UKismetMathLibrary_SelectInt_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectFloat"));

	UKismetMathLibrary_SelectFloat_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectColor"));

	UKismetMathLibrary_SelectColor_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectClass
// ()
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* UKismetMathLibrary::SelectClass(class UClass* A, class UClass* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectClass"));

	UKismetMathLibrary_SelectClass_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SeedRandomStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetMathLibrary::SeedRandomStream(struct FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SeedRandomStream"));

	UKismetMathLibrary_SeedRandomStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Stream != nullptr)
		*Stream = params.Stream;

}


// Function Engine.KismetMathLibrary.SafeDivide
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::SafeDivide(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SafeDivide"));

	UKismetMathLibrary_SafeDivide_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Round64
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Round64(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Round64"));

	UKismetMathLibrary_Round64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Round
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Round(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Round"));

	UKismetMathLibrary_Round_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// ()
// Parameters:
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle"));

	UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;
	params.Axis = Axis;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotateAngleAxis
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleDeg                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotateAngleAxis"));

	UKismetMathLibrary_RotateAngleAxis_Params params;
	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RLerp
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RLerp"));

	UKismetMathLibrary_RLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_Constant
// ()
// Parameters:
// struct FRotator                Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo_Constant"));

	UKismetMathLibrary_RInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo
// ()
// Parameters:
// struct FRotator                Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo"));

	UKismetMathLibrary_RInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RGBToHSV_Vector
// ()
// Parameters:
// struct FLinearColor            RGB                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            HSV                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV_Vector"));

	UKismetMathLibrary_RGBToHSV_Vector_Params params;
	params.RGB = RGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HSV != nullptr)
		*HSV = params.HSV;

}


// Function Engine.KismetMathLibrary.RGBToHSV
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          H                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          S                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          V                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV"));

	UKismetMathLibrary_RGBToHSV_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (H != nullptr)
		*H = params.H;
	if (S != nullptr)
		*S = params.S;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.RGBLinearToHSV
// ()
// Parameters:
// struct FLinearColor            RGB                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::RGBLinearToHSV(const struct FLinearColor& RGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBLinearToHSV"));

	UKismetMathLibrary_RGBLinearToHSV_Params params;
	params.RGB = RGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ResetVectorSpringState
// ()
// Parameters:
// struct FVectorSpringState      SpringState                    (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetMathLibrary::ResetVectorSpringState(struct FVectorSpringState* SpringState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ResetVectorSpringState"));

	UKismetMathLibrary_ResetVectorSpringState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SpringState != nullptr)
		*SpringState = params.SpringState;

}


// Function Engine.KismetMathLibrary.ResetRandomStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetMathLibrary::ResetRandomStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ResetRandomStream"));

	UKismetMathLibrary_ResetRandomStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetMathLibrary.ResetFloatSpringState
// ()
// Parameters:
// struct FFloatSpringState       SpringState                    (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetMathLibrary::ResetFloatSpringState(struct FFloatSpringState* SpringState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ResetFloatSpringState"));

	UKismetMathLibrary_ResetFloatSpringState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SpringState != nullptr)
		*SpringState = params.SpringState;

}


// Function Engine.KismetMathLibrary.REase
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEasingFunc> EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.REase"));

	UKismetMathLibrary_REase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
// ()
// Parameters:
// struct FVector                 ConeDir                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxYawInRadians                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxPitchInRadians              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream"));

	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadiansFromStream_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
// ()
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxYawInRadians                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxPitchInRadians              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians"));

	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
// ()
// Parameters:
// struct FVector                 ConeDir                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxYawInDegrees                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxPitchInDegrees              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream"));

	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegreesFromStream_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
// ()
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxYawInDegrees                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxPitchInDegrees              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees"));

	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
// ()
// Parameters:
// struct FVector                 ConeDir                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ConeHalfAngleInRadians         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream"));

	UKismetMathLibrary_RandomUnitVectorInConeInRadiansFromStream_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
// ()
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ConeHalfAngleInRadians         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians"));

	UKismetMathLibrary_RandomUnitVectorInConeInRadians_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
// ()
// Parameters:
// struct FVector                 ConeDir                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ConeHalfAngleInDegrees         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream"));

	UKismetMathLibrary_RandomUnitVectorInConeInDegreesFromStream_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
// ()
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ConeHalfAngleInDegrees         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees"));

	UKismetMathLibrary_RandomUnitVectorInConeInDegrees_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVectorFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream"));

	UKismetMathLibrary_RandomUnitVectorFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomUnitVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVector"));

	UKismetMathLibrary_RandomUnitVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotatorFromStream
// ()
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotatorFromStream"));

	UKismetMathLibrary_RandomRotatorFromStream_Params params;
	params.bRoll = bRoll;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotator
// ()
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::RandomRotator(bool bRoll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotator"));

	UKismetMathLibrary_RandomRotator_Params params;
	params.bRoll = bRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomPointInBoundingBox
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomPointInBoundingBox"));

	UKismetMathLibrary_RandomPointInBoundingBox_Params params;
	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// ()
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream"));

	UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRange
// ()
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::RandomIntegerInRange(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRange"));

	UKismetMathLibrary_RandomIntegerInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerFromStream
// ()
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::RandomIntegerFromStream(int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerFromStream"));

	UKismetMathLibrary_RandomIntegerFromStream_Params params;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger64InRange
// ()
// Parameters:
// int64_t                        Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::RandomInteger64InRange(int64_t Min, int64_t Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomInteger64InRange"));

	UKismetMathLibrary_RandomInteger64InRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger64
// ()
// Parameters:
// int64_t                        Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::RandomInteger64(int64_t Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomInteger64"));

	UKismetMathLibrary_RandomInteger64_Params params;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger
// ()
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::RandomInteger(int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomInteger"));

	UKismetMathLibrary_RandomInteger_Params params;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// ()
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream"));

	UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRange
// ()
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::RandomFloatInRange(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRange"));

	UKismetMathLibrary_RandomFloatInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::RandomFloatFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatFromStream"));

	UKismetMathLibrary_RandomFloatFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloat
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::RandomFloat()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloat"));

	UKismetMathLibrary_RandomFloat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
// ()
// Parameters:
// float                          Weight                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           RandomStream                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream"));

	UKismetMathLibrary_RandomBoolWithWeightFromStream_Params params;
	params.Weight = Weight;
	params.RandomStream = RandomStream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolWithWeight
// ()
// Parameters:
// float                          Weight                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::RandomBoolWithWeight(float Weight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBoolWithWeight"));

	UKismetMathLibrary_RandomBoolWithWeight_Params params;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::RandomBoolFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBoolFromStream"));

	UKismetMathLibrary_RandomBoolFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBool
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::RandomBool()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBool"));

	UKismetMathLibrary_RandomBool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RadiansToDegrees
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::RadiansToDegrees(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RadiansToDegrees"));

	UKismetMathLibrary_RadiansToDegrees_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_VectorUp
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_VectorUp(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_VectorUp"));

	UKismetMathLibrary_Quat_VectorUp_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_VectorRight
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_VectorRight(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_VectorRight"));

	UKismetMathLibrary_Quat_VectorRight_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_VectorForward
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_VectorForward(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_VectorForward"));

	UKismetMathLibrary_Quat_VectorForward_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_UnrotateVector
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_UnrotateVector"));

	UKismetMathLibrary_Quat_UnrotateVector_Params params;
	params.Q = Q;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_SizeSquared
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Quat_SizeSquared(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_SizeSquared"));

	UKismetMathLibrary_Quat_SizeSquared_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Size
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Quat_Size(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Size"));

	UKismetMathLibrary_Quat_Size_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_SetFromEuler
// ()
// Parameters:
// struct FQuat                   Q                              (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Euler                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Quat_SetFromEuler(struct FQuat* Q, const struct FVector& Euler)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_SetFromEuler"));

	UKismetMathLibrary_Quat_SetFromEuler_Params params;
	params.Euler = Euler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Q != nullptr)
		*Q = params.Q;

}


// Function Engine.KismetMathLibrary.Quat_SetComponents
// ()
// Parameters:
// struct FQuat                   Q                              (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          W                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Quat_SetComponents(struct FQuat* Q, float X, float Y, float Z, float W)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_SetComponents"));

	UKismetMathLibrary_Quat_SetComponents_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Q != nullptr)
		*Q = params.Q;

}


// Function Engine.KismetMathLibrary.Quat_Rotator
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Quat_Rotator(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Rotator"));

	UKismetMathLibrary_Quat_Rotator_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_RotateVector
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_RotateVector(const struct FQuat& Q, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_RotateVector"));

	UKismetMathLibrary_Quat_RotateVector_Params params;
	params.Q = Q;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Normalized
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_Normalized(const struct FQuat& Q, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Normalized"));

	UKismetMathLibrary_Quat_Normalized_Params params;
	params.Q = Q;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Normalize
// ()
// Parameters:
// struct FQuat                   Q                              (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Quat_Normalize(struct FQuat* Q, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Normalize"));

	UKismetMathLibrary_Quat_Normalize_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Q != nullptr)
		*Q = params.Q;

}


// Function Engine.KismetMathLibrary.Quat_MakeFromEuler
// ()
// Parameters:
// struct FVector                 Euler                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_MakeFromEuler(const struct FVector& Euler)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_MakeFromEuler"));

	UKismetMathLibrary_Quat_MakeFromEuler_Params params;
	params.Euler = Euler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Log
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_Log(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Log"));

	UKismetMathLibrary_Quat_Log_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_IsNormalized
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Quat_IsNormalized(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_IsNormalized"));

	UKismetMathLibrary_Quat_IsNormalized_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_IsNonFinite
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Quat_IsNonFinite(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_IsNonFinite"));

	UKismetMathLibrary_Quat_IsNonFinite_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_IsIdentity
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Quat_IsIdentity(const struct FQuat& Q, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_IsIdentity"));

	UKismetMathLibrary_Quat_IsIdentity_Params params;
	params.Q = Q;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_IsFinite
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Quat_IsFinite(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_IsFinite"));

	UKismetMathLibrary_Quat_IsFinite_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Inversed
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_Inversed(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Inversed"));

	UKismetMathLibrary_Quat_Inversed_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Identity
// ()
// Parameters:
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_Identity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Identity"));

	UKismetMathLibrary_Quat_Identity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_GetRotationAxis
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_GetRotationAxis(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_GetRotationAxis"));

	UKismetMathLibrary_Quat_GetRotationAxis_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_GetAxisZ
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_GetAxisZ(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_GetAxisZ"));

	UKismetMathLibrary_Quat_GetAxisZ_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_GetAxisY
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_GetAxisY(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_GetAxisY"));

	UKismetMathLibrary_Quat_GetAxisY_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_GetAxisX
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_GetAxisX(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_GetAxisX"));

	UKismetMathLibrary_Quat_GetAxisX_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_GetAngle
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Quat_GetAngle(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_GetAngle"));

	UKismetMathLibrary_Quat_GetAngle_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Exp
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Quat_Exp(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Exp"));

	UKismetMathLibrary_Quat_Exp_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_Euler
// ()
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Quat_Euler(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_Euler"));

	UKismetMathLibrary_Quat_Euler_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
// ()
// Parameters:
// struct FQuat                   A                              (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Quat_EnforceShortestArcWith(struct FQuat* A, const struct FQuat& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith"));

	UKismetMathLibrary_Quat_EnforceShortestArcWith_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Quat_AngularDistance
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Quat_AngularDistance"));

	UKismetMathLibrary_Quat_AngularDistance_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToVector
// ()
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToVector"));

	UKismetMathLibrary_ProjectVectorOnToVector_Params params;
	params.V = V;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
// ()
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane"));

	UKismetMathLibrary_ProjectVectorOnToPlane_Params params;
	params.V = V;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectPointOnToPlane
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PlaneBase                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectPointOnToPlane"));

	UKismetMathLibrary_ProjectPointOnToPlane_Params params;
	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.PointsAreCoplanar
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.PointsAreCoplanar"));

	UKismetMathLibrary_PointsAreCoplanar_Params params;
	params.Points = Points;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.PerlinNoise1D
// ()
// Parameters:
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::PerlinNoise1D(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.PerlinNoise1D"));

	UKismetMathLibrary_PerlinNoise1D_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Percent_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_IntInt"));

	UKismetMathLibrary_Percent_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Percent_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_FloatFloat"));

	UKismetMathLibrary_Percent_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Percent_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_ByteByte"));

	UKismetMathLibrary_Percent_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Or_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Or_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Or_IntInt"));

	UKismetMathLibrary_Or_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Or_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Or_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Or_Int64Int64"));

	UKismetMathLibrary_Or_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Now
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::Now()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Now"));

	UKismetMathLibrary_Now_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector"));

	UKismetMathLibrary_NotEqualExactly_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4"));

	UKismetMathLibrary_NotEqualExactly_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D"));

	UKismetMathLibrary_NotEqualExactly_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_VectorVector"));

	UKismetMathLibrary_NotEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4"));

	UKismetMathLibrary_NotEqual_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D"));

	UKismetMathLibrary_NotEqual_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan"));

	UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator"));

	UKismetMathLibrary_NotEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_QuatQuat
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_QuatQuat"));

	UKismetMathLibrary_NotEqual_QuatQuat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ObjectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ObjectObject"));

	UKismetMathLibrary_NotEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_NameName
// ()
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_NameName"));

	UKismetMathLibrary_NotEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix
// ()
// Parameters:
// struct FMatrix                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix"));

	UKismetMathLibrary_NotEqual_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor"));

	UKismetMathLibrary_NotEqual_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint"));

	UKismetMathLibrary_NotEqual_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_IntInt"));

	UKismetMathLibrary_NotEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_Int64Int64"));

	UKismetMathLibrary_NotEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_FloatFloat"));

	UKismetMathLibrary_NotEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime"));

	UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ClassClass
// ()
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ClassClass"));

	UKismetMathLibrary_NotEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ByteByte"));

	UKismetMathLibrary_NotEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_BoolBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_BoolBool"));

	UKismetMathLibrary_NotEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_PreBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Not_PreBool(bool A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Not_PreBool"));

	UKismetMathLibrary_Not_PreBool_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Not_Int64(int64_t A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Not_Int64"));

	UKismetMathLibrary_Not_Int64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_Int
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Not_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Not_Int"));

	UKismetMathLibrary_Not_Int_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalSafe2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::NormalSafe2D(const struct FVector2D& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalSafe2D"));

	UKismetMathLibrary_NormalSafe2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeToRange
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          RangeMin                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          RangeMax                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeToRange"));

	UKismetMathLibrary_NormalizeToRange_Params params;
	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizedDeltaRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizedDeltaRotator"));

	UKismetMathLibrary_NormalizedDeltaRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeAxis
// ()
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::NormalizeAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeAxis"));

	UKismetMathLibrary_NormalizeAxis_Params params;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normalize2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Normalize2D(struct FVector2D* A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normalize2D"));

	UKismetMathLibrary_Normalize2D_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.Normal2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Normal2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal2D"));

	UKismetMathLibrary_Normal2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Normal(const struct FVector& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal"));

	UKismetMathLibrary_Normal_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::NegateVector(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateVector"));

	UKismetMathLibrary_NegateVector_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::NegateRotator(const struct FRotator& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateRotator"));

	UKismetMathLibrary_NegateRotator_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Negated2D
// ()
// Parameters:
// struct FVector2D               A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Negated2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Negated2D"));

	UKismetMathLibrary_Negated2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          LocationTolerance              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          RotationTolerance              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scale3DTolerance               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform"));

	UKismetMathLibrary_NearlyEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;
	params.LocationTolerance = LocationTolerance;
	params.RotationTolerance = RotationTolerance;
	params.Scale3DTolerance = Scale3DTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat"));

	UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// ()
// Parameters:
// float                          Base                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Exp                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat"));

	UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;
	params.Base = Base;
	params.Exp = Exp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyByPi
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::MultiplyByPi(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyByPi"));

	UKismetMathLibrary_MultiplyByPi_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Multiply_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorVector"));

	UKismetMathLibrary_Multiply_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorInt
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Multiply_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorInt"));

	UKismetMathLibrary_Multiply_VectorInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Multiply_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorFloat"));

	UKismetMathLibrary_Multiply_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Vector4Vector4"));

	UKismetMathLibrary_Multiply_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D"));

	UKismetMathLibrary_Multiply_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat"));

	UKismetMathLibrary_Multiply_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_TimespanFloat
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::Multiply_TimespanFloat(const struct FTimespan& A, float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_TimespanFloat"));

	UKismetMathLibrary_Multiply_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorInt
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Multiply_RotatorInt(const struct FRotator& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorInt"));

	UKismetMathLibrary_Multiply_RotatorInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorFloat
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Multiply_RotatorFloat(const struct FRotator& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorFloat"));

	UKismetMathLibrary_Multiply_RotatorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_QuatQuat
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_QuatQuat"));

	UKismetMathLibrary_Multiply_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_MatrixMatrix
// ()
// Parameters:
// struct FMatrix                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_MatrixMatrix"));

	UKismetMathLibrary_Multiply_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_MatrixFloat
// ()
// Parameters:
// struct FMatrix                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Multiply_MatrixFloat(const struct FMatrix& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_MatrixFloat"));

	UKismetMathLibrary_Multiply_MatrixFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor"));

	UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(const struct FLinearColor& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat"));

	UKismetMathLibrary_Multiply_LinearColorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint"));

	UKismetMathLibrary_Multiply_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntPointInt
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Multiply_IntPointInt(const struct FIntPoint& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntPointInt"));

	UKismetMathLibrary_Multiply_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Multiply_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntInt"));

	UKismetMathLibrary_Multiply_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntFloat
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Multiply_IntFloat(int A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntFloat"));

	UKismetMathLibrary_Multiply_IntFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Multiply_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Int64Int64"));

	UKismetMathLibrary_Multiply_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Multiply_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_FloatFloat"));

	UKismetMathLibrary_Multiply_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Multiply_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_ByteByte"));

	UKismetMathLibrary_Multiply_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MirrorVectorByNormal
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InNormal                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MirrorVectorByNormal"));

	UKismetMathLibrary_MirrorVectorByNormal_Params params;
	params.InVect = InVect;
	params.InNormal = InNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MinOfIntArray
// ()
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfIntArray"));

	UKismetMathLibrary_MinOfIntArray_Params params;
	params.IntArray = IntArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;

}


// Function Engine.KismetMathLibrary.MinOfFloatArray
// ()
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfFloatArray"));

	UKismetMathLibrary_MinOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;

}


// Function Engine.KismetMathLibrary.MinOfByteArray
// ()
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfByteArray"));

	UKismetMathLibrary_MinOfByteArray_Params params;
	params.ByteArray = ByteArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;

}


// Function Engine.KismetMathLibrary.MinInt64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::MinInt64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinInt64"));

	UKismetMathLibrary_MinInt64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MinimumAreaRectangle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>         InVerts                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 SampleSurfaceNormal            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutRectCenter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                OutRectRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          OutSideLengthX                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutSideLengthY                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinimumAreaRectangle"));

	UKismetMathLibrary_MinimumAreaRectangle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRectCenter != nullptr)
		*OutRectCenter = params.OutRectCenter;
	if (OutRectRotation != nullptr)
		*OutRectRotation = params.OutRectRotation;
	if (OutSideLengthX != nullptr)
		*OutSideLengthX = params.OutSideLengthX;
	if (OutSideLengthY != nullptr)
		*OutSideLengthY = params.OutSideLengthY;

}


// Function Engine.KismetMathLibrary.Min
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Min(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Min"));

	UKismetMathLibrary_Min_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MaxOfIntArray
// ()
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfIntArray"));

	UKismetMathLibrary_MaxOfIntArray_Params params;
	params.IntArray = IntArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

}


// Function Engine.KismetMathLibrary.MaxOfFloatArray
// ()
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfFloatArray"));

	UKismetMathLibrary_MaxOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

}


// Function Engine.KismetMathLibrary.MaxOfByteArray
// ()
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfByteArray"));

	UKismetMathLibrary_MaxOfByteArray_Params params;
	params.ByteArray = ByteArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

}


// Function Engine.KismetMathLibrary.MaxInt64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::MaxInt64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxInt64"));

	UKismetMathLibrary_MaxInt64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Max
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Max(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Max"));

	UKismetMathLibrary_Max_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_TransformVector4
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector4                V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_TransformVector4"));

	UKismetMathLibrary_Matrix_TransformVector4_Params params;
	params.M = M;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_TransformVector
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_TransformVector"));

	UKismetMathLibrary_Matrix_TransformVector_Params params;
	params.M = M;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_TransformPosition
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_TransformPosition"));

	UKismetMathLibrary_Matrix_TransformPosition_Params params;
	params.M = M;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_ToQuat
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Matrix_ToQuat(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_ToQuat"));

	UKismetMathLibrary_Matrix_ToQuat_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_SetOrigin
// ()
// Parameters:
// struct FMatrix                 M                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 NewOrigin                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_SetOrigin(struct FMatrix* M, const struct FVector& NewOrigin)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_SetOrigin"));

	UKismetMathLibrary_Matrix_SetOrigin_Params params;
	params.NewOrigin = NewOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;

}


// Function Engine.KismetMathLibrary.Matrix_SetColumn
// ()
// Parameters:
// struct FMatrix                 M                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EMatrixColumns> column                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_SetColumn(struct FMatrix* M, TEnumAsByte<Engine_EMatrixColumns> column, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_SetColumn"));

	UKismetMathLibrary_Matrix_SetColumn_Params params;
	params.column = column;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;

}


// Function Engine.KismetMathLibrary.Matrix_SetAxis
// ()
// Parameters:
// struct FMatrix                 M                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_EAxis> Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 AxisVector                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_SetAxis(struct FMatrix* M, TEnumAsByte<CoreUObject_EAxis> Axis, const struct FVector& AxisVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_SetAxis"));

	UKismetMathLibrary_Matrix_SetAxis_Params params;
	params.Axis = Axis;
	params.AxisVector = AxisVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;

}


// Function Engine.KismetMathLibrary.Matrix_ScaleTranslation
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Scale3D                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_ScaleTranslation"));

	UKismetMathLibrary_Matrix_ScaleTranslation_Params params;
	params.M = M;
	params.Scale3D = Scale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_RemoveTranslation
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_RemoveTranslation(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_RemoveTranslation"));

	UKismetMathLibrary_Matrix_RemoveTranslation_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_RemoveScaling
// ()
// Parameters:
// struct FMatrix                 M                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_RemoveScaling(struct FMatrix* M, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_RemoveScaling"));

	UKismetMathLibrary_Matrix_RemoveScaling_Params params;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;

}


// Function Engine.KismetMathLibrary.Matrix_Mirror
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_EAxis> MirrorAxis                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_EAxis> FlipAxis                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> MirrorAxis, TEnumAsByte<CoreUObject_EAxis> FlipAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_Mirror"));

	UKismetMathLibrary_Matrix_Mirror_Params params;
	params.M = M;
	params.MirrorAxis = MirrorAxis;
	params.FlipAxis = FlipAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_InverseTransformVector
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_InverseTransformVector"));

	UKismetMathLibrary_Matrix_InverseTransformVector_Params params;
	params.M = M;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition"));

	UKismetMathLibrary_Matrix_InverseTransformPosition_Params params;
	params.M = M;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_Identity
// ()
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_Identity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_Identity"));

	UKismetMathLibrary_Matrix_Identity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetUnitAxis
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_EAxis> Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetUnitAxis"));

	UKismetMathLibrary_Matrix_GetUnitAxis_Params params;
	params.M = M;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetUnitAxes
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetUnitAxes"));

	UKismetMathLibrary_Matrix_GetUnitAxes_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;

}


// Function Engine.KismetMathLibrary.Matrix_GetTransposed
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_GetTransposed(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetTransposed"));

	UKismetMathLibrary_Matrix_GetTransposed_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_GetTransposeAdjoint(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint"));

	UKismetMathLibrary_Matrix_GetTransposeAdjoint_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetScaleVector
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetScaleVector"));

	UKismetMathLibrary_Matrix_GetScaleVector_Params params;
	params.M = M;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetScaledAxis
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_EAxis> Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetScaledAxis"));

	UKismetMathLibrary_Matrix_GetScaledAxis_Params params;
	params.M = M;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetScaledAxes
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetScaledAxes"));

	UKismetMathLibrary_Matrix_GetScaledAxes_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;

}


// Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Matrix_GetRotDeterminant(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant"));

	UKismetMathLibrary_Matrix_GetRotDeterminant_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetRotator
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Matrix_GetRotator(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetRotator"));

	UKismetMathLibrary_Matrix_GetRotator_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetOrigin
// ()
// Parameters:
// struct FMatrix                 InMatrix                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_GetOrigin(const struct FMatrix& InMatrix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetOrigin"));

	UKismetMathLibrary_Matrix_GetOrigin_Params params;
	params.InMatrix = InMatrix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Matrix_GetMaximumAxisScale(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale"));

	UKismetMathLibrary_Matrix_GetMaximumAxisScale_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale"));

	UKismetMathLibrary_Matrix_GetMatrixWithoutScale_Params params;
	params.M = M;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetInverse
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_GetInverse(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetInverse"));

	UKismetMathLibrary_Matrix_GetInverse_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane"));

	UKismetMathLibrary_Matrix_GetFrustumTopPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane"));

	UKismetMathLibrary_Matrix_GetFrustumRightPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane"));

	UKismetMathLibrary_Matrix_GetFrustumNearPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane"));

	UKismetMathLibrary_Matrix_GetFrustumLeftPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane"));

	UKismetMathLibrary_Matrix_GetFrustumFarPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPlane                  OutPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane"));

	UKismetMathLibrary_Matrix_GetFrustumBottomPlane_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetDeterminant
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Matrix_GetDeterminant(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetDeterminant"));

	UKismetMathLibrary_Matrix_GetDeterminant_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_GetColumn
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EMatrixColumns> column                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<Engine_EMatrixColumns> column)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_GetColumn"));

	UKismetMathLibrary_Matrix_GetColumn_Params params;
	params.M = M;
	params.column = column;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_ContainsNaN
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Matrix_ContainsNaN(const struct FMatrix& M)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_ContainsNaN"));

	UKismetMathLibrary_Matrix_ContainsNaN_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Translation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation"));

	UKismetMathLibrary_Matrix_ConcatenateTranslation_Params params;
	params.M = M;
	params.Translation = Translation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Matrix_ApplyScale
// ()
// Parameters:
// struct FMatrix                 M                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Matrix_ApplyScale(const struct FMatrix& M, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Matrix_ApplyScale"));

	UKismetMathLibrary_Matrix_ApplyScale_Params params;
	params.M = M;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeUnclamped
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeUnclamped"));

	UKismetMathLibrary_MapRangeUnclamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeClamped
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeClamped"));

	UKismetMathLibrary_MapRangeClamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector4
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          W                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::MakeVector4(float X, float Y, float Z, float W)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector4"));

	UKismetMathLibrary_MakeVector4_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector2D
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector2D"));

	UKismetMathLibrary_MakeVector2D_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector"));

	UKismetMathLibrary_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTransform
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTransform"));

	UKismetMathLibrary_MakeTransform_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTimespan2
// ()
// Parameters:
// int                            Days                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hours                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minutes                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            FractionNano                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTimespan2"));

	UKismetMathLibrary_MakeTimespan2_Params params;
	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.FractionNano = FractionNano;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTimespan
// ()
// Parameters:
// int                            Days                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hours                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minutes                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTimespan"));

	UKismetMathLibrary_MakeTimespan_Params params;
	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.Milliseconds = Milliseconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZY
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromZY(const struct FVector& Z, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZY"));

	UKismetMathLibrary_MakeRotFromZY_Params params;
	params.Z = Z;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZX
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromZX(const struct FVector& Z, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZX"));

	UKismetMathLibrary_MakeRotFromZX_Params params;
	params.Z = Z;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZ
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromZ(const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZ"));

	UKismetMathLibrary_MakeRotFromZ_Params params;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYZ
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYZ"));

	UKismetMathLibrary_MakeRotFromYZ_Params params;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYX
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromYX(const struct FVector& Y, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYX"));

	UKismetMathLibrary_MakeRotFromYX_Params params;
	params.Y = Y;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromY
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromY(const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromY"));

	UKismetMathLibrary_MakeRotFromY_Params params;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXZ
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromXZ(const struct FVector& X, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXZ"));

	UKismetMathLibrary_MakeRotFromXZ_Params params;
	params.X = X;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXY
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromXY(const struct FVector& X, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXY"));

	UKismetMathLibrary_MakeRotFromXY_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromX
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotFromX(const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromX"));

	UKismetMathLibrary_MakeRotFromX_Params params;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotator
// ()
// Parameters:
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotator(float Roll, float Pitch, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotator"));

	UKismetMathLibrary_MakeRotator_Params params;
	params.Roll = Roll;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotationFromAxes
// ()
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Right                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotationFromAxes"));

	UKismetMathLibrary_MakeRotationFromAxes_Params params;
	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRelativeTransform
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              RelativeTo                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRelativeTransform"));

	UKismetMathLibrary_MakeRelativeTransform_Params params;
	params.A = A;
	params.RelativeTo = RelativeTo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRandomStream
// ()
// Parameters:
// int                            InitialSeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRandomStream           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
struct FRandomStream UKismetMathLibrary::MakeRandomStream(int InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRandomStream"));

	UKismetMathLibrary_MakeRandomStream_Params params;
	params.InitialSeed = InitialSeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeQualifiedFrameTime
// ()
// Parameters:
// struct FFrameNumber            Frame                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate              FrameRate                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SubFrame                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQualifiedFrameTime     ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FQualifiedFrameTime UKismetMathLibrary::MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeQualifiedFrameTime"));

	UKismetMathLibrary_MakeQualifiedFrameTime_Params params;
	params.Frame = Frame;
	params.FrameRate = FrameRate;
	params.SubFrame = SubFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakePulsatingValue
// ()
// Parameters:
// float                          InCurrentTime                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPulsesPerSecond              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InPhase                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakePulsatingValue"));

	UKismetMathLibrary_MakePulsatingValue_Params params;
	params.InCurrentTime = InCurrentTime;
	params.InPulsesPerSecond = InPulsesPerSecond;
	params.InPhase = InPhase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FPlane UKismetMathLibrary::MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal"));

	UKismetMathLibrary_MakePlaneFromPointAndNormal_Params params;
	params.Point = Point;
	params.Normal = Normal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeFrameRate
// ()
// Parameters:
// int                            Numerator                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Denominator                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FFrameRate UKismetMathLibrary::MakeFrameRate(int Numerator, int Denominator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeFrameRate"));

	UKismetMathLibrary_MakeFrameRate_Params params;
	params.Numerator = Numerator;
	params.Denominator = Denominator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeDateTime
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Day                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hour                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minute                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Second                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Millisecond                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeDateTime"));

	UKismetMathLibrary_MakeDateTime_Params params;
	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;
	params.Millisecond = Millisecond;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeColor
// ()
// Parameters:
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeColor"));

	UKismetMathLibrary_MakeColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeBox2D
// ()
// Parameters:
// struct FVector2D               Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox2D                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
struct FBox2D UKismetMathLibrary::MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeBox2D"));

	UKismetMathLibrary_MakeBox2D_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeBox
// ()
// Parameters:
// struct FVector                 Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FBox UKismetMathLibrary::MakeBox(const struct FVector& Min, const struct FVector& Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeBox"));

	UKismetMathLibrary_MakeBox_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Loge
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Loge(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Loge"));

	UKismetMathLibrary_Loge_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Log
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Base                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Log(float A, float Base)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Log"));

	UKismetMathLibrary_Log_Params params;
	params.A = A;
	params.Base = Base;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal"));

	UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                  APlane                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection"));

	UKismetMathLibrary_LinePlaneIntersection_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV"));

	UKismetMathLibrary_LinearColorLerpUsingHSV_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerp
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerp"));

	UKismetMathLibrary_LinearColorLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Yellow
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Yellow()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Yellow"));

	UKismetMathLibrary_LinearColor_Yellow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_White
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_White()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_White"));

	UKismetMathLibrary_LinearColor_White_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Transparent
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Transparent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Transparent"));

	UKismetMathLibrary_LinearColor_Transparent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_ToRGBE
// ()
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetMathLibrary::LinearColor_ToRGBE(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_ToRGBE"));

	UKismetMathLibrary_LinearColor_ToRGBE_Params params;
	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InOpacity                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity"));

	UKismetMathLibrary_LinearColor_ToNewOpacity_Params params;
	params.InColor = InColor;
	params.InOpacity = InOpacity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_SetTemperature
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InTemperature                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetTemperature(struct FLinearColor* InOutColor, float InTemperature)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetTemperature"));

	UKismetMathLibrary_LinearColor_SetTemperature_Params params;
	params.InTemperature = InTemperature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_SetRGBA
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetRGBA(struct FLinearColor* InOutColor, float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetRGBA"));

	UKismetMathLibrary_LinearColor_SetRGBA_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_SetRandomHue
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetRandomHue(struct FLinearColor* InOutColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetRandomHue"));

	UKismetMathLibrary_LinearColor_SetRandomHue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  InSRGB                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetFromSRGB(struct FLinearColor* InOutColor, const struct FColor& InSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB"));

	UKismetMathLibrary_LinearColor_SetFromSRGB_Params params;
	params.InSRGB = InSRGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_SetFromPow22
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  InColor                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetFromPow22(struct FLinearColor* InOutColor, const struct FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetFromPow22"));

	UKismetMathLibrary_LinearColor_SetFromPow22_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_SetFromHSV
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          H                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          S                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_SetFromHSV(struct FLinearColor* InOutColor, float H, float S, float V, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_SetFromHSV"));

	UKismetMathLibrary_LinearColor_SetFromHSV_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_Set
// ()
// Parameters:
// struct FLinearColor            InOutColor                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::LinearColor_Set(struct FLinearColor* InOutColor, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Set"));

	UKismetMathLibrary_LinearColor_Set_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;

}


// Function Engine.KismetMathLibrary.LinearColor_Red
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Red()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Red"));

	UKismetMathLibrary_LinearColor_Red_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_QuantizeRound
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetMathLibrary::LinearColor_QuantizeRound(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_QuantizeRound"));

	UKismetMathLibrary_LinearColor_QuantizeRound_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Quantize
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetMathLibrary::LinearColor_Quantize(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Quantize"));

	UKismetMathLibrary_LinearColor_Quantize_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_IsNearEqual
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_IsNearEqual"));

	UKismetMathLibrary_LinearColor_IsNearEqual_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Green
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Green()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Green"));

	UKismetMathLibrary_LinearColor_Green_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Gray
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Gray()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Gray"));

	UKismetMathLibrary_LinearColor_Gray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_GetMin
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::LinearColor_GetMin(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_GetMin"));

	UKismetMathLibrary_LinearColor_GetMin_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_GetMax
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::LinearColor_GetMax(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_GetMax"));

	UKismetMathLibrary_LinearColor_GetMax_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_GetLuminance
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::LinearColor_GetLuminance(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_GetLuminance"));

	UKismetMathLibrary_LinearColor_GetLuminance_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Distance
// ()
// Parameters:
// struct FLinearColor            C1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            C2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Distance"));

	UKismetMathLibrary_LinearColor_Distance_Params params;
	params.C1 = C1;
	params.C2 = C2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Desaturated
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InDesaturation                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Desaturated"));

	UKismetMathLibrary_LinearColor_Desaturated_Params params;
	params.InColor = InColor;
	params.InDesaturation = InDesaturation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Blue
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Blue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Blue"));

	UKismetMathLibrary_LinearColor_Blue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColor_Black
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::LinearColor_Black()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColor_Black"));

	UKismetMathLibrary_LinearColor_Black_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessLess_VectorRotator
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessLess_VectorRotator"));

	UKismetMathLibrary_LessLess_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan"));

	UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_IntInt"));

	UKismetMathLibrary_LessEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_Int64Int64"));

	UKismetMathLibrary_LessEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_FloatFloat"));

	UKismetMathLibrary_LessEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime"));

	UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_ByteByte"));

	UKismetMathLibrary_LessEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_TimespanTimespan"));

	UKismetMathLibrary_Less_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_IntInt"));

	UKismetMathLibrary_Less_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_Int64Int64"));

	UKismetMathLibrary_Less_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_FloatFloat"));

	UKismetMathLibrary_Less_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_DateTimeDateTime"));

	UKismetMathLibrary_Less_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_ByteByte"));

	UKismetMathLibrary_Less_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Lerp
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Lerp(float A, float B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Lerp"));

	UKismetMathLibrary_Lerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsZero2D
// ()
// Parameters:
// struct FVector2D               A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsZero2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsZero2D"));

	UKismetMathLibrary_IsZero2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsPointInBoxWithTransform
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              BoxWorldTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsPointInBoxWithTransform"));

	UKismetMathLibrary_IsPointInBoxWithTransform_Params params;
	params.Point = Point;
	params.BoxWorldTransform = BoxWorldTransform;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsPointInBox
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxOrigin                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsPointInBox"));

	UKismetMathLibrary_IsPointInBox_Params params;
	params.Point = Point;
	params.BoxOrigin = BoxOrigin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsNearlyZero2D
// ()
// Parameters:
// struct FVector2D               A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsNearlyZero2D(const struct FVector2D& A, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsNearlyZero2D"));

	UKismetMathLibrary_IsNearlyZero2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsMorning
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsMorning(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsMorning"));

	UKismetMathLibrary_IsMorning_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsLeapYear
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsLeapYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsLeapYear"));

	UKismetMathLibrary_IsLeapYear_Params params;
	params.Year = Year;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsAfternoon
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::IsAfternoon(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsAfternoon"));

	UKismetMathLibrary_IsAfternoon_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InvertTransform
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::InvertTransform(const struct FTransform& T)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InvertTransform"));

	UKismetMathLibrary_InvertTransform_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformRotation
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformRotation"));

	UKismetMathLibrary_InverseTransformRotation_Params params;
	params.T = T;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformLocation
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::InverseTransformLocation(const struct FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformLocation"));

	UKismetMathLibrary_InverseTransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformDirection
// ()
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformDirection"));

	UKismetMathLibrary_InverseTransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_Zero
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_Zero()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_Zero"));

	UKismetMathLibrary_IntPoint_Zero_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_Up
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_Up()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_Up"));

	UKismetMathLibrary_IntPoint_Up_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_Right
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_Right()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_Right"));

	UKismetMathLibrary_IntPoint_Right_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_One
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_One()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_One"));

	UKismetMathLibrary_IntPoint_One_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_Left
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_Left()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_Left"));

	UKismetMathLibrary_IntPoint_Left_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IntPoint_Down
// ()
// Parameters:
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::IntPoint_Down()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IntPoint_Down"));

	UKismetMathLibrary_IntPoint_Down_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_IntInt
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InRange_IntInt"));

	UKismetMathLibrary_InRange_IntInt_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_Int64Int64
// ()
// Parameters:
// int64_t                        Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InRange_Int64Int64"));

	UKismetMathLibrary_InRange_Int64Int64_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_FloatFloat
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InRange_FloatFloat"));

	UKismetMathLibrary_InRange_FloatFloat_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Hypotenuse
// ()
// Parameters:
// float                          Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Hypotenuse(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Hypotenuse"));

	UKismetMathLibrary_Hypotenuse_Params params;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.HSVToRGBLinear
// ()
// Parameters:
// struct FLinearColor            HSV                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::HSVToRGBLinear(const struct FLinearColor& HSV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGBLinear"));

	UKismetMathLibrary_HSVToRGBLinear_Params params;
	params.HSV = HSV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.HSVToRGB_Vector
// ()
// Parameters:
// struct FLinearColor            HSV                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            RGB                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB_Vector"));

	UKismetMathLibrary_HSVToRGB_Vector_Params params;
	params.HSV = HSV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RGB != nullptr)
		*RGB = params.RGB;

}


// Function Engine.KismetMathLibrary.HSVToRGB
// ()
// Parameters:
// float                          H                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          S                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB"));

	UKismetMathLibrary_HSVToRGB_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GridSnap_Float
// ()
// Parameters:
// float                          Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          GridSize                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GridSnap_Float(float Location, float GridSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GridSnap_Float"));

	UKismetMathLibrary_GridSnap_Float_Params params;
	params.Location = Location;
	params.GridSize = GridSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator"));

	UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan"));

	UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_IntInt"));

	UKismetMathLibrary_GreaterEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64"));

	UKismetMathLibrary_GreaterEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat"));

	UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime"));

	UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte"));

	UKismetMathLibrary_GreaterEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_TimespanTimespan"));

	UKismetMathLibrary_Greater_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_IntInt"));

	UKismetMathLibrary_Greater_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_Int64Int64"));

	UKismetMathLibrary_Greater_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_FloatFloat"));

	UKismetMathLibrary_Greater_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime"));

	UKismetMathLibrary_Greater_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_ByteByte"));

	UKismetMathLibrary_Greater_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYear
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYear"));

	UKismetMathLibrary_GetYear_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYawPitchFromVector
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYawPitchFromVector"));

	UKismetMathLibrary_GetYawPitchFromVector_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;

}


// Function Engine.KismetMathLibrary.GetVectorArrayAverage
// ()
// Parameters:
// TArray<struct FVector>         Vectors                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetVectorArrayAverage(TArray<struct FVector> Vectors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetVectorArrayAverage"));

	UKismetMathLibrary_GetVectorArrayAverage_Params params;
	params.Vectors = Vectors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetUpVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetUpVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetUpVector"));

	UKismetMathLibrary_GetUpVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalSeconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTotalSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalSeconds"));

	UKismetMathLibrary_GetTotalSeconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMinutes
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTotalMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMinutes"));

	UKismetMathLibrary_GetTotalMinutes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMilliseconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTotalMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMilliseconds"));

	UKismetMathLibrary_GetTotalMilliseconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalHours
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTotalHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalHours"));

	UKismetMathLibrary_GetTotalHours_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalDays
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTotalDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalDays"));

	UKismetMathLibrary_GetTotalDays_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTimeOfDay
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::GetTimeOfDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTimeOfDay"));

	UKismetMathLibrary_GetTimeOfDay_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTAU
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetTAU()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTAU"));

	UKismetMathLibrary_GetTAU_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSlopeDegreeAngles
// ()
// Parameters:
// struct FVector                 MyRightYAxis                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 FloorNormal                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 UpVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutSlopePitchDegreeAngle       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutSlopeRollDegreeAngle        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSlopeDegreeAngles"));

	UKismetMathLibrary_GetSlopeDegreeAngles_Params params;
	params.MyRightYAxis = MyRightYAxis;
	params.FloorNormal = FloorNormal;
	params.UpVector = UpVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSlopePitchDegreeAngle != nullptr)
		*OutSlopePitchDegreeAngle = params.OutSlopePitchDegreeAngle;
	if (OutSlopeRollDegreeAngle != nullptr)
		*OutSlopeRollDegreeAngle = params.OutSlopeRollDegreeAngle;

}


// Function Engine.KismetMathLibrary.GetSeconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSeconds"));

	UKismetMathLibrary_GetSeconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSecond
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetSecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSecond"));

	UKismetMathLibrary_GetSecond_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetRotated2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleDeg                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::GetRotated2D(const struct FVector2D& A, float AngleDeg)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetRotated2D"));

	UKismetMathLibrary_GetRotated2D_Params params;
	params.A = A;
	params.AngleDeg = AngleDeg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetRightVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetRightVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetRightVector"));

	UKismetMathLibrary_GetRightVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetReflectionVector
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SurfaceNormal                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetReflectionVector"));

	UKismetMathLibrary_GetReflectionVector_Params params;
	params.Direction = Direction;
	params.SurfaceNormal = SurfaceNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPointDistanceToSegment
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentStart                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentEnd                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetPointDistanceToSegment"));

	UKismetMathLibrary_GetPointDistanceToSegment_Params params;
	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPointDistanceToLine
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineOrigin                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineDirection                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetPointDistanceToLine"));

	UKismetMathLibrary_GetPointDistanceToLine_Params params;
	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPI
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetPI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetPI"));

	UKismetMathLibrary_GetPI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMonth
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetMonth(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMonth"));

	UKismetMathLibrary_GetMonth_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinutes
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinutes"));

	UKismetMathLibrary_GetMinutes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinute
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetMinute(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinute"));

	UKismetMathLibrary_GetMinute_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinElement
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetMinElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinElement"));

	UKismetMathLibrary_GetMinElement_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMin2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetMin2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMin2D"));

	UKismetMathLibrary_GetMin2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMilliseconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMilliseconds"));

	UKismetMathLibrary_GetMilliseconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMillisecond
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetMillisecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMillisecond"));

	UKismetMathLibrary_GetMillisecond_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMaxElement
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetMaxElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMaxElement"));

	UKismetMathLibrary_GetMaxElement_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMax2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetMax2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMax2D"));

	UKismetMathLibrary_GetMax2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHours
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHours"));

	UKismetMathLibrary_GetHours_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour12
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetHour12(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour12"));

	UKismetMathLibrary_GetHour12_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetHour(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour"));

	UKismetMathLibrary_GetHour_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetForwardVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetForwardVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetForwardVector"));

	UKismetMathLibrary_GetForwardVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDuration
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::GetDuration(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDuration"));

	UKismetMathLibrary_GetDuration_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDirectionUnitVector
// ()
// Parameters:
// struct FVector                 from                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 To                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::GetDirectionUnitVector(const struct FVector& from, const struct FVector& To)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDirectionUnitVector"));

	UKismetMathLibrary_GetDirectionUnitVector_Params params;
	params.from = from;
	params.To = To;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDays
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDays"));

	UKismetMathLibrary_GetDays_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDayOfYear
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetDayOfYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDayOfYear"));

	UKismetMathLibrary_GetDayOfYear_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDay
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::GetDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDay"));

	UKismetMathLibrary_GetDay_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDate
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::GetDate(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDate"));

	UKismetMathLibrary_GetDate_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetAzimuthAndElevation
// ()
// Parameters:
// struct FVector                 InDirection                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReferenceFrame                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Azimuth                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Elevation                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAzimuthAndElevation"));

	UKismetMathLibrary_GetAzimuthAndElevation_Params params;
	params.InDirection = InDirection;
	params.ReferenceFrame = ReferenceFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Azimuth != nullptr)
		*Azimuth = params.Azimuth;
	if (Elevation != nullptr)
		*Elevation = params.Elevation;

}


// Function Engine.KismetMathLibrary.GetAxes
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAxes"));

	UKismetMathLibrary_GetAxes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;

}


// Function Engine.KismetMathLibrary.GetAbsMax2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::GetAbsMax2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAbsMax2D"));

	UKismetMathLibrary_GetAbsMax2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetAbs2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::GetAbs2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAbs2D"));

	UKismetMathLibrary_GetAbs2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FWrap
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FWrap(float Value, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FWrap"));

	UKismetMathLibrary_FWrap_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FTruncVector
// ()
// Parameters:
// struct FVector                 InVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntVector UKismetMathLibrary::FTruncVector(const struct FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FTruncVector"));

	UKismetMathLibrary_FTruncVector_Params params;
	params.InVector = InVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FTrunc64
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::FTrunc64(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FTrunc64"));

	UKismetMathLibrary_FTrunc64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FTrunc
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::FTrunc(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FTrunc"));

	UKismetMathLibrary_FTrunc_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromSeconds
// ()
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::FromSeconds(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromSeconds"));

	UKismetMathLibrary_FromSeconds_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMinutes
// ()
// Parameters:
// float                          Minutes                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::FromMinutes(float Minutes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMinutes"));

	UKismetMathLibrary_FromMinutes_Params params;
	params.Minutes = Minutes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMilliseconds
// ()
// Parameters:
// float                          Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMilliseconds"));

	UKismetMathLibrary_FromMilliseconds_Params params;
	params.Milliseconds = Milliseconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromHours
// ()
// Parameters:
// float                          Hours                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::FromHours(float Hours)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromHours"));

	UKismetMathLibrary_FromHours_Params params;
	params.Hours = Hours;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromDays
// ()
// Parameters:
// float                          Days                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::FromDays(float Days)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromDays"));

	UKismetMathLibrary_FromDays_Params params;
	params.Days = Days;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Fraction
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Fraction(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Fraction"));

	UKismetMathLibrary_Fraction_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMod
// ()
// Parameters:
// float                          Dividend                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Divisor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Remainder                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMod"));

	UKismetMathLibrary_FMod_Params params;
	params.Dividend = Dividend;
	params.Divisor = Divisor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Remainder != nullptr)
		*Remainder = params.Remainder;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FMin(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMin"));

	UKismetMathLibrary_FMin_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMax
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FMax(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMax"));

	UKismetMathLibrary_FMax_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FloatSpringInterp
// ()
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFloatSpringState       SpringState                    (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                          Stiffness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          CriticalDampingFactor          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Mass                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FloatSpringInterp(float Current, float Target, struct FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FloatSpringInterp"));

	UKismetMathLibrary_FloatSpringInterp_Params params;
	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SpringState != nullptr)
		*SpringState = params.SpringState;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FixedTurn
// ()
// Parameters:
// float                          InCurrent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InDesired                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InDeltaRate                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FixedTurn(float InCurrent, float InDesired, float InDeltaRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FixedTurn"));

	UKismetMathLibrary_FixedTurn_Params params;
	params.InCurrent = InCurrent;
	params.InDesired = InDesired;
	params.InDeltaRate = InDeltaRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo_Constant
// ()
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo_Constant"));

	UKismetMathLibrary_FInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo
// ()
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo"));

	UKismetMathLibrary_FInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpEaseInOut
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Exponent                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpEaseInOut"));

	UKismetMathLibrary_FInterpEaseInOut_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
// ()
// Parameters:
// struct FVector                 Segment1Start                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Segment1End                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Segment2Start                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Segment2End                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Segment1Point                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Segment2Point                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments"));

	UKismetMathLibrary_FindNearestPointsOnLineSegments_Params params;
	params.Segment1Start = Segment1Start;
	params.Segment1End = Segment1End;
	params.Segment2Start = Segment2Start;
	params.Segment2End = Segment2End;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Segment1Point != nullptr)
		*Segment1Point = params.Segment1Point;
	if (Segment2Point != nullptr)
		*Segment2Point = params.Segment2Point;

}


// Function Engine.KismetMathLibrary.FindLookAtRotation
// ()
// Parameters:
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::FindLookAtRotation(const struct FVector& Start, const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindLookAtRotation"));

	UKismetMathLibrary_FindLookAtRotation_Params params;
	params.Start = Start;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindClosestPointOnSegment
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentStart                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentEnd                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindClosestPointOnSegment"));

	UKismetMathLibrary_FindClosestPointOnSegment_Params params;
	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindClosestPointOnLine
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineOrigin                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineDirection                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindClosestPointOnLine"));

	UKismetMathLibrary_FindClosestPointOnLine_Params params;
	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FFloor64
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::FFloor64(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FFloor64"));

	UKismetMathLibrary_FFloor64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FFloor
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::FFloor(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FFloor"));

	UKismetMathLibrary_FFloor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FClamp
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::FClamp(float Value, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FClamp"));

	UKismetMathLibrary_FClamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FCeil64
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::FCeil64(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FCeil64"));

	UKismetMathLibrary_FCeil64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FCeil
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::FCeil(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FCeil"));

	UKismetMathLibrary_FCeil_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Exp
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Exp(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Exp"));

	UKismetMathLibrary_Exp_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualExactly_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualExactly_VectorVector"));

	UKismetMathLibrary_EqualExactly_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4"));

	UKismetMathLibrary_EqualExactly_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D"));

	UKismetMathLibrary_EqualExactly_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_VectorVector"));

	UKismetMathLibrary_EqualEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4"));

	UKismetMathLibrary_EqualEqual_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D"));

	UKismetMathLibrary_EqualEqual_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TransformTransform"));

	UKismetMathLibrary_EqualEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan"));

	UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator"));

	UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_QuatQuat
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_QuatQuat"));

	UKismetMathLibrary_EqualEqual_QuatQuat_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject"));

	UKismetMathLibrary_EqualEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_NameName
// ()
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_NameName"));

	UKismetMathLibrary_EqualEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
// ()
// Parameters:
// struct FMatrix                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix"));

	UKismetMathLibrary_EqualEqual_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor"));

	UKismetMathLibrary_EqualEqual_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_IntInt"));

	UKismetMathLibrary_EqualEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_Int64Int64"));

	UKismetMathLibrary_EqualEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat"));

	UKismetMathLibrary_EqualEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime"));

	UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ClassClass
// ()
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ClassClass"));

	UKismetMathLibrary_EqualEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ByteByte"));

	UKismetMathLibrary_EqualEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_BoolBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_BoolBool"));

	UKismetMathLibrary_EqualEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Equal_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Equal_IntPointIntPoint"));

	UKismetMathLibrary_Equal_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Ease
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EEasingFunc> EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Ease"));

	UKismetMathLibrary_Ease_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
// ()
// Parameters:
// struct FVector                 CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector"));

	UKismetMathLibrary_DynamicWeightedMovingAverage_FVector_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
// ()
// Parameters:
// struct FRotator                CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator"));

	UKismetMathLibrary_DynamicWeightedMovingAverage_FRotator_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
// ()
// Parameters:
// float                          CurrentSample                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          PreviousSample                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxWeight                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float"));

	UKismetMathLibrary_DynamicWeightedMovingAverage_Float_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DotProduct2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DotProduct2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DotProduct2D"));

	UKismetMathLibrary_DotProduct2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Dot_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Dot_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Dot_VectorVector"));

	UKismetMathLibrary_Dot_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Divide_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorVector"));

	UKismetMathLibrary_Divide_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorInt
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Divide_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorInt"));

	UKismetMathLibrary_Divide_VectorInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Divide_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorFloat"));

	UKismetMathLibrary_Divide_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Vector4Vector4"));

	UKismetMathLibrary_Divide_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Vector2DVector2D"));

	UKismetMathLibrary_Divide_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Divide_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Vector2DFloat"));

	UKismetMathLibrary_Divide_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_TimespanFloat
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::Divide_TimespanFloat(const struct FTimespan& A, float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_TimespanFloat"));

	UKismetMathLibrary_Divide_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor"));

	UKismetMathLibrary_Divide_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_IntPointIntPoint"));

	UKismetMathLibrary_Divide_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntPointInt
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Divide_IntPointInt(const struct FIntPoint& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_IntPointInt"));

	UKismetMathLibrary_Divide_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Divide_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_IntInt"));

	UKismetMathLibrary_Divide_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Divide_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Int64Int64"));

	UKismetMathLibrary_Divide_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Divide_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_FloatFloat"));

	UKismetMathLibrary_Divide_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Divide_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_ByteByte"));

	UKismetMathLibrary_Divide_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DistanceSquared2D
// ()
// Parameters:
// struct FVector2D               v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DistanceSquared2D"));

	UKismetMathLibrary_DistanceSquared2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Distance2D
// ()
// Parameters:
// struct FVector2D               v1                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               v2                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Distance2D(const struct FVector2D& v1, const struct FVector2D& v2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Distance2D"));

	UKismetMathLibrary_Distance2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegTan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegTan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegTan"));

	UKismetMathLibrary_DegTan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegSin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegSin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegSin"));

	UKismetMathLibrary_DegSin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegreesToRadians
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegreesToRadians(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegreesToRadians"));

	UKismetMathLibrary_DegreesToRadians_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegCos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegCos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegCos"));

	UKismetMathLibrary_DegCos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan2
// ()
// Parameters:
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegAtan2(float Y, float X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan2"));

	UKismetMathLibrary_DegAtan2_Params params;
	params.Y = Y;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegAtan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan"));

	UKismetMathLibrary_DegAtan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAsin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegAsin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAsin"));

	UKismetMathLibrary_DegAsin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAcos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::DegAcos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAcos"));

	UKismetMathLibrary_DegAcos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInYear
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::DaysInYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInYear"));

	UKismetMathLibrary_DaysInYear_Params params;
	params.Year = Year;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInMonth
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::DaysInMonth(int Year, int Month)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInMonth"));

	UKismetMathLibrary_DaysInMonth_Params params;
	params.Year = Year;
	params.Month = Month;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMinValue
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::DateTimeMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMinValue"));

	UKismetMathLibrary_DateTimeMinValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMaxValue
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::DateTimeMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMaxValue"));

	UKismetMathLibrary_DateTimeMaxValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromString
// ()
// Parameters:
// struct FString                 DateTimeString                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               Result                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromString"));

	UKismetMathLibrary_DateTimeFromString_Params params;
	params.DateTimeString = DateTimeString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromIsoString
// ()
// Parameters:
// struct FString                 IsoString                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               Result                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromIsoString"));

	UKismetMathLibrary_DateTimeFromIsoString_Params params;
	params.IsoString = IsoString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CrossProduct2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CrossProduct2D"));

	UKismetMathLibrary_CrossProduct2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cross_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Cross_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cross_VectorVector"));

	UKismetMathLibrary_Cross_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
// ()
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CreateVectorFromYawPitch"));

	UKismetMathLibrary_CreateVectorFromYawPitch_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Length = Length;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Cos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cos"));

	UKismetMathLibrary_Cos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ConvertTransformToRelative
// ()
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ParentTransform                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ConvertTransformToRelative"));

	UKismetMathLibrary_ConvertTransformToRelative_Params params;
	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToVector2D
// ()
// Parameters:
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Conv_VectorToVector2D(const struct FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToVector2D"));

	UKismetMathLibrary_Conv_VectorToVector2D_Params params;
	params.InVector = InVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToTransform
// ()
// Parameters:
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::Conv_VectorToTransform(const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToTransform"));

	UKismetMathLibrary_Conv_VectorToTransform_Params params;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToRotator
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Conv_VectorToRotator(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToRotator"));

	UKismetMathLibrary_Conv_VectorToRotator_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToQuaternion
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Conv_VectorToQuaternion(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToQuaternion"));

	UKismetMathLibrary_Conv_VectorToQuaternion_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor"));

	UKismetMathLibrary_Conv_VectorToLinearColor_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector4ToVector
// ()
// Parameters:
// struct FVector4                InVector4                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_Vector4ToVector(const struct FVector4& InVector4)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector4ToVector"));

	UKismetMathLibrary_Conv_Vector4ToVector_Params params;
	params.InVector4 = InVector4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector4ToRotator
// ()
// Parameters:
// struct FVector4                InVec                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Conv_Vector4ToRotator(const struct FVector4& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector4ToRotator"));

	UKismetMathLibrary_Conv_Vector4ToRotator_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
// ()
// Parameters:
// struct FVector4                InVec                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Conv_Vector4ToQuaternion(const struct FVector4& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion"));

	UKismetMathLibrary_Conv_Vector4ToQuaternion_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector2DToVector
// ()
// Parameters:
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector2DToVector"));

	UKismetMathLibrary_Conv_Vector2DToVector_Params params;
	params.InVector2D = InVector2D;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
// ()
// Parameters:
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint"));

	UKismetMathLibrary_Conv_Vector2DToIntPoint_Params params;
	params.InVector2D = InVector2D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_TransformToMatrix
// ()
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Conv_TransformToMatrix(const struct FTransform& Transform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_TransformToMatrix"));

	UKismetMathLibrary_Conv_TransformToMatrix_Params params;
	params.Transform = Transform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_RotatorToVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_RotatorToVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_RotatorToVector"));

	UKismetMathLibrary_Conv_RotatorToVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_RotatorToTransform
// ()
// Parameters:
// struct FRotator                InRotator                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::Conv_RotatorToTransform(const struct FRotator& InRotator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_RotatorToTransform"));

	UKismetMathLibrary_Conv_RotatorToTransform_Params params;
	params.InRotator = InRotator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_MatrixToTransform
// ()
// Parameters:
// struct FMatrix                 InMatrix                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::Conv_MatrixToTransform(const struct FMatrix& InMatrix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_MatrixToTransform"));

	UKismetMathLibrary_Conv_MatrixToTransform_Params params;
	params.InMatrix = InMatrix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_MatrixToRotator
// ()
// Parameters:
// struct FMatrix                 InMatrix                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::Conv_MatrixToRotator(const struct FMatrix& InMatrix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_MatrixToRotator"));

	UKismetMathLibrary_Conv_MatrixToRotator_Params params;
	params.InMatrix = InMatrix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToVector
// ()
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_LinearColorToVector(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToVector"));

	UKismetMathLibrary_Conv_LinearColorToVector_Params params;
	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToColor
// ()
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InUseSRGB                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetMathLibrary::Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToColor"));

	UKismetMathLibrary_Conv_LinearColorToColor_Params params;
	params.InLinearColor = InLinearColor;
	params.InUseSRGB = InUseSRGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntVectorToVector
// ()
// Parameters:
// struct FIntVector              InIntVector                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_IntVectorToVector(const struct FIntVector& InIntVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntVectorToVector"));

	UKismetMathLibrary_Conv_IntVectorToVector_Params params;
	params.InIntVector = InIntVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToIntVector
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntVector UKismetMathLibrary::Conv_IntToIntVector(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToIntVector"));

	UKismetMathLibrary_Conv_IntToIntVector_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToInt64
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Conv_IntToInt64(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToInt64"));

	UKismetMathLibrary_Conv_IntToInt64_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToFloat
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Conv_IntToFloat(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToFloat"));

	UKismetMathLibrary_Conv_IntToFloat_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToByte
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Conv_IntToByte(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToByte"));

	UKismetMathLibrary_Conv_IntToByte_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToBool
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::Conv_IntToBool(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToBool"));

	UKismetMathLibrary_Conv_IntToBool_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntPointToVector2D
// ()
// Parameters:
// struct FIntPoint               InIntPoint                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntPointToVector2D"));

	UKismetMathLibrary_Conv_IntPointToVector2D_Params params;
	params.InIntPoint = InIntPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Int64ToInt
// ()
// Parameters:
// int64_t                        inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Conv_Int64ToInt(int64_t inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Int64ToInt"));

	UKismetMathLibrary_Conv_Int64ToInt_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Int64ToByte
// ()
// Parameters:
// int64_t                        inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Conv_Int64ToByte(int64_t inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Int64ToByte"));

	UKismetMathLibrary_Conv_Int64ToByte_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToVector
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToVector"));

	UKismetMathLibrary_Conv_FloatToVector_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor"));

	UKismetMathLibrary_Conv_FloatToLinearColor_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
// ()
// Parameters:
// struct FColor                  InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(const struct FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor"));

	UKismetMathLibrary_Conv_ColorToLinearColor_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToInt
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToInt"));

	UKismetMathLibrary_Conv_ByteToInt_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToFloat
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToFloat"));

	UKismetMathLibrary_Conv_ByteToFloat_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToInt
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Conv_BoolToInt(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToInt"));

	UKismetMathLibrary_Conv_BoolToInt_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToFloat
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Conv_BoolToFloat(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToFloat"));

	UKismetMathLibrary_Conv_BoolToFloat_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToByte
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Conv_BoolToByte(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToByte"));

	UKismetMathLibrary_Conv_BoolToByte_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeTransforms
// ()
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UKismetMathLibrary::ComposeTransforms(const struct FTransform& A, const struct FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeTransforms"));

	UKismetMathLibrary_ComposeTransforms_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeRotators
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetMathLibrary::ComposeRotators(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeRotators"));

	UKismetMathLibrary_ComposeRotators_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClassIsChildOf
// ()
// Parameters:
// class UClass*                  TestClass                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ParentClass                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClassIsChildOf"));

	UKismetMathLibrary_ClassIsChildOf_Params params;
	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampVectorSize
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::ClampVectorSize(const struct FVector& A, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampVectorSize"));

	UKismetMathLibrary_ClampVectorSize_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampInt64
// ()
// Parameters:
// int64_t                        Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::ClampInt64(int64_t Value, int64_t Min, int64_t Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampInt64"));

	UKismetMathLibrary_ClampInt64_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAxis
// ()
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::ClampAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAxis"));

	UKismetMathLibrary_ClampAxis_Params params;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAxes2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinAxisVal                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxAxisVal                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::ClampAxes2D(const struct FVector2D& A, float MinAxisVal, float MaxAxisVal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAxes2D"));

	UKismetMathLibrary_ClampAxes2D_Params params;
	params.A = A;
	params.MinAxisVal = MinAxisVal;
	params.MaxAxisVal = MaxAxisVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAngle
// ()
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MinAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          MaxAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAngle"));

	UKismetMathLibrary_ClampAngle_Params params;
	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Clamp
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Clamp(int Value, int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Clamp"));

	UKismetMathLibrary_Clamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CInterpTo
// ()
// Parameters:
// struct FLinearColor            Current                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Target                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CInterpTo"));

	UKismetMathLibrary_CInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BreakVector4
// ()
// Parameters:
// struct FVector4                InVec                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          W                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakVector4(const struct FVector4& InVec, float* X, float* Y, float* Z, float* W)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector4"));

	UKismetMathLibrary_BreakVector4_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
	if (W != nullptr)
		*W = params.W;

}


// Function Engine.KismetMathLibrary.BreakVector2D
// ()
// Parameters:
// struct FVector2D               InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakVector2D(const struct FVector2D& InVec, float* X, float* Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector2D"));

	UKismetMathLibrary_BreakVector2D_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;

}


// Function Engine.KismetMathLibrary.BreakVector
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector"));

	UKismetMathLibrary_BreakVector_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;

}


// Function Engine.KismetMathLibrary.BreakTransform
// ()
// Parameters:
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 Scale                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTransform"));

	UKismetMathLibrary_BreakTransform_Params params;
	params.InTransform = InTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
	if (Scale != nullptr)
		*Scale = params.Scale;

}


// Function Engine.KismetMathLibrary.BreakTimespan2
// ()
// Parameters:
// struct FTimespan               InTimespan                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Days                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hours                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minutes                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            FractionNano                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTimespan2"));

	UKismetMathLibrary_BreakTimespan2_Params params;
	params.InTimespan = InTimespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (FractionNano != nullptr)
		*FractionNano = params.FractionNano;

}


// Function Engine.KismetMathLibrary.BreakTimespan
// ()
// Parameters:
// struct FTimespan               InTimespan                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Days                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hours                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minutes                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Milliseconds                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTimespan"));

	UKismetMathLibrary_BreakTimespan_Params params;
	params.InTimespan = InTimespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (Milliseconds != nullptr)
		*Milliseconds = params.Milliseconds;

}


// Function Engine.KismetMathLibrary.BreakRotIntoAxes
// ()
// Parameters:
// struct FRotator                InRot                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotIntoAxes"));

	UKismetMathLibrary_BreakRotIntoAxes_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;

}


// Function Engine.KismetMathLibrary.BreakRotator
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Roll                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotator"));

	UKismetMathLibrary_BreakRotator_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Roll != nullptr)
		*Roll = params.Roll;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;

}


// Function Engine.KismetMathLibrary.BreakRandomStream
// ()
// Parameters:
// struct FRandomStream           InRandomStream                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            InitialSeed                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRandomStream"));

	UKismetMathLibrary_BreakRandomStream_Params params;
	params.InRandomStream = InRandomStream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InitialSeed != nullptr)
		*InitialSeed = params.InitialSeed;

}


// Function Engine.KismetMathLibrary.BreakQualifiedFrameTime
// ()
// Parameters:
// struct FQualifiedFrameTime     InFrameTime                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameNumber            Frame                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate              FrameRate                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SubFrame                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakQualifiedFrameTime"));

	UKismetMathLibrary_BreakQualifiedFrameTime_Params params;
	params.InFrameTime = InFrameTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Frame != nullptr)
		*Frame = params.Frame;
	if (FrameRate != nullptr)
		*FrameRate = params.FrameRate;
	if (SubFrame != nullptr)
		*SubFrame = params.SubFrame;

}


// Function Engine.KismetMathLibrary.BreakFrameRate
// ()
// Parameters:
// struct FFrameRate              InFrameRate                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Numerator                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Denominator                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakFrameRate"));

	UKismetMathLibrary_BreakFrameRate_Params params;
	params.InFrameRate = InFrameRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Numerator != nullptr)
		*Numerator = params.Numerator;
	if (Denominator != nullptr)
		*Denominator = params.Denominator;

}


// Function Engine.KismetMathLibrary.BreakDateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Year                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Month                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Day                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Hour                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Minute                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Second                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Millisecond                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakDateTime"));

	UKismetMathLibrary_BreakDateTime_Params params;
	params.InDateTime = InDateTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Year != nullptr)
		*Year = params.Year;
	if (Month != nullptr)
		*Month = params.Month;
	if (Day != nullptr)
		*Day = params.Day;
	if (Hour != nullptr)
		*Hour = params.Hour;
	if (Minute != nullptr)
		*Minute = params.Minute;
	if (Second != nullptr)
		*Second = params.Second;
	if (Millisecond != nullptr)
		*Millisecond = params.Millisecond;

}


// Function Engine.KismetMathLibrary.BreakColor
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          R                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          G                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetMathLibrary::BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakColor"));

	UKismetMathLibrary_BreakColor_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (R != nullptr)
		*R = params.R;
	if (G != nullptr)
		*G = params.G;
	if (B != nullptr)
		*B = params.B;
	if (A != nullptr)
		*A = params.A;

}


// Function Engine.KismetMathLibrary.BooleanXOR
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::BooleanXOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanXOR"));

	UKismetMathLibrary_BooleanXOR_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanOR
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::BooleanOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanOR"));

	UKismetMathLibrary_BooleanOR_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNOR
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::BooleanNOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNOR"));

	UKismetMathLibrary_BooleanNOR_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNAND
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::BooleanNAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNAND"));

	UKismetMathLibrary_BooleanNAND_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanAND
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetMathLibrary::BooleanAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanAND"));

	UKismetMathLibrary_BooleanAND_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BMin
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::BMin(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BMin"));

	UKismetMathLibrary_BMin_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BMax
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::BMax(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BMax"));

	UKismetMathLibrary_BMax_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan2
// ()
// Parameters:
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Atan2(float Y, float X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan2"));

	UKismetMathLibrary_Atan2_Params params;
	params.Y = Y;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Atan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan"));

	UKismetMathLibrary_Atan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Asin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Asin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Asin"));

	UKismetMathLibrary_Asin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.And_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::And_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.And_IntInt"));

	UKismetMathLibrary_And_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.And_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::And_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.And_Int64Int64"));

	UKismetMathLibrary_And_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Add_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorVector"));

	UKismetMathLibrary_Add_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorInt
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Add_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorInt"));

	UKismetMathLibrary_Add_VectorInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetMathLibrary::Add_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorFloat"));

	UKismetMathLibrary_Add_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector4Vector4
// ()
// Parameters:
// struct FVector4                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector4 UKismetMathLibrary::Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector4Vector4"));

	UKismetMathLibrary_Add_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DVector2D"));

	UKismetMathLibrary_Add_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UKismetMathLibrary::Add_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DFloat"));

	UKismetMathLibrary_Add_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimespan UKismetMathLibrary::Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_TimespanTimespan"));

	UKismetMathLibrary_Add_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_QuatQuat
// ()
// Parameters:
// struct FQuat                   A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FQuat UKismetMathLibrary::Add_QuatQuat(const struct FQuat& A, const struct FQuat& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_QuatQuat"));

	UKismetMathLibrary_Add_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_MatrixMatrix
// ()
// Parameters:
// struct FMatrix                 A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FMatrix UKismetMathLibrary::Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_MatrixMatrix"));

	UKismetMathLibrary_Add_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetMathLibrary::Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_LinearColorLinearColor"));

	UKismetMathLibrary_Add_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntPointIntPoint
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_IntPointIntPoint"));

	UKismetMathLibrary_Add_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntPointInt
// ()
// Parameters:
// struct FIntPoint               A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FIntPoint UKismetMathLibrary::Add_IntPointInt(const struct FIntPoint& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_IntPointInt"));

	UKismetMathLibrary_Add_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Add_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_IntInt"));

	UKismetMathLibrary_Add_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Int64Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Add_Int64Int64(int64_t A, int64_t B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Int64Int64"));

	UKismetMathLibrary_Add_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Add_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_FloatFloat"));

	UKismetMathLibrary_Add_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DateTimeTimespan
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_DateTimeTimespan"));

	UKismetMathLibrary_Add_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FDateTime UKismetMathLibrary::Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_DateTimeDateTime"));

	UKismetMathLibrary_Add_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetMathLibrary::Add_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_ByteByte"));

	UKismetMathLibrary_Add_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Acos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Acos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Acos"));

	UKismetMathLibrary_Acos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs_Int64
// ()
// Parameters:
// int64_t                        A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetMathLibrary::Abs_Int64(int64_t A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs_Int64"));

	UKismetMathLibrary_Abs_Int64_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs_Int
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetMathLibrary::Abs_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs_Int"));

	UKismetMathLibrary_Abs_Int_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetMathLibrary::Abs(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs"));

	UKismetMathLibrary_Abs_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetMathLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetMathLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetNodeHelperLibrary.MarkBit
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetNodeHelperLibrary::MarkBit(int* Data, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.MarkBit"));

	UKismetNodeHelperLibrary_MarkBit_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetNodeHelperLibrary::HasUnmarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit"));

	UKismetNodeHelperLibrary_HasUnmarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.HasMarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetNodeHelperLibrary::HasMarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasMarkedBit"));

	UKismetNodeHelperLibrary_HasMarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetValidValue
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetNodeHelperLibrary::GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetValidValue"));

	UKismetNodeHelperLibrary_GetValidValue_Params params;
	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bRandom                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetNodeHelperLibrary::GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit"));

	UKismetNodeHelperLibrary_GetUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;
	params.bRandom = bRandom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetNodeHelperLibrary::GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit"));

	UKismetNodeHelperLibrary_GetRandomUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetNodeHelperLibrary::GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit"));

	UKismetNodeHelperLibrary_GetFirstUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetNodeHelperLibrary::GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex"));

	UKismetNodeHelperLibrary_GetEnumeratorValueFromIndex_Params params;
	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName"));

	UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName_Params params;
	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UKismetNodeHelperLibrary::GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorName"));

	UKismetNodeHelperLibrary_GetEnumeratorName_Params params;
	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.ClearBit
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetNodeHelperLibrary::ClearBit(int* Data, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearBit"));

	UKismetNodeHelperLibrary_ClearBit_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function Engine.KismetNodeHelperLibrary.ClearAllBits
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetNodeHelperLibrary::ClearAllBits(int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearAllBits"));

	UKismetNodeHelperLibrary_ClearAllBits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function Engine.KismetNodeHelperLibrary.BitIsMarked
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetNodeHelperLibrary::BitIsMarked(int Data, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.BitIsMarked"));

	UKismetNodeHelperLibrary_BitIsMarked_Params params;
	params.Data = Data;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetNodeHelperLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetNodeHelperLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
// ()
// Parameters:
// class UPrimitiveComponent*     PrimitiveComponent             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bCastInsetShadow               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLightAttachmentsAsGroup       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments"));

	UKismetRenderingLibrary_SetCastInsetShadowForAllAttachments_Params params;
	params.PrimitiveComponent = PrimitiveComponent;
	params.bCastInsetShadow = bCastInsetShadow;
	params.bLightAttachmentsAsGroup = bLightAttachmentsAsGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTextureCubeEditorOnly
// ()
// Parameters:
// class UTextureRenderTargetCube* RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Name                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureCube*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTextureCube* UKismetRenderingLibrary::RenderTargetCreateStaticTextureCubeEditorOnly(class UTextureRenderTargetCube* RenderTarget, const struct FString& Name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTextureCubeEditorOnly"));

	UKismetRenderingLibrary_RenderTargetCreateStaticTextureCubeEditorOnly_Params params;
	params.RenderTarget = RenderTarget;
	params.Name = Name;
	params.CompressionSettings = CompressionSettings;
	params.MipSettings = MipSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
// ()
// Parameters:
// class UTextureRenderTarget2D*  RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Name                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture2D* UKismetRenderingLibrary::RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const struct FString& Name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly"));

	UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DEditorOnly_Params params;
	params.RenderTarget = RenderTarget;
	params.Name = Name;
	params.CompressionSettings = CompressionSettings;
	params.MipSettings = MipSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
// ()
// Parameters:
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D"));

	UKismetRenderingLibrary_ReleaseRenderTarget2D_Params params;
	params.TextureRenderTarget = TextureRenderTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetUV
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetRenderingLibrary::ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ReadRenderTargetUV"));

	UKismetRenderingLibrary_ReadRenderTargetUV_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV"));

	UKismetRenderingLibrary_ReadRenderTargetRawUV_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel"));

	UKismetRenderingLibrary_ReadRenderTargetRawPixel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            X                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Y                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FColor UKismetRenderingLibrary::ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel"));

	UKismetRenderingLibrary_ReadRenderTargetPixel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo
// ()
// Parameters:
// int                            Bone0                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight0                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone1                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight1                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone2                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight2                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone3                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight3                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSkelMeshSkinWeightInfo ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FSkelMeshSkinWeightInfo UKismetRenderingLibrary::MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo"));

	UKismetRenderingLibrary_MakeSkinWeightInfo_Params params;
	params.Bone0 = Bone0;
	params.Weight0 = Weight0;
	params.Bone1 = Bone1;
	params.Weight1 = Weight1;
	params.Bone2 = Bone2;
	params.Weight2 = Weight2;
	params.Bone3 = Bone3;
	params.Weight3 = Weight3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Filename                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture2D* UKismetRenderingLibrary::ImportFileAsTexture2D(class UObject* WorldContextObject, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D"));

	UKismetRenderingLibrary_ImportFileAsTexture2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<unsigned char>          Buffer                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture2D* UKismetRenderingLibrary::ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<unsigned char> Buffer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D"));

	UKismetRenderingLibrary_ImportBufferAsTexture2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Buffer = Buffer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.GetSunLightAtmosphereTransmittance
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*         sunFogAtmosphereComponent      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UKismetRenderingLibrary::GetSunLightAtmosphereTransmittance(const struct FVector& Direction, class USceneComponent* sunFogAtmosphereComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.GetSunLightAtmosphereTransmittance"));

	UKismetRenderingLibrary_GetSunLightAtmosphereTransmittance_Params params;
	params.Direction = Direction;
	params.sunFogAtmosphereComponent = sunFogAtmosphereComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ExportTexture2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FilePath                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Filename                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ExportTexture2D"));

	UKismetRenderingLibrary_ExportTexture2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Texture = Texture;
	params.FilePath = FilePath;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.ExportRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FilePath                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Filename                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ExportRenderTarget"));

	UKismetRenderingLibrary_ExportRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.FilePath = FilePath;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawToRenderTargetContext Context                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget"));

	UKismetRenderingLibrary_EndDrawCanvasToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Context = Context;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget"));

	UKismetRenderingLibrary_DrawMaterialToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Depth                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureRenderTargetFormat> Format                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ClearColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoGenerateMipMaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTargetVolume* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTextureRenderTargetVolume* UKismetRenderingLibrary::CreateRenderTargetVolume(class UObject* WorldContextObject, int Width, int Height, int Depth, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume"));

	UKismetRenderingLibrary_CreateRenderTargetVolume_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Depth = Depth;
	params.Format = Format;
	params.ClearColor = ClearColor;
	params.bAutoGenerateMipMaps = bAutoGenerateMipMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Slices                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureRenderTargetFormat> Format                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ClearColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoGenerateMipMaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2DArray* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTextureRenderTarget2DArray* UKismetRenderingLibrary::CreateRenderTarget2DArray(class UObject* WorldContextObject, int Width, int Height, int Slices, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray"));

	UKismetRenderingLibrary_CreateRenderTarget2DArray_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Slices = Slices;
	params.Format = Format;
	params.ClearColor = ClearColor;
	params.bAutoGenerateMipMaps = bAutoGenerateMipMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.CreateRenderTarget2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETextureRenderTargetFormat> Format                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ClearColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAutoGenerateMipMaps           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTextureRenderTarget2D* UKismetRenderingLibrary::CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.CreateRenderTarget2D"));

	UKismetRenderingLibrary_CreateRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Format = Format;
	params.ClearColor = ClearColor;
	params.bAutoGenerateMipMaps = bAutoGenerateMipMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly"));

	UKismetRenderingLibrary_ConvertRenderTargetToTexture2DEditorOnly_Params params;
	params.WorldContextObject = WorldContextObject;
	params.RenderTarget = RenderTarget;
	params.Texture = Texture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.ClearRenderTarget2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ClearColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.ClearRenderTarget2D"));

	UKismetRenderingLibrary_ClearRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.ClearColor = ClearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo
// ()
// Parameters:
// struct FSkelMeshSkinWeightInfo InWeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int                            Bone0                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight0                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone1                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight1                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone2                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight2                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Bone3                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Weight3                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo"));

	UKismetRenderingLibrary_BreakSkinWeightInfo_Params params;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Bone0 != nullptr)
		*Bone0 = params.Bone0;
	if (Weight0 != nullptr)
		*Weight0 = params.Weight0;
	if (Bone1 != nullptr)
		*Bone1 = params.Bone1;
	if (Weight1 != nullptr)
		*Weight1 = params.Weight1;
	if (Bone2 != nullptr)
		*Bone2 = params.Bone2;
	if (Weight2 != nullptr)
		*Weight2 = params.Weight2;
	if (Bone3 != nullptr)
		*Bone3 = params.Bone3;
	if (Weight3 != nullptr)
		*Weight3 = params.Weight3;

}


// Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                 Canvas                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Size                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawToRenderTargetContext Context                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetRenderingLibrary::BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget"));

	UKismetRenderingLibrary_BeginDrawCanvasToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Canvas != nullptr)
		*Canvas = params.Canvas;
	if (Size != nullptr)
		*Size = params.Size;
	if (Context != nullptr)
		*Context = params.Context;

}


void UKismetRenderingLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetRenderingLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetStringLibrary.TrimTrailing
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::TrimTrailing(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TrimTrailing"));

	UKismetStringLibrary_TrimTrailing_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Trim
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Trim(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Trim"));

	UKismetStringLibrary_Trim_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToUpper
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::ToUpper(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToUpper"));

	UKismetStringLibrary_ToUpper_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToLower
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::ToLower(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToLower"));

	UKismetStringLibrary_ToLower_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.TimeSecondsToString
// ()
// Parameters:
// float                          InSeconds                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::TimeSecondsToString(float InSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TimeSecondsToString"));

	UKismetStringLibrary_TimeSecondsToString_Params params;
	params.InSeconds = InSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.StartsWith
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InPrefix                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.StartsWith"));

	UKismetStringLibrary_StartsWith_Params params;
	params.SourceString = SourceString;
	params.InPrefix = InPrefix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Split
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InStr                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 LeftS                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 RightS                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchDir> SearchDir                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::Split(const struct FString& SourceString, const struct FString& InStr, struct FString* LeftS, struct FString* RightS, TEnumAsByte<CoreUObject_ESearchCase> SearchCase, TEnumAsByte<CoreUObject_ESearchDir> SearchDir)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Split"));

	UKismetStringLibrary_Split_Params params;
	params.SourceString = SourceString;
	params.InStr = InStr;
	params.SearchCase = SearchCase;
	params.SearchDir = SearchDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LeftS != nullptr)
		*LeftS = params.LeftS;
	if (RightS != nullptr)
		*RightS = params.RightS;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightPad
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::RightPad(const struct FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightPad"));

	UKismetStringLibrary_RightPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightChop
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            count                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::RightChop(const struct FString& SourceString, int count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightChop"));

	UKismetStringLibrary_RightChop_Params params;
	params.SourceString = SourceString;
	params.count = count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Right
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            count                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Right(const struct FString& SourceString, int count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Right"));

	UKismetStringLibrary_Right_Params params;
	params.SourceString = SourceString;
	params.count = count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Reverse
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Reverse(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Reverse"));

	UKismetStringLibrary_Reverse_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ReplaceInline
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 SearchText                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReplacementText                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::ReplaceInline(struct FString* SourceString, const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<CoreUObject_ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ReplaceInline"));

	UKismetStringLibrary_ReplaceInline_Params params;
	params.SearchText = SearchText;
	params.ReplacementText = ReplacementText;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SourceString != nullptr)
		*SourceString = params.SourceString;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Replace
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 from                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 To                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Replace(const struct FString& SourceString, const struct FString& from, const struct FString& To, TEnumAsByte<CoreUObject_ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Replace"));

	UKismetStringLibrary_Replace_Params params;
	params.SourceString = SourceString;
	params.from = from;
	params.To = To;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ParseIntoArray
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Delimiter                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           CullEmptyStrings               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UKismetStringLibrary::ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ParseIntoArray"));

	UKismetStringLibrary_ParseIntoArray_Params params;
	params.SourceString = SourceString;
	params.Delimiter = Delimiter;
	params.CullEmptyStrings = CullEmptyStrings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StrStr
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::NotEqual_StrStr(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StrStr"));

	UKismetStringLibrary_NotEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StriStri
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::NotEqual_StriStri(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StriStri"));

	UKismetStringLibrary_NotEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Mid
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Start                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            count                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Mid(const struct FString& SourceString, int Start, int count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Mid"));

	UKismetStringLibrary_Mid_Params params;
	params.SourceString = SourceString;
	params.Start = Start;
	params.count = count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.MatchesWildcard
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Wildcard                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<CoreUObject_ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.MatchesWildcard"));

	UKismetStringLibrary_MatchesWildcard_Params params;
	params.SourceString = SourceString;
	params.Wildcard = Wildcard;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Len
// ()
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::Len(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Len"));

	UKismetStringLibrary_Len_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftPad
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::LeftPad(const struct FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftPad"));

	UKismetStringLibrary_LeftPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftChop
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            count                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::LeftChop(const struct FString& SourceString, int count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftChop"));

	UKismetStringLibrary_LeftChop_Params params;
	params.SourceString = SourceString;
	params.count = count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Left
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            count                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Left(const struct FString& SourceString, int count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Left"));

	UKismetStringLibrary_Left_Params params;
	params.SourceString = SourceString;
	params.count = count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.JoinStringArray
// ()
// Parameters:
// TArray<struct FString>         SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 Separator                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.JoinStringArray"));

	UKismetStringLibrary_JoinStringArray_Params params;
	params.SourceArray = SourceArray;
	params.Separator = Separator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.IsNumeric
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::IsNumeric(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.IsNumeric"));

	UKismetStringLibrary_IsNumeric_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.IsEmpty
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::IsEmpty(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.IsEmpty"));

	UKismetStringLibrary_IsEmpty_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetSubstring
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StartIndex                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::GetSubstring(const struct FString& SourceString, int StartIndex, int Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetSubstring"));

	UKismetStringLibrary_GetSubstring_Params params;
	params.SourceString = SourceString;
	params.StartIndex = StartIndex;
	params.Length = Length;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterAsNumber
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::GetCharacterAsNumber(const struct FString& SourceString, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterAsNumber"));

	UKismetStringLibrary_GetCharacterAsNumber_Params params;
	params.SourceString = SourceString;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterArrayFromString
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UKismetStringLibrary::GetCharacterArrayFromString(const struct FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterArrayFromString"));

	UKismetStringLibrary_GetCharacterArrayFromString_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.FindSubstring
// ()
// Parameters:
// struct FString                 SearchIn                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Substring                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseCase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSearchFromEnd                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            StartPosition                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.FindSubstring"));

	UKismetStringLibrary_FindSubstring_Params params;
	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StrStr
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::EqualEqual_StrStr(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StrStr"));

	UKismetStringLibrary_EqualEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StriStri
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::EqualEqual_StriStri(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StriStri"));

	UKismetStringLibrary_EqualEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EndsWith
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InSuffix                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<CoreUObject_ESearchCase> SearchCase                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EndsWith"));

	UKismetStringLibrary_EndsWith_Params params;
	params.SourceString = SourceString;
	params.InSuffix = InSuffix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.CullArray
// ()
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         inArray                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::CullArray(const struct FString& SourceString, TArray<struct FString>* inArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.CullArray"));

	UKismetStringLibrary_CullArray_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (inArray != nullptr)
		*inArray = params.inArray;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_VectorToString
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_VectorToString(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_VectorToString"));

	UKismetStringLibrary_Conv_VectorToString_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_Vector2dToString
// ()
// Parameters:
// struct FVector2D               InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_Vector2dToString(const struct FVector2D& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_Vector2dToString"));

	UKismetStringLibrary_Conv_Vector2dToString_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_TransformToString
// ()
// Parameters:
// struct FTransform              InTrans                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_TransformToString(const struct FTransform& InTrans)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_TransformToString"));

	UKismetStringLibrary_Conv_TransformToString_Params params;
	params.InTrans = InTrans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToVector2D
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               OutConvertedVector2D           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           OutIsValid                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetStringLibrary::Conv_StringToVector2D(const struct FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToVector2D"));

	UKismetStringLibrary_Conv_StringToVector2D_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutConvertedVector2D != nullptr)
		*OutConvertedVector2D = params.OutConvertedVector2D;
	if (OutIsValid != nullptr)
		*OutIsValid = params.OutIsValid;

}


// Function Engine.KismetStringLibrary.Conv_StringToVector
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutConvertedVector             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           OutIsValid                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetStringLibrary::Conv_StringToVector(const struct FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToVector"));

	UKismetStringLibrary_Conv_StringToVector_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutConvertedVector != nullptr)
		*OutConvertedVector = params.OutConvertedVector;
	if (OutIsValid != nullptr)
		*OutIsValid = params.OutIsValid;

}


// Function Engine.KismetStringLibrary.Conv_StringToRotator
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                OutConvertedRotator            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           OutIsValid                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetStringLibrary::Conv_StringToRotator(const struct FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToRotator"));

	UKismetStringLibrary_Conv_StringToRotator_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutConvertedRotator != nullptr)
		*OutConvertedRotator = params.OutConvertedRotator;
	if (OutIsValid != nullptr)
		*OutIsValid = params.OutIsValid;

}


// Function Engine.KismetStringLibrary.Conv_StringToName
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UKismetStringLibrary::Conv_StringToName(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToName"));

	UKismetStringLibrary_Conv_StringToName_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToInt
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetStringLibrary::Conv_StringToInt(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToInt"));

	UKismetStringLibrary_Conv_StringToInt_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToFloat
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetStringLibrary::Conv_StringToFloat(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToFloat"));

	UKismetStringLibrary_Conv_StringToFloat_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToColor
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            OutConvertedColor              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           OutIsValid                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetStringLibrary::Conv_StringToColor(const struct FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToColor"));

	UKismetStringLibrary_Conv_StringToColor_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutConvertedColor != nullptr)
		*OutConvertedColor = params.OutConvertedColor;
	if (OutIsValid != nullptr)
		*OutIsValid = params.OutIsValid;

}


// Function Engine.KismetStringLibrary.Conv_RotatorToString
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_RotatorToString(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_RotatorToString"));

	UKismetStringLibrary_Conv_RotatorToString_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ObjectToString
// ()
// Parameters:
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_ObjectToString(class UObject* InObj)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ObjectToString"));

	UKismetStringLibrary_Conv_ObjectToString_Params params;
	params.InObj = InObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_NameToString
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_NameToString(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_NameToString"));

	UKismetStringLibrary_Conv_NameToString_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_MatrixToString
// ()
// Parameters:
// struct FMatrix                 InMatrix                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_MatrixToString(const struct FMatrix& InMatrix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_MatrixToString"));

	UKismetStringLibrary_Conv_MatrixToString_Params params;
	params.InMatrix = InMatrix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntVectorToString
// ()
// Parameters:
// struct FIntVector              InIntVec                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_IntVectorToString(const struct FIntVector& InIntVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_IntVectorToString"));

	UKismetStringLibrary_Conv_IntVectorToString_Params params;
	params.InIntVec = InIntVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntToString
// ()
// Parameters:
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_IntToString(int inInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_IntToString"));

	UKismetStringLibrary_Conv_IntToString_Params params;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntPointToString
// ()
// Parameters:
// struct FIntPoint               InIntPoint                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_IntPointToString(const struct FIntPoint& InIntPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_IntPointToString"));

	UKismetStringLibrary_Conv_IntPointToString_Params params;
	params.InIntPoint = InIntPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_FloatToString
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_FloatToString"));

	UKismetStringLibrary_Conv_FloatToString_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ColorToString
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_ColorToString(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ColorToString"));

	UKismetStringLibrary_Conv_ColorToString_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ByteToString
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_ByteToString(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ByteToString"));

	UKismetStringLibrary_Conv_ByteToString_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_BoolToString
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_BoolToString"));

	UKismetStringLibrary_Conv_BoolToString_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Contains
// ()
// Parameters:
// struct FString                 SearchIn                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Substring                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseCase                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSearchFromEnd                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringLibrary::Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Contains"));

	UKismetStringLibrary_Contains_Params params;
	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Concat_StrStr
// ()
// Parameters:
// struct FString                 A                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 B                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::Concat_StrStr(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Concat_StrStr"));

	UKismetStringLibrary_Concat_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector2d
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Vector2d(const struct FString& AppendTo, const struct FString& prefix, const struct FVector2D& InVector2D, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector2d"));

	UKismetStringLibrary_BuildString_Vector2d_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InVector2D = InVector2D;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Vector(const struct FString& AppendTo, const struct FString& prefix, const struct FVector& InVector, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector"));

	UKismetStringLibrary_BuildString_Vector_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InVector = InVector;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Rotator
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Rotator(const struct FString& AppendTo, const struct FString& prefix, const struct FRotator& InRot, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Rotator"));

	UKismetStringLibrary_BuildString_Rotator_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InRot = InRot;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Object
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Object(const struct FString& AppendTo, const struct FString& prefix, class UObject* InObj, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Object"));

	UKismetStringLibrary_BuildString_Object_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InObj = InObj;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Name
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Name(const struct FString& AppendTo, const struct FString& prefix, const struct FName& InName, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Name"));

	UKismetStringLibrary_BuildString_Name_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InName = InName;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_IntVector
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              InIntVector                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_IntVector(const struct FString& AppendTo, const struct FString& prefix, const struct FIntVector& InIntVector, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_IntVector"));

	UKismetStringLibrary_BuildString_IntVector_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InIntVector = InIntVector;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Int
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            inInt                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Int(const struct FString& AppendTo, const struct FString& prefix, int inInt, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Int"));

	UKismetStringLibrary_BuildString_Int_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.inInt = inInt;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Float
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Float(const struct FString& AppendTo, const struct FString& prefix, float InFloat, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Float"));

	UKismetStringLibrary_BuildString_Float_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InFloat = InFloat;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Color
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Color(const struct FString& AppendTo, const struct FString& prefix, const struct FLinearColor& InColor, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Color"));

	UKismetStringLibrary_BuildString_Color_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InColor = InColor;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Bool
// ()
// Parameters:
// struct FString                 AppendTo                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 prefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 suffix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringLibrary::BuildString_Bool(const struct FString& AppendTo, const struct FString& prefix, bool InBool, const struct FString& suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Bool"));

	UKismetStringLibrary_BuildString_Bool_Params params;
	params.AppendTo = AppendTo;
	params.prefix = prefix;
	params.InBool = InBool;
	params.suffix = suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetStringLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetStringLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetStringTableLibrary.IsRegisteredTableId
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringTableLibrary::IsRegisteredTableId(const struct FName& TableId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.IsRegisteredTableId"));

	UKismetStringTableLibrary_IsRegisteredTableId_Params params;
	params.TableId = TableId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetStringTableLibrary::IsRegisteredTableEntry(const struct FName& TableId, const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry"));

	UKismetStringTableLibrary_IsRegisteredTableEntry_Params params;
	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetTableNamespace
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringTableLibrary::GetTableNamespace(const struct FName& TableId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetTableNamespace"));

	UKismetStringTableLibrary_GetTableNamespace_Params params;
	params.TableId = TableId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetTableEntrySourceString
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringTableLibrary::GetTableEntrySourceString(const struct FName& TableId, const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetTableEntrySourceString"));

	UKismetStringTableLibrary_GetTableEntrySourceString_Params params;
	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetTableEntryMetaData
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   MetaDataId                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetStringTableLibrary::GetTableEntryMetaData(const struct FName& TableId, const struct FString& Key, const struct FName& MetaDataId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetTableEntryMetaData"));

	UKismetStringTableLibrary_GetTableEntryMetaData_Params params;
	params.TableId = TableId;
	params.Key = Key;
	params.MetaDataId = MetaDataId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetRegisteredStringTables
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FName> UKismetStringTableLibrary::GetRegisteredStringTables()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetRegisteredStringTables"));

	UKismetStringTableLibrary_GetRegisteredStringTables_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FName> UKismetStringTableLibrary::GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry"));

	UKismetStringTableLibrary_GetMetaDataIdsFromStringTableEntry_Params params;
	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetStringTableLibrary.GetKeysFromStringTable
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UKismetStringTableLibrary::GetKeysFromStringTable(const struct FName& TableId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringTableLibrary.GetKeysFromStringTable"));

	UKismetStringTableLibrary_GetKeysFromStringTable_Params params;
	params.TableId = TableId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetStringTableLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetStringTableLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
// ()
void UKismetSystemLibrary::UnregisterForRemoteNotifications()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications"));

	UKismetSystemLibrary_UnregisterForRemoteNotifications_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList
// ()
// Parameters:
// TArray<struct FPrimaryAssetId> PrimaryAssetIdList             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList"));

	UKismetSystemLibrary_UnloadPrimaryAssetList_Params params;
	params.PrimaryAssetIdList = PrimaryAssetIdList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.UnloadPrimaryAsset
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.UnloadPrimaryAsset"));

	UKismetSystemLibrary_UnloadPrimaryAsset_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.TransactObject
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::TransactObject(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.TransactObject"));

	UKismetSystemLibrary_TransactObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.TickLatentActionsEditorOnly
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          dTime                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::TickLatentActionsEditorOnly(class UObject* WorldContextObject, class UObject* Object, float dTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.TickLatentActionsEditorOnly"));

	UKismetSystemLibrary_TickLatentActionsEditorOnly_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Object = Object;
	params.dTime = dTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.StackTrace
// ()
void UKismetSystemLibrary::StackTrace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.StackTrace"));

	UKismetSystemLibrary_StackTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects"));

	UKismetSystemLibrary_SphereTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile"));

	UKismetSystemLibrary_SphereTraceSingleByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingle"));

	UKismetSystemLibrary_SphereTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects"));

	UKismetSystemLibrary_SphereTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile"));

	UKismetSystemLibrary_SphereTraceMultiByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMulti"));

	UKismetSystemLibrary_SphereTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapComponents"));

	UKismetSystemLibrary_SphereOverlapComponents_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapActors"));

	UKismetSystemLibrary_SphereOverlapActors_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SnapshotObject
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SnapshotObject(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SnapshotObject"));

	UKismetSystemLibrary_SnapshotObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
// ()
// Parameters:
// struct FString                 CategoryName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen"));

	UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen_Params params;
	params.CategoryName = CategoryName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
// ()
// Parameters:
// class APlayerController*       SpecificPlayer                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen"));

	UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_Params params;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ShowInterstitialAd
// ()
void UKismetSystemLibrary::ShowInterstitialAd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowInterstitialAd"));

	UKismetSystemLibrary_ShowInterstitialAd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ShowAdBanner
// ()
// Parameters:
// int                            AdIdIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowOnBottomOfScreen          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowAdBanner"));

	UKismetSystemLibrary_ShowAdBanner_Params params;
	params.AdIdIndex = AdIdIndex;
	params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetWindowTitle
// ()
// Parameters:
// struct FText                   Title                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetWindowTitle(const struct FText& Title)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetWindowTitle"));

	UKismetSystemLibrary_SetWindowTitle_Params params;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem"));

	UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetVectorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVectorPropertyByName"));

	UKismetSystemLibrary_SetVectorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetUserActivity
// ()
// Parameters:
// struct FUserActivity           UserActivity                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetUserActivity(const struct FUserActivity& UserActivity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetUserActivity"));

	UKismetSystemLibrary_SetUserActivity_Params params;
	params.UserActivity = UserActivity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetTransformPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              Value                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTransformPropertyByName"));

	UKismetSystemLibrary_SetTransformPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetTextPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   Value                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTextPropertyByName"));

	UKismetSystemLibrary_SetTextPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bState                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage"));

	UKismetSystemLibrary_SetSuppressViewportTransitionMessage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bState = bState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetStructurePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGenericStruct          Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStructurePropertyByName"));

	UKismetSystemLibrary_SetStructurePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetStringPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Value                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStringPropertyByName"));

	UKismetSystemLibrary_SetStringPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName"));

	UKismetSystemLibrary_SetSoftObjectPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName"));

	UKismetSystemLibrary_SetSoftClassPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetRotatorPropertyByName"));

	UKismetSystemLibrary_SetRotatorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetObjectPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetObjectPropertyByName"));

	UKismetSystemLibrary_SetObjectPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetNamePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetNamePropertyByName"));

	UKismetSystemLibrary_SetNamePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName"));

	UKismetSystemLibrary_SetLinearColorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetIntPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetIntPropertyByName"));

	UKismetSystemLibrary_SetIntPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetInterfacePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class UInterface> Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetInterfacePropertyByName"));

	UKismetSystemLibrary_SetInterfacePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetInt64PropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64_t                        Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetInt64PropertyByName(class UObject* Object, const struct FName& PropertyName, int64_t Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetInt64PropertyByName"));

	UKismetSystemLibrary_SetInt64PropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
// ()
// Parameters:
// bool                           bBlock                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetGamepadsBlockDeviceFeedback(bool bBlock)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback"));

	UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback_Params params;
	params.bBlock = bBlock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetFloatPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetFloatPropertyByName"));

	UKismetSystemLibrary_SetFloatPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetFieldPathPropertyByName(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName"));

	UKismetSystemLibrary_SetFieldPathPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetColorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                  Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetColorPropertyByName"));

	UKismetSystemLibrary_SetColorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCollisionProfileName   Value                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty"));

	UKismetSystemLibrary_SetCollisionProfileNameProperty_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetClassPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetClassPropertyByName"));

	UKismetSystemLibrary_SetClassPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetBytePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBytePropertyByName"));

	UKismetSystemLibrary_SetBytePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.SetBoolPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBoolPropertyByName"));

	UKismetSystemLibrary_SetBoolPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.RetriggerableDelay
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RetriggerableDelay"));

	UKismetSystemLibrary_RetriggerableDelay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ResetGamepadAssignmentToController(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController"));

	UKismetSystemLibrary_ResetGamepadAssignmentToController_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignments
// ()
void UKismetSystemLibrary::ResetGamepadAssignments()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignments"));

	UKismetSystemLibrary_ResetGamepadAssignments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications
// ()
void UKismetSystemLibrary::RegisterForRemoteNotifications()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications"));

	UKismetSystemLibrary_RegisterForRemoteNotifications_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.QuitGame
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EQuitPreference> QuitPreference                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIgnorePlatformRestrictions    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<Engine_EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.QuitGame"));

	UKismetSystemLibrary_QuitGame_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpecificPlayer = SpecificPlayer;
	params.QuitPreference = QuitPreference;
	params.bIgnorePlatformRestrictions = bIgnorePlatformRestrictions;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.PrintWarning
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::PrintWarning(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintWarning"));

	UKismetSystemLibrary_PrintWarning_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.PrintText
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   InText                         (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintText"));

	UKismetSystemLibrary_PrintText_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InText = InText;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.PrintString
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::PrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintString"));

	UKismetSystemLibrary_PrintString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.inString = inString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ParseParamValue
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InParam                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutValue                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::ParseParamValue(const struct FString& inString, const struct FString& InParam, struct FString* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ParseParamValue"));

	UKismetSystemLibrary_ParseParamValue_Params params;
	params.inString = inString;
	params.InParam = InParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ParseParam
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InParam                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::ParseParam(const struct FString& inString, const struct FString& InParam)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ParseParam"));

	UKismetSystemLibrary_ParseParam_Params params;
	params.inString = inString;
	params.InParam = InParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ParseCommandLine
// ()
// Parameters:
// struct FString                 InCmdLine                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         OutTokens                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FString>         OutSwitches                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TMap<struct FString, struct FString> OutParams                      (Parm, OutParm, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ParseCommandLine(const struct FString& InCmdLine, TArray<struct FString>* OutTokens, TArray<struct FString>* OutSwitches, TMap<struct FString, struct FString>* OutParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ParseCommandLine"));

	UKismetSystemLibrary_ParseCommandLine_Params params;
	params.InCmdLine = InCmdLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTokens != nullptr)
		*OutTokens = params.OutTokens;
	if (OutSwitches != nullptr)
		*OutSwitches = params.OutSwitches;
	if (OutParams != nullptr)
		*OutParams = params.OutParams;

}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
// ()
// Parameters:
// class UObject*                 Loaded                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::OnAssetLoaded__DelegateSignature(class UObject* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature"));

	UKismetSystemLibrary_OnAssetLoaded__DelegateSignature_Params params;
	params.Loaded = Loaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
// ()
// Parameters:
// class UClass*                  Loaded                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::OnAssetClassLoaded__DelegateSignature(class UClass* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature"));

	UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature_Params params;
	params.Loaded = Loaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::NotEqual_SoftObjectReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference"));

	UKismetSystemLibrary_NotEqual_SoftObjectReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::NotEqual_SoftClassReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference"));

	UKismetSystemLibrary_NotEqual_SoftClassReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
// ()
// Parameters:
// struct FPrimaryAssetType       A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetType       B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType"));

	UKismetSystemLibrary_NotEqual_PrimaryAssetType_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId"));

	UKismetSystemLibrary_NotEqual_PrimaryAssetId_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.NormalizeFilename
// ()
// Parameters:
// struct FString                 InFilename                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::NormalizeFilename(const struct FString& InFilename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.NormalizeFilename"));

	UKismetSystemLibrary_NormalizeFilename_Params params;
	params.InFilename = InFilename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MoveComponentTo
// ()
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TargetRelativeLocation         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                TargetRelativeRotation         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bEaseOut                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEaseIn                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OverTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceShortestRotationPath     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EMoveComponentAction> MoveAction                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<Engine_EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MoveComponentTo"));

	UKismetSystemLibrary_MoveComponentTo_Params params;
	params.Component = Component;
	params.TargetRelativeLocation = TargetRelativeLocation;
	params.TargetRelativeRotation = TargetRelativeRotation;
	params.bEaseOut = bEaseOut;
	params.bEaseIn = bEaseIn;
	params.OverTime = OverTime;
	params.bForceShortestRotationPath = bForceShortestRotationPath;
	params.MoveAction = MoveAction;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.MakeSoftObjectPath
// ()
// Parameters:
// struct FString                 PathString                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftObjectPath         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FSoftObjectPath UKismetSystemLibrary::MakeSoftObjectPath(const struct FString& PathString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeSoftObjectPath"));

	UKismetSystemLibrary_MakeSoftObjectPath_Params params;
	params.PathString = PathString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeSoftClassPath
// ()
// Parameters:
// struct FString                 PathString                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftClassPath          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FSoftClassPath UKismetSystemLibrary::MakeSoftClassPath(const struct FString& PathString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeSoftClassPath"));

	UKismetSystemLibrary_MakeSoftClassPath_Params params;
	params.PathString = PathString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralText
// ()
// Parameters:
// struct FText                   Value                          (Parm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetSystemLibrary::MakeLiteralText(const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralText"));

	UKismetSystemLibrary_MakeLiteralText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralString
// ()
// Parameters:
// struct FString                 Value                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::MakeLiteralString(const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralString"));

	UKismetSystemLibrary_MakeLiteralString_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralName
// ()
// Parameters:
// struct FName                   Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UKismetSystemLibrary::MakeLiteralName(const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralName"));

	UKismetSystemLibrary_MakeLiteralName_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralInt
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::MakeLiteralInt(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralInt"));

	UKismetSystemLibrary_MakeLiteralInt_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralFloat
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::MakeLiteralFloat(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralFloat"));

	UKismetSystemLibrary_MakeLiteralFloat_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralByte
// ()
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
unsigned char UKismetSystemLibrary::MakeLiteralByte(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralByte"));

	UKismetSystemLibrary_MakeLiteralByte_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralBool
// ()
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::MakeLiteralBool(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralBool"));

	UKismetSystemLibrary_MakeLiteralBool_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LoadInterstitialAd
// ()
// Parameters:
// int                            AdIdIndex                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::LoadInterstitialAd(int AdIdIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadInterstitialAd"));

	UKismetSystemLibrary_LoadInterstitialAd_Params params;
	params.AdIdIndex = AdIdIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* UKismetSystemLibrary::LoadClassAsset_Blocking()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking"));

	UKismetSystemLibrary_LoadClassAsset_Blocking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LoadAssetClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FScriptDelegate         OnLoaded                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::LoadAssetClass(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAssetClass"));

	UKismetSystemLibrary_LoadAssetClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.LoadAsset_Blocking
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetSystemLibrary::LoadAsset_Blocking()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAsset_Blocking"));

	UKismetSystemLibrary_LoadAsset_Blocking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LoadAsset
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FScriptDelegate         OnLoaded                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::LoadAsset(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAsset"));

	UKismetSystemLibrary_LoadAsset_Params params;
	params.WorldContextObject = WorldContextObject;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleForObjects"));

	UKismetSystemLibrary_LineTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingleByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleByProfile"));

	UKismetSystemLibrary_LineTraceSingleByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingle"));

	UKismetSystemLibrary_LineTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiForObjects"));

	UKismetSystemLibrary_LineTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiByProfile"));

	UKismetSystemLibrary_LineTraceMultiByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMulti"));

	UKismetSystemLibrary_LineTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LaunchURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::LaunchURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LaunchURL"));

	UKismetSystemLibrary_LaunchURL_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle"));

	UKismetSystemLibrary_K2_UnPauseTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate"));

	UKismetSystemLibrary_K2_UnPauseTimerDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimer"));

	UKismetSystemLibrary_K2_UnPauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsHandle"));

	UKismetSystemLibrary_K2_TimerExistsHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate"));

	UKismetSystemLibrary_K2_TimerExistsDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExists
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_TimerExists(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExists"));

	UKismetSystemLibrary_K2_TimerExists_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InitialStartDelay              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InitialStartDelayVariance      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimerHandle UKismetSystemLibrary::K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimerDelegate"));

	UKismetSystemLibrary_K2_SetTimerDelegate_Params params;
	params.Delegate = Delegate;
	params.Time = Time;
	params.bLooping = bLooping;
	params.InitialStartDelay = InitialStartDelay;
	params.InitialStartDelayVariance = InitialStartDelayVariance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InitialStartDelay              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InitialStartDelayVariance      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimerHandle UKismetSystemLibrary::K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimer"));

	UKismetSystemLibrary_K2_SetTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;
	params.Time = Time;
	params.bLooping = bLooping;
	params.InitialStartDelay = InitialStartDelay;
	params.InitialStartDelayVariance = InitialStartDelayVariance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerHandle"));

	UKismetSystemLibrary_K2_PauseTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate"));

	UKismetSystemLibrary_K2_PauseTimerDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_PauseTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_PauseTimer(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimer"));

	UKismetSystemLibrary_K2_PauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
// ()
// Parameters:
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsValidTimerHandle(const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle"));

	UKismetSystemLibrary_K2_IsValidTimerHandle_Params params;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle"));

	UKismetSystemLibrary_K2_IsTimerPausedHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate"));

	UKismetSystemLibrary_K2_IsTimerPausedDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPaused
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPaused"));

	UKismetSystemLibrary_K2_IsTimerPaused_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle"));

	UKismetSystemLibrary_K2_IsTimerActiveHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate"));

	UKismetSystemLibrary_K2_IsTimerActiveDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActive
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActive"));

	UKismetSystemLibrary_K2_IsTimerActive_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
// ()
// Parameters:
// struct FTimerHandle            Handle                         (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FTimerHandle UKismetSystemLibrary::K2_InvalidateTimerHandle(struct FTimerHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle"));

	UKismetSystemLibrary_K2_InvalidateTimerHandle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Handle != nullptr)
		*Handle = params.Handle;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle"));

	UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate"));

	UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime"));

	UKismetSystemLibrary_K2_GetTimerRemainingTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle"));

	UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate"));

	UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime"));

	UKismetSystemLibrary_K2_GetTimerElapsedTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerHandle"));

	UKismetSystemLibrary_K2_ClearTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate"));

	UKismetSystemLibrary_K2_ClearTimerDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_ClearTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 FunctionName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_ClearTimer(class UObject* Object, const struct FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimer"));

	UKismetSystemLibrary_K2_ClearTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle            Handle                         (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle"));

	UKismetSystemLibrary_K2_ClearAndInvalidateTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Handle != nullptr)
		*Handle = params.Handle;

}


// Function Engine.KismetSystemLibrary.IsValidSoftObjectReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValidSoftObjectReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidSoftObjectReference"));

	UKismetSystemLibrary_IsValidSoftObjectReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValidSoftClassReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValidSoftClassReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidSoftClassReference"));

	UKismetSystemLibrary_IsValidSoftClassReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType
// ()
// Parameters:
// struct FPrimaryAssetType       PrimaryAssetType               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType"));

	UKismetSystemLibrary_IsValidPrimaryAssetType_Params params;
	params.PrimaryAssetType = PrimaryAssetType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId"));

	UKismetSystemLibrary_IsValidPrimaryAssetId_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValidClass
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValidClass(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidClass"));

	UKismetSystemLibrary_IsValidClass_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValid
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsValid(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValid"));

	UKismetSystemLibrary_IsValid_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsUnattended
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsUnattended()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsUnattended"));

	UKismetSystemLibrary_IsUnattended_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsStandalone
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsStandalone(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsStandalone"));

	UKismetSystemLibrary_IsStandalone_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsSplitScreen
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsSplitScreen(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsSplitScreen"));

	UKismetSystemLibrary_IsSplitScreen_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsServer"));

	UKismetSystemLibrary_IsServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsScreensaverEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsScreensaverEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsScreensaverEnabled"));

	UKismetSystemLibrary_IsScreensaverEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsPackagedForDistribution
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsPackagedForDistribution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsPackagedForDistribution"));

	UKismetSystemLibrary_IsPackagedForDistribution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsLoggedIn
// ()
// Parameters:
// class APlayerController*       SpecificPlayer                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsLoggedIn(class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsLoggedIn"));

	UKismetSystemLibrary_IsLoggedIn_Params params;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsInterstitialAdRequested
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsInterstitialAdRequested()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsInterstitialAdRequested"));

	UKismetSystemLibrary_IsInterstitialAdRequested_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsInterstitialAdAvailable()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable"));

	UKismetSystemLibrary_IsInterstitialAdAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsDedicatedServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsDedicatedServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsDedicatedServer"));

	UKismetSystemLibrary_IsDedicatedServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::IsControllerAssignedToGamepad(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad"));

	UKismetSystemLibrary_IsControllerAssignedToGamepad_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.HideAdBanner
// ()
void UKismetSystemLibrary::HideAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.HideAdBanner"));

	UKismetSystemLibrary_HideAdBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::GetVolumeButtonsHandledBySystem()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem"));

	UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetViewportRotationEditorOnly
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UKismetSystemLibrary::GetViewportRotationEditorOnly(class UObject* WorldContextObject, int ID)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetViewportRotationEditorOnly"));

	UKismetSystemLibrary_GetViewportRotationEditorOnly_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ID = ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetViewportLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UKismetSystemLibrary::GetViewportLocation(class UObject* WorldContextObject, int ID)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetViewportLocation"));

	UKismetSystemLibrary_GetViewportLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ID = ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetUniqueDeviceId
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetUniqueDeviceId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetUniqueDeviceId"));

	UKismetSystemLibrary_GetUniqueDeviceId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetSystemPath
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetSystemPath(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSystemPath"));

	UKismetSystemLibrary_GetSystemPath_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
// ()
// Parameters:
// TArray<struct FIntPoint>       Resolutions                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions"));

	UKismetSystemLibrary_GetSupportedFullscreenResolutions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Resolutions != nullptr)
		*Resolutions = params.Resolutions;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId"));

	UKismetSystemLibrary_GetSoftObjectReferenceFromPrimaryAssetId_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId"));

	UKismetSystemLibrary_GetSoftClassReferenceFromPrimaryAssetId_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetRenderingMaterialQualityLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel"));

	UKismetSystemLibrary_GetRenderingMaterialQualityLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingDetailMode
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetRenderingDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingDetailMode"));

	UKismetSystemLibrary_GetRenderingDetailMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetProjectSavedDirectory
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetProjectSavedDirectory()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetProjectSavedDirectory"));

	UKismetSystemLibrary_GetProjectSavedDirectory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetProjectDirectory
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetProjectDirectory()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetProjectDirectory"));

	UKismetSystemLibrary_GetProjectDirectory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetProjectContentDirectory
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetProjectContentDirectory()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetProjectContentDirectory"));

	UKismetSystemLibrary_GetProjectContentDirectory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
// ()
// Parameters:
// TArray<struct FName>           RequiredBundles                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FName>           ExcludedBundles                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetType> ValidTypes                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bForceCurrentState             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState"));

	UKismetSystemLibrary_GetPrimaryAssetsWithBundleState_Params params;
	params.RequiredBundles = RequiredBundles;
	params.ExcludedBundles = ExcludedBundles;
	params.ValidTypes = ValidTypes;
	params.bForceCurrentState = bForceCurrentState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPrimaryAssetIdList != nullptr)
		*OutPrimaryAssetIdList = params.OutPrimaryAssetIdList;

}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList
// ()
// Parameters:
// struct FPrimaryAssetType       PrimaryAssetType               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList"));

	UKismetSystemLibrary_GetPrimaryAssetIdList_Params params;
	params.PrimaryAssetType = PrimaryAssetType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPrimaryAssetIdList != nullptr)
		*OutPrimaryAssetIdList = params.OutPrimaryAssetIdList;

}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
// ()
// Parameters:
// struct FPrimaryAssetId         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromSoftObjectReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference"));

	UKismetSystemLibrary_GetPrimaryAssetIdFromSoftObjectReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
// ()
// Parameters:
// struct FPrimaryAssetId         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromSoftClassReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference"));

	UKismetSystemLibrary_GetPrimaryAssetIdFromSoftClassReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromObject(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject"));

	UKismetSystemLibrary_GetPrimaryAssetIdFromObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromClass(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass"));

	UKismetSystemLibrary_GetPrimaryAssetIdFromClass_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPreferredLanguages
// ()
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
TArray<struct FString> UKismetSystemLibrary::GetPreferredLanguages()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPreferredLanguages"));

	UKismetSystemLibrary_GetPreferredLanguages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPlatformUserName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetPlatformUserName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPlatformUserName"));

	UKismetSystemLibrary_GetPlatformUserName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPlatformUserDir
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetPlatformUserDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPlatformUserDir"));

	UKismetSystemLibrary_GetPlatformUserDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPathName
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetPathName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPathName"));

	UKismetSystemLibrary_GetPathName_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetOuterObject
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetSystemLibrary::GetOuterObject(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetOuterObject"));

	UKismetSystemLibrary_GetOuterObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectName
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetObjectName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectName"));

	UKismetSystemLibrary_GetObjectName_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetSystemLibrary::GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId"));

	UKismetSystemLibrary_GetObjectFromPrimaryAssetId_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetMinYResolutionForUI
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetMinYResolutionForUI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetMinYResolutionForUI"));

	UKismetSystemLibrary_GetMinYResolutionForUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetMinYResolutionFor3DView()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView"));

	UKismetSystemLibrary_GetMinYResolutionFor3DView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetLocalCurrencySymbol()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol"));

	UKismetSystemLibrary_GetLocalCurrencySymbol_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetLocalCurrencyCode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencyCode"));

	UKismetSystemLibrary_GetLocalCurrencyCode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::GetGameTimeInSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameTimeInSeconds"));

	UKismetSystemLibrary_GetGameTimeInSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGamepadControllerName
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetGamepadControllerName(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGamepadControllerName"));

	UKismetSystemLibrary_GetGamepadControllerName_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph
// ()
// Parameters:
// struct FString                 ButtonKey                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ControllerIndex                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture2D* UKismetSystemLibrary::GetGamepadButtonGlyph(const struct FString& ButtonKey, int ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph"));

	UKismetSystemLibrary_GetGamepadButtonGlyph_Params params;
	params.ButtonKey = ButtonKey;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetGameName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameName"));

	UKismetSystemLibrary_GetGameName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameBundleId
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetGameBundleId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameBundleId"));

	UKismetSystemLibrary_GetGameBundleId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetFrameCount
// ()
// Parameters:
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int64_t UKismetSystemLibrary::GetFrameCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetFrameCount"));

	UKismetSystemLibrary_GetFrameCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetEngineVersion
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetEngineVersion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetEngineVersion"));

	UKismetSystemLibrary_GetEngineVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDisplayName
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetDisplayName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDisplayName"));

	UKismetSystemLibrary_GetDisplayName_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDeviceId
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetDeviceId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDeviceId"));

	UKismetSystemLibrary_GetDeviceId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDefaultLocale
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetDefaultLocale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDefaultLocale"));

	UKismetSystemLibrary_GetDefaultLocale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDefaultLanguage
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetDefaultLanguage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDefaultLanguage"));

	UKismetSystemLibrary_GetDefaultLanguage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetCurrentBundleState
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bForceCurrentState             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FName>           OutBundles                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetCurrentBundleState"));

	UKismetSystemLibrary_GetCurrentBundleState_Params params;
	params.PrimaryAssetId = PrimaryAssetId;
	params.bForceCurrentState = bForceCurrentState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutBundles != nullptr)
		*OutBundles = params.OutBundles;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
// ()
// Parameters:
// TArray<struct FIntPoint>       Resolutions                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions"));

	UKismetSystemLibrary_GetConvenientWindowedResolutions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Resolutions != nullptr)
		*Resolutions = params.Resolutions;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue
// ()
// Parameters:
// struct FString                 VariableName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetConsoleVariableIntValue(const struct FString& VariableName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue"));

	UKismetSystemLibrary_GetConsoleVariableIntValue_Params params;
	params.VariableName = VariableName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
// ()
// Parameters:
// struct FString                 VariableName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UKismetSystemLibrary::GetConsoleVariableFloatValue(const struct FString& VariableName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue"));

	UKismetSystemLibrary_GetConsoleVariableFloatValue_Params params;
	params.VariableName = VariableName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
// ()
// Parameters:
// struct FString                 VariableName                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::GetConsoleVariableBoolValue(const struct FString& VariableName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue"));

	UKismetSystemLibrary_GetConsoleVariableBoolValue_Params params;
	params.VariableName = VariableName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetComponentBounds
// ()
// Parameters:
// class USceneComponent*         Component                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          SphereRadius                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetComponentBounds"));

	UKismetSystemLibrary_GetComponentBounds_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
	if (SphereRadius != nullptr)
		*SphereRadius = params.SphereRadius;

}


// Function Engine.KismetSystemLibrary.GetCommandLine
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetCommandLine()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetCommandLine"));

	UKismetSystemLibrary_GetCommandLine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* UKismetSystemLibrary::GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId"));

	UKismetSystemLibrary_GetClassFromPrimaryAssetId_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetClassDisplayName
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::GetClassDisplayName(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetClassDisplayName"));

	UKismetSystemLibrary_GetClassDisplayName_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetAdIDCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::GetAdIDCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetAdIDCount"));

	UKismetSystemLibrary_GetAdIDCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetActorListFromComponentList
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> ComponentList                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActorList                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorListFromComponentList"));

	UKismetSystemLibrary_GetActorListFromComponentList_Params params;
	params.ComponentList = ComponentList;
	params.ActorClassFilter = ActorClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActorList != nullptr)
		*OutActorList = params.OutActorList;

}


// Function Engine.KismetSystemLibrary.GetActorBounds
// ()
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorBounds"));

	UKismetSystemLibrary_GetActorBounds_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;

}


// Function Engine.KismetSystemLibrary.ForceCloseAdBanner
// ()
void UKismetSystemLibrary::ForceCloseAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ForceCloseAdBanner"));

	UKismetSystemLibrary_ForceCloseAdBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::FlushPersistentDebugLines(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushPersistentDebugLines"));

	UKismetSystemLibrary_FlushPersistentDebugLines_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.FlushDebugStrings
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::FlushDebugStrings(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushDebugStrings"));

	UKismetSystemLibrary_FlushDebugStrings_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Command                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ExecuteConsoleCommand"));

	UKismetSystemLibrary_ExecuteConsoleCommand_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Command = Command;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::EqualEqual_SoftObjectReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference"));

	UKismetSystemLibrary_EqualEqual_SoftObjectReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::EqualEqual_SoftClassReference()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference"));

	UKismetSystemLibrary_EqualEqual_SoftClassReference_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
// ()
// Parameters:
// struct FPrimaryAssetType       A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetType       B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType"));

	UKismetSystemLibrary_EqualEqual_PrimaryAssetType_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
// ()
// Parameters:
// struct FPrimaryAssetId         A                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId         B                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId"));

	UKismetSystemLibrary_EqualEqual_PrimaryAssetId_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.EndTransaction
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::EndTransaction()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.EndTransaction"));

	UKismetSystemLibrary_EndTransaction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.DrawDebugString
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                  TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugString"));

	UKismetSystemLibrary_DrawDebugString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugSphere
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugSphere"));

	UKismetSystemLibrary_DrawDebugSphere_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugPoint
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& position, float Size, const struct FLinearColor& PointColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPoint"));

	UKismetSystemLibrary_DrawDebugPoint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.position = position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugPlane
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                  PlaneCoordinates               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            PlaneColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPlane"));

	UKismetSystemLibrary_DrawDebugPlane_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugLine
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugLine"));

	UKismetSystemLibrary_DrawDebugLine_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugFrustum
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              FrustumTransform               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor            FrustumColor                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFrustum"));

	UKismetSystemLibrary_DrawDebugFrustum_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FrustumTransform = FrustumTransform;
	params.FrustumColor = FrustumColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTransform              DrawTransform                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform"));

	UKismetSystemLibrary_DrawDebugFloatHistoryTransform_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawTransform = DrawTransform;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                 DrawLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation"));

	UKismetSystemLibrary_DrawDebugFloatHistoryLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawLocation = DrawLocation;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCylinder
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCylinder"));

	UKismetSystemLibrary_DrawDebugCylinder_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem"));

	UKismetSystemLibrary_DrawDebugCoordinateSystem_Params params;
	params.WorldContextObject = WorldContextObject;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees"));

	UKismetSystemLibrary_DrawDebugConeInDegrees_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCone
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCone"));

	UKismetSystemLibrary_DrawDebugCone_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCircle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Center                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            NumSegments                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 YAxis                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ZAxis                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDrawAxis                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCircle"));

	UKismetSystemLibrary_DrawDebugCircle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.NumSegments = NumSegments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.YAxis = YAxis;
	params.ZAxis = ZAxis;
	params.bDrawAxis = bDrawAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCapsule
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCapsule"));

	UKismetSystemLibrary_DrawDebugCapsule_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugCamera
// ()
// Parameters:
// class ACameraActor*            CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            CameraColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCamera"));

	UKismetSystemLibrary_DrawDebugCamera_Params params;
	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugBox
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugBox"));

	UKismetSystemLibrary_DrawDebugBox_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DrawDebugArrow
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugArrow"));

	UKismetSystemLibrary_DrawDebugArrow_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.DoesImplementInterface
// ()
// Parameters:
// class UObject*                 TestObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::DoesImplementInterface(class UObject* TestObject, class UClass* Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DoesImplementInterface"));

	UKismetSystemLibrary_DoesImplementInterface_Params params;
	params.TestObject = TestObject;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Delay
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo       LatentInfo                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Delay"));

	UKismetSystemLibrary_Delay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
// ()
// Parameters:
// class UObject*                 ObjectToModify                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::CreateCopyForUndoBuffer(class UObject* ObjectToModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer"));

	UKismetSystemLibrary_CreateCopyForUndoBuffer_Params params;
	params.ObjectToModify = ObjectToModify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ConvertToRelativePath
// ()
// Parameters:
// struct FString                 Filename                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::ConvertToRelativePath(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ConvertToRelativePath"));

	UKismetSystemLibrary_ConvertToRelativePath_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ConvertToAbsolutePath
// ()
// Parameters:
// struct FString                 Filename                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::ConvertToAbsolutePath(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ConvertToAbsolutePath"));

	UKismetSystemLibrary_ConvertToAbsolutePath_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
// ()
// Parameters:
// struct FSoftObjectPath         SoftObjectPath                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef"));

	UKismetSystemLibrary_Conv_SoftObjPathToSoftObjRef_Params params;
	params.SoftObjectPath = SoftObjectPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::Conv_SoftObjectReferenceToString()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString"));

	UKismetSystemLibrary_Conv_SoftObjectReferenceToString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetSystemLibrary::Conv_SoftObjectReferenceToObject()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject"));

	UKismetSystemLibrary_Conv_SoftObjectReferenceToObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::Conv_SoftClassReferenceToString()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString"));

	UKismetSystemLibrary_Conv_SoftClassReferenceToString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UClass* UKismetSystemLibrary::Conv_SoftClassReferenceToClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass"));

	UKismetSystemLibrary_Conv_SoftClassReferenceToClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
// ()
// Parameters:
// struct FSoftClassPath          SoftClassPath                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef"));

	UKismetSystemLibrary_Conv_SoftClassPathToSoftClassRef_Params params;
	params.SoftClassPath = SoftClassPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
// ()
// Parameters:
// struct FPrimaryAssetType       PrimaryAssetType               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString"));

	UKismetSystemLibrary_Conv_PrimaryAssetTypeToString_Params params;
	params.PrimaryAssetType = PrimaryAssetType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
// ()
// Parameters:
// struct FPrimaryAssetId         PrimaryAssetId                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetSystemLibrary::Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString"));

	UKismetSystemLibrary_Conv_PrimaryAssetIdToString_Params params;
	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::Conv_ObjectToSoftObjectReference(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference"));

	UKismetSystemLibrary_Conv_ObjectToSoftObjectReference_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
// ()
// Parameters:
// TScriptInterface<class UInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UObject* UKismetSystemLibrary::Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_InterfaceToObject"));

	UKismetSystemLibrary_Conv_InterfaceToObject_Params params;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
// ()
// Parameters:
// class UClass*                  Class                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::Conv_ClassToSoftClassReference(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference"));

	UKismetSystemLibrary_Conv_ClassToSoftClassReference_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ControlScreensaver
// ()
// Parameters:
// bool                           bAllowScreenSaver              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ControlScreensaver"));

	UKismetSystemLibrary_ControlScreensaver_Params params;
	params.bAllowScreenSaver = bAllowScreenSaver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapComponents"));

	UKismetSystemLibrary_ComponentOverlapComponents_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapActors"));

	UKismetSystemLibrary_ComponentOverlapActors_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CollectGarbage
// ()
void UKismetSystemLibrary::CollectGarbage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CollectGarbage"));

	UKismetSystemLibrary_CollectGarbage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects"));

	UKismetSystemLibrary_CapsuleTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile"));

	UKismetSystemLibrary_CapsuleTraceSingleByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingle"));

	UKismetSystemLibrary_CapsuleTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects"));

	UKismetSystemLibrary_CapsuleTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile"));

	UKismetSystemLibrary_CapsuleTraceMultiByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMulti"));

	UKismetSystemLibrary_CapsuleTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents"));

	UKismetSystemLibrary_CapsuleOverlapComponents_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapActors"));

	UKismetSystemLibrary_CapsuleOverlapActors_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CanLaunchURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::CanLaunchURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CanLaunchURL"));

	UKismetSystemLibrary_CanLaunchURL_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CancelTransaction
// ()
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::CancelTransaction(int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CancelTransaction"));

	UKismetSystemLibrary_CancelTransaction_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.KismetSystemLibrary.BreakSoftObjectPath
// ()
// Parameters:
// struct FSoftObjectPath         InSoftObjectPath               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 PathString                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, struct FString* PathString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BreakSoftObjectPath"));

	UKismetSystemLibrary_BreakSoftObjectPath_Params params;
	params.InSoftObjectPath = InSoftObjectPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PathString != nullptr)
		*PathString = params.PathString;

}


// Function Engine.KismetSystemLibrary.BreakSoftClassPath
// ()
// Parameters:
// struct FSoftClassPath          InSoftClassPath                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 PathString                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UKismetSystemLibrary::BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, struct FString* PathString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BreakSoftClassPath"));

	UKismetSystemLibrary_BreakSoftClassPath_Params params;
	params.InSoftClassPath = InSoftClassPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PathString != nullptr)
		*PathString = params.PathString;

}


// Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects"));

	UKismetSystemLibrary_BoxTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile"));

	UKismetSystemLibrary_BoxTraceSingleByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult              OutHit                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingle"));

	UKismetSystemLibrary_BoxTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects"));

	UKismetSystemLibrary_BoxTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile"));

	UKismetSystemLibrary_BoxTraceMultiByProfile_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 HalfSize                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceColor                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            TraceHitColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DrawTime                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMulti"));

	UKismetSystemLibrary_BoxTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapComponents"));

	UKismetSystemLibrary_BoxOverlapComponents_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetSystemLibrary::BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapActors"));

	UKismetSystemLibrary_BoxOverlapActors_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BeginTransaction
// ()
// Parameters:
// struct FString                 Context                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   Description                    (Parm, NativeAccessSpecifierPublic)
// class UObject*                 PrimaryObject                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UKismetSystemLibrary::BeginTransaction(const struct FString& Context, const struct FText& Description, class UObject* PrimaryObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BeginTransaction"));

	UKismetSystemLibrary_BeginTransaction_Params params;
	params.Context = Context;
	params.Description = Description;
	params.PrimaryObject = PrimaryObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.AddFloatHistorySample
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDebugFloatHistory      ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FDebugFloatHistory UKismetSystemLibrary::AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.AddFloatHistorySample"));

	UKismetSystemLibrary_AddFloatHistorySample_Params params;
	params.Value = Value;
	params.FloatHistory = FloatHistory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetSystemLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetSystemLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

// Function Engine.KismetTextLibrary.TextTrimTrailing
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextTrimTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimTrailing"));

	UKismetTextLibrary_TextTrimTrailing_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextTrimPrecedingAndTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing"));

	UKismetTextLibrary_TextTrimPrecedingAndTrailing_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPreceding
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextTrimPreceding(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPreceding"));

	UKismetTextLibrary_TextTrimPreceding_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextToUpper
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextToUpper(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextToUpper"));

	UKismetTextLibrary_TextToUpper_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextToLower
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextToLower(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextToLower"));

	UKismetTextLibrary_TextToLower_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsTransient
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::TextIsTransient(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsTransient"));

	UKismetTextLibrary_TextIsTransient_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsFromStringTable
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::TextIsFromStringTable(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsFromStringTable"));

	UKismetTextLibrary_TextIsFromStringTable_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsEmpty
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::TextIsEmpty(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsEmpty"));

	UKismetTextLibrary_TextIsEmpty_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsCultureInvariant
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::TextIsCultureInvariant(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsCultureInvariant"));

	UKismetTextLibrary_TextIsCultureInvariant_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextFromStringTable
// ()
// Parameters:
// struct FName                   TableId                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::TextFromStringTable(const struct FName& TableId, const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextFromStringTable"));

	UKismetTextLibrary_TextFromStringTable_Params params;
	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText
// ()
// Parameters:
// struct FText                   Text                           (Parm, NativeAccessSpecifierPublic)
// struct FName                   OutTableId                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OutKey                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, struct FString* OutKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText"));

	UKismetTextLibrary_StringTableIdAndKeyFromText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTableId != nullptr)
		*OutTableId = params.OutTableId;
	if (OutKey != nullptr)
		*OutKey = params.OutKey;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.PolyglotDataToText
// ()
// Parameters:
// struct FPolyglotTextData       PolyglotData                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::PolyglotDataToText(const struct FPolyglotTextData& PolyglotData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.PolyglotDataToText"));

	UKismetTextLibrary_PolyglotDataToText_Params params;
	params.PolyglotData = PolyglotData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::NotEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_TextText"));

	UKismetTextLibrary_NotEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText"));

	UKismetTextLibrary_NotEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.IsPolyglotDataValid
// ()
// Parameters:
// struct FPolyglotTextData       PolyglotData                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           IsValid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ErrorMessage                   (Parm, OutParm, NativeAccessSpecifierPublic)
void UKismetTextLibrary::IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.IsPolyglotDataValid"));

	UKismetTextLibrary_IsPolyglotDataValid_Params params;
	params.PolyglotData = PolyglotData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IsValid != nullptr)
		*IsValid = params.IsValid;
	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

}


// Function Engine.KismetTextLibrary.GetEmptyText
// ()
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::GetEmptyText()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.GetEmptyText"));

	UKismetTextLibrary_GetEmptyText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Format
// ()
// Parameters:
// struct FText                   InPattern                      (Parm, NativeAccessSpecifierPublic)
// TArray<struct FFormatArgumentData> InArgs                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Format"));

	UKismetTextLibrary_Format_Params params;
	params.InPattern = InPattern;
	params.InArgs = InArgs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.FindTextInLocalizationTable
// ()
// Parameters:
// struct FString                 Namespace                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Key                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   OutText                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.FindTextInLocalizationTable"));

	UKismetTextLibrary_FindTextInLocalizationTable_Params params;
	params.Namespace = Namespace;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutText != nullptr)
		*OutText = params.OutText;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::EqualEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_TextText"));

	UKismetTextLibrary_EqualEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText"));

	UKismetTextLibrary_EqualEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_VectorToText
// ()
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_VectorToText(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_VectorToText"));

	UKismetTextLibrary_Conv_VectorToText_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_Vector2dToText
// ()
// Parameters:
// struct FVector2D               InVec                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_Vector2dToText(const struct FVector2D& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_Vector2dToText"));

	UKismetTextLibrary_Conv_Vector2dToText_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_TransformToText
// ()
// Parameters:
// struct FTransform              InTrans                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_TransformToText(const struct FTransform& InTrans)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_TransformToText"));

	UKismetTextLibrary_Conv_TransformToText_Params params;
	params.InTrans = InTrans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_TextToString
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UKismetTextLibrary::Conv_TextToString(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_TextToString"));

	UKismetTextLibrary_Conv_TextToString_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_StringToText
// ()
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_StringToText(const struct FString& inString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_StringToText"));

	UKismetTextLibrary_Conv_StringToText_Params params;
	params.inString = inString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_RotatorToText
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_RotatorToText(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_RotatorToText"));

	UKismetTextLibrary_Conv_RotatorToText_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ObjectToText
// ()
// Parameters:
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_ObjectToText(class UObject* InObj)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_ObjectToText"));

	UKismetTextLibrary_Conv_ObjectToText_Params params;
	params.InObj = InObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_NameToText
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_NameToText(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_NameToText"));

	UKismetTextLibrary_Conv_NameToText_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_IntToText
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_IntToText"));

	UKismetTextLibrary_Conv_IntToText_Params params;
	params.Value = Value;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_Int64ToText
// ()
// Parameters:
// int64_t                        Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_Int64ToText"));

	UKismetTextLibrary_Conv_Int64ToText_Params params;
	params.Value = Value;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_FloatToText
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ERoundingMode> RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_FloatToText(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_FloatToText"));

	UKismetTextLibrary_Conv_FloatToText_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ColorToText
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_ColorToText(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_ColorToText"));

	UKismetTextLibrary_Conv_ColorToText_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ByteToText
// ()
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_ByteToText(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_ByteToText"));

	UKismetTextLibrary_Conv_ByteToText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_BoolToText
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::Conv_BoolToText(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_BoolToText"));

	UKismetTextLibrary_Conv_BoolToText_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InTimeZone                     (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime"));

	UKismetTextLibrary_AsTimeZoneTime_DateTime_Params params;
	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InTimeZone                     (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime"));

	UKismetTextLibrary_AsTimeZoneDateTime_DateTime_Params params;
	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 InTimeZone                     (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime"));

	UKismetTextLibrary_AsTimeZoneDate_DateTime_Params params;
	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimespan_Timespan
// ()
// Parameters:
// struct FTimespan               InTimespan                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsTimespan_Timespan(const struct FTimespan& InTimespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimespan_Timespan"));

	UKismetTextLibrary_AsTimespan_Timespan_Params params;
	params.InTimespan = InTimespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTime_DateTime
// ()
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTime_DateTime"));

	UKismetTextLibrary_AsTime_DateTime_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsPercent_Float
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ERoundingMode> RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsPercent_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsPercent_Float"));

	UKismetTextLibrary_AsPercent_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDateTime_DateTime
// ()
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsDateTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDateTime_DateTime"));

	UKismetTextLibrary_AsDateTime_DateTime_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDate_DateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsDate_DateTime(const struct FDateTime& InDateTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDate_DateTime"));

	UKismetTextLibrary_AsDate_DateTime_Params params;
	params.InDateTime = InDateTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrencyBase
// ()
// Parameters:
// int                            BaseValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 CurrencyCode                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrencyBase"));

	UKismetTextLibrary_AsCurrencyBase_Params params;
	params.BaseValue = BaseValue;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Integer
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ERoundingMode> RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 CurrencyCode                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsCurrency_Integer(int Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Integer"));

	UKismetTextLibrary_AsCurrency_Integer_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Float
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ERoundingMode> RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAlwaysSign                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 CurrencyCode                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
struct FText UKismetTextLibrary::AsCurrency_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Float"));

	UKismetTextLibrary_AsCurrency_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UKismetTextLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UKismetTextLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void ULayer::AfterRead()
{
	UObject::AfterRead();

}

void ULayer::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ULevelPartitionInterface::AfterRead()
{
	UInterface::AfterRead();

}

void ULevelPartitionInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void ULevel::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(OwningWorld, UWorld);
	READ_PTR_FULL(Model, UModel);
	READ_PTR_FULL(ActorCluster, ULevelActorContainer);
	READ_PTR_FULL(LevelScriptActor, ALevelScriptActor);
	READ_PTR_FULL(NavListStart, ANavigationObjectBase);
	READ_PTR_FULL(NavListEnd, ANavigationObjectBase);
	READ_PTR_FULL(MapBuildData, UMapBuildDataRegistry);
	READ_PTR_FULL(WorldSettings, AWorldSettings);
}

void ULevel::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(OwningWorld);
	DELE_PTR_FULL(Model);
	DELE_PTR_FULL(ActorCluster);
	DELE_PTR_FULL(LevelScriptActor);
	DELE_PTR_FULL(NavListStart);
	DELE_PTR_FULL(NavListEnd);
	DELE_PTR_FULL(MapBuildData);
	DELE_PTR_FULL(WorldSettings);
}

void ULevelActorContainer::AfterRead()
{
	UObject::AfterRead();

}

void ULevelActorContainer::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ALevelBounds::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(BoxComponent, UBoxComponent);
}

void ALevelBounds::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(BoxComponent);
}

// Function Engine.LevelScriptActor.WorldOriginLocationChanged
// ()
// Parameters:
// struct FIntVector              OldOriginLocation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector              NewOriginLocation              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALevelScriptActor::WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.WorldOriginLocationChanged"));

	ALevelScriptActor_WorldOriginLocationChanged_Params params;
	params.OldOriginLocation = OldOriginLocation;
	params.NewOriginLocation = NewOriginLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelScriptActor.SetCinematicMode
// ()
// Parameters:
// bool                           bCinematicMode                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.SetCinematicMode"));

	ALevelScriptActor_SetCinematicMode_Params params;
	params.bCinematicMode = bCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelScriptActor.RemoteEvent
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ALevelScriptActor::RemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.RemoteEvent"));

	ALevelScriptActor_RemoteEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelScriptActor.LevelReset
// ()
void ALevelScriptActor::LevelReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.LevelReset"));

	ALevelScriptActor_LevelReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ALevelScriptActor::AfterRead()
{
	AActor::AfterRead();

}

void ALevelScriptActor::BeforeDelete()
{
	AActor::BeforeDelete();

}

void ULevelScriptBlueprint::AfterRead()
{
	UBlueprint::AfterRead();

}

void ULevelScriptBlueprint::BeforeDelete()
{
	UBlueprint::BeforeDelete();

}

// Function Engine.LevelStreaming.ShouldBeLoaded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ULevelStreaming::ShouldBeLoaded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.ShouldBeLoaded"));

	ULevelStreaming_ShouldBeLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.SetShouldBeVisible
// ()
// Parameters:
// bool                           bInShouldBeVisible             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULevelStreaming::SetShouldBeVisible(bool bInShouldBeVisible)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.SetShouldBeVisible"));

	ULevelStreaming_SetShouldBeVisible_Params params;
	params.bInShouldBeVisible = bInShouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelStreaming.SetShouldBeLoaded
// ()
// Parameters:
// bool                           bInShouldBeLoaded              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULevelStreaming::SetShouldBeLoaded(bool bInShouldBeLoaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.SetShouldBeLoaded"));

	ULevelStreaming_SetShouldBeLoaded_Params params;
	params.bInShouldBeLoaded = bInShouldBeLoaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelStreaming.SetPriority
// ()
// Parameters:
// int                            NewPriority                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULevelStreaming::SetPriority(int NewPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.SetPriority"));

	ULevelStreaming_SetPriority_Params params;
	params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelStreaming.SetLevelLODIndex
// ()
// Parameters:
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULevelStreaming::SetLevelLODIndex(int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.SetLevelLODIndex"));

	ULevelStreaming_SetLevelLODIndex_Params params;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
// ()
// Parameters:
// bool                           bInIsRequestingUnloadAndRemoval (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ULevelStreaming::SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval"));

	ULevelStreaming_SetIsRequestingUnloadAndRemoval_Params params;
	params.bInIsRequestingUnloadAndRemoval = bInIsRequestingUnloadAndRemoval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.LevelStreaming.IsStreamingStatePending
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ULevelStreaming::IsStreamingStatePending()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsStreamingStatePending"));

	ULevelStreaming_IsStreamingStatePending_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ULevelStreaming::IsLevelVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelVisible"));

	ULevelStreaming_IsLevelVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelLoaded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ULevelStreaming::IsLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelLoaded"));

	ULevelStreaming_IsLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetWorldAssetPackageFName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName ULevelStreaming::GetWorldAssetPackageFName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetWorldAssetPackageFName"));

	ULevelStreaming_GetWorldAssetPackageFName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetLoadedLevel
// ()
// Parameters:
// class ULevel*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULevel* ULevelStreaming::GetLoadedLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetLoadedLevel"));

	ULevelStreaming_GetLoadedLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetLevelScriptActor
// ()
// Parameters:
// class ALevelScriptActor*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ALevelScriptActor* ULevelStreaming::GetLevelScriptActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetLevelScriptActor"));

	ULevelStreaming_GetLevelScriptActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool ULevelStreaming::GetIsRequestingUnloadAndRemoval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval"));

	ULevelStreaming_GetIsRequestingUnloadAndRemoval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.LevelStreaming.CreateInstance
// ()
// Parameters:
// struct FString                 UniqueInstanceName             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULevelStreaming* ULevelStreaming::CreateInstance(const struct FString& UniqueInstanceName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.CreateInstance"));

	ULevelStreaming_CreateInstance_Params params;
	params.UniqueInstanceName = UniqueInstanceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ULevelStreaming::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(LoadedLevel, ULevel);
	READ_PTR_FULL(PendingUnloadLevel, ULevel);
}

void ULevelStreaming::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(LoadedLevel);
	DELE_PTR_FULL(PendingUnloadLevel);
}

void ULevelStreamingAlwaysLoaded::AfterRead()
{
	ULevelStreaming::AfterRead();

}

void ULevelStreamingAlwaysLoaded::BeforeDelete()
{
	ULevelStreaming::BeforeDelete();

}

// Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bOutSuccess                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OptionalLevelNameOverride      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULevelStreamingDynamic* ULevelStreamingDynamic::LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const struct FString& OptionalLevelNameOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr"));

	ULevelStreamingDynamic_LoadLevelInstanceBySoftObjectPtr_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Rotation = Rotation;
	params.OptionalLevelNameOverride = OptionalLevelNameOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bOutSuccess != nullptr)
		*bOutSuccess = params.bOutSuccess;


	return params.ReturnValue;
}


// Function Engine.LevelStreamingDynamic.LoadLevelInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 LevelName                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bOutSuccess                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 OptionalLevelNameOverride      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULevelStreamingDynamic* ULevelStreamingDynamic::LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const struct FString& OptionalLevelNameOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreamingDynamic.LoadLevelInstance"));

	ULevelStreamingDynamic_LoadLevelInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.OptionalLevelNameOverride = OptionalLevelNameOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bOutSuccess != nullptr)
		*bOutSuccess = params.bOutSuccess;


	return params.ReturnValue;
}


void ULevelStreamingDynamic::AfterRead()
{
	ULevelStreaming::AfterRead();

}

void ULevelStreamingDynamic::BeforeDelete()
{
	ULevelStreaming::BeforeDelete();

}

void ULevelStreamingPersistent::AfterRead()
{
	ULevelStreaming::AfterRead();

}

void ULevelStreamingPersistent::BeforeDelete()
{
	ULevelStreaming::BeforeDelete();

}

void ALevelStreamingVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ALevelStreamingVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void ULightmappedSurfaceCollection::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SourceModel, UModel);
}

void ULightmappedSurfaceCollection::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SourceModel);
}

void ULightMapTexture2D::AfterRead()
{
	UTexture2D::AfterRead();

}

void ULightMapTexture2D::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void ULightMapVirtualTexture2D::AfterRead()
{
	UTexture2D::AfterRead();

}

void ULightMapVirtualTexture2D::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void ALightmassCharacterIndirectDetailVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ALightmassCharacterIndirectDetailVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void ALightmassImportanceVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ALightmassImportanceVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void ALightmassPortal::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(PortalComponent, ULightmassPortalComponent);
}

void ALightmassPortal::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(PortalComponent);
}

void ULightmassPortalComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(PreviewBox, UBoxComponent);
}

void ULightmassPortalComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(PreviewBox);
}

void ULightmassPrimitiveSettingsObject::AfterRead()
{
	UObject::AfterRead();

}

void ULightmassPrimitiveSettingsObject::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ULineBatchComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void ULineBatchComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

void ULocalPlayer::AfterRead()
{
	UPlayer::AfterRead();

	READ_PTR_FULL(ViewportClient, UGameViewportClient);
	READ_PTR_FULL(PendingLevelPlayerControllerClass, UClass);
}

void ULocalPlayer::BeforeDelete()
{
	UPlayer::BeforeDelete();

	DELE_PTR_FULL(ViewportClient);
	DELE_PTR_FULL(PendingLevelPlayerControllerClass);
}

void ULocalPlayerSubsystem::AfterRead()
{
	USubsystem::AfterRead();

}

void ULocalPlayerSubsystem::BeforeDelete()
{
	USubsystem::BeforeDelete();

}

void ALODActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(StaticMeshComponent, UStaticMeshComponent);
	READ_PTR_FULL(Proxy, UHLODProxy);
}

void ALODActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(StaticMeshComponent);
	DELE_PTR_FULL(Proxy);
}

// Function Engine.LODSyncComponent.GetLODSyncDebugText
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString ULODSyncComponent::GetLODSyncDebugText()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LODSyncComponent.GetLODSyncDebugText"));

	ULODSyncComponent_GetLODSyncDebugText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void ULODSyncComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void ULODSyncComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

void ULODSyncInterface::AfterRead()
{
	UInterface::AfterRead();

}

void ULODSyncInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UMapBuildDataRegistry::AfterRead()
{
	UObject::AfterRead();

}

void UMapBuildDataRegistry::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UMaterial::AfterRead()
{
	UMaterialInterface::AfterRead();

	READ_PTR_FULL(PhysMaterial, UPhysicalMaterial);
	READ_PTR_FULL(PhysMaterialMask, UPhysicalMaterialMask);
	READ_PTR_FULL(PhysicalMaterialMap[0x8], UPhysicalMaterial);
}

void UMaterial::BeforeDelete()
{
	UMaterialInterface::BeforeDelete();

	DELE_PTR_FULL(PhysMaterial);
	DELE_PTR_FULL(PhysMaterialMask);
	DELE_PTR_FULL(PhysicalMaterialMap[0x8]);
}

// Function Engine.MaterialBillboardComponent.SetElements
// ()
// Parameters:
// TArray<struct FMaterialSpriteElement> NewElements                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
void UMaterialBillboardComponent::SetElements(TArray<struct FMaterialSpriteElement> NewElements)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialBillboardComponent.SetElements"));

	UMaterialBillboardComponent_SetElements_Params params;
	params.NewElements = NewElements;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialBillboardComponent.AddElement
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*             DistanceToOpacityCurve         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bSizeIsInScreenSpace           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseSizeX                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          BaseSizeY                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*             DistanceToSizeCurve            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialBillboardComponent::AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialBillboardComponent.AddElement"));

	UMaterialBillboardComponent_AddElement_Params params;
	params.Material = Material;
	params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	params.BaseSizeX = BaseSizeX;
	params.BaseSizeY = BaseSizeY;
	params.DistanceToSizeCurve = DistanceToSizeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UMaterialBillboardComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

}

void UMaterialBillboardComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

}

void UMaterialExpression::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Material, UMaterial);
	READ_PTR_FULL(Function, UMaterialFunction);
}

void UMaterialExpression::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Material);
	DELE_PTR_FULL(Function);
}

void UMaterialExpressionAbs::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAbs::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionActorPositionWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionActorPositionWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionAdd::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAdd::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTextureBase::AfterRead()
{
	UMaterialExpression::AfterRead();

	READ_PTR_FULL(Texture, UTexture);
}

void UMaterialExpressionTextureBase::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

	DELE_PTR_FULL(Texture);
}

void UMaterialExpressionTextureSample::AfterRead()
{
	UMaterialExpressionTextureBase::AfterRead();

}

void UMaterialExpressionTextureSample::BeforeDelete()
{
	UMaterialExpressionTextureBase::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameter::AfterRead()
{
	UMaterialExpressionTextureSample::AfterRead();

}

void UMaterialExpressionTextureSampleParameter::BeforeDelete()
{
	UMaterialExpressionTextureSample::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameter2D::AfterRead()
{
	UMaterialExpressionTextureSampleParameter::AfterRead();

}

void UMaterialExpressionTextureSampleParameter2D::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter::BeforeDelete();

}

void UMaterialExpressionAntialiasedTextureMask::AfterRead()
{
	UMaterialExpressionTextureSampleParameter2D::AfterRead();

}

void UMaterialExpressionAntialiasedTextureMask::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter2D::BeforeDelete();

}

void UMaterialExpressionAppendVector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAppendVector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArccosine::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArccosine::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArccosineFast::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArccosineFast::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArcsine::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArcsine::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArcsineFast::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArcsineFast::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArctangent::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArctangent::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArctangent2::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArctangent2::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArctangent2Fast::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArctangent2Fast::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionArctangentFast::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionArctangentFast::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionAtmosphericFogColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAtmosphericFogColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionAtmosphericLightColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAtmosphericLightColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionAtmosphericLightVector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionAtmosphericLightVector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCustomOutput::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCustomOutput::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionBentNormalCustomOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionBentNormalCustomOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionBlackBody::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionBlackBody::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionBlendMaterialAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionBlendMaterialAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionBreakMaterialAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionBreakMaterialAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionBumpOffset::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionBumpOffset::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCameraPositionWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCameraPositionWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCameraVectorWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCameraVectorWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCeil::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCeil::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParameter::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParameter::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVectorParameter::AfterRead()
{
	UMaterialExpressionParameter::AfterRead();

}

void UMaterialExpressionVectorParameter::BeforeDelete()
{
	UMaterialExpressionParameter::BeforeDelete();

}

void UMaterialExpressionChannelMaskParameter::AfterRead()
{
	UMaterialExpressionVectorParameter::AfterRead();

}

void UMaterialExpressionChannelMaskParameter::BeforeDelete()
{
	UMaterialExpressionVectorParameter::BeforeDelete();

}

void UMaterialExpressionClamp::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionClamp::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionClearCoatNormalCustomOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionClearCoatNormalCustomOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionCloudSampleAttribute::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCloudSampleAttribute::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCollectionParameter::AfterRead()
{
	UMaterialExpression::AfterRead();

	READ_PTR_FULL(Collection, UMaterialParameterCollection);
}

void UMaterialExpressionCollectionParameter::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

	DELE_PTR_FULL(Collection);
}

void UMaterialExpressionComment::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionComment::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionComponentMask::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionComponentMask::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionConstant::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionConstant::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionConstant2Vector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionConstant2Vector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionConstant3Vector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionConstant3Vector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionConstant4Vector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionConstant4Vector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionConstantBiasScale::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionConstantBiasScale::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCosine::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCosine::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionCrossProduct::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCrossProduct::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionScalarParameter::AfterRead()
{
	UMaterialExpressionParameter::AfterRead();

}

void UMaterialExpressionScalarParameter::BeforeDelete()
{
	UMaterialExpressionParameter::BeforeDelete();

}

void UMaterialExpressionCurveAtlasRowParameter::AfterRead()
{
	UMaterialExpressionScalarParameter::AfterRead();

	READ_PTR_FULL(Curve, UCurveLinearColor);
	READ_PTR_FULL(Atlas, UCurveLinearColorAtlas);
}

void UMaterialExpressionCurveAtlasRowParameter::BeforeDelete()
{
	UMaterialExpressionScalarParameter::BeforeDelete();

	DELE_PTR_FULL(Curve);
	DELE_PTR_FULL(Atlas);
}

void UMaterialExpressionCustom::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionCustom::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDDX::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDDX::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDDY::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDDY::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDecalDerivative::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDecalDerivative::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDecalLifetimeOpacity::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDecalLifetimeOpacity::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDecalMipmapLevel::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDecalMipmapLevel::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDeltaTime::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDeltaTime::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDepthFade::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDepthFade::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDepthOfFieldFunction::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDepthOfFieldFunction::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDeriveNormalZ::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDeriveNormalZ::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDesaturation::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDesaturation::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDistance::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDistance::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDistanceCullFade::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDistanceCullFade::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDistanceFieldGradient::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDistanceFieldGradient::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDistanceToNearestSurface::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDistanceToNearestSurface::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDivide::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDivide::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDotProduct::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDotProduct::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionDynamicParameter::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionDynamicParameter::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionEyeAdaptation::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionEyeAdaptation::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFeatureLevelSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFeatureLevelSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFloor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFloor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFmod::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFmod::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFontSample::AfterRead()
{
	UMaterialExpression::AfterRead();

	READ_PTR_FULL(Font, UFont);
}

void UMaterialExpressionFontSample::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

	DELE_PTR_FULL(Font);
}

void UMaterialExpressionFontSampleParameter::AfterRead()
{
	UMaterialExpressionFontSample::AfterRead();

}

void UMaterialExpressionFontSampleParameter::BeforeDelete()
{
	UMaterialExpressionFontSample::BeforeDelete();

}

void UMaterialExpressionFrac::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFrac::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFresnel::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFresnel::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFunctionInput::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFunctionInput::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionFunctionOutput::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionFunctionOutput::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionGetMaterialAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionGetMaterialAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionGIReplace::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionGIReplace::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionHairAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionHairAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionHairColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionHairColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionIf::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionIf::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionInverseLinearInterpolate::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionInverseLinearInterpolate::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLightmapUVs::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLightmapUVs::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLightmassReplace::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLightmassReplace::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLightVector::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLightVector::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLinearInterpolate::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLinearInterpolate::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLogarithm10::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLogarithm10::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionLogarithm2::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionLogarithm2::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMakeMaterialAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMakeMaterialAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMapARPassthroughCameraUV::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMapARPassthroughCameraUV::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMaterialAttributeLayers::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMaterialAttributeLayers::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMaterialFunctionCall::AfterRead()
{
	UMaterialExpression::AfterRead();

	READ_PTR_FULL(MaterialFunction, UMaterialFunctionInterface);
}

void UMaterialExpressionMaterialFunctionCall::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

	DELE_PTR_FULL(MaterialFunction);
}

void UMaterialExpressionMaterialLayerOutput::AfterRead()
{
	UMaterialExpressionFunctionOutput::AfterRead();

}

void UMaterialExpressionMaterialLayerOutput::BeforeDelete()
{
	UMaterialExpressionFunctionOutput::BeforeDelete();

}

void UMaterialExpressionMaterialProxyReplace::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMaterialProxyReplace::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMax::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMax::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMin::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMin::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionMultiply::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionMultiply::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionNoise::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionNoise::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionNormalize::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionNormalize::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionObjectBounds::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionObjectBounds::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionObjectOrientation::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionObjectOrientation::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionObjectPositionWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionObjectPositionWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionObjectRadius::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionObjectRadius::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionOneMinus::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionOneMinus::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPanner::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPanner::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleDirection::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleDirection::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleMacroUV::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleMacroUV::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleMotionBlurFade::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleMotionBlurFade::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticlePositionWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticlePositionWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleRadius::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleRadius::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleRandom::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleRandom::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleRelativeTime::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleRelativeTime::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleSize::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleSize::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleSpeed::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleSpeed::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionParticleSubUV::AfterRead()
{
	UMaterialExpressionTextureSample::AfterRead();

}

void UMaterialExpressionParticleSubUV::BeforeDelete()
{
	UMaterialExpressionTextureSample::BeforeDelete();

}

void UMaterialExpressionParticleSubUVProperties::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionParticleSubUVProperties::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPerInstanceCustomData::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPerInstanceCustomData::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPerInstanceFadeAmount::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPerInstanceFadeAmount::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPerInstanceRandom::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPerInstanceRandom::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPixelDepth::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPixelDepth::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPixelNormalWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPixelNormalWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPower::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPower::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPrecomputedAOMask::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPrecomputedAOMask::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPreSkinnedLocalBounds::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPreSkinnedLocalBounds::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPreSkinnedNormal::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPreSkinnedNormal::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPreSkinnedPosition::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPreSkinnedPosition::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionPreviousFrameSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionPreviousFrameSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionQualitySwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionQualitySwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRayTracingQualitySwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionRayTracingQualitySwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionReflectionCapturePassSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionReflectionCapturePassSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionReflectionVectorWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionReflectionVectorWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionReroute::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionReroute::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRotateAboutAxis::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionRotateAboutAxis::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRotator::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionRotator::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRound::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionRound::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRuntimeVirtualTextureOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionRuntimeVirtualTextureOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionRuntimeVirtualTextureReplace::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionRuntimeVirtualTextureReplace::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionRuntimeVirtualTextureSample::AfterRead()
{
	UMaterialExpression::AfterRead();

	READ_PTR_FULL(VirtualTexture, URuntimeVirtualTexture);
}

void UMaterialExpressionRuntimeVirtualTextureSample::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

	DELE_PTR_FULL(VirtualTexture);
}

void UMaterialExpressionRuntimeVirtualTextureSampleParameter::AfterRead()
{
	UMaterialExpressionRuntimeVirtualTextureSample::AfterRead();

}

void UMaterialExpressionRuntimeVirtualTextureSampleParameter::BeforeDelete()
{
	UMaterialExpressionRuntimeVirtualTextureSample::BeforeDelete();

}

void UMaterialExpressionSaturate::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSaturate::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSceneColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSceneColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSceneDepth::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSceneDepth::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSceneDepthWithoutWater::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSceneDepthWithoutWater::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSceneTexelSize::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSceneTexelSize::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSceneTexture::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSceneTexture::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionScreenPosition::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionScreenPosition::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSetMaterialAttributes::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSetMaterialAttributes::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionShaderStageSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionShaderStageSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionShadingModel::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionShadingModel::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionShadingPathSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionShadingPathSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionShadowReplace::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionShadowReplace::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSign::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSign::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSine::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSine::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSingleLayerWaterMaterialOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionSingleLayerWaterMaterialOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionSkinningVertexOffsets::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkinningVertexOffsets::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereLightDirection::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereLightDirection::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereLightIlluminance::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereLightIlluminance::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereLightDiskLuminance::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereLightDiskLuminance::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereAerialPerspective::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereAerialPerspective::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSkyAtmosphereViewLuminance::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSkyAtmosphereViewLuminance::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSmoothStep::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSmoothStep::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSobol::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSobol::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSpeedTree::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSpeedTree::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSphereMask::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSphereMask::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSphericalParticleOpacity::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSphericalParticleOpacity::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSquareRoot::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSquareRoot::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionStaticBool::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionStaticBool::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionStaticBoolParameter::AfterRead()
{
	UMaterialExpressionParameter::AfterRead();

}

void UMaterialExpressionStaticBoolParameter::BeforeDelete()
{
	UMaterialExpressionParameter::BeforeDelete();

}

void UMaterialExpressionStaticComponentMaskParameter::AfterRead()
{
	UMaterialExpressionParameter::AfterRead();

}

void UMaterialExpressionStaticComponentMaskParameter::BeforeDelete()
{
	UMaterialExpressionParameter::BeforeDelete();

}

void UMaterialExpressionStaticSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionStaticSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionStaticSwitchParameter::AfterRead()
{
	UMaterialExpressionStaticBoolParameter::AfterRead();

}

void UMaterialExpressionStaticSwitchParameter::BeforeDelete()
{
	UMaterialExpressionStaticBoolParameter::BeforeDelete();

}

void UMaterialExpressionStep::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionStep::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionSubtract::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionSubtract::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTangent::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTangent::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTangentOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionTangentOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionTemporalSobol::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTemporalSobol::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTextureCoordinate::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTextureCoordinate::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTextureObject::AfterRead()
{
	UMaterialExpressionTextureBase::AfterRead();

}

void UMaterialExpressionTextureObject::BeforeDelete()
{
	UMaterialExpressionTextureBase::BeforeDelete();

}

void UMaterialExpressionTextureObjectParameter::AfterRead()
{
	UMaterialExpressionTextureSampleParameter::AfterRead();

}

void UMaterialExpressionTextureObjectParameter::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter::BeforeDelete();

}

void UMaterialExpressionTextureProperty::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTextureProperty::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameter2DArray::AfterRead()
{
	UMaterialExpressionTextureSampleParameter::AfterRead();

}

void UMaterialExpressionTextureSampleParameter2DArray::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameterCube::AfterRead()
{
	UMaterialExpressionTextureSampleParameter::AfterRead();

}

void UMaterialExpressionTextureSampleParameterCube::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameterSubUV::AfterRead()
{
	UMaterialExpressionTextureSampleParameter2D::AfterRead();

}

void UMaterialExpressionTextureSampleParameterSubUV::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter2D::BeforeDelete();

}

void UMaterialExpressionTextureSampleParameterVolume::AfterRead()
{
	UMaterialExpressionTextureSampleParameter::AfterRead();

}

void UMaterialExpressionTextureSampleParameterVolume::BeforeDelete()
{
	UMaterialExpressionTextureSampleParameter::BeforeDelete();

}

void UMaterialExpressionThinTranslucentMaterialOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionThinTranslucentMaterialOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionTime::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTime::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTransform::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTransform::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTransformPosition::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTransformPosition::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTruncate::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTruncate::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionTwoSidedSign::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionTwoSidedSign::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVectorNoise::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVectorNoise::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVertexColor::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVertexColor::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVertexInterpolator::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionVertexInterpolator::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionVertexNormalWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVertexNormalWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVertexTangentWS::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVertexTangentWS::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionViewProperty::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionViewProperty::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionViewSize::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionViewSize::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVirtualTextureFeatureSwitch::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVirtualTextureFeatureSwitch::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVolumetricAdvancedMaterialInput::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionVolumetricAdvancedMaterialInput::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialExpressionVolumetricAdvancedMaterialOutput::AfterRead()
{
	UMaterialExpressionCustomOutput::AfterRead();

}

void UMaterialExpressionVolumetricAdvancedMaterialOutput::BeforeDelete()
{
	UMaterialExpressionCustomOutput::BeforeDelete();

}

void UMaterialExpressionWorldPosition::AfterRead()
{
	UMaterialExpression::AfterRead();

}

void UMaterialExpressionWorldPosition::BeforeDelete()
{
	UMaterialExpression::BeforeDelete();

}

void UMaterialFunctionInterface::AfterRead()
{
	UObject::AfterRead();

}

void UMaterialFunctionInterface::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UMaterialFunction::AfterRead()
{
	UMaterialFunctionInterface::AfterRead();

}

void UMaterialFunction::BeforeDelete()
{
	UMaterialFunctionInterface::BeforeDelete();

}

void UMaterialFunctionInstance::AfterRead()
{
	UMaterialFunctionInterface::AfterRead();

	READ_PTR_FULL(Parent, UMaterialFunctionInterface);
	READ_PTR_FULL(Base, UMaterialFunctionInterface);
}

void UMaterialFunctionInstance::BeforeDelete()
{
	UMaterialFunctionInterface::BeforeDelete();

	DELE_PTR_FULL(Parent);
	DELE_PTR_FULL(Base);
}

void UMaterialFunctionMaterialLayer::AfterRead()
{
	UMaterialFunction::AfterRead();

}

void UMaterialFunctionMaterialLayer::BeforeDelete()
{
	UMaterialFunction::BeforeDelete();

}

void UMaterialFunctionMaterialLayerInstance::AfterRead()
{
	UMaterialFunctionInstance::AfterRead();

}

void UMaterialFunctionMaterialLayerInstance::BeforeDelete()
{
	UMaterialFunctionInstance::BeforeDelete();

}

void UMaterialFunctionMaterialLayerBlend::AfterRead()
{
	UMaterialFunction::AfterRead();

}

void UMaterialFunctionMaterialLayerBlend::BeforeDelete()
{
	UMaterialFunction::BeforeDelete();

}

void UMaterialFunctionMaterialLayerBlendInstance::AfterRead()
{
	UMaterialFunctionInstance::AfterRead();

}

void UMaterialFunctionMaterialLayerBlendInstance::BeforeDelete()
{
	UMaterialFunctionInstance::BeforeDelete();

}

void AMaterialInstanceActor::AfterRead()
{
	AActor::AfterRead();

}

void AMaterialInstanceActor::BeforeDelete()
{
	AActor::BeforeDelete();

}

// Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo"));

	UMaterialInstanceDynamic_SetVectorParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetVectorParameterValue"));

	UMaterialInstanceDynamic_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo"));

	UMaterialInstanceDynamic_SetTextureParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetTextureParameterValue"));

	UMaterialInstanceDynamic_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo"));

	UMaterialInstanceDynamic_SetScalarParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetScalarParameterValue"));

	UMaterialInstanceDynamic_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
// ()
// Parameters:
// class UMaterialInstance*       SourceA                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstance*       SourceB                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams"));

	UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams_Params params;
	params.SourceA = SourceA;
	params.SourceB = SourceB;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo"));

	UMaterialInstanceDynamic_K2_GetVectorParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue"));

	UMaterialInstanceDynamic_K2_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo"));

	UMaterialInstanceDynamic_K2_GetTextureParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue"));

	UMaterialInstanceDynamic_K2_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
// ()
// Parameters:
// struct FMaterialParameterInfo  ParameterInfo                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMaterialInstanceDynamic::K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo"));

	UMaterialInstanceDynamic_K2_GetScalarParameterValueByInfo_Params params;
	params.ParameterInfo = ParameterInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue"));

	UMaterialInstanceDynamic_K2_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
// ()
// Parameters:
// class UMaterialInterface*      Source                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bQuickParametersOnly           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters"));

	UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters_Params params;
	params.Source = Source;
	params.bQuickParametersOnly = bQuickParametersOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
// ()
// Parameters:
// class UMaterialInstance*       MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::CopyParameterOverrides(class UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.CopyParameterOverrides"));

	UMaterialInstanceDynamic_CopyParameterOverrides_Params params;
	params.MaterialInstance = MaterialInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MaterialInstanceDynamic.CopyInterpParameters
// ()
// Parameters:
// class UMaterialInstance*       Source                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMaterialInstanceDynamic::CopyInterpParameters(class UMaterialInstance* Source)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.CopyInterpParameters"));

	UMaterialInstanceDynamic_CopyInterpParameters_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UMaterialInstanceDynamic::AfterRead()
{
	UMaterialInstance::AfterRead();

}

void UMaterialInstanceDynamic::BeforeDelete()
{
	UMaterialInstance::BeforeDelete();

}

void UMaterialParameterCollection::AfterRead()
{
	UObject::AfterRead();

}

void UMaterialParameterCollection::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UMaterialParameterCollectionInstance::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Collection, UMaterialParameterCollection);
}

void UMaterialParameterCollectionInstance::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Collection);
}

// Function Engine.MatineeActor.Stop
// ()
void AMatineeActor::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Stop"));

	AMatineeActor_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.SetPosition
// ()
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bJump                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AMatineeActor::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetPosition"));

	AMatineeActor_SetPosition_Params params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.SetLoopingState
// ()
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AMatineeActor::SetLoopingState(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetLoopingState"));

	AMatineeActor_SetLoopingState_Params params;
	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.Reverse
// ()
void AMatineeActor::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Reverse"));

	AMatineeActor_Reverse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.Play
// ()
void AMatineeActor::Play()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Play"));

	AMatineeActor_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.Pause
// ()
void AMatineeActor::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Pause"));

	AMatineeActor_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.EnableGroupByName
// ()
// Parameters:
// struct FString                 GroupName                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void AMatineeActor::EnableGroupByName(const struct FString& GroupName, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.EnableGroupByName"));

	AMatineeActor_EnableGroupByName_Params params;
	params.GroupName = GroupName;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MatineeActor.ChangePlaybackDirection
// ()
void AMatineeActor::ChangePlaybackDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.ChangePlaybackDirection"));

	AMatineeActor_ChangePlaybackDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void AMatineeActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(MatineeData, UInterpData);
}

void AMatineeActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(MatineeData);
}

void AMatineeActorCameraAnim::AfterRead()
{
	AMatineeActor::AfterRead();

	READ_PTR_FULL(CameraAnim, UCameraAnim);
}

void AMatineeActorCameraAnim::BeforeDelete()
{
	AMatineeActor::BeforeDelete();

	DELE_PTR_FULL(CameraAnim);
}

void UMatineeAnimInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UMatineeAnimInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UMatineeInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UMatineeInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void AMeshMergeCullingVolume::AfterRead()
{
	AVolume::AfterRead();

}

void AMeshMergeCullingVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void UMeshSimplificationSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UMeshSimplificationSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

// Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
// ()
// Parameters:
// class UStaticMeshComponent*    StaticMeshComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshVertexPainterKismetLibrary::RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices"));

	UMeshVertexPainterKismetLibrary_RemovePaintedVertices_Params params;
	params.StaticMeshComponent = StaticMeshComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
// ()
// Parameters:
// class UStaticMeshComponent*    StaticMeshComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            FillColor                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bConvertToSRGB                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshVertexPainterKismetLibrary::PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor"));

	UMeshVertexPainterKismetLibrary_PaintVerticesSingleColor_Params params;
	params.StaticMeshComponent = StaticMeshComponent;
	params.FillColor = FillColor;
	params.bConvertToSRGB = bConvertToSRGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
// ()
// Parameters:
// class UStaticMeshComponent*    StaticMeshComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            StartColor                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            EndColor                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EVertexPaintAxis        Axis                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bConvertToSRGB                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UMeshVertexPainterKismetLibrary::PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, Engine_EVertexPaintAxis Axis, bool bConvertToSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis"));

	UMeshVertexPainterKismetLibrary_PaintVerticesLerpAlongAxis_Params params;
	params.StaticMeshComponent = StaticMeshComponent;
	params.StartColor = StartColor;
	params.EndColor = EndColor;
	params.Axis = Axis;
	params.bConvertToSRGB = bConvertToSRGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UMeshVertexPainterKismetLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UMeshVertexPainterKismetLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UMicroTransactionBase::AfterRead()
{
	UPlatformInterfaceBase::AfterRead();

}

void UMicroTransactionBase::BeforeDelete()
{
	UPlatformInterfaceBase::BeforeDelete();

}

void UModelComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(ModelBodySetup, UBodySetup);
}

void UModelComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(ModelBodySetup);
}

void UMorphTarget::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(BaseSkelMesh, USkeletalMesh);
}

void UMorphTarget::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(BaseSkelMesh);
}

void UNavAgentInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNavAgentInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UNavAreaBase::AfterRead()
{
	UObject::AfterRead();

}

void UNavAreaBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNavCollisionBase::AfterRead()
{
	UObject::AfterRead();

}

void UNavCollisionBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNavEdgeProviderInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNavEdgeProviderInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UNavigationDataChunk::AfterRead()
{
	UObject::AfterRead();

}

void UNavigationDataChunk::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNavigationDataInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNavigationDataInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UNavigationSystemBase::AfterRead()
{
	UObject::AfterRead();

}

void UNavigationSystemBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNavigationSystemConfig::AfterRead()
{
	UObject::AfterRead();

}

void UNavigationSystemConfig::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNullNavSysConfig::AfterRead()
{
	UNavigationSystemConfig::AfterRead();

}

void UNullNavSysConfig::BeforeDelete()
{
	UNavigationSystemConfig::BeforeDelete();

}

void UNavLinkDefinition::AfterRead()
{
	UObject::AfterRead();

}

void UNavLinkDefinition::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNavPathObserverInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNavPathObserverInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UNavRelevantInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNavRelevantInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void USimulatedClientNetConnection::AfterRead()
{
	UNetConnection::AfterRead();

}

void USimulatedClientNetConnection::BeforeDelete()
{
	UNetConnection::BeforeDelete();

}

// Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            RepIndex                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UNetPushModelHelpers::MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex"));

	UNetPushModelHelpers_MarkPropertyDirtyFromRepIndex_Params params;
	params.Object = Object;
	params.RepIndex = RepIndex;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.NetPushModelHelpers.MarkPropertyDirty
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UNetPushModelHelpers::MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirty"));

	UNetPushModelHelpers_MarkPropertyDirty_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UNetPushModelHelpers::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UNetPushModelHelpers::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UNetworkPredictionInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNetworkPredictionInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UNetworkSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UNetworkSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UNodeMappingContainer::AfterRead()
{
	UObject::AfterRead();

}

void UNodeMappingContainer::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UNodeMappingProviderInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UNodeMappingProviderInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void ANote::AfterRead()
{
	AActor::AfterRead();

}

void ANote::BeforeDelete()
{
	AActor::BeforeDelete();

}

void UObjectLibrary::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ObjectBaseClass, UClass);
}

void UObjectLibrary::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ObjectBaseClass);
}

void UObjectReferencer::AfterRead()
{
	UObject::AfterRead();

}

void UObjectReferencer::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UObjectTraceWorldSubsystem::AfterRead()
{
	UWorldSubsystem::AfterRead();

}

void UObjectTraceWorldSubsystem::BeforeDelete()
{
	UWorldSubsystem::BeforeDelete();

}

void UPackageMapClient::AfterRead()
{
	UPackageMap::AfterRead();

}

void UPackageMapClient::BeforeDelete()
{
	UPackageMap::BeforeDelete();

}

void APainCausingVolume::AfterRead()
{
	APhysicsVolume::AfterRead();

	READ_PTR_FULL(DamageType, UClass);
	READ_PTR_FULL(DamageInstigator, AController);
}

void APainCausingVolume::BeforeDelete()
{
	APhysicsVolume::BeforeDelete();

	DELE_PTR_FULL(DamageType);
	DELE_PTR_FULL(DamageInstigator);
}

void UParticleEmitter::AfterRead()
{
	UObject::AfterRead();

}

void UParticleEmitter::BeforeDelete()
{
	UObject::BeforeDelete();

}

void AParticleEventManager::AfterRead()
{
	AActor::AfterRead();

}

void AParticleEventManager::BeforeDelete()
{
	AActor::BeforeDelete();

}

void UParticleLODLevel::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(RequiredModule, UParticleModuleRequired);
	READ_PTR_FULL(TypeDataModule, UParticleModuleTypeDataBase);
	READ_PTR_FULL(SpawnModule, UParticleModuleSpawn);
	READ_PTR_FULL(EventGenerator, UParticleModuleEventGenerator);
}

void UParticleLODLevel::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(RequiredModule);
	DELE_PTR_FULL(TypeDataModule);
	DELE_PTR_FULL(SpawnModule);
	DELE_PTR_FULL(EventGenerator);
}

void UParticleModule::AfterRead()
{
	UObject::AfterRead();

}

void UParticleModule::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UParticleModuleAccelerationBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleAccelerationBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleAcceleration::AfterRead()
{
	UParticleModuleAccelerationBase::AfterRead();

}

void UParticleModuleAcceleration::BeforeDelete()
{
	UParticleModuleAccelerationBase::BeforeDelete();

}

void UParticleModuleAccelerationConstant::AfterRead()
{
	UParticleModuleAccelerationBase::AfterRead();

}

void UParticleModuleAccelerationConstant::BeforeDelete()
{
	UParticleModuleAccelerationBase::BeforeDelete();

}

void UParticleModuleAccelerationDrag::AfterRead()
{
	UParticleModuleAccelerationBase::AfterRead();

	READ_PTR_FULL(DragCoefficient, UDistributionFloat);
}

void UParticleModuleAccelerationDrag::BeforeDelete()
{
	UParticleModuleAccelerationBase::BeforeDelete();

	DELE_PTR_FULL(DragCoefficient);
}

void UParticleModuleAccelerationDragScaleOverLife::AfterRead()
{
	UParticleModuleAccelerationBase::AfterRead();

	READ_PTR_FULL(DragScale, UDistributionFloat);
}

void UParticleModuleAccelerationDragScaleOverLife::BeforeDelete()
{
	UParticleModuleAccelerationBase::BeforeDelete();

	DELE_PTR_FULL(DragScale);
}

void UParticleModuleAccelerationOverLifetime::AfterRead()
{
	UParticleModuleAccelerationBase::AfterRead();

}

void UParticleModuleAccelerationOverLifetime::BeforeDelete()
{
	UParticleModuleAccelerationBase::BeforeDelete();

}

void UParticleModuleAttractorBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleAttractorBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleAttractorLine::AfterRead()
{
	UParticleModuleAttractorBase::AfterRead();

}

void UParticleModuleAttractorLine::BeforeDelete()
{
	UParticleModuleAttractorBase::BeforeDelete();

}

void UParticleModuleAttractorParticle::AfterRead()
{
	UParticleModuleAttractorBase::AfterRead();

}

void UParticleModuleAttractorParticle::BeforeDelete()
{
	UParticleModuleAttractorBase::BeforeDelete();

}

void UParticleModuleAttractorPoint::AfterRead()
{
	UParticleModuleAttractorBase::AfterRead();

}

void UParticleModuleAttractorPoint::BeforeDelete()
{
	UParticleModuleAttractorBase::BeforeDelete();

}

void UParticleModuleAttractorPointGravity::AfterRead()
{
	UParticleModuleAttractorBase::AfterRead();

	READ_PTR_FULL(Strength, UDistributionFloat);
}

void UParticleModuleAttractorPointGravity::BeforeDelete()
{
	UParticleModuleAttractorBase::BeforeDelete();

	DELE_PTR_FULL(Strength);
}

void UParticleModuleBeamBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleBeamBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleBeamModifier::AfterRead()
{
	UParticleModuleBeamBase::AfterRead();

}

void UParticleModuleBeamModifier::BeforeDelete()
{
	UParticleModuleBeamBase::BeforeDelete();

}

void UParticleModuleBeamNoise::AfterRead()
{
	UParticleModuleBeamBase::AfterRead();

}

void UParticleModuleBeamNoise::BeforeDelete()
{
	UParticleModuleBeamBase::BeforeDelete();

}

void UParticleModuleBeamSource::AfterRead()
{
	UParticleModuleBeamBase::AfterRead();

}

void UParticleModuleBeamSource::BeforeDelete()
{
	UParticleModuleBeamBase::BeforeDelete();

}

void UParticleModuleBeamTarget::AfterRead()
{
	UParticleModuleBeamBase::AfterRead();

}

void UParticleModuleBeamTarget::BeforeDelete()
{
	UParticleModuleBeamBase::BeforeDelete();

}

void UParticleModuleCameraBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleCameraBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleCameraOffset::AfterRead()
{
	UParticleModuleCameraBase::AfterRead();

}

void UParticleModuleCameraOffset::BeforeDelete()
{
	UParticleModuleCameraBase::BeforeDelete();

}

void UParticleModuleCollisionBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleCollisionBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleCollision::AfterRead()
{
	UParticleModuleCollisionBase::AfterRead();

}

void UParticleModuleCollision::BeforeDelete()
{
	UParticleModuleCollisionBase::BeforeDelete();

}

void UParticleModuleCollisionGPU::AfterRead()
{
	UParticleModuleCollisionBase::AfterRead();

}

void UParticleModuleCollisionGPU::BeforeDelete()
{
	UParticleModuleCollisionBase::BeforeDelete();

}

void UParticleModuleColorBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleColorBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleColor::AfterRead()
{
	UParticleModuleColorBase::AfterRead();

}

void UParticleModuleColor::BeforeDelete()
{
	UParticleModuleColorBase::BeforeDelete();

}

void UParticleModuleColor_Seeded::AfterRead()
{
	UParticleModuleColor::AfterRead();

}

void UParticleModuleColor_Seeded::BeforeDelete()
{
	UParticleModuleColor::BeforeDelete();

}

void UParticleModuleColorOverLife::AfterRead()
{
	UParticleModuleColorBase::AfterRead();

}

void UParticleModuleColorOverLife::BeforeDelete()
{
	UParticleModuleColorBase::BeforeDelete();

}

void UParticleModuleColorScaleOverLife::AfterRead()
{
	UParticleModuleColorBase::AfterRead();

}

void UParticleModuleColorScaleOverLife::BeforeDelete()
{
	UParticleModuleColorBase::BeforeDelete();

}

void UParticleModuleEventBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleEventBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleEventGenerator::AfterRead()
{
	UParticleModuleEventBase::AfterRead();

}

void UParticleModuleEventGenerator::BeforeDelete()
{
	UParticleModuleEventBase::BeforeDelete();

}

void UParticleModuleEventReceiverBase::AfterRead()
{
	UParticleModuleEventBase::AfterRead();

}

void UParticleModuleEventReceiverBase::BeforeDelete()
{
	UParticleModuleEventBase::BeforeDelete();

}

void UParticleModuleEventReceiverKillParticles::AfterRead()
{
	UParticleModuleEventReceiverBase::AfterRead();

}

void UParticleModuleEventReceiverKillParticles::BeforeDelete()
{
	UParticleModuleEventReceiverBase::BeforeDelete();

}

void UParticleModuleEventReceiverSpawn::AfterRead()
{
	UParticleModuleEventReceiverBase::AfterRead();

}

void UParticleModuleEventReceiverSpawn::BeforeDelete()
{
	UParticleModuleEventReceiverBase::BeforeDelete();

}

void UParticleModuleKillBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleKillBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleKillBox::AfterRead()
{
	UParticleModuleKillBase::AfterRead();

}

void UParticleModuleKillBox::BeforeDelete()
{
	UParticleModuleKillBase::BeforeDelete();

}

void UParticleModuleKillHeight::AfterRead()
{
	UParticleModuleKillBase::AfterRead();

}

void UParticleModuleKillHeight::BeforeDelete()
{
	UParticleModuleKillBase::BeforeDelete();

}

void UParticleModuleLifetimeBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleLifetimeBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleLifetime::AfterRead()
{
	UParticleModuleLifetimeBase::AfterRead();

}

void UParticleModuleLifetime::BeforeDelete()
{
	UParticleModuleLifetimeBase::BeforeDelete();

}

void UParticleModuleLifetime_Seeded::AfterRead()
{
	UParticleModuleLifetime::AfterRead();

}

void UParticleModuleLifetime_Seeded::BeforeDelete()
{
	UParticleModuleLifetime::BeforeDelete();

}

void UParticleModuleLightBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleLightBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleLight::AfterRead()
{
	UParticleModuleLightBase::AfterRead();

}

void UParticleModuleLight::BeforeDelete()
{
	UParticleModuleLightBase::BeforeDelete();

}

void UParticleModuleLight_Seeded::AfterRead()
{
	UParticleModuleLight::AfterRead();

}

void UParticleModuleLight_Seeded::BeforeDelete()
{
	UParticleModuleLight::BeforeDelete();

}

void UParticleModuleLocationBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleLocationBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleLocation::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocation::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocation_Seeded::AfterRead()
{
	UParticleModuleLocation::AfterRead();

}

void UParticleModuleLocation_Seeded::BeforeDelete()
{
	UParticleModuleLocation::BeforeDelete();

}

void UParticleModuleLocationBoneSocket::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationBoneSocket::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationDirect::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationDirect::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationEmitter::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationEmitter::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationEmitterDirect::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationEmitterDirect::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationPrimitiveBase::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationPrimitiveBase::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationPrimitiveCylinder::AfterRead()
{
	UParticleModuleLocationPrimitiveBase::AfterRead();

}

void UParticleModuleLocationPrimitiveCylinder::BeforeDelete()
{
	UParticleModuleLocationPrimitiveBase::BeforeDelete();

}

void UParticleModuleLocationPrimitiveCylinder_Seeded::AfterRead()
{
	UParticleModuleLocationPrimitiveCylinder::AfterRead();

}

void UParticleModuleLocationPrimitiveCylinder_Seeded::BeforeDelete()
{
	UParticleModuleLocationPrimitiveCylinder::BeforeDelete();

}

void UParticleModuleLocationPrimitiveSphere::AfterRead()
{
	UParticleModuleLocationPrimitiveBase::AfterRead();

}

void UParticleModuleLocationPrimitiveSphere::BeforeDelete()
{
	UParticleModuleLocationPrimitiveBase::BeforeDelete();

}

void UParticleModuleLocationPrimitiveSphere_Seeded::AfterRead()
{
	UParticleModuleLocationPrimitiveSphere::AfterRead();

}

void UParticleModuleLocationPrimitiveSphere_Seeded::BeforeDelete()
{
	UParticleModuleLocationPrimitiveSphere::BeforeDelete();

}

void UParticleModuleLocationPrimitiveTriangle::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationPrimitiveTriangle::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationSkelVertSurface::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleLocationSkelVertSurface::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleLocationWorldOffset::AfterRead()
{
	UParticleModuleLocation::AfterRead();

}

void UParticleModuleLocationWorldOffset::BeforeDelete()
{
	UParticleModuleLocation::BeforeDelete();

}

void UParticleModuleLocationWorldOffset_Seeded::AfterRead()
{
	UParticleModuleLocationWorldOffset::AfterRead();

}

void UParticleModuleLocationWorldOffset_Seeded::BeforeDelete()
{
	UParticleModuleLocationWorldOffset::BeforeDelete();

}

void UParticleModuleMaterialBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleMaterialBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleMeshMaterial::AfterRead()
{
	UParticleModuleMaterialBase::AfterRead();

}

void UParticleModuleMeshMaterial::BeforeDelete()
{
	UParticleModuleMaterialBase::BeforeDelete();

}

void UParticleModuleRotationBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleRotationBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleMeshRotation::AfterRead()
{
	UParticleModuleRotationBase::AfterRead();

}

void UParticleModuleMeshRotation::BeforeDelete()
{
	UParticleModuleRotationBase::BeforeDelete();

}

void UParticleModuleMeshRotation_Seeded::AfterRead()
{
	UParticleModuleMeshRotation::AfterRead();

}

void UParticleModuleMeshRotation_Seeded::BeforeDelete()
{
	UParticleModuleMeshRotation::BeforeDelete();

}

void UParticleModuleRotationRateBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleRotationRateBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleMeshRotationRate::AfterRead()
{
	UParticleModuleRotationRateBase::AfterRead();

}

void UParticleModuleMeshRotationRate::BeforeDelete()
{
	UParticleModuleRotationRateBase::BeforeDelete();

}

void UParticleModuleMeshRotationRate_Seeded::AfterRead()
{
	UParticleModuleMeshRotationRate::AfterRead();

}

void UParticleModuleMeshRotationRate_Seeded::BeforeDelete()
{
	UParticleModuleMeshRotationRate::BeforeDelete();

}

void UParticleModuleMeshRotationRateMultiplyLife::AfterRead()
{
	UParticleModuleRotationRateBase::AfterRead();

}

void UParticleModuleMeshRotationRateMultiplyLife::BeforeDelete()
{
	UParticleModuleRotationRateBase::BeforeDelete();

}

void UParticleModuleMeshRotationRateOverLife::AfterRead()
{
	UParticleModuleRotationRateBase::AfterRead();

}

void UParticleModuleMeshRotationRateOverLife::BeforeDelete()
{
	UParticleModuleRotationRateBase::BeforeDelete();

}

void UParticleModuleOrbitBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleOrbitBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleOrbit::AfterRead()
{
	UParticleModuleOrbitBase::AfterRead();

}

void UParticleModuleOrbit::BeforeDelete()
{
	UParticleModuleOrbitBase::BeforeDelete();

}

void UParticleModuleOrientationBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleOrientationBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleOrientationAxisLock::AfterRead()
{
	UParticleModuleOrientationBase::AfterRead();

}

void UParticleModuleOrientationAxisLock::BeforeDelete()
{
	UParticleModuleOrientationBase::BeforeDelete();

}

void UParticleModuleParameterBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleParameterBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleParameterDynamic::AfterRead()
{
	UParticleModuleParameterBase::AfterRead();

}

void UParticleModuleParameterDynamic::BeforeDelete()
{
	UParticleModuleParameterBase::BeforeDelete();

}

void UParticleModuleParameterDynamic_Seeded::AfterRead()
{
	UParticleModuleParameterDynamic::AfterRead();

}

void UParticleModuleParameterDynamic_Seeded::BeforeDelete()
{
	UParticleModuleParameterDynamic::BeforeDelete();

}

void UParticleModulePivotOffset::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModulePivotOffset::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleRequired::AfterRead()
{
	UParticleModule::AfterRead();

	READ_PTR_FULL(Material, UMaterialInterface);
	READ_PTR_FULL(CutoutTexture, UTexture2D);
}

void UParticleModuleRequired::BeforeDelete()
{
	UParticleModule::BeforeDelete();

	DELE_PTR_FULL(Material);
	DELE_PTR_FULL(CutoutTexture);
}

void UParticleModuleRotation::AfterRead()
{
	UParticleModuleRotationBase::AfterRead();

}

void UParticleModuleRotation::BeforeDelete()
{
	UParticleModuleRotationBase::BeforeDelete();

}

void UParticleModuleRotation_Seeded::AfterRead()
{
	UParticleModuleRotation::AfterRead();

}

void UParticleModuleRotation_Seeded::BeforeDelete()
{
	UParticleModuleRotation::BeforeDelete();

}

void UParticleModuleRotationOverLifetime::AfterRead()
{
	UParticleModuleRotationBase::AfterRead();

}

void UParticleModuleRotationOverLifetime::BeforeDelete()
{
	UParticleModuleRotationBase::BeforeDelete();

}

void UParticleModuleRotationRate::AfterRead()
{
	UParticleModuleRotationRateBase::AfterRead();

}

void UParticleModuleRotationRate::BeforeDelete()
{
	UParticleModuleRotationRateBase::BeforeDelete();

}

void UParticleModuleRotationRate_Seeded::AfterRead()
{
	UParticleModuleRotationRate::AfterRead();

}

void UParticleModuleRotationRate_Seeded::BeforeDelete()
{
	UParticleModuleRotationRate::BeforeDelete();

}

void UParticleModuleRotationRateMultiplyLife::AfterRead()
{
	UParticleModuleRotationRateBase::AfterRead();

}

void UParticleModuleRotationRateMultiplyLife::BeforeDelete()
{
	UParticleModuleRotationRateBase::BeforeDelete();

}

void UParticleModuleSizeBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleSizeBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleSize::AfterRead()
{
	UParticleModuleSizeBase::AfterRead();

}

void UParticleModuleSize::BeforeDelete()
{
	UParticleModuleSizeBase::BeforeDelete();

}

void UParticleModuleSize_Seeded::AfterRead()
{
	UParticleModuleSize::AfterRead();

}

void UParticleModuleSize_Seeded::BeforeDelete()
{
	UParticleModuleSize::BeforeDelete();

}

void UParticleModuleSizeMultiplyLife::AfterRead()
{
	UParticleModuleSizeBase::AfterRead();

}

void UParticleModuleSizeMultiplyLife::BeforeDelete()
{
	UParticleModuleSizeBase::BeforeDelete();

}

void UParticleModuleSizeScale::AfterRead()
{
	UParticleModuleSizeBase::AfterRead();

}

void UParticleModuleSizeScale::BeforeDelete()
{
	UParticleModuleSizeBase::BeforeDelete();

}

void UParticleModuleSizeScaleBySpeed::AfterRead()
{
	UParticleModuleSizeBase::AfterRead();

}

void UParticleModuleSizeScaleBySpeed::BeforeDelete()
{
	UParticleModuleSizeBase::BeforeDelete();

}

void UParticleModuleSourceMovement::AfterRead()
{
	UParticleModuleLocationBase::AfterRead();

}

void UParticleModuleSourceMovement::BeforeDelete()
{
	UParticleModuleLocationBase::BeforeDelete();

}

void UParticleModuleSpawnBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleSpawnBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleSpawn::AfterRead()
{
	UParticleModuleSpawnBase::AfterRead();

}

void UParticleModuleSpawn::BeforeDelete()
{
	UParticleModuleSpawnBase::BeforeDelete();

}

void UParticleModuleSpawnPerUnit::AfterRead()
{
	UParticleModuleSpawnBase::AfterRead();

}

void UParticleModuleSpawnPerUnit::BeforeDelete()
{
	UParticleModuleSpawnBase::BeforeDelete();

}

void UParticleModuleSubUVBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleSubUVBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleSubUV::AfterRead()
{
	UParticleModuleSubUVBase::AfterRead();

	READ_PTR_FULL(Animation, USubUVAnimation);
}

void UParticleModuleSubUV::BeforeDelete()
{
	UParticleModuleSubUVBase::BeforeDelete();

	DELE_PTR_FULL(Animation);
}

void UParticleModuleSubUVMovie::AfterRead()
{
	UParticleModuleSubUV::AfterRead();

}

void UParticleModuleSubUVMovie::BeforeDelete()
{
	UParticleModuleSubUV::BeforeDelete();

}

void UParticleModuleTrailBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleTrailBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleTrailSource::AfterRead()
{
	UParticleModuleTrailBase::AfterRead();

}

void UParticleModuleTrailSource::BeforeDelete()
{
	UParticleModuleTrailBase::BeforeDelete();

}

void UParticleModuleTypeDataBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleTypeDataBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleTypeDataAnimTrail::AfterRead()
{
	UParticleModuleTypeDataBase::AfterRead();

}

void UParticleModuleTypeDataAnimTrail::BeforeDelete()
{
	UParticleModuleTypeDataBase::BeforeDelete();

}

void UParticleModuleTypeDataBeam2::AfterRead()
{
	UParticleModuleTypeDataBase::AfterRead();

}

void UParticleModuleTypeDataBeam2::BeforeDelete()
{
	UParticleModuleTypeDataBase::BeforeDelete();

}

void UParticleModuleTypeDataGpu::AfterRead()
{
	UParticleModuleTypeDataBase::AfterRead();

}

void UParticleModuleTypeDataGpu::BeforeDelete()
{
	UParticleModuleTypeDataBase::BeforeDelete();

}

void UParticleModuleTypeDataMesh::AfterRead()
{
	UParticleModuleTypeDataBase::AfterRead();

	READ_PTR_FULL(Mesh, UStaticMesh);
}

void UParticleModuleTypeDataMesh::BeforeDelete()
{
	UParticleModuleTypeDataBase::BeforeDelete();

	DELE_PTR_FULL(Mesh);
}

void UParticleModuleTypeDataRibbon::AfterRead()
{
	UParticleModuleTypeDataBase::AfterRead();

}

void UParticleModuleTypeDataRibbon::BeforeDelete()
{
	UParticleModuleTypeDataBase::BeforeDelete();

}

void UParticleModuleVectorFieldBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleVectorFieldBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleVectorFieldGlobal::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

}

void UParticleModuleVectorFieldGlobal::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

}

void UParticleModuleVectorFieldLocal::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

	READ_PTR_FULL(VectorField, UVectorField);
}

void UParticleModuleVectorFieldLocal::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

	DELE_PTR_FULL(VectorField);
}

void UParticleModuleVectorFieldRotation::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

}

void UParticleModuleVectorFieldRotation::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

}

void UParticleModuleVectorFieldRotationRate::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

}

void UParticleModuleVectorFieldRotationRate::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

}

void UParticleModuleVectorFieldScale::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

	READ_PTR_FULL(VectorFieldScale, UDistributionFloat);
}

void UParticleModuleVectorFieldScale::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

	DELE_PTR_FULL(VectorFieldScale);
}

void UParticleModuleVectorFieldScaleOverLife::AfterRead()
{
	UParticleModuleVectorFieldBase::AfterRead();

	READ_PTR_FULL(VectorFieldScaleOverLife, UDistributionFloat);
}

void UParticleModuleVectorFieldScaleOverLife::BeforeDelete()
{
	UParticleModuleVectorFieldBase::BeforeDelete();

	DELE_PTR_FULL(VectorFieldScaleOverLife);
}

void UParticleModuleVelocityBase::AfterRead()
{
	UParticleModule::AfterRead();

}

void UParticleModuleVelocityBase::BeforeDelete()
{
	UParticleModule::BeforeDelete();

}

void UParticleModuleVelocity::AfterRead()
{
	UParticleModuleVelocityBase::AfterRead();

}

void UParticleModuleVelocity::BeforeDelete()
{
	UParticleModuleVelocityBase::BeforeDelete();

}

void UParticleModuleVelocity_Seeded::AfterRead()
{
	UParticleModuleVelocity::AfterRead();

}

void UParticleModuleVelocity_Seeded::BeforeDelete()
{
	UParticleModuleVelocity::BeforeDelete();

}

void UParticleModuleVelocityCone::AfterRead()
{
	UParticleModuleVelocityBase::AfterRead();

}

void UParticleModuleVelocityCone::BeforeDelete()
{
	UParticleModuleVelocityBase::BeforeDelete();

}

void UParticleModuleVelocityInheritParent::AfterRead()
{
	UParticleModuleVelocityBase::AfterRead();

}

void UParticleModuleVelocityInheritParent::BeforeDelete()
{
	UParticleModuleVelocityBase::BeforeDelete();

}

void UParticleModuleVelocityOverLifetime::AfterRead()
{
	UParticleModuleVelocityBase::AfterRead();

}

void UParticleModuleVelocityOverLifetime::BeforeDelete()
{
	UParticleModuleVelocityBase::BeforeDelete();

}

void UParticleSpriteEmitter::AfterRead()
{
	UParticleEmitter::AfterRead();

}

void UParticleSpriteEmitter::BeforeDelete()
{
	UParticleEmitter::BeforeDelete();

}

// Function Engine.ParticleSystem.ContainsEmitterType
// ()
// Parameters:
// class UClass*                  TypeData                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystem::ContainsEmitterType(class UClass* TypeData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystem.ContainsEmitterType"));

	UParticleSystem_ContainsEmitterType_Params params;
	params.TypeData = TypeData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UParticleSystem::AfterRead()
{
	UFXSystemAsset::AfterRead();

	READ_PTR_FULL(PreviewComponent, UParticleSystemComponent);
	READ_PTR_FULL(CurveEdSetup, UInterpCurveEdSetup);
}

void UParticleSystem::BeforeDelete()
{
	UFXSystemAsset::BeforeDelete();

	DELE_PTR_FULL(PreviewComponent);
	DELE_PTR_FULL(CurveEdSetup);
}

// Function Engine.ParticleSystemComponent.SetTrailSourceData
// ()
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETrailWidthMode> InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTrailSourceData"));

	UParticleSystemComponent_SetTrailSourceData_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTemplate"));

	UParticleSystemComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetMaterialParameter"));

	UParticleSystemComponent_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetTangent"));

	UParticleSystemComponent_SetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NewTargetStrength              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetStrength"));

	UParticleSystemComponent_SetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewTargetPoint                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetPoint"));

	UParticleSystemComponent_SetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceTangent"));

	UParticleSystemComponent_SetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          NewSourceStrength              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceStrength"));

	UParticleSystemComponent_SetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewSourcePoint                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourcePoint"));

	UParticleSystemComponent_SetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NewEndPoint                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamEndPoint"));

	UParticleSystemComponent_SetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.SetAutoAttachParams
// ()
// Parameters:
// class USceneComponent*         Parent                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EAttachLocation> LocationType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<Engine_EAttachLocation> LocationType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetAutoAttachParams"));

	UParticleSystemComponent_SetAutoAttachParams_Params params;
	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationType = LocationType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.GetNumActiveParticles
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UParticleSystemComponent::GetNumActiveParticles()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNumActiveParticles"));

	UParticleSystemComponent_GetNumActiveParticles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetNamedMaterial
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNamedMaterial"));

	UParticleSystemComponent_GetNamedMaterial_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamTargetTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutTangentPoint                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamTargetTangent"));

	UParticleSystemComponent_GetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTangentPoint != nullptr)
		*OutTangentPoint = params.OutTangentPoint;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamTargetStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutTargetStrength              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamTargetStrength"));

	UParticleSystemComponent_GetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTargetStrength != nullptr)
		*OutTargetStrength = params.OutTargetStrength;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamTargetPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutTargetPoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamTargetPoint"));

	UParticleSystemComponent_GetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTargetPoint != nullptr)
		*OutTargetPoint = params.OutTargetPoint;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamSourceTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutTangentPoint                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamSourceTangent"));

	UParticleSystemComponent_GetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutTangentPoint != nullptr)
		*OutTangentPoint = params.OutTangentPoint;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamSourceStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          OutSourceStrength              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamSourceStrength"));

	UParticleSystemComponent_GetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSourceStrength != nullptr)
		*OutSourceStrength = params.OutSourceStrength;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamSourcePoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutSourcePoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamSourcePoint"));

	UParticleSystemComponent_GetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSourcePoint != nullptr)
		*OutSourcePoint = params.OutSourcePoint;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetBeamEndPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutEndPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UParticleSystemComponent::GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetBeamEndPoint"));

	UParticleSystemComponent_GetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutEndPoint != nullptr)
		*OutEndPoint = params.OutEndPoint;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GenerateParticleEvent
// ()
// Parameters:
// struct FName                   InEventName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InEmitterTime                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InLocation                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InDirection                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InVelocity                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GenerateParticleEvent"));

	UParticleSystemComponent_GenerateParticleEvent_Params params;
	params.InEventName = InEventName;
	params.InEmitterTime = InEmitterTime;
	params.InLocation = InLocation;
	params.InDirection = InDirection;
	params.InVelocity = InVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.EndTrails
// ()
void UParticleSystemComponent::EndTrails()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.EndTrails"));

	UParticleSystemComponent_EndTrails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance"));

	UParticleSystemComponent_CreateNamedDynamicMaterialInstance_Params params;
	params.InName = InName;
	params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.BeginTrails
// ()
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETrailWidthMode> InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UParticleSystemComponent::BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.BeginTrails"));

	UParticleSystemComponent_BeginTrails_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UParticleSystemComponent::AfterRead()
{
	UFXSystemComponent::AfterRead();

	READ_PTR_FULL(Template, UParticleSystem);
}

void UParticleSystemComponent::BeforeDelete()
{
	UFXSystemComponent::BeforeDelete();

	DELE_PTR_FULL(Template);
}

void UParticleSystemReplay::AfterRead()
{
	UObject::AfterRead();

}

void UParticleSystemReplay::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UPathFollowingAgentInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UPathFollowingAgentInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

// Function Engine.PawnNoiseEmitterComponent.MakeNoise
// ()
// Parameters:
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 NoiseLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPawnNoiseEmitterComponent::MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnNoiseEmitterComponent.MakeNoise"));

	UPawnNoiseEmitterComponent_MakeNoise_Params params;
	params.NoiseMaker = NoiseMaker;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPawnNoiseEmitterComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UPawnNoiseEmitterComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

// Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
// ()
// Parameters:
// float                          InStrengthMultiplyer           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer"));

	UPhysicalAnimationComponent_SetStrengthMultiplyer_Params params;
	params.InStrengthMultiplyer = InStrengthMultiplyer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  InSkeletalMeshComponent        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicalAnimationComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent"));

	UPhysicalAnimationComponent_SetSkeletalMeshComponent_Params params;
	params.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform
// ()
// Parameters:
// struct FName                   BodyName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UPhysicalAnimationComponent::GetBodyTargetTransform(const struct FName& BodyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform"));

	UPhysicalAnimationComponent_GetBodyTargetTransform_Params params;
	params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
// ()
// Parameters:
// struct FName                   BodyName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicalAnimationData  PhysicalAnimationData          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow"));

	UPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow_Params params;
	params.BodyName = BodyName;
	params.PhysicalAnimationData = PhysicalAnimationData;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
// ()
// Parameters:
// struct FName                   BodyName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicalAnimationData  PhysicalAnimationData          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings"));

	UPhysicalAnimationComponent_ApplyPhysicalAnimationSettings_Params params;
	params.BodyName = BodyName;
	params.PhysicalAnimationData = PhysicalAnimationData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
// ()
// Parameters:
// struct FName                   BodyName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ProfileName                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeSelf                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bClearNotFound                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow"));

	UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow_Params params;
	params.BodyName = BodyName;
	params.ProfileName = ProfileName;
	params.bIncludeSelf = bIncludeSelf;
	params.bClearNotFound = bClearNotFound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPhysicalAnimationComponent::AfterRead()
{
	UActorComponent::AfterRead();

	READ_PTR_FULL(SkeletalMeshComponent, USkeletalMeshComponent);
}

void UPhysicalAnimationComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

	DELE_PTR_FULL(SkeletalMeshComponent);
}

void UPhysicalMaterialMask::AfterRead()
{
	UObject::AfterRead();

}

void UPhysicalMaterialMask::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UPhysicsAsset::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ThumbnailInfo, UThumbnailInfo);
}

void UPhysicsAsset::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ThumbnailInfo);
}

void UBodySetup::AfterRead()
{
	UBodySetupCore::AfterRead();

	READ_PTR_FULL(PhysMaterial, UPhysicalMaterial);
}

void UBodySetup::BeforeDelete()
{
	UBodySetupCore::BeforeDelete();

	DELE_PTR_FULL(PhysMaterial);
}

void USkeletalBodySetup::AfterRead()
{
	UBodySetup::AfterRead();

}

void USkeletalBodySetup::BeforeDelete()
{
	UBodySetup::BeforeDelete();

}

void UPhysicsCollisionHandler::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(DefaultImpactSound, USoundBase);
}

void UPhysicsCollisionHandler::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(DefaultImpactSound);
}

void ARigidBodyBase::AfterRead()
{
	AActor::AfterRead();

}

void ARigidBodyBase::BeforeDelete()
{
	AActor::BeforeDelete();

}

void APhysicsConstraintActor::AfterRead()
{
	ARigidBodyBase::AfterRead();

	READ_PTR_FULL(ConstraintComp, UPhysicsConstraintComponent);
	READ_PTR_FULL(ConstraintActor1, AActor);
	READ_PTR_FULL(ConstraintActor2, AActor);
}

void APhysicsConstraintActor::BeforeDelete()
{
	ARigidBodyBase::BeforeDelete();

	DELE_PTR_FULL(ConstraintComp);
	DELE_PTR_FULL(ConstraintActor1);
	DELE_PTR_FULL(ConstraintActor2);
}

// Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
// ()
// Parameters:
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing"));

	UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing_Params params;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
// ()
// Parameters:
// bool                           bEnableSLERP                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetOrientationDriveSLERP(bool bEnableSLERP)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP"));

	UPhysicsConstraintComponent_SetOrientationDriveSLERP_Params params;
	params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearZLimit"));

	UPhysicsConstraintComponent_SetLinearZLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearYLimit"));

	UPhysicsConstraintComponent_SetLinearYLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<PhysicsCore_ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearXLimit"));

	UPhysicsConstraintComponent_SetLinearXLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget"));

	UPhysicsConstraintComponent_SetLinearVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
// ()
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive"));

	UPhysicsConstraintComponent_SetLinearVelocityDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
// ()
// Parameters:
// struct FVector                 InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget"));

	UPhysicsConstraintComponent_SetLinearPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
// ()
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive"));

	UPhysicsConstraintComponent_SetLinearPositionDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
// ()
// Parameters:
// float                          PositionStrength               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VelocityStrength               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams"));

	UPhysicsConstraintComponent_SetLinearDriveParams_Params params;
	params.PositionStrength = PositionStrength;
	params.VelocityStrength = VelocityStrength;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetLinearBreakable
// ()
// Parameters:
// bool                           bLinearBreakable               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          LinearBreakThreshold           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearBreakable"));

	UPhysicsConstraintComponent_SetLinearBreakable_Params params;
	params.bLinearBreakable = bLinearBreakable;
	params.LinearBreakThreshold = LinearBreakThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetDisableCollision
// ()
// Parameters:
// bool                           bDisableCollision              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetDisableCollision"));

	UPhysicsConstraintComponent_SetDisableCollision_Params params;
	params.bDisableCollision = bDisableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EConstraintFrame> Frame                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 RefPosition                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FVector& RefPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition"));

	UPhysicsConstraintComponent_SetConstraintReferencePosition_Params params;
	params.Frame = Frame;
	params.RefPosition = RefPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EConstraintFrame> Frame                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 PriAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SecAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation"));

	UPhysicsConstraintComponent_SetConstraintReferenceOrientation_Params params;
	params.Frame = Frame;
	params.PriAxis = PriAxis;
	params.SecAxis = SecAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EConstraintFrame> Frame                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              RefFrame                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<PhysicsCore_EConstraintFrame> Frame, const struct FTransform& RefFrame)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame"));

	UPhysicsConstraintComponent_SetConstraintReferenceFrame_Params params;
	params.Frame = Frame;
	params.RefFrame = RefFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
// ()
// Parameters:
// class UPrimitiveComponent*     Component1                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName1                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*     Component2                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   BoneName2                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents"));

	UPhysicsConstraintComponent_SetConstrainedComponents_Params params;
	params.Component1 = Component1;
	params.BoneName1 = BoneName1;
	params.Component2 = Component2;
	params.BoneName2 = BoneName2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget"));

	UPhysicsConstraintComponent_SetAngularVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
// ()
// Parameters:
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing"));

	UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing_Params params;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
// ()
// Parameters:
// bool                           bEnableSLERP                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(bool bEnableSLERP)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP"));

	UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP_Params params;
	params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive"));

	UPhysicsConstraintComponent_SetAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EAngularConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          TwistLimitAngle                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit"));

	UPhysicsConstraintComponent_SetAngularTwistLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.TwistLimitAngle = TwistLimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing2LimitAngle               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit"));

	UPhysicsConstraintComponent_SetAngularSwing2Limit_Params params;
	params.MotionType = MotionType;
	params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
// ()
// Parameters:
// TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Swing1LimitAngle               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<PhysicsCore_EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit"));

	UPhysicsConstraintComponent_SetAngularSwing1Limit_Params params;
	params.MotionType = MotionType;
	params.Swing1LimitAngle = Swing1LimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
// ()
// Parameters:
// struct FRotator                InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularOrientationTarget(const struct FRotator& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget"));

	UPhysicsConstraintComponent_SetAngularOrientationTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive"));

	UPhysicsConstraintComponent_SetAngularOrientationDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
// ()
// Parameters:
// float                          PositionStrength               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          VelocityStrength               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams"));

	UPhysicsConstraintComponent_SetAngularDriveParams_Params params;
	params.PositionStrength = PositionStrength;
	params.VelocityStrength = VelocityStrength;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
// ()
// Parameters:
// TEnumAsByte<Engine_EAngularDriveMode> DriveMode                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularDriveMode(TEnumAsByte<Engine_EAngularDriveMode> DriveMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularDriveMode"));

	UPhysicsConstraintComponent_SetAngularDriveMode_Params params;
	params.DriveMode = DriveMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.SetAngularBreakable
// ()
// Parameters:
// bool                           bAngularBreakable              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AngularBreakThreshold          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularBreakable"));

	UPhysicsConstraintComponent_SetAngularBreakable_Params params;
	params.bAngularBreakable = bAngularBreakable;
	params.AngularBreakThreshold = AngularBreakThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsConstraintComponent.IsBroken
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPhysicsConstraintComponent::IsBroken()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.IsBroken"));

	UPhysicsConstraintComponent_IsBroken_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentTwist
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPhysicsConstraintComponent::GetCurrentTwist()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentTwist"));

	UPhysicsConstraintComponent_GetCurrentTwist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPhysicsConstraintComponent::GetCurrentSwing2()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2"));

	UPhysicsConstraintComponent_GetCurrentSwing2_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPhysicsConstraintComponent::GetCurrentSwing1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1"));

	UPhysicsConstraintComponent_GetCurrentSwing1_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetConstraintForce
// ()
// Parameters:
// struct FVector                 OutLinearForce                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 OutAngularForce                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsConstraintComponent::GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetConstraintForce"));

	UPhysicsConstraintComponent_GetConstraintForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLinearForce != nullptr)
		*OutLinearForce = params.OutLinearForce;
	if (OutAngularForce != nullptr)
		*OutAngularForce = params.OutAngularForce;

}


// Function Engine.PhysicsConstraintComponent.BreakConstraint
// ()
void UPhysicsConstraintComponent::BreakConstraint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.BreakConstraint"));

	UPhysicsConstraintComponent_BreakConstraint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPhysicsConstraintComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(ConstraintActor1, AActor);
	READ_PTR_FULL(ConstraintActor2, AActor);
	READ_PTR_FULL(ConstraintSetup, UPhysicsConstraintTemplate);
}

void UPhysicsConstraintComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(ConstraintActor1);
	DELE_PTR_FULL(ConstraintActor2);
	DELE_PTR_FULL(ConstraintSetup);
}

void UPhysicsConstraintTemplate::AfterRead()
{
	UObject::AfterRead();

}

void UPhysicsConstraintTemplate::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.PhysicsHandleComponent.SetTargetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetTargetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetRotation"));

	UPhysicsHandleComponent_SetTargetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation"));

	UPhysicsHandleComponent_SetTargetLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetTargetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetTargetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocation"));

	UPhysicsHandleComponent_SetTargetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetLinearStiffness
// ()
// Parameters:
// float                          NewLinearStiffness             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearStiffness"));

	UPhysicsHandleComponent_SetLinearStiffness_Params params;
	params.NewLinearStiffness = NewLinearStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetLinearDamping
// ()
// Parameters:
// float                          NewLinearDamping               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearDamping"));

	UPhysicsHandleComponent_SetLinearDamping_Params params;
	params.NewLinearDamping = NewLinearDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
// ()
// Parameters:
// float                          NewInterpolationSpeed          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed"));

	UPhysicsHandleComponent_SetInterpolationSpeed_Params params;
	params.NewInterpolationSpeed = NewInterpolationSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetAngularStiffness
// ()
// Parameters:
// float                          NewAngularStiffness            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularStiffness"));

	UPhysicsHandleComponent_SetAngularStiffness_Params params;
	params.NewAngularStiffness = NewAngularStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.SetAngularDamping
// ()
// Parameters:
// float                          NewAngularDamping              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularDamping"));

	UPhysicsHandleComponent_SetAngularDamping_Params params;
	params.NewAngularDamping = NewAngularDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.ReleaseComponent
// ()
void UPhysicsHandleComponent::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.ReleaseComponent"));

	UPhysicsHandleComponent_ReleaseComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation"));

	UPhysicsHandleComponent_GrabComponentAtLocationWithRotation_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 GrabLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GrabComponentAtLocation"));

	UPhysicsHandleComponent_GrabComponentAtLocation_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.GrabComponent
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 GrabLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bConstrainRotation             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GrabComponent"));

	UPhysicsHandleComponent_GrabComponent_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
// ()
// Parameters:
// struct FVector                 TargetLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                TargetRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation"));

	UPhysicsHandleComponent_GetTargetLocationAndRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (TargetLocation != nullptr)
		*TargetLocation = params.TargetLocation;
	if (TargetRotation != nullptr)
		*TargetRotation = params.TargetRotation;

}


// Function Engine.PhysicsHandleComponent.GetGrabbedComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UPrimitiveComponent* UPhysicsHandleComponent::GetGrabbedComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GetGrabbedComponent"));

	UPhysicsHandleComponent_GetGrabbedComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UPhysicsHandleComponent::AfterRead()
{
	UActorComponent::AfterRead();

	READ_PTR_FULL(GrabbedComponent, UPrimitiveComponent);
}

void UPhysicsHandleComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

	DELE_PTR_FULL(GrabbedComponent);
}

void UPhysicsSettings::AfterRead()
{
	UPhysicsSettingsCore::AfterRead();

}

void UPhysicsSettings::BeforeDelete()
{
	UPhysicsSettingsCore::BeforeDelete();

}

// Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPhysicsSpringComponent::GetSpringRestingPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint"));

	UPhysicsSpringComponent_GetSpringRestingPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPhysicsSpringComponent::GetSpringDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringDirection"));

	UPhysicsSpringComponent_GetSpringDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint"));

	UPhysicsSpringComponent_GetSpringCurrentEndPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UPhysicsSpringComponent::GetNormalizedCompressionScalar()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar"));

	UPhysicsSpringComponent_GetNormalizedCompressionScalar_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UPhysicsSpringComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void UPhysicsSpringComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void APhysicsThruster::AfterRead()
{
	ARigidBodyBase::AfterRead();

	READ_PTR_FULL(ThrusterComponent, UPhysicsThrusterComponent);
}

void APhysicsThruster::BeforeDelete()
{
	ARigidBodyBase::BeforeDelete();

	DELE_PTR_FULL(ThrusterComponent);
}

void UPhysicsThrusterComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void UPhysicsThrusterComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

// Function Engine.PlanarReflection.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APlanarReflection::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlanarReflection.OnInterpToggle"));

	APlanarReflection_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void APlanarReflection::AfterRead()
{
	ASceneCapture::AfterRead();

	READ_PTR_FULL(PlanarReflectionComponent, UPlanarReflectionComponent);
}

void APlanarReflection::BeforeDelete()
{
	ASceneCapture::BeforeDelete();

	DELE_PTR_FULL(PlanarReflectionComponent);
}

// Function Engine.SceneCaptureComponent.ShowOnlyComponent
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::ShowOnlyComponent(class UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.ShowOnlyComponent"));

	USceneCaptureComponent_ShowOnlyComponent_Params params;
	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
// ()
// Parameters:
// class AActor*                  InActor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeFromChildActors        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.ShowOnlyActorComponents"));

	USceneCaptureComponent_ShowOnlyActorComponents_Params params;
	params.InActor = InActor;
	params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.SetCaptureSortPriority
// ()
// Parameters:
// int                            NewCaptureSortPriority         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::SetCaptureSortPriority(int NewCaptureSortPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.SetCaptureSortPriority"));

	USceneCaptureComponent_SetCaptureSortPriority_Params params;
	params.NewCaptureSortPriority = NewCaptureSortPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent"));

	USceneCaptureComponent_RemoveShowOnlyComponent_Params params;
	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
// ()
// Parameters:
// class AActor*                  InActor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeFromChildActors        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents"));

	USceneCaptureComponent_RemoveShowOnlyActorComponents_Params params;
	params.InActor = InActor;
	params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.HideComponent
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::HideComponent(class UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideComponent"));

	USceneCaptureComponent_HideComponent_Params params;
	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.HideActorComponents
// ()
// Parameters:
// class AActor*                  InActor                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bIncludeFromChildActors        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent::HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideActorComponents"));

	USceneCaptureComponent_HideActorComponents_Params params;
	params.InActor = InActor;
	params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.ClearShowOnlyComponents
// ()
void USceneCaptureComponent::ClearShowOnlyComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.ClearShowOnlyComponents"));

	USceneCaptureComponent_ClearShowOnlyComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent.ClearHiddenComponents
// ()
void USceneCaptureComponent::ClearHiddenComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.ClearHiddenComponents"));

	USceneCaptureComponent_ClearHiddenComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USceneCaptureComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void USceneCaptureComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void UPlanarReflectionComponent::AfterRead()
{
	USceneCaptureComponent::AfterRead();

	READ_PTR_FULL(PreviewBox, UBoxComponent);
}

void UPlanarReflectionComponent::BeforeDelete()
{
	USceneCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(PreviewBox);
}

void APlaneReflectionCapture::AfterRead()
{
	AReflectionCapture::AfterRead();

}

void APlaneReflectionCapture::BeforeDelete()
{
	AReflectionCapture::BeforeDelete();

}

void UPlaneReflectionCaptureComponent::AfterRead()
{
	UReflectionCaptureComponent::AfterRead();

	READ_PTR_FULL(PreviewInfluenceRadius, UDrawSphereComponent);
	READ_PTR_FULL(PreviewCaptureBox, UBoxComponent);
}

void UPlaneReflectionCaptureComponent::BeforeDelete()
{
	UReflectionCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(PreviewInfluenceRadius);
	DELE_PTR_FULL(PreviewCaptureBox);
}

// Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPlatformEventsComponent::SupportsConvertibleLaptops()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops"));

	UPlatformEventsComponent_SupportsConvertibleLaptops_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
// ()
void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature"));

	UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlatformEventsComponent.IsInTabletMode
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPlatformEventsComponent::IsInTabletMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInTabletMode"));

	UPlatformEventsComponent_IsInTabletMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlatformEventsComponent.IsInLaptopMode
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UPlatformEventsComponent::IsInLaptopMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInLaptopMode"));

	UPlatformEventsComponent_IsInLaptopMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UPlatformEventsComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UPlatformEventsComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders"));

	UPlatformInterfaceWebResponse_GetNumHeaders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// ()
// Parameters:
// struct FString                 HeaderName                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UPlatformInterfaceWebResponse::GetHeaderValue(const struct FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue"));

	UPlatformInterfaceWebResponse_GetHeaderValue_Params params;
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeader
// ()
// Parameters:
// int                            HeaderIndex                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Header                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Value                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeader"));

	UPlatformInterfaceWebResponse_GetHeader_Params params;
	params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;

}


void UPlatformInterfaceWebResponse::AfterRead()
{
	UObject::AfterRead();

}

void UPlatformInterfaceWebResponse::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.PlayerInput.SetMouseSensitivity
// ()
// Parameters:
// float                          Sensitivity                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPlayerInput::SetMouseSensitivity(float Sensitivity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetMouseSensitivity"));

	UPlayerInput_SetMouseSensitivity_Params params;
	params.Sensitivity = Sensitivity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerInput.SetBind
// ()
// Parameters:
// struct FName                   BindName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Command                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPlayerInput::SetBind(const struct FName& BindName, const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetBind"));

	UPlayerInput_SetBind_Params params;
	params.BindName = BindName;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerInput.InvertAxisKey
// ()
// Parameters:
// struct FKey                    AxisKey                        (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPlayerInput::InvertAxisKey(const struct FKey& AxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertAxisKey"));

	UPlayerInput_InvertAxisKey_Params params;
	params.AxisKey = AxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerInput.InvertAxis
// ()
// Parameters:
// struct FName                   AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPlayerInput::InvertAxis(const struct FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertAxis"));

	UPlayerInput_InvertAxis_Params params;
	params.AxisName = AxisName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PlayerInput.ClearSmoothing
// ()
void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.ClearSmoothing"));

	UPlayerInput_ClearSmoothing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPlayerInput::AfterRead()
{
	UObject::AfterRead();

}

void UPlayerInput::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ANavigationObjectBase::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(CapsuleComponent, UCapsuleComponent);
	READ_PTR_FULL(GoodSprite, UBillboardComponent);
	READ_PTR_FULL(BadSprite, UBillboardComponent);
}

void ANavigationObjectBase::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(CapsuleComponent);
	DELE_PTR_FULL(GoodSprite);
	DELE_PTR_FULL(BadSprite);
}

void APlayerStart::AfterRead()
{
	ANavigationObjectBase::AfterRead();

}

void APlayerStart::BeforeDelete()
{
	ANavigationObjectBase::BeforeDelete();

}

void APlayerStartPIE::AfterRead()
{
	APlayerStart::AfterRead();

}

void APlayerStartPIE::BeforeDelete()
{
	APlayerStart::BeforeDelete();

}

void UCommandlet::AfterRead()
{
	UObject::AfterRead();

}

void UCommandlet::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UPluginCommandlet::AfterRead()
{
	UCommandlet::AfterRead();

}

void UPluginCommandlet::BeforeDelete()
{
	UCommandlet::BeforeDelete();

}

// Function Engine.PointLight.SetRadius
// ()
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APointLight::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetRadius"));

	APointLight_SetRadius_Params params;
	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PointLight.SetLightFalloffExponent
// ()
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetLightFalloffExponent"));

	APointLight_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void APointLight::AfterRead()
{
	ALight::AfterRead();

	READ_PTR_FULL(PointLightComponent, UPointLightComponent);
}

void APointLight::BeforeDelete()
{
	ALight::BeforeDelete();

	DELE_PTR_FULL(PointLightComponent);
}

void UPolys::AfterRead()
{
	UObject::AfterRead();

}

void UPolys::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.PoseableMeshComponent.SetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneTransformByName"));

	UPoseableMeshComponent_SetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PoseableMeshComponent.SetBoneScaleByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InScale3D                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneScaleByName"));

	UPoseableMeshComponent_SetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.InScale3D = InScale3D;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PoseableMeshComponent.SetBoneRotationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneRotationByName"));

	UPoseableMeshComponent_SetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.InRotation = InRotation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PoseableMeshComponent.SetBoneLocationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneLocationByName"));

	UPoseableMeshComponent_SetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.InLocation = InLocation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PoseableMeshComponent.ResetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::ResetBoneTransformByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.ResetBoneTransformByName"));

	UPoseableMeshComponent_ResetBoneTransformByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.PoseableMeshComponent.GetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FTransform UPoseableMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneTransformByName"));

	UPoseableMeshComponent_GetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneScaleByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPoseableMeshComponent::GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneScaleByName"));

	UPoseableMeshComponent_GetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneRotationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FRotator UPoseableMeshComponent::GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneRotationByName"));

	UPoseableMeshComponent_GetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneLocationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_EBoneSpaces> BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UPoseableMeshComponent::GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneLocationByName"));

	UPoseableMeshComponent_GetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  InComponentToCopy              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPoseableMeshComponent::CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent"));

	UPoseableMeshComponent_CopyPoseFromSkeletalComponent_Params params;
	params.InComponentToCopy = InComponentToCopy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPoseableMeshComponent::AfterRead()
{
	USkinnedMeshComponent::AfterRead();

}

void UPoseableMeshComponent::BeforeDelete()
{
	USkinnedMeshComponent::BeforeDelete();

}

void UPoseAsset::AfterRead()
{
	UAnimationAsset::AfterRead();

}

void UPoseAsset::BeforeDelete()
{
	UAnimationAsset::BeforeDelete();

}

void UPoseWatch::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Node, UEdGraphNode);
}

void UPoseWatch::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Node);
}

// Function Engine.PostProcessComponent.AddOrUpdateBlendable
// ()
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UPostProcessComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessComponent.AddOrUpdateBlendable"));

	UPostProcessComponent_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UPostProcessComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void UPostProcessComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void APrecomputedVisibilityOverrideVolume::AfterRead()
{
	AVolume::AfterRead();

}

void APrecomputedVisibilityOverrideVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void APrecomputedVisibilityVolume::AfterRead()
{
	AVolume::AfterRead();

}

void APrecomputedVisibilityVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void UPreviewCollectionInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UPreviewCollectionInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UPreviewMeshCollection::AfterRead()
{
	UDataAsset::AfterRead();

	READ_PTR_FULL(Skeleton, USkeleton);
}

void UPreviewMeshCollection::BeforeDelete()
{
	UDataAsset::BeforeDelete();

	DELE_PTR_FULL(Skeleton);
}

void UPrimaryDataAsset::AfterRead()
{
	UDataAsset::AfterRead();

}

void UPrimaryDataAsset::BeforeDelete()
{
	UDataAsset::BeforeDelete();

}

void UPrimaryAssetLabel::AfterRead()
{
	UPrimaryDataAsset::AfterRead();

}

void UPrimaryAssetLabel::BeforeDelete()
{
	UPrimaryDataAsset::BeforeDelete();

}

void UProxyLODMeshSimplificationSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void UProxyLODMeshSimplificationSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

// Function Engine.RadialForceActor.ToggleForce
// ()
void ARadialForceActor::ToggleForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.ToggleForce"));

	ARadialForceActor_ToggleForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RadialForceActor.FireImpulse
// ()
void ARadialForceActor::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.FireImpulse"));

	ARadialForceActor_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RadialForceActor.EnableForce
// ()
void ARadialForceActor::EnableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.EnableForce"));

	ARadialForceActor_EnableForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RadialForceActor.DisableForce
// ()
void ARadialForceActor::DisableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.DisableForce"));

	ARadialForceActor_DisableForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ARadialForceActor::AfterRead()
{
	ARigidBodyBase::AfterRead();

	READ_PTR_FULL(ForceComponent, URadialForceComponent);
}

void ARadialForceActor::BeforeDelete()
{
	ARigidBodyBase::BeforeDelete();

	DELE_PTR_FULL(ForceComponent);
}

// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
// ()
// Parameters:
// TEnumAsByte<Engine_EObjectTypeQuery> ObjectType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect"));

	URadialForceComponent_RemoveObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RadialForceComponent.FireImpulse
// ()
void URadialForceComponent::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.FireImpulse"));

	URadialForceComponent_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RadialForceComponent.AddObjectTypeToAffect
// ()
// Parameters:
// TEnumAsByte<Engine_EObjectTypeQuery> ObjectType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.AddObjectTypeToAffect"));

	URadialForceComponent_AddObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void URadialForceComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void URadialForceComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void ARectLight::AfterRead()
{
	ALight::AfterRead();

	READ_PTR_FULL(RectLightComponent, URectLightComponent);
}

void ARectLight::BeforeDelete()
{
	ALight::BeforeDelete();

	DELE_PTR_FULL(RectLightComponent);
}

// Function Engine.RectLightComponent.SetSourceWidth
// ()
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URectLightComponent::SetSourceWidth(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RectLightComponent.SetSourceWidth"));

	URectLightComponent_SetSourceWidth_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RectLightComponent.SetSourceTexture
// ()
// Parameters:
// class UTexture*                bNewValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URectLightComponent::SetSourceTexture(class UTexture* bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RectLightComponent.SetSourceTexture"));

	URectLightComponent_SetSourceTexture_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RectLightComponent.SetSourceHeight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URectLightComponent::SetSourceHeight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RectLightComponent.SetSourceHeight"));

	URectLightComponent_SetSourceHeight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RectLightComponent.SetBarnDoorLength
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URectLightComponent::SetBarnDoorLength(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RectLightComponent.SetBarnDoorLength"));

	URectLightComponent_SetBarnDoorLength_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.RectLightComponent.SetBarnDoorAngle
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void URectLightComponent::SetBarnDoorAngle(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RectLightComponent.SetBarnDoorAngle"));

	URectLightComponent_SetBarnDoorAngle_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void URectLightComponent::AfterRead()
{
	ULocalLightComponent::AfterRead();

	READ_PTR_FULL(SourceTexture, UTexture);
}

void URectLightComponent::BeforeDelete()
{
	ULocalLightComponent::BeforeDelete();

	DELE_PTR_FULL(SourceTexture);
}

void URendererSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void URendererSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void URendererOverrideSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void URendererOverrideSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

void UReplayNetConnection::AfterRead()
{
	UNetConnection::AfterRead();

}

void UReplayNetConnection::BeforeDelete()
{
	UNetConnection::BeforeDelete();

}

void UGameInstanceSubsystem::AfterRead()
{
	USubsystem::AfterRead();

}

void UGameInstanceSubsystem::BeforeDelete()
{
	USubsystem::BeforeDelete();

}

void UReplaySubsystem::AfterRead()
{
	UGameInstanceSubsystem::AfterRead();

}

void UReplaySubsystem::BeforeDelete()
{
	UGameInstanceSubsystem::BeforeDelete();

}

void UReplicationDriver::AfterRead()
{
	UObject::AfterRead();

}

void UReplicationDriver::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UReplicationConnectionDriver::AfterRead()
{
	UObject::AfterRead();

}

void UReplicationConnectionDriver::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UReporterBase::AfterRead()
{
	UObject::AfterRead();

}

void UReporterBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UReporterGraph::AfterRead()
{
	UReporterBase::AfterRead();

}

void UReporterGraph::BeforeDelete()
{
	UReporterBase::BeforeDelete();

}

void UReverbEffect::AfterRead()
{
	UObject::AfterRead();

}

void UReverbEffect::BeforeDelete()
{
	UObject::BeforeDelete();

}

void URig::AfterRead()
{
	UObject::AfterRead();

}

void URig::BeforeDelete()
{
	UObject::BeforeDelete();

}

void URotatingMovementComponent::AfterRead()
{
	UMovementComponent::AfterRead();

}

void URotatingMovementComponent::BeforeDelete()
{
	UMovementComponent::BeforeDelete();

}

void URuntimeOptionsBase::AfterRead()
{
	UObject::AfterRead();

}

void URuntimeOptionsBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.RuntimeVirtualTexture.GetTileSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int URuntimeVirtualTexture::GetTileSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTexture.GetTileSize"));

	URuntimeVirtualTexture_GetTileSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.RuntimeVirtualTexture.GetTileCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int URuntimeVirtualTexture::GetTileCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTexture.GetTileCount"));

	URuntimeVirtualTexture_GetTileCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.RuntimeVirtualTexture.GetTileBorderSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int URuntimeVirtualTexture::GetTileBorderSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTexture.GetTileBorderSize"));

	URuntimeVirtualTexture_GetTileBorderSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.RuntimeVirtualTexture.GetSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int URuntimeVirtualTexture::GetSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTexture.GetSize"));

	URuntimeVirtualTexture_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.RuntimeVirtualTexture.GetPageTableSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int URuntimeVirtualTexture::GetPageTableSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTexture.GetPageTableSize"));

	URuntimeVirtualTexture_GetPageTableSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void URuntimeVirtualTexture::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(StreamingTexture, URuntimeVirtualTextureStreamingProxy);
}

void URuntimeVirtualTexture::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(StreamingTexture);
}

// Function Engine.RuntimeVirtualTextureComponent.Invalidate
// ()
// Parameters:
// struct FBoxSphereBounds        WorldBounds                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
void URuntimeVirtualTextureComponent::Invalidate(const struct FBoxSphereBounds& WorldBounds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RuntimeVirtualTextureComponent.Invalidate"));

	URuntimeVirtualTextureComponent_Invalidate_Params params;
	params.WorldBounds = WorldBounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void URuntimeVirtualTextureComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(VirtualTexture, URuntimeVirtualTexture);
	READ_PTR_FULL(StreamingTexture, UVirtualTextureBuilder);
}

void URuntimeVirtualTextureComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(VirtualTexture);
	DELE_PTR_FULL(StreamingTexture);
}

void ARuntimeVirtualTextureVolume::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(VirtualTextureComponent, URuntimeVirtualTextureComponent);
}

void ARuntimeVirtualTextureVolume::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(VirtualTextureComponent);
}

void URVOAvoidanceInterface::AfterRead()
{
	UInterface::AfterRead();

}

void URVOAvoidanceInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void UScene::AfterRead()
{
	UObject::AfterRead();

}

void UScene::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SceneCaptureComponent2D.CaptureScene
// ()
void USceneCaptureComponent2D::CaptureScene()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.CaptureScene"));

	USceneCaptureComponent2D_CaptureScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
// ()
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USceneCaptureComponent2D::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable"));

	USceneCaptureComponent2D_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USceneCaptureComponent2D::AfterRead()
{
	USceneCaptureComponent::AfterRead();

	READ_PTR_FULL(TextureTarget, UTextureRenderTarget2D);
}

void USceneCaptureComponent2D::BeforeDelete()
{
	USceneCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(TextureTarget);
}

// Function Engine.SceneCaptureComponentCube.CaptureScene
// ()
void USceneCaptureComponentCube::CaptureScene()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponentCube.CaptureScene"));

	USceneCaptureComponentCube_CaptureScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USceneCaptureComponentCube::AfterRead()
{
	USceneCaptureComponent::AfterRead();

	READ_PTR_FULL(TextureTarget, UTextureRenderTargetCube);
	READ_PTR_FULL(TextureTargetLeft, UTextureRenderTargetCube);
	READ_PTR_FULL(TextureTargetRight, UTextureRenderTargetCube);
	READ_PTR_FULL(TextureTargetODS, UTextureRenderTarget2D);
}

void USceneCaptureComponentCube::BeforeDelete()
{
	USceneCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(TextureTarget);
	DELE_PTR_FULL(TextureTargetLeft);
	DELE_PTR_FULL(TextureTargetRight);
	DELE_PTR_FULL(TextureTargetODS);
}

// Function Engine.SceneCaptureCube.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void ASceneCaptureCube::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureCube.OnInterpToggle"));

	ASceneCaptureCube_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ASceneCaptureCube::AfterRead()
{
	ASceneCapture::AfterRead();

	READ_PTR_FULL(CaptureComponentCube, USceneCaptureComponentCube);
}

void ASceneCaptureCube::BeforeDelete()
{
	ASceneCapture::BeforeDelete();

	DELE_PTR_FULL(CaptureComponentCube);
}

void USCS_Node::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ComponentClass, UClass);
	READ_PTR_FULL(ComponentTemplate, UActorComponent);
}

void USCS_Node::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ComponentClass);
	DELE_PTR_FULL(ComponentTemplate);
}

void USelection::AfterRead()
{
	UObject::AfterRead();

}

void USelection::BeforeDelete()
{
	UObject::BeforeDelete();

}

void AServerStatReplicator::AfterRead()
{
	AInfo::AfterRead();

}

void AServerStatReplicator::BeforeDelete()
{
	AInfo::BeforeDelete();

}

void UShadowMapTexture2D::AfterRead()
{
	UTexture2D::AfterRead();

}

void UShadowMapTexture2D::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void USimpleConstructionScript::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(DefaultSceneRootNode, USCS_Node);
}

void USimpleConstructionScript::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(DefaultSceneRootNode);
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
// ()
void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset"));

	ASkeletalMeshActor_OnRep_ReplicatedPhysAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
// ()
void ASkeletalMeshActor::OnRep_ReplicatedMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh"));

	ASkeletalMeshActor_OnRep_ReplicatedMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
// ()
void ASkeletalMeshActor::OnRep_ReplicatedMaterial1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1"));

	ASkeletalMeshActor_OnRep_ReplicatedMaterial1_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
// ()
void ASkeletalMeshActor::OnRep_ReplicatedMaterial0()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0"));

	ASkeletalMeshActor_OnRep_ReplicatedMaterial0_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void ASkeletalMeshActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(SkeletalMeshComponent, USkeletalMeshComponent);
	READ_PTR_FULL(ReplicatedMesh, USkeletalMesh);
	READ_PTR_FULL(ReplicatedPhysAsset, UPhysicsAsset);
	READ_PTR_FULL(ReplicatedMaterial0, UMaterialInterface);
	READ_PTR_FULL(ReplicatedMaterial1, UMaterialInterface);
}

void ASkeletalMeshActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(SkeletalMeshComponent);
	DELE_PTR_FULL(ReplicatedMesh);
	DELE_PTR_FULL(ReplicatedPhysAsset);
	DELE_PTR_FULL(ReplicatedMaterial0);
	DELE_PTR_FULL(ReplicatedMaterial1);
}

void USkeletalMeshEditorData::AfterRead()
{
	UObject::AfterRead();

}

void USkeletalMeshEditorData::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USkeletalMeshLODSettings::AfterRead()
{
	UDataAsset::AfterRead();

}

void USkeletalMeshLODSettings::BeforeDelete()
{
	UDataAsset::BeforeDelete();

}

void USkeletalMeshSimplificationSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

}

void USkeletalMeshSimplificationSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

}

// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 WorldNormal                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkeletalMeshSocket::InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation"));

	USkeletalMeshSocket_InitializeSocketFromLocation_Params params;
	params.SkelComp = SkelComp;
	params.WorldLocation = WorldLocation;
	params.WorldNormal = WorldNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkeletalMeshSocket.GetSocketLocation
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USkeletalMeshSocket::GetSocketLocation(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.GetSocketLocation"));

	USkeletalMeshSocket_GetSocketLocation_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USkeletalMeshSocket::AfterRead()
{
	UObject::AfterRead();

}

void USkeletalMeshSocket::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetSkyLuminanceFactor(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor"));

	USkyAtmosphereComponent_SetSkyLuminanceFactor_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetRayleighScatteringScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale"));

	USkyAtmosphereComponent_SetRayleighScatteringScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetRayleighScattering
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetRayleighScattering(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetRayleighScattering"));

	USkyAtmosphereComponent_SetRayleighScattering_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetRayleighExponentialDistribution(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution"));

	USkyAtmosphereComponent_SetRayleighExponentialDistribution_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetOtherAbsorptionScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale"));

	USkyAtmosphereComponent_SetOtherAbsorptionScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetOtherAbsorption
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetOtherAbsorption(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetOtherAbsorption"));

	USkyAtmosphereComponent_SetOtherAbsorption_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieScatteringScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieScatteringScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieScatteringScale"));

	USkyAtmosphereComponent_SetMieScatteringScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieScattering
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieScattering(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieScattering"));

	USkyAtmosphereComponent_SetMieScattering_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieExponentialDistribution(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution"));

	USkyAtmosphereComponent_SetMieExponentialDistribution_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieAnisotropy
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieAnisotropy(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieAnisotropy"));

	USkyAtmosphereComponent_SetMieAnisotropy_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieAbsorptionScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale"));

	USkyAtmosphereComponent_SetMieAbsorptionScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetMieAbsorption
// ()
// Parameters:
// struct FLinearColor            NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetMieAbsorption(const struct FLinearColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetMieAbsorption"));

	USkyAtmosphereComponent_SetMieAbsorption_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetHeightFogContribution
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetHeightFogContribution(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetHeightFogContribution"));

	USkyAtmosphereComponent_SetHeightFogContribution_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::SetAerialPespectiveViewDistanceScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale"));

	USkyAtmosphereComponent_SetAerialPespectiveViewDistanceScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
// ()
// Parameters:
// int                            AtmosphereLightIndex           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 LightDirection                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyAtmosphereComponent::OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct FVector& LightDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection"));

	USkyAtmosphereComponent_OverrideAtmosphereLightDirection_Params params;
	params.AtmosphereLightIndex = AtmosphereLightIndex;
	params.LightDirection = LightDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USkyAtmosphereComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void USkyAtmosphereComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void ASkyAtmosphere::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(SkyAtmosphereComponent, USkyAtmosphereComponent);
}

void ASkyAtmosphere::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(SkyAtmosphereComponent);
}

// Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity"));

	USkyLightComponent_SetVolumetricScatteringIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetOcclusionTint
// ()
// Parameters:
// struct FColor                  InTint                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetOcclusionTint(const struct FColor& InTint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetOcclusionTint"));

	USkyLightComponent_SetOcclusionTint_Params params;
	params.InTint = InTint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetOcclusionExponent
// ()
// Parameters:
// float                          InOcclusionExponent            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetOcclusionExponent(float InOcclusionExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetOcclusionExponent"));

	USkyLightComponent_SetOcclusionExponent_Params params;
	params.InOcclusionExponent = InOcclusionExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetOcclusionContrast
// ()
// Parameters:
// float                          InOcclusionContrast            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetOcclusionContrast(float InOcclusionContrast)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetOcclusionContrast"));

	USkyLightComponent_SetOcclusionContrast_Params params;
	params.InOcclusionContrast = InOcclusionContrast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetMinOcclusion
// ()
// Parameters:
// float                          InMinOcclusion                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetMinOcclusion(float InMinOcclusion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetMinOcclusion"));

	USkyLightComponent_SetMinOcclusion_Params params;
	params.InMinOcclusion = InMinOcclusion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetLowerHemisphereColor
// ()
// Parameters:
// struct FLinearColor            InLowerHemisphereColor         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetLowerHemisphereColor"));

	USkyLightComponent_SetLowerHemisphereColor_Params params;
	params.InLowerHemisphereColor = InLowerHemisphereColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetLightColor"));

	USkyLightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIntensity"));

	USkyLightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetIndirectLightingIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIndirectLightingIntensity"));

	USkyLightComponent_SetIndirectLightingIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetCubemapBlend
// ()
// Parameters:
// class UTextureCube*            SourceCubemap                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureCube*            DestinationCubemap             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InBlendFraction                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemapBlend"));

	USkyLightComponent_SetCubemapBlend_Params params;
	params.SourceCubemap = SourceCubemap;
	params.DestinationCubemap = DestinationCubemap;
	params.InBlendFraction = InBlendFraction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.SetCubemap
// ()
// Parameters:
// class UTextureCube*            NewCubemap                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USkyLightComponent::SetCubemap(class UTextureCube* NewCubemap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemap"));

	USkyLightComponent_SetCubemap_Params params;
	params.NewCubemap = NewCubemap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SkyLightComponent.RecaptureSky
// ()
void USkyLightComponent::RecaptureSky()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.RecaptureSky"));

	USkyLightComponent_RecaptureSky_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USkyLightComponent::AfterRead()
{
	ULightComponentBase::AfterRead();

	READ_PTR_FULL(Cubemap, UTextureCube);
	READ_PTR_FULL(BlendDestinationCubemap, UTextureCube);
}

void USkyLightComponent::BeforeDelete()
{
	ULightComponentBase::BeforeDelete();

	DELE_PTR_FULL(Cubemap);
	DELE_PTR_FULL(BlendDestinationCubemap);
}

void USlateBrushAsset::AfterRead()
{
	UObject::AfterRead();

}

void USlateBrushAsset::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USlateTextureAtlasInterface::AfterRead()
{
	UInterface::AfterRead();

}

void USlateTextureAtlasInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

void USmokeTestCommandlet::AfterRead()
{
	UCommandlet::AfterRead();

}

void USmokeTestCommandlet::BeforeDelete()
{
	UCommandlet::BeforeDelete();

}

void USoundAttenuation::AfterRead()
{
	UObject::AfterRead();

}

void USoundAttenuation::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundClass::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(ParentClass, USoundClass);
}

void USoundClass::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(ParentClass);
}

void USoundConcurrency::AfterRead()
{
	UObject::AfterRead();

}

void USoundConcurrency::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundCue::AfterRead()
{
	USoundBase::AfterRead();

	READ_PTR_FULL(FirstNode, USoundNode);
}

void USoundCue::BeforeDelete()
{
	USoundBase::BeforeDelete();

	DELE_PTR_FULL(FirstNode);
}

void USoundEffectSourcePresetChain::AfterRead()
{
	UObject::AfterRead();

}

void USoundEffectSourcePresetChain::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundGroups::AfterRead()
{
	UObject::AfterRead();

}

void USoundGroups::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundMix::AfterRead()
{
	UObject::AfterRead();

}

void USoundMix::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundNode::AfterRead()
{
	UObject::AfterRead();

}

void USoundNode::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundNodeAssetReferencer::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeAssetReferencer::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeAttenuation::AfterRead()
{
	USoundNode::AfterRead();

	READ_PTR_FULL(AttenuationSettings, USoundAttenuation);
}

void USoundNodeAttenuation::BeforeDelete()
{
	USoundNode::BeforeDelete();

	DELE_PTR_FULL(AttenuationSettings);
}

void USoundNodeBranch::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeBranch::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeConcatenator::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeConcatenator::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeDelay::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeDelay::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeDialoguePlayer::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeDialoguePlayer::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeDistanceCrossFade::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeDistanceCrossFade::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeDoppler::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeDoppler::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeEnveloper::AfterRead()
{
	USoundNode::AfterRead();

	READ_PTR_FULL(VolumeInterpCurve, UDistributionFloatConstantCurve);
	READ_PTR_FULL(PitchInterpCurve, UDistributionFloatConstantCurve);
}

void USoundNodeEnveloper::BeforeDelete()
{
	USoundNode::BeforeDelete();

	DELE_PTR_FULL(VolumeInterpCurve);
	DELE_PTR_FULL(PitchInterpCurve);
}

void USoundNodeGroupControl::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeGroupControl::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeLooping::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeLooping::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeMature::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeMature::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeMixer::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeMixer::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeModulator::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeModulator::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeModulatorContinuous::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeModulatorContinuous::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeOscillator::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeOscillator::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeParamCrossFade::AfterRead()
{
	USoundNodeDistanceCrossFade::AfterRead();

}

void USoundNodeParamCrossFade::BeforeDelete()
{
	USoundNodeDistanceCrossFade::BeforeDelete();

}

void USoundNodeQualityLevel::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeQualityLevel::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeRandom::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeRandom::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeSoundClass::AfterRead()
{
	USoundNode::AfterRead();

	READ_PTR_FULL(SoundClassOverride, USoundClass);
}

void USoundNodeSoundClass::BeforeDelete()
{
	USoundNode::BeforeDelete();

	DELE_PTR_FULL(SoundClassOverride);
}

void USoundNodeSwitch::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeSwitch::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeWaveParam::AfterRead()
{
	USoundNode::AfterRead();

}

void USoundNodeWaveParam::BeforeDelete()
{
	USoundNode::BeforeDelete();

}

void USoundNodeWavePlayer::AfterRead()
{
	USoundNodeAssetReferencer::AfterRead();

	READ_PTR_FULL(SoundWave, USoundWave);
}

void USoundNodeWavePlayer::BeforeDelete()
{
	USoundNodeAssetReferencer::BeforeDelete();

	DELE_PTR_FULL(SoundWave);
}

void USoundSourceBus::AfterRead()
{
	USoundWave::AfterRead();

	READ_PTR_FULL(AudioBus, UAudioBus);
}

void USoundSourceBus::BeforeDelete()
{
	USoundWave::BeforeDelete();

	DELE_PTR_FULL(AudioBus);
}

void USoundSubmixBase::AfterRead()
{
	UObject::AfterRead();

}

void USoundSubmixBase::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USoundSubmixWithParentBase::AfterRead()
{
	USoundSubmixBase::AfterRead();

	READ_PTR_FULL(ParentSubmix, USoundSubmixBase);
}

void USoundSubmixWithParentBase::BeforeDelete()
{
	USoundSubmixBase::BeforeDelete();

	DELE_PTR_FULL(ParentSubmix);
}

// Function Engine.SoundSubmix.StopSpectralAnalysis
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StopSpectralAnalysis(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StopSpectralAnalysis"));

	USoundSubmix_StopSpectralAnalysis_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.StopRecordingOutput
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioRecordingExportType ExportType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Name                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Path                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*              ExistingSoundWaveToOverwrite   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StopRecordingOutput(class UObject* WorldContextObject, Engine_EAudioRecordingExportType ExportType, const struct FString& Name, const struct FString& Path, class USoundWave* ExistingSoundWaveToOverwrite)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StopRecordingOutput"));

	USoundSubmix_StopRecordingOutput_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ExportType = ExportType;
	params.Name = Name;
	params.Path = Path;
	params.ExistingSoundWaveToOverwrite = ExistingSoundWaveToOverwrite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.StopEnvelopeFollowing
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StopEnvelopeFollowing(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StopEnvelopeFollowing"));

	USoundSubmix_StopEnvelopeFollowing_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.StartSpectralAnalysis
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EFFTSize                FFTSize                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EFFTPeakInterpolationMethod InterpolationMethod            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EFFTWindowType          WindowType                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          HopSize                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// Engine_EAudioSpectrumType      SpectrumType                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StartSpectralAnalysis(class UObject* WorldContextObject, Engine_EFFTSize FFTSize, Engine_EFFTPeakInterpolationMethod InterpolationMethod, Engine_EFFTWindowType WindowType, float HopSize, Engine_EAudioSpectrumType SpectrumType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StartSpectralAnalysis"));

	USoundSubmix_StartSpectralAnalysis_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FFTSize = FFTSize;
	params.InterpolationMethod = InterpolationMethod;
	params.WindowType = WindowType;
	params.HopSize = HopSize;
	params.SpectrumType = SpectrumType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.StartRecordingOutput
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          ExpectedDuration               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StartRecordingOutput"));

	USoundSubmix_StartRecordingOutput_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ExpectedDuration = ExpectedDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.StartEnvelopeFollowing
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::StartEnvelopeFollowing(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.StartEnvelopeFollowing"));

	USoundSubmix_StartEnvelopeFollowing_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.SetSubmixOutputVolume
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          InOutputVolume                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.SetSubmixOutputVolume"));

	USoundSubmix_SetSubmixOutputVolume_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InOutputVolume = InOutputVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FScriptDelegate         OnSubmixSpectralAnalysisBP     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void USoundSubmix::RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate"));

	USoundSubmix_RemoveSpectralAnalysisDelegate_Params params;
	params.WorldContextObject = WorldContextObject;
	params.OnSubmixSpectralAnalysisBP = OnSubmixSpectralAnalysisBP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.AddSpectralAnalysisDelegate
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FScriptDelegate         OnSubmixSpectralAnalysisBP     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                          UpdateRate                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          DecibelNoiseFloor              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDoNormalize                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bDoAutoRange                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AutoRangeAttackTime            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          AutoRangeReleaseTime           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USoundSubmix::AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.AddSpectralAnalysisDelegate"));

	USoundSubmix_AddSpectralAnalysisDelegate_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InBandSettings = InBandSettings;
	params.OnSubmixSpectralAnalysisBP = OnSubmixSpectralAnalysisBP;
	params.UpdateRate = UpdateRate;
	params.DecibelNoiseFloor = DecibelNoiseFloor;
	params.bDoNormalize = bDoNormalize;
	params.bDoAutoRange = bDoAutoRange;
	params.AutoRangeAttackTime = AutoRangeAttackTime;
	params.AutoRangeReleaseTime = AutoRangeReleaseTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate
// ()
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FScriptDelegate         OnSubmixEnvelopeBP             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
void USoundSubmix::AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate"));

	USoundSubmix_AddEnvelopeFollowerDelegate_Params params;
	params.WorldContextObject = WorldContextObject;
	params.OnSubmixEnvelopeBP = OnSubmixEnvelopeBP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USoundSubmix::AfterRead()
{
	USoundSubmixWithParentBase::AfterRead();

	READ_PTR_FULL(AmbisonicsPluginSettings, USoundfieldEncodingSettingsBase);
}

void USoundSubmix::BeforeDelete()
{
	USoundSubmixWithParentBase::BeforeDelete();

	DELE_PTR_FULL(AmbisonicsPluginSettings);
}

void USoundfieldSubmix::AfterRead()
{
	USoundSubmixWithParentBase::AfterRead();

	READ_PTR_FULL(EncodingSettings, USoundfieldEncodingSettingsBase);
	READ_PTR_FULL(EncodingSettingsClass, UClass);
}

void USoundfieldSubmix::BeforeDelete()
{
	USoundSubmixWithParentBase::BeforeDelete();

	DELE_PTR_FULL(EncodingSettings);
	DELE_PTR_FULL(EncodingSettingsClass);
}

void UEndpointSubmix::AfterRead()
{
	USoundSubmixBase::AfterRead();

	READ_PTR_FULL(EndpointSettingsClass, UClass);
	READ_PTR_FULL(EndpointSettings, UAudioEndpointSettingsBase);
}

void UEndpointSubmix::BeforeDelete()
{
	USoundSubmixBase::BeforeDelete();

	DELE_PTR_FULL(EndpointSettingsClass);
	DELE_PTR_FULL(EndpointSettings);
}

void USoundfieldEndpointSubmix::AfterRead()
{
	USoundSubmixBase::AfterRead();

	READ_PTR_FULL(EndpointSettingsClass, UClass);
	READ_PTR_FULL(EndpointSettings, USoundfieldEndpointSettingsBase);
	READ_PTR_FULL(EncodingSettingsClass, UClass);
	READ_PTR_FULL(EncodingSettings, USoundfieldEncodingSettingsBase);
}

void USoundfieldEndpointSubmix::BeforeDelete()
{
	USoundSubmixBase::BeforeDelete();

	DELE_PTR_FULL(EndpointSettingsClass);
	DELE_PTR_FULL(EndpointSettings);
	DELE_PTR_FULL(EncodingSettingsClass);
	DELE_PTR_FULL(EncodingSettings);
}

void UFloatingPawnMovement::AfterRead()
{
	UPawnMovementComponent::AfterRead();

}

void UFloatingPawnMovement::BeforeDelete()
{
	UPawnMovementComponent::BeforeDelete();

}

void USpectatorPawnMovement::AfterRead()
{
	UFloatingPawnMovement::AfterRead();

}

void USpectatorPawnMovement::BeforeDelete()
{
	UFloatingPawnMovement::BeforeDelete();

}

void ASphereReflectionCapture::AfterRead()
{
	AReflectionCapture::AfterRead();

	READ_PTR_FULL(DrawCaptureRadius, UDrawSphereComponent);
}

void ASphereReflectionCapture::BeforeDelete()
{
	AReflectionCapture::BeforeDelete();

	DELE_PTR_FULL(DrawCaptureRadius);
}

void USphereReflectionCaptureComponent::AfterRead()
{
	UReflectionCaptureComponent::AfterRead();

	READ_PTR_FULL(PreviewInfluenceRadius, UDrawSphereComponent);
}

void USphereReflectionCaptureComponent::BeforeDelete()
{
	UReflectionCaptureComponent::BeforeDelete();

	DELE_PTR_FULL(PreviewInfluenceRadius);
}

void USplineMetadata::AfterRead()
{
	UObject::AfterRead();

}

void USplineMetadata::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ASplineMeshActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(SplineMeshComponent, USplineMeshComponent);
}

void ASplineMeshActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(SplineMeshComponent);
}

// Function Engine.SplineMeshComponent.UpdateMesh
// ()
void USplineMeshComponent::UpdateMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.UpdateMesh"));

	USplineMeshComponent_UpdateMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartTangent
// ()
// Parameters:
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartTangent"));

	USplineMeshComponent_SetStartTangent_Params params;
	params.StartTangent = StartTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartScale
// ()
// Parameters:
// struct FVector2D               StartScale                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartScale"));

	USplineMeshComponent_SetStartScale_Params params;
	params.StartScale = StartScale;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartRoll
// ()
// Parameters:
// float                          StartRoll                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartRoll"));

	USplineMeshComponent_SetStartRoll_Params params;
	params.StartRoll = StartRoll;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartPosition
// ()
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartPosition"));

	USplineMeshComponent_SetStartPosition_Params params;
	params.StartPos = StartPos;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartOffset
// ()
// Parameters:
// struct FVector2D               StartOffset                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartOffset"));

	USplineMeshComponent_SetStartOffset_Params params;
	params.StartOffset = StartOffset;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetStartAndEnd
// ()
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartAndEnd"));

	USplineMeshComponent_SetStartAndEnd_Params params;
	params.StartPos = StartPos;
	params.StartTangent = StartTangent;
	params.EndPos = EndPos;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetSplineUpDir
// ()
// Parameters:
// struct FVector                 InSplineUpDir                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetSplineUpDir"));

	USplineMeshComponent_SetSplineUpDir_Params params;
	params.InSplineUpDir = InSplineUpDir;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetForwardAxis
// ()
// Parameters:
// TEnumAsByte<Engine_ESplineMeshAxis> InForwardAxis                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetForwardAxis(TEnumAsByte<Engine_ESplineMeshAxis> InForwardAxis, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetForwardAxis"));

	USplineMeshComponent_SetForwardAxis_Params params;
	params.InForwardAxis = InForwardAxis;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetEndTangent
// ()
// Parameters:
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndTangent"));

	USplineMeshComponent_SetEndTangent_Params params;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetEndScale
// ()
// Parameters:
// struct FVector2D               EndScale                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndScale"));

	USplineMeshComponent_SetEndScale_Params params;
	params.EndScale = EndScale;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetEndRoll
// ()
// Parameters:
// float                          EndRoll                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndRoll"));

	USplineMeshComponent_SetEndRoll_Params params;
	params.EndRoll = EndRoll;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetEndPosition
// ()
// Parameters:
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndPosition"));

	USplineMeshComponent_SetEndPosition_Params params;
	params.EndPos = EndPos;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetEndOffset
// ()
// Parameters:
// struct FVector2D               EndOffset                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndOffset"));

	USplineMeshComponent_SetEndOffset_Params params;
	params.EndOffset = EndOffset;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetBoundaryMin
// ()
// Parameters:
// float                          InBoundaryMin                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMin"));

	USplineMeshComponent_SetBoundaryMin_Params params;
	params.InBoundaryMin = InBoundaryMin;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.SetBoundaryMax
// ()
// Parameters:
// float                          InBoundaryMax                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMax"));

	USplineMeshComponent_SetBoundaryMax_Params params;
	params.InBoundaryMax = InBoundaryMax;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SplineMeshComponent.GetStartTangent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineMeshComponent::GetStartTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartTangent"));

	USplineMeshComponent_GetStartTangent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartScale
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D USplineMeshComponent::GetStartScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartScale"));

	USplineMeshComponent_GetStartScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartRoll
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineMeshComponent::GetStartRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartRoll"));

	USplineMeshComponent_GetStartRoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineMeshComponent::GetStartPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartPosition"));

	USplineMeshComponent_GetStartPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartOffset
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D USplineMeshComponent::GetStartOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartOffset"));

	USplineMeshComponent_GetStartOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetSplineUpDir
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineMeshComponent::GetSplineUpDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetSplineUpDir"));

	USplineMeshComponent_GetSplineUpDir_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetForwardAxis
// ()
// Parameters:
// TEnumAsByte<Engine_ESplineMeshAxis> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
TEnumAsByte<Engine_ESplineMeshAxis> USplineMeshComponent::GetForwardAxis()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetForwardAxis"));

	USplineMeshComponent_GetForwardAxis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndTangent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineMeshComponent::GetEndTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndTangent"));

	USplineMeshComponent_GetEndTangent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndScale
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D USplineMeshComponent::GetEndScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndScale"));

	USplineMeshComponent_GetEndScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndRoll
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineMeshComponent::GetEndRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndRoll"));

	USplineMeshComponent_GetEndRoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector USplineMeshComponent::GetEndPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndPosition"));

	USplineMeshComponent_GetEndPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndOffset
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D USplineMeshComponent::GetEndOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndOffset"));

	USplineMeshComponent_GetEndOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMin
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineMeshComponent::GetBoundaryMin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMin"));

	USplineMeshComponent_GetBoundaryMin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMax
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float USplineMeshComponent::GetBoundaryMax()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMax"));

	USplineMeshComponent_GetBoundaryMax_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USplineMeshComponent::AfterRead()
{
	UStaticMeshComponent::AfterRead();

	READ_PTR_FULL(BodySetup, UBodySetup);
}

void USplineMeshComponent::BeforeDelete()
{
	UStaticMeshComponent::BeforeDelete();

	DELE_PTR_FULL(BodySetup);
}

// Function Engine.SpotLightComponent.SetOuterConeAngle
// ()
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetOuterConeAngle"));

	USpotLightComponent_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.SpotLightComponent.SetInnerConeAngle
// ()
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetInnerConeAngle"));

	USpotLightComponent_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void USpotLightComponent::AfterRead()
{
	UPointLightComponent::AfterRead();

}

void USpotLightComponent::BeforeDelete()
{
	UPointLightComponent::BeforeDelete();

}

// Function Engine.StaticMesh.RemoveSocket
// ()
// Parameters:
// class UStaticMeshSocket*       Socket                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMesh::RemoveSocket(class UStaticMeshSocket* Socket)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.RemoveSocket"));

	UStaticMesh_RemoveSocket_Params params;
	params.Socket = Socket;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMesh.GetNumSections
// ()
// Parameters:
// int                            InLOD                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UStaticMesh::GetNumSections(int InLOD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumSections"));

	UStaticMesh_GetNumSections_Params params;
	params.InLOD = InLOD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetNumLODs
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UStaticMesh::GetNumLODs()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumLODs"));

	UStaticMesh_GetNumLODs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetMinimumLODForPlatforms
// ()
// Parameters:
// TMap<struct FName, int>        PlatformMinimumLODs            (Parm, OutParm, NativeAccessSpecifierPublic)
void UStaticMesh::GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetMinimumLODForPlatforms"));

	UStaticMesh_GetMinimumLODForPlatforms_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PlatformMinimumLODs != nullptr)
		*PlatformMinimumLODs = params.PlatformMinimumLODs;

}


// Function Engine.StaticMesh.GetMinimumLODForPlatform
// ()
// Parameters:
// struct FName                   PlatformName                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UStaticMesh::GetMinimumLODForPlatform(const struct FName& PlatformName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetMinimumLODForPlatform"));

	UStaticMesh_GetMinimumLODForPlatform_Params params;
	params.PlatformName = PlatformName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetMaterialIndex
// ()
// Parameters:
// struct FName                   MaterialSlotName               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UStaticMesh::GetMaterialIndex(const struct FName& MaterialSlotName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetMaterialIndex"));

	UStaticMesh_GetMaterialIndex_Params params;
	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetMaterial
// ()
// Parameters:
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UMaterialInterface* UStaticMesh::GetMaterial(int MaterialIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetMaterial"));

	UStaticMesh_GetMaterial_Params params;
	params.MaterialIndex = MaterialIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetBounds
// ()
// Parameters:
// struct FBoxSphereBounds        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FBoxSphereBounds UStaticMesh::GetBounds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetBounds"));

	UStaticMesh_GetBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetBoundingBox
// ()
// Parameters:
// struct FBox                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
struct FBox UStaticMesh::GetBoundingBox()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetBoundingBox"));

	UStaticMesh_GetBoundingBox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.FindSocket
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshSocket*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UStaticMeshSocket* UStaticMesh::FindSocket(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.FindSocket"));

	UStaticMesh_FindSocket_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.CreateStaticMeshDescription
// ()
// Parameters:
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshDescription*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UStaticMeshDescription* UStaticMesh::CreateStaticMeshDescription(class UObject* Outer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.CreateStaticMeshDescription"));

	UStaticMesh_CreateStaticMeshDescription_Params params;
	params.Outer = Outer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StaticMesh.BuildFromStaticMeshDescriptions
// ()
// Parameters:
// TArray<class UStaticMeshDescription*> StaticMeshDescriptions         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                           bBuildSimpleCollision          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMesh::BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*> StaticMeshDescriptions, bool bBuildSimpleCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.BuildFromStaticMeshDescriptions"));

	UStaticMesh_BuildFromStaticMeshDescriptions_Params params;
	params.StaticMeshDescriptions = StaticMeshDescriptions;
	params.bBuildSimpleCollision = bBuildSimpleCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMesh.AddSocket
// ()
// Parameters:
// class UStaticMeshSocket*       Socket                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStaticMesh::AddSocket(class UStaticMeshSocket* Socket)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.AddSocket"));

	UStaticMesh_AddSocket_Params params;
	params.Socket = Socket;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StaticMesh.AddMaterial
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FName UStaticMesh::AddMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.AddMaterial"));

	UStaticMesh_AddMaterial_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UStaticMesh::AfterRead()
{
	UStreamableRenderAsset::AfterRead();

	READ_PTR_FULL(BodySetup, UBodySetup);
	READ_PTR_FULL(EditableMesh, UObject);
	READ_PTR_FULL(NavCollision, UNavCollisionBase);
}

void UStaticMesh::BeforeDelete()
{
	UStreamableRenderAsset::BeforeDelete();

	DELE_PTR_FULL(BodySetup);
	DELE_PTR_FULL(EditableMesh);
	DELE_PTR_FULL(NavCollision);
}

void UStaticMeshSocket::AfterRead()
{
	UObject::AfterRead();

}

void UStaticMeshSocket::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UStereoLayerShape::AfterRead()
{
	UObject::AfterRead();

}

void UStereoLayerShape::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UStereoLayerShapeQuad::AfterRead()
{
	UStereoLayerShape::AfterRead();

}

void UStereoLayerShapeQuad::BeforeDelete()
{
	UStereoLayerShape::BeforeDelete();

}

// Function Engine.StereoLayerShapeCylinder.SetRadius
// ()
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerShapeCylinder::SetRadius(float InRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerShapeCylinder.SetRadius"));

	UStereoLayerShapeCylinder_SetRadius_Params params;
	params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerShapeCylinder.SetOverlayArc
// ()
// Parameters:
// float                          InOverlayArc                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerShapeCylinder::SetOverlayArc(float InOverlayArc)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerShapeCylinder.SetOverlayArc"));

	UStereoLayerShapeCylinder_SetOverlayArc_Params params;
	params.InOverlayArc = InOverlayArc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerShapeCylinder.SetHeight
// ()
// Parameters:
// int                            InHeight                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerShapeCylinder::SetHeight(int InHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerShapeCylinder.SetHeight"));

	UStereoLayerShapeCylinder_SetHeight_Params params;
	params.InHeight = InHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UStereoLayerShapeCylinder::AfterRead()
{
	UStereoLayerShape::AfterRead();

}

void UStereoLayerShapeCylinder::BeforeDelete()
{
	UStereoLayerShape::BeforeDelete();

}

void UStereoLayerShapeCubemap::AfterRead()
{
	UStereoLayerShape::AfterRead();

}

void UStereoLayerShapeCubemap::BeforeDelete()
{
	UStereoLayerShape::BeforeDelete();

}

// Function Engine.StereoLayerShapeEquirect.SetEquirectProps
// ()
// Parameters:
// struct FEquirectProps          InScaleBiases                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UStereoLayerShapeEquirect::SetEquirectProps(const struct FEquirectProps& InScaleBiases)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerShapeEquirect.SetEquirectProps"));

	UStereoLayerShapeEquirect_SetEquirectProps_Params params;
	params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UStereoLayerShapeEquirect::AfterRead()
{
	UStereoLayerShape::AfterRead();

}

void UStereoLayerShapeEquirect::BeforeDelete()
{
	UStereoLayerShape::BeforeDelete();

}

// Function Engine.StereoLayerComponent.SetUVRect
// ()
// Parameters:
// struct FBox2D                  InUVRect                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetUVRect(const struct FBox2D& InUVRect)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetUVRect"));

	UStereoLayerComponent_SetUVRect_Params params;
	params.InUVRect = InUVRect;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.SetTexture
// ()
// Parameters:
// class UTexture*                InTexture                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetTexture(class UTexture* InTexture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetTexture"));

	UStereoLayerComponent_SetTexture_Params params;
	params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.SetQuadSize
// ()
// Parameters:
// struct FVector2D               InQuadSize                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetQuadSize(const struct FVector2D& InQuadSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetQuadSize"));

	UStereoLayerComponent_SetQuadSize_Params params;
	params.InQuadSize = InQuadSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.SetPriority
// ()
// Parameters:
// int                            InPriority                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetPriority(int InPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetPriority"));

	UStereoLayerComponent_SetPriority_Params params;
	params.InPriority = InPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.SetLeftTexture
// ()
// Parameters:
// class UTexture*                InTexture                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetLeftTexture(class UTexture* InTexture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetLeftTexture"));

	UStereoLayerComponent_SetLeftTexture_Params params;
	params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.SetEquirectProps
// ()
// Parameters:
// struct FEquirectProps          InScaleBiases                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
void UStereoLayerComponent::SetEquirectProps(const struct FEquirectProps& InScaleBiases)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.SetEquirectProps"));

	UStereoLayerComponent_SetEquirectProps_Params params;
	params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.MarkTextureForUpdate
// ()
void UStereoLayerComponent::MarkTextureForUpdate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.MarkTextureForUpdate"));

	UStereoLayerComponent_MarkTextureForUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerComponent.GetUVRect
// ()
// Parameters:
// struct FBox2D                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
struct FBox2D UStereoLayerComponent::GetUVRect()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.GetUVRect"));

	UStereoLayerComponent_GetUVRect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StereoLayerComponent.GetTexture
// ()
// Parameters:
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture* UStereoLayerComponent::GetTexture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.GetTexture"));

	UStereoLayerComponent_GetTexture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StereoLayerComponent.GetQuadSize
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector2D UStereoLayerComponent::GetQuadSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.GetQuadSize"));

	UStereoLayerComponent_GetQuadSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StereoLayerComponent.GetPriority
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UStereoLayerComponent::GetPriority()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.GetPriority"));

	UStereoLayerComponent_GetPriority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.StereoLayerComponent.GetLeftTexture
// ()
// Parameters:
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UTexture* UStereoLayerComponent::GetLeftTexture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerComponent.GetLeftTexture"));

	UStereoLayerComponent_GetLeftTexture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UStereoLayerComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(Texture, UTexture);
	READ_PTR_FULL(LeftTexture, UTexture);
	READ_PTR_FULL(Shape, UStereoLayerShape);
}

void UStereoLayerComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(Texture);
	DELE_PTR_FULL(LeftTexture);
	DELE_PTR_FULL(Shape);
}

// Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen
// ()
void UStereoLayerFunctionLibrary::ShowSplashScreen()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen"));

	UStereoLayerFunctionLibrary_ShowSplashScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerFunctionLibrary.SetSplashScreen
// ()
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D               Scale                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowLoadingMovie              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bShowOnSet                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerFunctionLibrary::SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerFunctionLibrary.SetSplashScreen"));

	UStereoLayerFunctionLibrary_SetSplashScreen_Params params;
	params.Texture = Texture;
	params.Scale = Scale;
	params.Offset = Offset;
	params.bShowLoadingMovie = bShowLoadingMovie;
	params.bShowOnSet = bShowOnSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerFunctionLibrary.HideSplashScreen
// ()
void UStereoLayerFunctionLibrary::HideSplashScreen()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerFunctionLibrary.HideSplashScreen"));

	UStereoLayerFunctionLibrary_HideSplashScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
// ()
// Parameters:
// bool                           InAutoShowEnabled              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UStereoLayerFunctionLibrary::EnableAutoLoadingSplashScreen(bool InAutoShowEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen"));

	UStereoLayerFunctionLibrary_EnableAutoLoadingSplashScreen_Params params;
	params.InAutoShowEnabled = InAutoShowEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UStereoLayerFunctionLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UStereoLayerFunctionLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UStringTable::AfterRead()
{
	UObject::AfterRead();

}

void UStringTable::BeforeDelete()
{
	UObject::BeforeDelete();

}

void USubsurfaceProfile::AfterRead()
{
	UObject::AfterRead();

}

void USubsurfaceProfile::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
// ()
// Parameters:
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorldSubsystem*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UWorldSubsystem* USubsystemBlueprintLibrary::GetWorldSubsystem(class UObject* ContextObject, class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem"));

	USubsystemBlueprintLibrary_GetWorldSubsystem_Params params;
	params.ContextObject = ContextObject;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayerSubsystem*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULocalPlayerSubsystem* USubsystemBlueprintLibrary::GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController"));

	USubsystemBlueprintLibrary_GetLocalPlayerSubSystemFromPlayerController_Params params;
	params.PlayerController = PlayerController;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
// ()
// Parameters:
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayerSubsystem*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class ULocalPlayerSubsystem* USubsystemBlueprintLibrary::GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem"));

	USubsystemBlueprintLibrary_GetLocalPlayerSubsystem_Params params;
	params.ContextObject = ContextObject;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
// ()
// Parameters:
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameInstanceSubsystem*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UGameInstanceSubsystem* USubsystemBlueprintLibrary::GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem"));

	USubsystemBlueprintLibrary_GetGameInstanceSubsystem_Params params;
	params.ContextObject = ContextObject;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEngineSubsystem*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UEngineSubsystem* USubsystemBlueprintLibrary::GetEngineSubsystem(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem"));

	USubsystemBlueprintLibrary_GetEngineSubsystem_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void USubsystemBlueprintLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void USubsystemBlueprintLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void USubUVAnimation::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(SubUVTexture, UTexture2D);
}

void USubUVAnimation::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(SubUVTexture);
}

void USystemTimeTimecodeProvider::AfterRead()
{
	UTimecodeProvider::AfterRead();

}

void USystemTimeTimecodeProvider::BeforeDelete()
{
	UTimecodeProvider::BeforeDelete();

}

void ATargetPoint::AfterRead()
{
	AActor::AfterRead();

}

void ATargetPoint::BeforeDelete()
{
	AActor::BeforeDelete();

}

void UTextPropertyTestObject::AfterRead()
{
	UObject::AfterRead();

}

void UTextPropertyTestObject::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ATextRenderActor::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(TextRender, UTextRenderComponent);
}

void ATextRenderActor::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(TextRender);
}

// Function Engine.TextRenderComponent.SetYScale
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetYScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetYScale"));

	UTextRenderComponent_SetYScale_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetXScale
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetXScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetXScale"));

	UTextRenderComponent_SetXScale_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetWorldSize
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetWorldSize(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetWorldSize"));

	UTextRenderComponent_SetWorldSize_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetVertSpacingAdjust
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetVertSpacingAdjust(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetVertSpacingAdjust"));

	UTextRenderComponent_SetVertSpacingAdjust_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetVerticalAlignment
// ()
// Parameters:
// TEnumAsByte<Engine_EVerticalTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetVerticalAlignment(TEnumAsByte<Engine_EVerticalTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetVerticalAlignment"));

	UTextRenderComponent_SetVerticalAlignment_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetTextRenderColor
// ()
// Parameters:
// struct FColor                  Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetTextRenderColor(const struct FColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextRenderColor"));

	UTextRenderComponent_SetTextRenderColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetTextMaterial
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetTextMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextMaterial"));

	UTextRenderComponent_SetTextMaterial_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetText
// ()
// Parameters:
// struct FString                 Value                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetText(const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetText"));

	UTextRenderComponent_SetText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetHorizSpacingAdjust(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizSpacingAdjust"));

	UTextRenderComponent_SetHorizSpacingAdjust_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetHorizontalAlignment
// ()
// Parameters:
// TEnumAsByte<Engine_EHorizTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<Engine_EHorizTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizontalAlignment"));

	UTextRenderComponent_SetHorizontalAlignment_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.SetFont
// ()
// Parameters:
// class UFont*                   Value                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTextRenderComponent::SetFont(class UFont* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetFont"));

	UTextRenderComponent_SetFont_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.K2_SetText
// ()
// Parameters:
// struct FText                   Value                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
void UTextRenderComponent::K2_SetText(const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.K2_SetText"));

	UTextRenderComponent_K2_SetText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TextRenderComponent.GetTextWorldSize
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UTextRenderComponent::GetTextWorldSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextWorldSize"));

	UTextRenderComponent_GetTextWorldSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.GetTextLocalSize
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FVector UTextRenderComponent::GetTextLocalSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextLocalSize"));

	UTextRenderComponent_GetTextLocalSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UTextRenderComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(TextMaterial, UMaterialInterface);
	READ_PTR_FULL(Font, UFont);
}

void UTextRenderComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(TextMaterial);
	DELE_PTR_FULL(Font);
}

void UTexture2DArray::AfterRead()
{
	UTexture::AfterRead();

}

void UTexture2DArray::BeforeDelete()
{
	UTexture::BeforeDelete();

}

void UTexture2DDynamic::AfterRead()
{
	UTexture::AfterRead();

}

void UTexture2DDynamic::BeforeDelete()
{
	UTexture::BeforeDelete();

}

void UTextureLightProfile::AfterRead()
{
	UTexture2D::AfterRead();

}

void UTextureLightProfile::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void UTextureMipDataProviderFactory::AfterRead()
{
	UAssetUserData::AfterRead();

}

void UTextureMipDataProviderFactory::BeforeDelete()
{
	UAssetUserData::BeforeDelete();

}

void UTextureRenderTarget2DArray::AfterRead()
{
	UTextureRenderTarget::AfterRead();

}

void UTextureRenderTarget2DArray::BeforeDelete()
{
	UTextureRenderTarget::BeforeDelete();

}

void UTextureRenderTargetCube::AfterRead()
{
	UTextureRenderTarget::AfterRead();

}

void UTextureRenderTargetCube::BeforeDelete()
{
	UTextureRenderTarget::BeforeDelete();

}

void UTextureRenderTargetVolume::AfterRead()
{
	UTextureRenderTarget::AfterRead();

}

void UTextureRenderTargetVolume::BeforeDelete()
{
	UTextureRenderTarget::BeforeDelete();

}

void UThumbnailInfo::AfterRead()
{
	UObject::AfterRead();

}

void UThumbnailInfo::BeforeDelete()
{
	UObject::BeforeDelete();

}

// Function Engine.TimelineComponent.Stop
// ()
void UTimelineComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Stop"));

	UTimelineComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetVectorCurve
// ()
// Parameters:
// class UCurveVector*            NewVectorCurve                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   VectorTrackName                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetVectorCurve"));

	UTimelineComponent_SetVectorCurve_Params params;
	params.NewVectorCurve = NewVectorCurve;
	params.VectorTrackName = VectorTrackName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetTimelineLengthMode
// ()
// Parameters:
// TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLengthMode"));

	UTimelineComponent_SetTimelineLengthMode_Params params;
	params.NewLengthMode = NewLengthMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetTimelineLength
// ()
// Parameters:
// float                          NewLength                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetTimelineLength(float NewLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLength"));

	UTimelineComponent_SetTimelineLength_Params params;
	params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetPlayRate
// ()
// Parameters:
// float                          NewRate                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetPlayRate(float NewRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlayRate"));

	UTimelineComponent_SetPlayRate_Params params;
	params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetPlaybackPosition
// ()
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFireEvents                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bFireUpdate                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlaybackPosition"));

	UTimelineComponent_SetPlaybackPosition_Params params;
	params.NewPosition = NewPosition;
	params.bFireEvents = bFireEvents;
	params.bFireUpdate = bFireUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetNewTime
// ()
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetNewTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetNewTime"));

	UTimelineComponent_SetNewTime_Params params;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetLooping
// ()
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetLooping(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetLooping"));

	UTimelineComponent_SetLooping_Params params;
	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetLinearColorCurve
// ()
// Parameters:
// class UCurveLinearColor*       NewLinearColorCurve            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LinearColorTrackName           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetLinearColorCurve"));

	UTimelineComponent_SetLinearColorCurve_Params params;
	params.NewLinearColorCurve = NewLinearColorCurve;
	params.LinearColorTrackName = LinearColorTrackName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetIgnoreTimeDilation
// ()
// Parameters:
// bool                           bNewIgnoreTimeDilation         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetIgnoreTimeDilation"));

	UTimelineComponent_SetIgnoreTimeDilation_Params params;
	params.bNewIgnoreTimeDilation = bNewIgnoreTimeDilation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.SetFloatCurve
// ()
// Parameters:
// class UCurveFloat*             NewFloatCurve                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   FloatTrackName                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UTimelineComponent::SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetFloatCurve"));

	UTimelineComponent_SetFloatCurve_Params params;
	params.NewFloatCurve = NewFloatCurve;
	params.FloatTrackName = FloatTrackName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.ReverseFromEnd
// ()
void UTimelineComponent::ReverseFromEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.ReverseFromEnd"));

	UTimelineComponent_ReverseFromEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.Reverse
// ()
void UTimelineComponent::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Reverse"));

	UTimelineComponent_Reverse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.PlayFromStart
// ()
void UTimelineComponent::PlayFromStart()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.PlayFromStart"));

	UTimelineComponent_PlayFromStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.Play
// ()
void UTimelineComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Play"));

	UTimelineComponent_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.OnRep_Timeline
// ()
void UTimelineComponent::OnRep_Timeline()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.OnRep_Timeline"));

	UTimelineComponent_OnRep_Timeline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TimelineComponent.IsReversing
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTimelineComponent::IsReversing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsReversing"));

	UTimelineComponent_IsReversing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTimelineComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsPlaying"));

	UTimelineComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsLooping
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTimelineComponent::IsLooping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsLooping"));

	UTimelineComponent_IsLooping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetTimelineLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UTimelineComponent::GetTimelineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetTimelineLength"));

	UTimelineComponent_GetTimelineLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlayRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UTimelineComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlayRate"));

	UTimelineComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlaybackPosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UTimelineComponent::GetPlaybackPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlaybackPosition"));

	UTimelineComponent_GetPlaybackPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetIgnoreTimeDilation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTimelineComponent::GetIgnoreTimeDilation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetIgnoreTimeDilation"));

	UTimelineComponent_GetIgnoreTimeDilation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UTimelineComponent::AfterRead()
{
	UActorComponent::AfterRead();

}

void UTimelineComponent::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

void UTimelineTemplate::AfterRead()
{
	UObject::AfterRead();

}

void UTimelineTemplate::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UTireType::AfterRead()
{
	UDataAsset::AfterRead();

}

void UTireType::BeforeDelete()
{
	UDataAsset::BeforeDelete();

}

void UTouchInterface::AfterRead()
{
	UObject::AfterRead();

}

void UTouchInterface::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ATriggerCapsule::AfterRead()
{
	ATriggerBase::AfterRead();

}

void ATriggerCapsule::BeforeDelete()
{
	ATriggerBase::BeforeDelete();

}

void ATriggerSphere::AfterRead()
{
	ATriggerBase::AfterRead();

}

void ATriggerSphere::BeforeDelete()
{
	ATriggerBase::BeforeDelete();

}

void ATriggerVolume::AfterRead()
{
	AVolume::AfterRead();

}

void ATriggerVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

// Function Engine.TwitterIntegrationBase.TwitterRequest
// ()
// Parameters:
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FString>         ParamKeysAndValues             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTwitterIntegrationBase::TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.TwitterRequest"));

	UTwitterIntegrationBase_TwitterRequest_Params params;
	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.ShowTweetUI
// ()
// Parameters:
// struct FString                 InitialMessage                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 URL                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Picture                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTwitterIntegrationBase::ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.ShowTweetUI"));

	UTwitterIntegrationBase_ShowTweetUI_Params params;
	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.Init
// ()
void UTwitterIntegrationBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.Init"));

	UTwitterIntegrationBase_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.TwitterIntegrationBase.GetNumAccounts
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UTwitterIntegrationBase::GetNumAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetNumAccounts"));

	UTwitterIntegrationBase_GetNumAccounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountName
// ()
// Parameters:
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
struct FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetAccountName"));

	UTwitterIntegrationBase_GetAccountName_Params params;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.CanShowTweetUI"));

	UTwitterIntegrationBase_CanShowTweetUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.AuthorizeAccounts"));

	UTwitterIntegrationBase_AuthorizeAccounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UTwitterIntegrationBase::AfterRead()
{
	UPlatformInterfaceBase::AfterRead();

}

void UTwitterIntegrationBase::BeforeDelete()
{
	UPlatformInterfaceBase::BeforeDelete();

}

void UUserDefinedEnum::AfterRead()
{
	UEnum::AfterRead();

}

void UUserDefinedEnum::BeforeDelete()
{
	UEnum::BeforeDelete();

}

void UUserDefinedStruct::AfterRead()
{
	UScriptStruct::AfterRead();

}

void UUserDefinedStruct::BeforeDelete()
{
	UScriptStruct::BeforeDelete();

}

void UUserInterfaceSettings::AfterRead()
{
	UDeveloperSettings::AfterRead();

	READ_PTR_FULL(CustomScalingRuleClassInstance, UClass);
	READ_PTR_FULL(CustomScalingRule, UDPICustomScalingRule);
}

void UUserInterfaceSettings::BeforeDelete()
{
	UDeveloperSettings::BeforeDelete();

	DELE_PTR_FULL(CustomScalingRuleClassInstance);
	DELE_PTR_FULL(CustomScalingRule);
}

void UVectorField::AfterRead()
{
	UObject::AfterRead();

}

void UVectorField::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UVectorFieldAnimated::AfterRead()
{
	UVectorField::AfterRead();

	READ_PTR_FULL(Texture, UTexture2D);
	READ_PTR_FULL(NoiseField, UVectorFieldStatic);
}

void UVectorFieldAnimated::BeforeDelete()
{
	UVectorField::BeforeDelete();

	DELE_PTR_FULL(Texture);
	DELE_PTR_FULL(NoiseField);
}

// Function Engine.VectorFieldComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVectorFieldComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VectorFieldComponent.SetIntensity"));

	UVectorFieldComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UVectorFieldComponent::AfterRead()
{
	UPrimitiveComponent::AfterRead();

	READ_PTR_FULL(VectorField, UVectorField);
}

void UVectorFieldComponent::BeforeDelete()
{
	UPrimitiveComponent::BeforeDelete();

	DELE_PTR_FULL(VectorField);
}

void UVectorFieldStatic::AfterRead()
{
	UVectorField::AfterRead();

}

void UVectorFieldStatic::BeforeDelete()
{
	UVectorField::BeforeDelete();

}

void AVectorFieldVolume::AfterRead()
{
	AActor::AfterRead();

	READ_PTR_FULL(VectorFieldComponent, UVectorFieldComponent);
}

void AVectorFieldVolume::BeforeDelete()
{
	AActor::BeforeDelete();

	DELE_PTR_FULL(VectorFieldComponent);
}

// Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
// ()
// Parameters:
// int                            IndexToRemove                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UViewportStatsSubsystem::RemoveDisplayDelegate(int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate"));

	UViewportStatsSubsystem_RemoveDisplayDelegate_Params params;
	params.IndexToRemove = IndexToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ViewportStatsSubsystem.AddTimedDisplay
// ()
// Parameters:
// struct FText                   Text                           (Parm, NativeAccessSpecifierPublic)
// struct FLinearColor            Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UViewportStatsSubsystem::AddTimedDisplay(const struct FText& Text, const struct FLinearColor& Color, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ViewportStatsSubsystem.AddTimedDisplay"));

	UViewportStatsSubsystem_AddTimedDisplay_Params params;
	params.Text = Text;
	params.Color = Color;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.ViewportStatsSubsystem.AddDisplayDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
int UViewportStatsSubsystem::AddDisplayDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ViewportStatsSubsystem.AddDisplayDelegate"));

	UViewportStatsSubsystem_AddDisplayDelegate_Params params;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


void UViewportStatsSubsystem::AfterRead()
{
	UWorldSubsystem::AfterRead();

}

void UViewportStatsSubsystem::BeforeDelete()
{
	UWorldSubsystem::BeforeDelete();

}

void UVirtualTexture::AfterRead()
{
	UObject::AfterRead();

}

void UVirtualTexture::BeforeDelete()
{
	UObject::BeforeDelete();

}

void ULightMapVirtualTexture::AfterRead()
{
	UVirtualTexture::AfterRead();

}

void ULightMapVirtualTexture::BeforeDelete()
{
	UVirtualTexture::BeforeDelete();

}

void URuntimeVirtualTextureStreamingProxy::AfterRead()
{
	UTexture2D::AfterRead();

}

void URuntimeVirtualTextureStreamingProxy::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void UVirtualTexture2D::AfterRead()
{
	UTexture2D::AfterRead();

}

void UVirtualTexture2D::BeforeDelete()
{
	UTexture2D::BeforeDelete();

}

void UVirtualTextureBuilder::AfterRead()
{
	UObject::AfterRead();

	READ_PTR_FULL(Texture, UVirtualTexture2D);
}

void UVirtualTextureBuilder::BeforeDelete()
{
	UObject::BeforeDelete();

	DELE_PTR_FULL(Texture);
}

void UVirtualTexturePoolConfig::AfterRead()
{
	UObject::AfterRead();

}

void UVirtualTexturePoolConfig::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UVisualLoggerAutomationTests::AfterRead()
{
	UObject::AfterRead();

}

void UVisualLoggerAutomationTests::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UVisualLoggerDebugSnapshotInterface::AfterRead()
{
	UInterface::AfterRead();

}

void UVisualLoggerDebugSnapshotInterface::BeforeDelete()
{
	UInterface::BeforeDelete();

}

// Function Engine.VisualLoggerKismetLibrary.RedirectVislog
// ()
// Parameters:
// class UObject*                 SourceOwner                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                 DestinationOwner               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.RedirectVislog"));

	UVisualLoggerKismetLibrary_RedirectVislog_Params params;
	params.SourceOwner = SourceOwner;
	params.DestinationOwner = DestinationOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VisualLoggerKismetLibrary.LogText
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToMessageLog               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory, bool bAddToMessageLog)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogText"));

	UVisualLoggerKismetLibrary_LogText_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Text = Text;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VisualLoggerKismetLibrary.LogSegment
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentStart                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 SegmentEnd                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Thickness                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   CategoryName                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToMessageLog               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogSegment"));

	UVisualLoggerKismetLibrary_LogSegment_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Thickness = Thickness;
	params.CategoryName = CategoryName;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VisualLoggerKismetLibrary.LogLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToMessageLog               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogLocation"));

	UVisualLoggerKismetLibrary_LogLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Radius = Radius;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VisualLoggerKismetLibrary.LogBox
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                    BoxShape                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FString                 Text                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor            ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                           bAddToMessageLog               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogBox"));

	UVisualLoggerKismetLibrary_LogBox_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxShape = BoxShape;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VisualLoggerKismetLibrary.EnableRecording
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVisualLoggerKismetLibrary::EnableRecording(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.EnableRecording"));

	UVisualLoggerKismetLibrary_EnableRecording_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UVisualLoggerKismetLibrary::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UVisualLoggerKismetLibrary::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UVoiceChannel::AfterRead()
{
	UChannel::AfterRead();

}

void UVoiceChannel::BeforeDelete()
{
	UChannel::BeforeDelete();

}

// Function Engine.VOIPTalker.RegisterWithPlayerState
// ()
// Parameters:
// class APlayerState*            OwningState                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVOIPTalker::RegisterWithPlayerState(class APlayerState* OwningState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPTalker.RegisterWithPlayerState"));

	UVOIPTalker_RegisterWithPlayerState_Params params;
	params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VOIPTalker.GetVoiceLevel
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
float UVOIPTalker::GetVoiceLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPTalker.GetVoiceLevel"));

	UVOIPTalker_GetVoiceLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.VOIPTalker.CreateTalkerForPlayer
// ()
// Parameters:
// class APlayerState*            OwningState                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVOIPTalker*             ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
class UVOIPTalker* UVOIPTalker::CreateTalkerForPlayer(class APlayerState* OwningState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPTalker.CreateTalkerForPlayer"));

	UVOIPTalker_CreateTalkerForPlayer_Params params;
	params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function Engine.VOIPTalker.BPOnTalkingEnd
// ()
void UVOIPTalker::BPOnTalkingEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPTalker.BPOnTalkingEnd"));

	UVOIPTalker_BPOnTalkingEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VOIPTalker.BPOnTalkingBegin
// ()
// Parameters:
// class UAudioComponent*         AudioComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVOIPTalker::BPOnTalkingBegin(class UAudioComponent* AudioComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPTalker.BPOnTalkingBegin"));

	UVOIPTalker_BPOnTalkingBegin_Params params;
	params.AudioComponent = AudioComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UVOIPTalker::AfterRead()
{
	UActorComponent::AfterRead();

}

void UVOIPTalker::BeforeDelete()
{
	UActorComponent::BeforeDelete();

}

// Function Engine.VOIPStatics.SetMicThreshold
// ()
// Parameters:
// float                          InThreshold                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVOIPStatics::SetMicThreshold(float InThreshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VOIPStatics.SetMicThreshold"));

	UVOIPStatics_SetMicThreshold_Params params;
	params.InThreshold = InThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UVOIPStatics::AfterRead()
{
	UBlueprintFunctionLibrary::AfterRead();

}

void UVOIPStatics::BeforeDelete()
{
	UBlueprintFunctionLibrary::BeforeDelete();

}

void UVolumeTexture::AfterRead()
{
	UTexture::AfterRead();

}

void UVolumeTexture::BeforeDelete()
{
	UTexture::BeforeDelete();

}

// Function Engine.VolumetricCloudComponent.SetViewSampleCountScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetViewSampleCountScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetViewSampleCountScale"));

	UVolumetricCloudComponent_SetViewSampleCountScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetTracingStartMaxDistance(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance"));

	UVolumetricCloudComponent_SetTracingStartMaxDistance_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetTracingMaxDistance
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetTracingMaxDistance(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetTracingMaxDistance"));

	UVolumetricCloudComponent_SetTracingMaxDistance_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetSkyLightCloudBottomOcclusion(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion"));

	UVolumetricCloudComponent_SetSkyLightCloudBottomOcclusion_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetShadowViewSampleCountScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale"));

	UVolumetricCloudComponent_SetShadowViewSampleCountScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetShadowTracingDistance
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetShadowTracingDistance(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetShadowTracingDistance"));

	UVolumetricCloudComponent_SetShadowTracingDistance_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetShadowReflectionSampleCountScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale"));

	UVolumetricCloudComponent_SetShadowReflectionSampleCountScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetReflectionSampleCountScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale"));

	UVolumetricCloudComponent_SetReflectionSampleCountScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetPlanetRadius
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetPlanetRadius(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetPlanetRadius"));

	UVolumetricCloudComponent_SetPlanetRadius_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetMaterial(class UMaterialInterface* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetMaterial"));

	UVolumetricCloudComponent_SetMaterial_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetLayerHeight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetLayerHeight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetLayerHeight"));

	UVolumetricCloudComponent_SetLayerHeight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetLayerBottomAltitude(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude"));

	UVolumetricCloudComponent_SetLayerBottomAltitude_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetGroundAlbedo
// ()
// Parameters:
// struct FColor                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetGroundAlbedo(const struct FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetGroundAlbedo"));

	UVolumetricCloudComponent_SetGroundAlbedo_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
// ()
// Parameters:
// bool                           NewValue                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UVolumetricCloudComponent::SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance"));

	UVolumetricCloudComponent_SetbUsePerSampleAtmosphericLightTransmittance_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UVolumetricCloudComponent::AfterRead()
{
	USceneComponent::AfterRead();

	READ_PTR_FULL(Material, UMaterialInterface);
}

void UVolumetricCloudComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

	DELE_PTR_FULL(Material);
}

void AVolumetricCloud::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(VolumetricCloudComponent, UVolumetricCloudComponent);
}

void AVolumetricCloud::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(VolumetricCloudComponent);
}

void AVolumetricLightmapDensityVolume::AfterRead()
{
	AVolume::AfterRead();

}

void AVolumetricLightmapDensityVolume::BeforeDelete()
{
	AVolume::BeforeDelete();

}

void AWindDirectionalSource::AfterRead()
{
	AInfo::AfterRead();

	READ_PTR_FULL(Component, UWindDirectionalSourceComponent);
}

void AWindDirectionalSource::BeforeDelete()
{
	AInfo::BeforeDelete();

	DELE_PTR_FULL(Component);
}

// Function Engine.WindDirectionalSourceComponent.SetWindType
// ()
// Parameters:
// Engine_EWindSourceType         InNewType                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetWindType(Engine_EWindSourceType InNewType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetWindType"));

	UWindDirectionalSourceComponent_SetWindType_Params params;
	params.InNewType = InNewType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.WindDirectionalSourceComponent.SetStrength
// ()
// Parameters:
// float                          InNewStrength                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetStrength(float InNewStrength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetStrength"));

	UWindDirectionalSourceComponent_SetStrength_Params params;
	params.InNewStrength = InNewStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.WindDirectionalSourceComponent.SetSpeed
// ()
// Parameters:
// float                          InNewSpeed                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetSpeed(float InNewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetSpeed"));

	UWindDirectionalSourceComponent_SetSpeed_Params params;
	params.InNewSpeed = InNewSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.WindDirectionalSourceComponent.SetRadius
// ()
// Parameters:
// float                          InNewRadius                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetRadius(float InNewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetRadius"));

	UWindDirectionalSourceComponent_SetRadius_Params params;
	params.InNewRadius = InNewRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
// ()
// Parameters:
// float                          InNewMinGust                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount"));

	UWindDirectionalSourceComponent_SetMinimumGustAmount_Params params;
	params.InNewMinGust = InNewMinGust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
// ()
// Parameters:
// float                          InNewMaxGust                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
void UWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount"));

	UWindDirectionalSourceComponent_SetMaximumGustAmount_Params params;
	params.InNewMaxGust = InNewMaxGust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


void UWindDirectionalSourceComponent::AfterRead()
{
	USceneComponent::AfterRead();

}

void UWindDirectionalSourceComponent::BeforeDelete()
{
	USceneComponent::BeforeDelete();

}

void UWorldComposition::AfterRead()
{
	UObject::AfterRead();

}

void UWorldComposition::BeforeDelete()
{
	UObject::BeforeDelete();

}

void UHierarchicalLODSetup::AfterRead()
{
	UObject::AfterRead();

}

void UHierarchicalLODSetup::BeforeDelete()
{
	UObject::BeforeDelete();

}

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
